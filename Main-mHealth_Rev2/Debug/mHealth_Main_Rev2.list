
mHealth_Main_Rev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f4  080064f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080064f4  080064f4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064f4  080064f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080064fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000078  08006574  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08006574  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001568c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000272b  00000000  00000000  00035734  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00038bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013645  00000000  00000000  00039828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c435  00000000  00000000  0004ce6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066e6c  00000000  00000000  000592a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c010e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a38  00000000  00000000  000c018c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e7c 	.word	0x08005e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005e7c 	.word	0x08005e7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000284:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <HAL_Init+0x28>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a07      	ldr	r2, [pc, #28]	; (80002a8 <HAL_Init+0x28>)
 800028a:	f043 0310 	orr.w	r3, r3, #16
 800028e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000290:	2003      	movs	r0, #3
 8000292:	f000 f92f 	bl	80004f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 f808 	bl	80002ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800029c:	f004 ff8a 	bl	80051b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40022000 	.word	0x40022000

080002ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <HAL_InitTick+0x54>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <HAL_InitTick+0x58>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4619      	mov	r1, r3
 80002be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f939 	bl	8000542 <HAL_SYSTICK_Config>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80002d6:	2301      	movs	r3, #1
 80002d8:	e00e      	b.n	80002f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b0f      	cmp	r3, #15
 80002de:	d80a      	bhi.n	80002f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002e0:	2200      	movs	r2, #0
 80002e2:	6879      	ldr	r1, [r7, #4]
 80002e4:	f04f 30ff 	mov.w	r0, #4294967295
 80002e8:	f000 f90f 	bl	800050a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <HAL_InitTick+0x5c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e000      	b.n	80002f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002f6:	2301      	movs	r3, #1
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000010 	.word	0x20000010
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000

0800030c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <HAL_IncTick+0x20>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_IncTick+0x24>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4413      	add	r3, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <HAL_IncTick+0x24>)
 800031e:	6013      	str	r3, [r2, #0]
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	20000004 	.word	0x20000004
 8000330:	20000184 	.word	0x20000184

08000334 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  return uwTick;  
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <HAL_GetTick+0x14>)
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000184 	.word	0x20000184

0800034c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000354:	f7ff ffee 	bl	8000334 <HAL_GetTick>
 8000358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000364:	d005      	beq.n	8000372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <HAL_Delay+0x40>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	461a      	mov	r2, r3
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	4413      	add	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000372:	bf00      	nop
 8000374:	f7ff ffde 	bl	8000334 <HAL_GetTick>
 8000378:	4602      	mov	r2, r0
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	429a      	cmp	r2, r3
 8000382:	d8f7      	bhi.n	8000374 <HAL_Delay+0x28>
  {
  }
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000004 	.word	0x20000004

08000390 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <NVIC_GetPriorityGrouping+0x18>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	f003 0307 	and.w	r3, r3, #7
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	6039      	str	r1, [r7, #0]
 80003fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	2b00      	cmp	r3, #0
 8000406:	da0b      	bge.n	8000420 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	490c      	ldr	r1, [pc, #48]	; (8000440 <NVIC_SetPriority+0x4c>)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	3b04      	subs	r3, #4
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800041e:	e009      	b.n	8000434 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <NVIC_SetPriority+0x50>)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	0112      	lsls	r2, r2, #4
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	440b      	add	r3, r1
 8000430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00
 8000444:	e000e100 	.word	0xe000e100

08000448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000448:	b480      	push	{r7}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f003 0307 	and.w	r3, r3, #7
 800045a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f1c3 0307 	rsb	r3, r3, #7
 8000462:	2b04      	cmp	r3, #4
 8000464:	bf28      	it	cs
 8000466:	2304      	movcs	r3, #4
 8000468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	3304      	adds	r3, #4
 800046e:	2b06      	cmp	r3, #6
 8000470:	d902      	bls.n	8000478 <NVIC_EncodePriority+0x30>
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3b03      	subs	r3, #3
 8000476:	e000      	b.n	800047a <NVIC_EncodePriority+0x32>
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047c:	f04f 32ff 	mov.w	r2, #4294967295
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	43da      	mvns	r2, r3
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	401a      	ands	r2, r3
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000490:	f04f 31ff 	mov.w	r1, #4294967295
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	43d9      	mvns	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004a0:	4313      	orrs	r3, r2
         );
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3724      	adds	r7, #36	; 0x24
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c0:	d301      	bcc.n	80004c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004c2:	2301      	movs	r3, #1
 80004c4:	e00f      	b.n	80004e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <SysTick_Config+0x40>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b01      	subs	r3, #1
 80004cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ce:	210f      	movs	r1, #15
 80004d0:	f04f 30ff 	mov.w	r0, #4294967295
 80004d4:	f7ff ff8e 	bl	80003f4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <SysTick_Config+0x40>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004de:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <SysTick_Config+0x40>)
 80004e0:	2207      	movs	r2, #7
 80004e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010

080004f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff47 	bl	8000390 <NVIC_SetPriorityGrouping>
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	4603      	mov	r3, r0
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
 8000516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800051c:	f7ff ff5c 	bl	80003d8 <NVIC_GetPriorityGrouping>
 8000520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	68b9      	ldr	r1, [r7, #8]
 8000526:	6978      	ldr	r0, [r7, #20]
 8000528:	f7ff ff8e 	bl	8000448 <NVIC_EncodePriority>
 800052c:	4602      	mov	r2, r0
 800052e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000532:	4611      	mov	r1, r2
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff5d 	bl	80003f4 <NVIC_SetPriority>
}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffb0 	bl	80004b0 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000572:	e14e      	b.n	8000812 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	f000 8140 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d003      	beq.n	800059c <HAL_GPIO_Init+0x40>
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b12      	cmp	r3, #18
 800059a:	d123      	bne.n	80005e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08da      	lsrs	r2, r3, #3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3208      	adds	r2, #8
 80005a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f003 0307 	and.w	r3, r3, #7
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	220f      	movs	r2, #15
 80005b4:	fa02 f303 	lsl.w	r3, r2, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	691a      	ldr	r2, [r3, #16]
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3208      	adds	r2, #8
 80005de:	6939      	ldr	r1, [r7, #16]
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2203      	movs	r2, #3
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0203 	and.w	r2, r3, #3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	693a      	ldr	r2, [r7, #16]
 800060e:	4313      	orrs	r3, r2
 8000610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d00b      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d007      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800062c:	2b11      	cmp	r3, #17
 800062e:	d003      	beq.n	8000638 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b12      	cmp	r3, #18
 8000636:	d130      	bne.n	800069a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2203      	movs	r2, #3
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	693a      	ldr	r2, [r7, #16]
 800064c:	4013      	ands	r3, r2
 800064e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	68da      	ldr	r2, [r3, #12]
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	fa02 f303 	lsl.w	r3, r2, r3
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4313      	orrs	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800066e:	2201      	movs	r2, #1
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	43db      	mvns	r3, r3
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	f003 0201 	and.w	r2, r3, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4313      	orrs	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	2203      	movs	r2, #3
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43db      	mvns	r3, r3
 80006ac:	693a      	ldr	r2, [r7, #16]
 80006ae:	4013      	ands	r3, r2
 80006b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	f000 809a 	beq.w	800080c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	4b55      	ldr	r3, [pc, #340]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a54      	ldr	r2, [pc, #336]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b52      	ldr	r3, [pc, #328]	; (8000830 <HAL_GPIO_Init+0x2d4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80006f0:	4a50      	ldr	r2, [pc, #320]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	220f      	movs	r2, #15
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	4013      	ands	r3, r2
 8000712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800071a:	d013      	beq.n	8000744 <HAL_GPIO_Init+0x1e8>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a46      	ldr	r2, [pc, #280]	; (8000838 <HAL_GPIO_Init+0x2dc>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d00d      	beq.n	8000740 <HAL_GPIO_Init+0x1e4>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a45      	ldr	r2, [pc, #276]	; (800083c <HAL_GPIO_Init+0x2e0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d007      	beq.n	800073c <HAL_GPIO_Init+0x1e0>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a44      	ldr	r2, [pc, #272]	; (8000840 <HAL_GPIO_Init+0x2e4>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d101      	bne.n	8000738 <HAL_GPIO_Init+0x1dc>
 8000734:	2303      	movs	r3, #3
 8000736:	e006      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000738:	2305      	movs	r3, #5
 800073a:	e004      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 800073c:	2302      	movs	r3, #2
 800073e:	e002      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000740:	2301      	movs	r3, #1
 8000742:	e000      	b.n	8000746 <HAL_GPIO_Init+0x1ea>
 8000744:	2300      	movs	r3, #0
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	f002 0203 	and.w	r2, r2, #3
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	4093      	lsls	r3, r2
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000756:	4937      	ldr	r1, [pc, #220]	; (8000834 <HAL_GPIO_Init+0x2d8>)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	3302      	adds	r3, #2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000764:	4b37      	ldr	r3, [pc, #220]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	43db      	mvns	r3, r3
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4013      	ands	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d003      	beq.n	8000788 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4313      	orrs	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	43db      	mvns	r3, r3
 8000798:	693a      	ldr	r2, [r7, #16]
 800079a:	4013      	ands	r3, r2
 800079c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007b8:	4b22      	ldr	r3, [pc, #136]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	43db      	mvns	r3, r3
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	43db      	mvns	r3, r3
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4013      	ands	r3, r2
 80007f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_GPIO_Init+0x2e8>)
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa22 f303 	lsr.w	r3, r2, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	f47f aea9 	bne.w	8000574 <HAL_GPIO_Init+0x18>
  }
}
 8000822:	bf00      	nop
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000
 8000838:	48000400 	.word	0x48000400
 800083c:	48000800 	.word	0x48000800
 8000840:	48000c00 	.word	0x48000c00
 8000844:	40010400 	.word	0x40010400

08000848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
 8000854:	4613      	mov	r3, r2
 8000856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000858:	787b      	ldrb	r3, [r7, #1]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800085e:	887a      	ldrh	r2, [r7, #2]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000864:	e002      	b.n	800086c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000866:	887a      	ldrh	r2, [r7, #2]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d101      	bne.n	800088a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e081      	b.n	800098e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d106      	bne.n	80008a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f004 fcac 	bl	80051fc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2224      	movs	r2, #36	; 0x24
 80008a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f022 0201 	bic.w	r2, r2, #1
 80008ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80008c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80008d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d107      	bne.n	80008f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689a      	ldr	r2, [r3, #8]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	e006      	b.n	8000900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80008fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d104      	bne.n	8000912 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	ea42 0103 	orr.w	r1, r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	021a      	lsls	r2, r3, #8
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	430a      	orrs	r2, r1
 800094e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69d9      	ldr	r1, [r3, #28]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6a1a      	ldr	r2, [r3, #32]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	430a      	orrs	r2, r1
 800095e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2220      	movs	r2, #32
 800097a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
 800099e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d138      	bne.n	8000a1e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d101      	bne.n	80009ba <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80009b6:	2302      	movs	r3, #2
 80009b8:	e032      	b.n	8000a20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2201      	movs	r2, #1
 80009be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2224      	movs	r2, #36	; 0x24
 80009c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0201 	bic.w	r2, r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009e8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f042 0201 	orr.w	r2, r2, #1
 8000a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e000      	b.n	8000a20 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000a1e:	2302      	movs	r3, #2
  }
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b20      	cmp	r3, #32
 8000a44:	d139      	bne.n	8000aba <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d101      	bne.n	8000a54 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000a50:	2302      	movs	r3, #2
 8000a52:	e033      	b.n	8000abc <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2224      	movs	r2, #36	; 0x24
 8000a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0201 	bic.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a82:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f042 0201 	orr.w	r2, r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000aba:	2302      	movs	r3, #2
  }
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f000 beda 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 816e 	beq.w	8000dce <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000af2:	4bb5      	ldr	r3, [pc, #724]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 030c 	and.w	r3, r3, #12
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d00c      	beq.n	8000b18 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000afe:	4bb2      	ldr	r3, [pc, #712]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d15a      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xf8>
 8000b0a:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b16:	d153      	bne.n	8000bc0 <HAL_RCC_OscConfig+0xf8>
 8000b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b20:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000b2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b30:	fab3 f383 	clz	r3, r3
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d102      	bne.n	8000b4a <HAL_RCC_OscConfig+0x82>
 8000b44:	4ba0      	ldr	r3, [pc, #640]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	e015      	b.n	8000b76 <HAL_RCC_OscConfig+0xae>
 8000b4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b4e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000b56:	fa93 f3a3 	rbit	r3, r3
 8000b5a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000b5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b62:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000b6a:	fa93 f3a3 	rbit	r3, r3
 8000b6e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b72:	4b95      	ldr	r3, [pc, #596]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b7a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000b7e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b82:	fa92 f2a2 	rbit	r2, r2
 8000b86:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000b8a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	b252      	sxtb	r2, r2
 8000b94:	f042 0220 	orr.w	r2, r2, #32
 8000b98:	b252      	sxtb	r2, r2
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	f002 021f 	and.w	r2, r2, #31
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 810f 	beq.w	8000dcc <HAL_RCC_OscConfig+0x304>
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 8109 	bne.w	8000dcc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f000 be6b 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bca:	d106      	bne.n	8000bda <HAL_RCC_OscConfig+0x112>
 8000bcc:	4b7e      	ldr	r3, [pc, #504]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a7d      	ldr	r2, [pc, #500]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e030      	b.n	8000c3c <HAL_RCC_OscConfig+0x174>
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10c      	bne.n	8000bfe <HAL_RCC_OscConfig+0x136>
 8000be4:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a77      	ldr	r2, [pc, #476]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b75      	ldr	r3, [pc, #468]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a74      	ldr	r2, [pc, #464]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e01e      	b.n	8000c3c <HAL_RCC_OscConfig+0x174>
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c08:	d10c      	bne.n	8000c24 <HAL_RCC_OscConfig+0x15c>
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	4b6c      	ldr	r3, [pc, #432]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a6b      	ldr	r2, [pc, #428]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e00b      	b.n	8000c3c <HAL_RCC_OscConfig+0x174>
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a67      	ldr	r2, [pc, #412]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a64      	ldr	r2, [pc, #400]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c3c:	4b62      	ldr	r3, [pc, #392]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	f023 020f 	bic.w	r2, r3, #15
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	495f      	ldr	r1, [pc, #380]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d05a      	beq.n	8000d10 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5a:	f7ff fb6b 	bl	8000334 <HAL_GetTick>
 8000c5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c62:	e00a      	b.n	8000c7a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fb66 	bl	8000334 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b64      	cmp	r3, #100	; 0x64
 8000c72:	d902      	bls.n	8000c7a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	f000 be0e 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>
 8000c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c82:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000c8e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	095b      	lsrs	r3, r3, #5
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <HAL_RCC_OscConfig+0x1e4>
 8000ca6:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	e015      	b.n	8000cd8 <HAL_RCC_OscConfig+0x210>
 8000cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000cc8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ccc:	fa93 f3a3 	rbit	r3, r3
 8000cd0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cdc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000ce0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ce4:	fa92 f2a2 	rbit	r2, r2
 8000ce8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000cec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	b252      	sxtb	r2, r2
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	b252      	sxtb	r2, r2
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	f002 021f 	and.w	r2, r2, #31
 8000d02:	2101      	movs	r1, #1
 8000d04:	fa01 f202 	lsl.w	r2, r1, r2
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0aa      	beq.n	8000c64 <HAL_RCC_OscConfig+0x19c>
 8000d0e:	e05e      	b.n	8000dce <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fb10 	bl	8000334 <HAL_GetTick>
 8000d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d18:	e00a      	b.n	8000d30 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1a:	f7ff fb0b 	bl	8000334 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d902      	bls.n	8000d30 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f000 bdb3 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>
 8000d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d34:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000d44:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d48:	fab3 f383 	clz	r3, r3
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d102      	bne.n	8000d62 <HAL_RCC_OscConfig+0x29a>
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0x2c6>
 8000d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d66:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_RCC_OscConfig+0x300>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d92:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d96:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d9a:	fa92 f2a2 	rbit	r2, r2
 8000d9e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000da2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	b252      	sxtb	r2, r2
 8000dac:	f042 0220 	orr.w	r2, r2, #32
 8000db0:	b252      	sxtb	r2, r2
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f002 021f 	and.w	r2, r2, #31
 8000db8:	2101      	movs	r1, #1
 8000dba:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1aa      	bne.n	8000d1a <HAL_RCC_OscConfig+0x252>
 8000dc4:	e003      	b.n	8000dce <HAL_RCC_OscConfig+0x306>
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 8170 	beq.w	80010be <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dde:	4bd0      	ldr	r3, [pc, #832]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00b      	beq.n	8000e02 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dea:	4bcd      	ldr	r3, [pc, #820]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d16d      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x40a>
 8000df6:	4bca      	ldr	r3, [pc, #808]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d167      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x40a>
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000e14:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x36a>
 8000e2c:	4bbc      	ldr	r3, [pc, #752]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	e013      	b.n	8000e5a <HAL_RCC_OscConfig+0x392>
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e4a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e56:	4bb2      	ldr	r3, [pc, #712]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000e60:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e64:	fa92 f2a2 	rbit	r2, r2
 8000e68:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000e6c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e70:	fab2 f282 	clz	r2, r2
 8000e74:	b252      	sxtb	r2, r2
 8000e76:	f042 0220 	orr.w	r2, r2, #32
 8000e7a:	b252      	sxtb	r2, r2
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	f002 021f 	and.w	r2, r2, #31
 8000e82:	2101      	movs	r1, #1
 8000e84:	fa01 f202 	lsl.w	r2, r1, r2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3d6>
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	691b      	ldr	r3, [r3, #16]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f000 bcfc 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9e:	4ba0      	ldr	r3, [pc, #640]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6959      	ldr	r1, [r3, #20]
 8000eac:	23f8      	movs	r3, #248	; 0xf8
 8000eae:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000ebe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	4995      	ldr	r1, [pc, #596]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed0:	e0f5      	b.n	80010be <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	691b      	ldr	r3, [r3, #16]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 8085 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x520>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ef0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	461a      	mov	r2, r3
 8000f04:	2301      	movs	r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fa14 	bl	8000334 <HAL_GetTick>
 8000f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fa0f 	bl	8000334 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d902      	bls.n	8000f28 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f000 bcb7 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000f32:	fa93 f3a3 	rbit	r3, r3
 8000f36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000f3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	095b      	lsrs	r3, r3, #5
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_OscConfig+0x490>
 8000f52:	4b73      	ldr	r3, [pc, #460]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	e013      	b.n	8000f80 <HAL_RCC_OscConfig+0x4b8>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f70:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f7c:	4b68      	ldr	r3, [pc, #416]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	2202      	movs	r2, #2
 8000f82:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000f86:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f8a:	fa92 f2a2 	rbit	r2, r2
 8000f8e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000f92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f96:	fab2 f282 	clz	r2, r2
 8000f9a:	b252      	sxtb	r2, r2
 8000f9c:	f042 0220 	orr.w	r2, r2, #32
 8000fa0:	b252      	sxtb	r2, r2
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	f002 021f 	and.w	r2, r2, #31
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0ae      	beq.n	8000f12 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4b5a      	ldr	r3, [pc, #360]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6959      	ldr	r1, [r3, #20]
 8000fc2:	23f8      	movs	r3, #248	; 0xf8
 8000fc4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000fcc:	fa93 f3a3 	rbit	r3, r3
 8000fd0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000fd4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	494f      	ldr	r1, [pc, #316]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
 8000fe6:	e06a      	b.n	80010be <HAL_RCC_OscConfig+0x5f6>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000ff2:	fa93 f3a3 	rbit	r3, r3
 8000ff6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000ffa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001006:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	461a      	mov	r2, r3
 800100e:	2300      	movs	r3, #0
 8001010:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff f98f 	bl	8000334 <HAL_GetTick>
 8001016:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101a:	e00a      	b.n	8001032 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800101c:	f7ff f98a 	bl	8000334 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d902      	bls.n	8001032 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	f000 bc32 	b.w	8001896 <HAL_RCC_OscConfig+0xdce>
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001044:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d102      	bne.n	8001062 <HAL_RCC_OscConfig+0x59a>
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	e013      	b.n	800108a <HAL_RCC_OscConfig+0x5c2>
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800106c:	fa93 f3a3 	rbit	r3, r3
 8001070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800107a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_RCC_OscConfig+0x658>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	2202      	movs	r2, #2
 800108c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001090:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001094:	fa92 f2a2 	rbit	r2, r2
 8001098:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800109c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	b252      	sxtb	r2, r2
 80010a6:	f042 0220 	orr.w	r2, r2, #32
 80010aa:	b252      	sxtb	r2, r2
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	f002 021f 	and.w	r2, r2, #31
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1ae      	bne.n	800101c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80d8 	beq.w	800127e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d067      	beq.n	80011a8 <HAL_RCC_OscConfig+0x6e0>
 80010d8:	2301      	movs	r3, #1
 80010da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80010ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_RCC_OscConfig+0x65c>)
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	461a      	mov	r2, r3
 80010fc:	2301      	movs	r3, #1
 80010fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001100:	f7ff f918 	bl	8000334 <HAL_GetTick>
 8001104:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001108:	e00e      	b.n	8001128 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110a:	f7ff f913 	bl	8000334 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d906      	bls.n	8001128 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e3bb      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	10908120 	.word	0x10908120
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001144:	fa93 f2a3 	rbit	r2, r3
 8001148:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001152:	2202      	movs	r2, #2
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	fa93 f2a3 	rbit	r2, r3
 8001160:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001164:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4ba5      	ldr	r3, [pc, #660]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800116e:	2102      	movs	r1, #2
 8001170:	6019      	str	r1, [r3, #0]
 8001172:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	fa93 f1a3 	rbit	r1, r3
 800117c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001180:	6019      	str	r1, [r3, #0]
  return(result);
 8001182:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001192:	b25b      	sxtb	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	2101      	movs	r1, #1
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0b1      	beq.n	800110a <HAL_RCC_OscConfig+0x642>
 80011a6:	e06a      	b.n	800127e <HAL_RCC_OscConfig+0x7b6>
 80011a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	fa93 f2a3 	rbit	r2, r3
 80011ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011be:	601a      	str	r2, [r3, #0]
  return(result);
 80011c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80011c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x938>)
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	461a      	mov	r2, r3
 80011d4:	2300      	movs	r3, #0
 80011d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d8:	f7ff f8ac 	bl	8000334 <HAL_GetTick>
 80011dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	e009      	b.n	80011f6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff f8a7 	bl	8000334 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e34f      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 80011f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011fa:	2202      	movs	r2, #2
 80011fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f2a3 	rbit	r2, r3
 8001208:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001212:	2202      	movs	r2, #2
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	fa93 f2a3 	rbit	r2, r3
 8001220:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800122a:	2202      	movs	r2, #2
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	fa93 f2a3 	rbit	r2, r3
 8001238:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800123c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123e:	4b6f      	ldr	r3, [pc, #444]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001246:	2102      	movs	r1, #2
 8001248:	6019      	str	r1, [r3, #0]
 800124a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f1a3 	rbit	r1, r3
 8001254:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001258:	6019      	str	r1, [r3, #0]
  return(result);
 800125a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fab3 f383 	clz	r3, r3
 8001264:	b25b      	sxtb	r3, r3
 8001266:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800126a:	b25b      	sxtb	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1b1      	bne.n	80011e2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8159 	beq.w	8001540 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001294:	4b59      	ldr	r3, [pc, #356]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d112      	bne.n	80012c6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a0:	4b56      	ldr	r3, [pc, #344]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	4a55      	ldr	r2, [pc, #340]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	61d3      	str	r3, [r2, #28]
 80012ac:	4b53      	ldr	r3, [pc, #332]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <HAL_RCC_OscConfig+0x93c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d11a      	bne.n	8001308 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_RCC_OscConfig+0x93c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <HAL_RCC_OscConfig+0x93c>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff f829 	bl	8000334 <HAL_GetTick>
 80012e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	e009      	b.n	80012fc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e8:	f7ff f824 	bl	8000334 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	; 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e2cc      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	4b41      	ldr	r3, [pc, #260]	; (8001404 <HAL_RCC_OscConfig+0x93c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0ef      	beq.n	80012e8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x858>
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001314:	6a1b      	ldr	r3, [r3, #32]
 8001316:	4a39      	ldr	r2, [pc, #228]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6213      	str	r3, [r2, #32]
 800131e:	e02f      	b.n	8001380 <HAL_RCC_OscConfig+0x8b8>
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x87c>
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a30      	ldr	r2, [pc, #192]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0x8b8>
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x8a0>
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6213      	str	r3, [r2, #32]
 800135a:	4b28      	ldr	r3, [pc, #160]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6213      	str	r3, [r2, #32]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x8b8>
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a20      	ldr	r2, [pc, #128]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 800137a:	f023 0304 	bic.w	r3, r3, #4
 800137e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06b      	beq.n	8001462 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7fe ffd3 	bl	8000334 <HAL_GetTick>
 800138e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7fe ffce 	bl	8000334 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e274      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 80013ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b0:	2202      	movs	r2, #2
 80013b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	fa93 f2a3 	rbit	r2, r3
 80013be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013c8:	2202      	movs	r2, #2
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013da:	601a      	str	r2, [r3, #0]
  return(result);
 80013dc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_OscConfig+0x940>
 80013f6:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_RCC_OscConfig+0x934>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	e013      	b.n	8001424 <HAL_RCC_OscConfig+0x95c>
 80013fc:	40021000 	.word	0x40021000
 8001400:	10908120 	.word	0x10908120
 8001404:	40007000 	.word	0x40007000
 8001408:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800140c:	2202      	movs	r2, #2
 800140e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4bbb      	ldr	r3, [pc, #748]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001428:	2102      	movs	r1, #2
 800142a:	6011      	str	r1, [r2, #0]
 800142c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	fa92 f1a2 	rbit	r1, r2
 8001436:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800143a:	6011      	str	r1, [r2, #0]
  return(result);
 800143c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	fab2 f282 	clz	r2, r2
 8001446:	b252      	sxtb	r2, r2
 8001448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800144c:	b252      	sxtb	r2, r2
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	f002 021f 	and.w	r2, r2, #31
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d099      	beq.n	8001394 <HAL_RCC_OscConfig+0x8cc>
 8001460:	e064      	b.n	800152c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7fe ff67 	bl	8000334 <HAL_GetTick>
 8001466:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7fe ff62 	bl	8000334 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4293      	cmp	r3, r2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e208      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 8001484:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001488:	2202      	movs	r2, #2
 800148a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014b2:	601a      	str	r2, [r3, #0]
  return(result);
 80014b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d102      	bne.n	80014d4 <HAL_RCC_OscConfig+0xa0c>
 80014ce:	4b90      	ldr	r3, [pc, #576]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	e00d      	b.n	80014f0 <HAL_RCC_OscConfig+0xa28>
 80014d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014d8:	2202      	movs	r2, #2
 80014da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f2a3 	rbit	r2, r3
 80014e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014f4:	2102      	movs	r1, #2
 80014f6:	6011      	str	r1, [r2, #0]
 80014f8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	fa92 f1a2 	rbit	r1, r2
 8001502:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001506:	6011      	str	r1, [r2, #0]
  return(result);
 8001508:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	fab2 f282 	clz	r2, r2
 8001512:	b252      	sxtb	r2, r2
 8001514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001518:	b252      	sxtb	r2, r2
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f002 021f 	and.w	r2, r2, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d19f      	bne.n	800146c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800152c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001530:	2b01      	cmp	r3, #1
 8001532:	d105      	bne.n	8001540 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4a75      	ldr	r2, [pc, #468]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 800153a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 81a4 	beq.w	8001894 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	f000 819b 	beq.w	8001890 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b02      	cmp	r3, #2
 8001562:	f040 8113 	bne.w	800178c <HAL_RCC_OscConfig+0xcc4>
 8001566:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800156a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800156e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800157e:	601a      	str	r2, [r3, #0]
  return(result);
 8001580:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001584:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800158e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	461a      	mov	r2, r3
 8001596:	2300      	movs	r3, #0
 8001598:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7fe fecb 	bl	8000334 <HAL_GetTick>
 800159e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a2:	e009      	b.n	80015b8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7fe fec6 	bl	8000334 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e16e      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 80015b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	fa93 f2a3 	rbit	r2, r3
 80015cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015d0:	601a      	str	r2, [r3, #0]
  return(result);
 80015d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0xb2a>
 80015ec:	4b48      	ldr	r3, [pc, #288]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e01b      	b.n	800162a <HAL_RCC_OscConfig+0xb62>
 80015f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	fa93 f2a3 	rbit	r2, r3
 8001606:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800162e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001632:	6011      	str	r1, [r2, #0]
 8001634:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	fa92 f1a2 	rbit	r1, r2
 800163e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001642:	6011      	str	r1, [r2, #0]
  return(result);
 8001644:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	fab2 f282 	clz	r2, r2
 800164e:	b252      	sxtb	r2, r2
 8001650:	f042 0220 	orr.w	r2, r2, #32
 8001654:	b252      	sxtb	r2, r2
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	f002 021f 	and.w	r2, r2, #31
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d19d      	bne.n	80015a4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	430b      	orrs	r3, r1
 800167e:	4924      	ldr	r1, [pc, #144]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800168c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800169c:	601a      	str	r2, [r3, #0]
  return(result);
 800169e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016a2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	461a      	mov	r2, r3
 80016b4:	2301      	movs	r3, #1
 80016b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7fe fe3c 	bl	8000334 <HAL_GetTick>
 80016bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c2:	f7fe fe37 	bl	8000334 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0df      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 80016d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	fa93 f2a3 	rbit	r2, r3
 80016ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016ee:	601a      	str	r2, [r3, #0]
  return(result);
 80016f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d104      	bne.n	8001714 <HAL_RCC_OscConfig+0xc4c>
 800170a:	4b01      	ldr	r3, [pc, #4]	; (8001710 <HAL_RCC_OscConfig+0xc48>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	e01d      	b.n	800174c <HAL_RCC_OscConfig+0xc84>
 8001710:	40021000 	.word	0x40021000
 8001714:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <HAL_RCC_OscConfig+0xdd8>)
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001750:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001754:	6011      	str	r1, [r2, #0]
 8001756:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	fa92 f1a2 	rbit	r1, r2
 8001760:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001764:	6011      	str	r1, [r2, #0]
  return(result);
 8001766:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	fab2 f282 	clz	r2, r2
 8001770:	b252      	sxtb	r2, r2
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	b252      	sxtb	r2, r2
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f002 021f 	and.w	r2, r2, #31
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d09b      	beq.n	80016c2 <HAL_RCC_OscConfig+0xbfa>
 800178a:	e083      	b.n	8001894 <HAL_RCC_OscConfig+0xdcc>
 800178c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017a4:	601a      	str	r2, [r3, #0]
  return(result);
 80017a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	461a      	mov	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c0:	f7fe fdb8 	bl	8000334 <HAL_GetTick>
 80017c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	e009      	b.n	80017de <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7fe fdb3 	bl	8000334 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e05b      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
 80017de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	fa93 f2a3 	rbit	r2, r3
 80017f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f6:	601a      	str	r2, [r3, #0]
  return(result);
 80017f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b01      	cmp	r3, #1
 8001810:	d102      	bne.n	8001818 <HAL_RCC_OscConfig+0xd50>
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_RCC_OscConfig+0xdd8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0xd88>
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_RCC_OscConfig+0xdd8>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f107 0214 	add.w	r2, r7, #20
 8001854:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001858:	6011      	str	r1, [r2, #0]
 800185a:	f107 0214 	add.w	r2, r7, #20
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fa92 f1a2 	rbit	r1, r2
 8001864:	f107 0210 	add.w	r2, r7, #16
 8001868:	6011      	str	r1, [r2, #0]
  return(result);
 800186a:	f107 0210 	add.w	r2, r7, #16
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fab2 f282 	clz	r2, r2
 8001874:	b252      	sxtb	r2, r2
 8001876:	f042 0220 	orr.w	r2, r2, #32
 800187a:	b252      	sxtb	r2, r2
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f002 021f 	and.w	r2, r2, #31
 8001882:	2101      	movs	r1, #1
 8001884:	fa01 f202 	lsl.w	r2, r1, r2
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d19d      	bne.n	80017ca <HAL_RCC_OscConfig+0xd02>
 800188e:	e001      	b.n	8001894 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000

080018a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b09e      	sub	sp, #120	; 0x78
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e164      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d910      	bls.n	80018ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 0207 	bic.w	r2, r3, #7
 80018d2:	498d      	ldr	r1, [pc, #564]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b8b      	ldr	r3, [pc, #556]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e14c      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b84      	ldr	r3, [pc, #528]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4981      	ldr	r1, [pc, #516]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80df 	beq.w	8001ad6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d13d      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
 8001920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001924:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800192e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <HAL_RCC_ClockConfig+0xa6>
 8001944:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e00f      	b.n	800196a <HAL_RCC_ClockConfig+0xc6>
 800194a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	667b      	str	r3, [r7, #100]	; 0x64
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	663b      	str	r3, [r7, #96]	; 0x60
 800195e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001966:	4b69      	ldr	r3, [pc, #420]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800196e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001972:	fa92 f2a2 	rbit	r2, r2
 8001976:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800197a:	fab2 f282 	clz	r2, r2
 800197e:	b252      	sxtb	r2, r2
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	b252      	sxtb	r2, r2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	f002 021f 	and.w	r2, r2, #31
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d17d      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0f4      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d13d      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x17c>
 80019a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80019b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_ClockConfig+0x12a>
 80019c8:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	e00f      	b.n	80019ee <HAL_RCC_ClockConfig+0x14a>
 80019ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
 80019dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019e0:	643b      	str	r3, [r7, #64]	; 0x40
 80019e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80019f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019f6:	fa92 f2a2 	rbit	r2, r2
 80019fa:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80019fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	b252      	sxtb	r2, r2
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	b252      	sxtb	r2, r2
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d13b      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b2      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
 8001a20:	2302      	movs	r3, #2
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	fab3 f383 	clz	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	095b      	lsrs	r3, r3, #5
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d102      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x1a4>
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	e00d      	b.n	8001a64 <HAL_RCC_ClockConfig+0x1c0>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	2302      	movs	r3, #2
 8001a56:	623b      	str	r3, [r7, #32]
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2202      	movs	r2, #2
 8001a66:	61ba      	str	r2, [r7, #24]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	fa92 f2a2 	rbit	r2, r2
 8001a6e:	617a      	str	r2, [r7, #20]
  return(result);
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	b252      	sxtb	r2, r2
 8001a78:	f042 0220 	orr.w	r2, r2, #32
 8001a7c:	b252      	sxtb	r2, r2
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e078      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 0203 	bic.w	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	491a      	ldr	r1, [pc, #104]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa6:	f7fe fc45 	bl	8000334 <HAL_GetTick>
 8001aaa:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7fe fc41 	bl	8000334 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e060      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_ClockConfig+0x268>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 020c 	and.w	r2, r3, #12
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d1eb      	bne.n	8001aae <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d215      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 0207 	bic.w	r2, r3, #7
 8001aec:	4906      	ldr	r1, [pc, #24]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <HAL_RCC_ClockConfig+0x264>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d006      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e03f      	b.n	8001b86 <HAL_RCC_ClockConfig+0x2e2>
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_RCC_ClockConfig+0x2ec>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4919      	ldr	r1, [pc, #100]	; (8001b90 <HAL_RCC_ClockConfig+0x2ec>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_RCC_ClockConfig+0x2ec>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4911      	ldr	r1, [pc, #68]	; (8001b90 <HAL_RCC_ClockConfig+0x2ec>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b4e:	f000 f825 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b52:	4601      	mov	r1, r0
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_RCC_ClockConfig+0x2ec>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b5c:	23f0      	movs	r3, #240	; 0xf0
 8001b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_RCC_ClockConfig+0x2f0>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	fa21 f303 	lsr.w	r3, r1, r3
 8001b7a:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_RCC_ClockConfig+0x2f4>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7fe fb94 	bl	80002ac <HAL_InitTick>
  
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3778      	adds	r7, #120	; 0x78
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	080064a8 	.word	0x080064a8
 8001b98:	20000010 	.word	0x20000010

08001b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b08b      	sub	sp, #44	; 0x2c
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x30>
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001bca:	e03c      	b.n	8001c46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bce:	623b      	str	r3, [r7, #32]
      break;
 8001bd0:	e03c      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bd8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001bdc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	607b      	str	r3, [r7, #4]
  return(result);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	fab3 f383 	clz	r3, r3
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	f003 020f 	and.w	r2, r3, #15
 8001bfe:	230f      	movs	r3, #15
 8001c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e004      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	e002      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c48:	623b      	str	r3, [r7, #32]
      break;
 8001c4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	372c      	adds	r7, #44	; 0x2c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	007a1200 	.word	0x007a1200
 8001c64:	08006488 	.word	0x08006488
 8001c68:	08006498 	.word	0x08006498
 8001c6c:	003d0900 	.word	0x003d0900

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000010 	.word	0x20000010

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c8e:	f7ff ffef 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c92:	4601      	mov	r1, r0
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c9c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ca0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	603b      	str	r3, [r7, #0]
  return(result);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	080064b8 	.word	0x080064b8

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001cd2:	f7ff ffcd 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ce0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ce4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	603b      	str	r3, [r7, #0]
  return(result);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	080064b8 	.word	0x080064b8

08001d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b092      	sub	sp, #72	; 0x48
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80d6 	beq.w	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d34:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10e      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4a49      	ldr	r2, [pc, #292]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	61d3      	str	r3, [r2, #28]
 8001d4c:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6a:	4b41      	ldr	r3, [pc, #260]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a40      	ldr	r2, [pc, #256]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7fe fadd 	bl	8000334 <HAL_GetTick>
 8001d7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	e008      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7e:	f7fe fad9 	bl	8000334 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b64      	cmp	r3, #100	; 0x64
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e13b      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8083 	beq.w	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d07b      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2301      	movs	r3, #1
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001df8:	fab3 f383 	clz	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	461a      	mov	r2, r3
 8001e06:	2300      	movs	r3, #0
 8001e08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e0a:	4a18      	ldr	r2, [pc, #96]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d04c      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fa8b 	bl	8000334 <HAL_GetTick>
 8001e1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fa87 	bl	8000334 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e0e7      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d108      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001e66:	4b01      	ldr	r3, [pc, #4]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	e00d      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	10908100 	.word	0x10908100
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2202      	movs	r2, #2
 8001e8a:	613a      	str	r2, [r7, #16]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	fa92 f2a2 	rbit	r2, r2
 8001e92:	60fa      	str	r2, [r7, #12]
  return(result);
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	b252      	sxtb	r2, r2
 8001e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ea0:	b252      	sxtb	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f002 021f 	and.w	r2, r2, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0b6      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001eb4:	4b56      	ldr	r3, [pc, #344]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4953      	ldr	r1, [pc, #332]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a4f      	ldr	r2, [pc, #316]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4947      	ldr	r1, [pc, #284]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f04:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f023 0210 	bic.w	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	493f      	ldr	r1, [pc, #252]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f22:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f023 0220 	bic.w	r2, r3, #32
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	4938      	ldr	r1, [pc, #224]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f40:	4b33      	ldr	r3, [pc, #204]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	4930      	ldr	r1, [pc, #192]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4929      	ldr	r1, [pc, #164]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4921      	ldr	r1, [pc, #132]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	491a      	ldr	r1, [pc, #104]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d008      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001fb8:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	4912      	ldr	r1, [pc, #72]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	490b      	ldr	r1, [pc, #44]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	4903      	ldr	r1, [pc, #12]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002002:	4313      	orrs	r3, r2
 8002004:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3748      	adds	r7, #72	; 0x48
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e084      	b.n	8002130 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f003 f93d 	bl	80052c0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800205c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002066:	d902      	bls.n	800206e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e002      	b.n	8002074 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002072:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800207c:	d007      	beq.n	800208e <HAL_SPI_Init+0x7a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002086:	d002      	beq.n	800208e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10b      	bne.n	80020ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800209e:	d903      	bls.n	80020a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	e002      	b.n	80020ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	ea42 0103 	orr.w	r1, r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	f003 0204 	and.w	r2, r3, #4
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	ea42 0103 	orr.w	r1, r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	430a      	orrs	r2, r1
 800210e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	4613      	mov	r3, r2
 8002146:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_SPI_Transmit+0x26>
 800215a:	2302      	movs	r3, #2
 800215c:	e13e      	b.n	80023dc <HAL_SPI_Transmit+0x2a4>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002166:	f7fe f8e5 	bl	8000334 <HAL_GetTick>
 800216a:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	d002      	beq.n	800217e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002178:	2302      	movs	r3, #2
 800217a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800217c:	e125      	b.n	80023ca <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_Transmit+0x52>
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800218e:	e11c      	b.n	80023ca <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2203      	movs	r2, #3
 8002194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021da:	d107      	bne.n	80021ec <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b40      	cmp	r3, #64	; 0x40
 80021f8:	d007      	beq.n	800220a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002212:	d947      	bls.n	80022a4 <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_SPI_Transmit+0xee>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d138      	bne.n	8002298 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3302      	adds	r3, #2
 8002234:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002244:	e028      	b.n	8002298 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	d10f      	bne.n	8002274 <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3302      	adds	r3, #2
 8002262:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002272:	e011      	b.n	8002298 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_SPI_Transmit+0x15a>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d00a      	beq.n	8002298 <HAL_SPI_Transmit+0x160>
 8002282:	f7fe f857 	bl	8000334 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d802      	bhi.n	8002298 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002296:	e098      	b.n	80023ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1d1      	bne.n	8002246 <HAL_SPI_Transmit+0x10e>
 80022a2:	e070      	b.n	8002386 <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_SPI_Transmit+0x17e>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d162      	bne.n	800237c <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d90f      	bls.n	80022e0 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3302      	adds	r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	3b02      	subs	r3, #2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022de:	e04d      	b.n	800237c <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	320c      	adds	r2, #12
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022fe:	e03d      	b.n	800237c <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d124      	bne.n	8002358 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b01      	cmp	r3, #1
 8002316:	d90f      	bls.n	8002338 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	3302      	adds	r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b02      	subs	r3, #2
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002336:	e021      	b.n	800237c <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60ba      	str	r2, [r7, #8]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	320c      	adds	r2, #12
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002356:	e011      	b.n	800237c <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_SPI_Transmit+0x23e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d00a      	beq.n	800237c <HAL_SPI_Transmit+0x244>
 8002366:	f7fd ffe5 	bl	8000334 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d802      	bhi.n	800237c <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	77fb      	strb	r3, [r7, #31]
          goto error;
 800237a:	e026      	b.n	80023ca <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1bc      	bne.n	8002300 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	6839      	ldr	r1, [r7, #0]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fc8b 	bl	8002ca6 <SPI_EndRxTxTransaction>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	77fb      	strb	r3, [r7, #31]
 80023c6:	e000      	b.n	80023ca <HAL_SPI_Transmit+0x292>
  }

error:
 80023c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80023da:	7ffb      	ldrb	r3, [r7, #31]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]


  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002404:	d112      	bne.n	800242c <HAL_SPI_Receive+0x48>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_SPI_Receive+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2204      	movs	r2, #4
 8002412:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002416:	88fa      	ldrh	r2, [r7, #6]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f901 	bl	800262a <HAL_SPI_TransmitReceive>
 8002428:	4603      	mov	r3, r0
 800242a:	e0fa      	b.n	8002622 <HAL_SPI_Receive+0x23e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_SPI_Receive+0x56>
 8002436:	2302      	movs	r3, #2
 8002438:	e0f3      	b.n	8002622 <HAL_SPI_Receive+0x23e>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002442:	f7fd ff77 	bl	8000334 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	d002      	beq.n	800245a <HAL_SPI_Receive+0x76>
  {
    errorcode = HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002458:	e0da      	b.n	8002610 <HAL_SPI_Receive+0x22c>
  }

  if ((pData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_Receive+0x82>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    goto error;
 800246a:	e0d1      	b.n	8002610 <HAL_SPI_Receive+0x22c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2204      	movs	r2, #4
 8002470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	88fa      	ldrh	r2, [r7, #6]
 800248c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024b6:	d908      	bls.n	80024ca <HAL_SPI_Receive+0xe6>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024c6:	605a      	str	r2, [r3, #4]
 80024c8:	e007      	b.n	80024da <HAL_SPI_Receive+0xf6>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024d8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e2:	d107      	bne.n	80024f4 <HAL_SPI_Receive+0x110>
  {
    SPI_1LINE_RX(hspi);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024f2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d007      	beq.n	8002512 <HAL_SPI_Receive+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800251a:	d860      	bhi.n	80025de <HAL_SPI_Receive+0x1fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800251c:	e02c      	b.n	8002578 <HAL_SPI_Receive+0x194>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d113      	bne.n	8002554 <HAL_SPI_Receive+0x170>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002552:	e011      	b.n	8002578 <HAL_SPI_Receive+0x194>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_SPI_Receive+0x18e>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d00a      	beq.n	8002578 <HAL_SPI_Receive+0x194>
 8002562:	f7fd fee7 	bl	8000334 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d802      	bhi.n	8002578 <HAL_SPI_Receive+0x194>
        {
          errorcode = HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002576:	e04b      	b.n	8002610 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1cc      	bne.n	800251e <HAL_SPI_Receive+0x13a>
 8002584:	e031      	b.n	80025ea <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d112      	bne.n	80025ba <HAL_SPI_Receive+0x1d6>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	b29a      	uxth	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	3302      	adds	r3, #2
 80025a4:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80025b8:	e011      	b.n	80025de <HAL_SPI_Receive+0x1fa>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00b      	beq.n	80025d8 <HAL_SPI_Receive+0x1f4>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d00a      	beq.n	80025de <HAL_SPI_Receive+0x1fa>
 80025c8:	f7fd feb4 	bl	8000334 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d802      	bhi.n	80025de <HAL_SPI_Receive+0x1fa>
        {
          errorcode = HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025dc:	e018      	b.n	8002610 <HAL_SPI_Receive+0x22c>
    while (hspi->RxXferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1cd      	bne.n	8002586 <HAL_SPI_Receive+0x1a2>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fb01 	bl	8002bf6 <SPI_EndRxTransaction>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_SPI_Receive+0x21c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_SPI_Receive+0x22a>
  {
    errorcode = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
 800260c:	e000      	b.n	8002610 <HAL_SPI_Receive+0x22c>
  }

error :
 800260e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002620:	7dfb      	ldrb	r3, [r7, #23]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08a      	sub	sp, #40	; 0x28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002644:	2301      	movs	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_SPI_TransmitReceive+0x32>
 8002658:	2302      	movs	r3, #2
 800265a:	e1e2      	b.n	8002a22 <HAL_SPI_TransmitReceive+0x3f8>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002664:	f7fd fe66 	bl	8000334 <HAL_GetTick>
 8002668:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d00e      	beq.n	800269e <HAL_SPI_TransmitReceive+0x74>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002686:	d106      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x6c>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d003      	beq.n	800269e <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800269c:	e1b7      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x86>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x86>
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d103      	bne.n	80026b8 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80026b6:	e1aa      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d003      	beq.n	80026cc <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2205      	movs	r2, #5
 80026c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800270e:	d805      	bhi.n	800271c <HAL_SPI_TransmitReceive+0xf2>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d908      	bls.n	800272e <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	e007      	b.n	800273e <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800273c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d007      	beq.n	800275c <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002764:	d975      	bls.n	8002852 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x14e>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d160      	bne.n	800283a <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3302      	adds	r3, #2
 8002786:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002796:	e050      	b.n	800283a <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01c      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x1ae>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d017      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x1ae>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d110      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	881a      	ldrh	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	3302      	adds	r3, #2
 80027c4:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01a      	beq.n	800281a <HAL_SPI_TransmitReceive+0x1f0>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d113      	bne.n	800281a <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002816:	2301      	movs	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d00b      	beq.n	800283a <HAL_SPI_TransmitReceive+0x210>
 8002822:	f7fd fd87 	bl	8000334 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800282e:	429a      	cmp	r2, r3
 8002830:	d803      	bhi.n	800283a <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002838:	e0e9      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1a9      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x16e>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1a3      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x16e>
 8002850:	e0c9      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x23c>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 80b3 	bne.w	80029cc <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d90f      	bls.n	8002890 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3302      	adds	r3, #2
 800287e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b02      	subs	r3, #2
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800288e:	e09d      	b.n	80029cc <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	320c      	adds	r2, #12
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028ae:	e08d      	b.n	80029cc <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d031      	beq.n	800291a <HAL_SPI_TransmitReceive+0x2f0>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02c      	beq.n	800291a <HAL_SPI_TransmitReceive+0x2f0>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d125      	bne.n	800291a <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d90f      	bls.n	80028f8 <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3302      	adds	r3, #2
 80028e6:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b02      	subs	r3, #2
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028f6:	e00e      	b.n	8002916 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	60ba      	str	r2, [r7, #8]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	6812      	ldr	r2, [r2, #0]
 8002902:	320c      	adds	r2, #12
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d042      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x382>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d13b      	bne.n	80029ac <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d920      	bls.n	8002982 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3302      	adds	r3, #2
 8002950:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b02      	subs	r3, #2
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d81b      	bhi.n	80029a8 <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	e012      	b.n	80029a8 <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f103 020c 	add.w	r2, r3, #12
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	1c59      	adds	r1, r3, #1
 800298e:	6079      	str	r1, [r7, #4]
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a8:	2301      	movs	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b2:	d00b      	beq.n	80029cc <HAL_SPI_TransmitReceive+0x3a2>
 80029b4:	f7fd fcbe 	bl	8000334 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d803      	bhi.n	80029cc <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80029ca:	e020      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f47f af6c 	bne.w	80028b0 <HAL_SPI_TransmitReceive+0x286>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f47f af65 	bne.w	80028b0 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f95b 	bl	8002ca6 <SPI_EndRxTxTransaction>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0a:	e000      	b.n	8002a0e <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8002a0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3728      	adds	r7, #40	; 0x28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a38:	b2db      	uxtb	r3, r3
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a54:	e04c      	b.n	8002af0 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d048      	beq.n	8002af0 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002a64:	f7fd fc66 	bl	8000334 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d83d      	bhi.n	8002af0 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8c:	d111      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a96:	d004      	beq.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d107      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aba:	d10f      	bne.n	8002adc <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ada:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e00e      	b.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d101      	bne.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8002b00:	2201      	movs	r2, #1
 8002b02:	e000      	b.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002b04:	2200      	movs	r2, #0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d1a4      	bne.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002b24:	e05a      	b.n	8002bdc <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b2c:	d109      	bne.n	8002b42 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d048      	beq.n	8002bdc <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8002b50:	f7fd fbf0 	bl	8000334 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d83d      	bhi.n	8002bdc <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b78:	d111      	bne.n	8002b9e <SPI_WaitFifoStateUntilTimeout+0x88>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b82:	d004      	beq.n	8002b8e <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d107      	bne.n	8002b9e <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba6:	d10f      	bne.n	8002bc8 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e008      	b.n	8002bee <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d19c      	bne.n	8002b26 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af02      	add	r7, sp, #8
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c0a:	d111      	bne.n	8002c30 <SPI_EndRxTransaction+0x3a>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c14:	d004      	beq.n	8002c20 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1e:	d107      	bne.n	8002c30 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2180      	movs	r1, #128	; 0x80
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff ff03 	bl	8002a46 <SPI_WaitFlagStateUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e023      	b.n	8002c9e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d11d      	bne.n	8002c9c <SPI_EndRxTransaction+0xa6>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c68:	d004      	beq.n	8002c74 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c72:	d113      	bne.n	8002c9c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff ff48 	bl	8002b16 <SPI_WaitFifoStateUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af02      	add	r7, sp, #8
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f7ff ff29 	bl	8002b16 <SPI_WaitFifoStateUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e027      	b.n	8002d2a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff feae 	bl	8002a46 <SPI_WaitFlagStateUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e014      	b.n	8002d2a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff02 	bl	8002b16 <SPI_WaitFifoStateUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	f043 0220 	orr.w	r2, r3, #32
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e000      	b.n	8002d2a <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e043      	b.n	8002dcc <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f002 fb45 	bl	80053e8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2224      	movs	r2, #36	; 0x24
 8002d62:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8ba 	bl	8002ef0 <UART_SetConfig>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e022      	b.n	8002dcc <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa14 	bl	80031bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002db2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa9b 	bl	8003300 <UART_CheckIdleState>
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d177      	bne.n	8002ee4 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_UART_Transmit+0x2c>
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e070      	b.n	8002ee6 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Transmit+0x3e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e069      	b.n	8002ee6 <HAL_UART_Transmit+0x112>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2221      	movs	r2, #33	; 0x21
 8002e24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002e28:	f7fd fa84 	bl	8000334 <HAL_GetTick>
 8002e2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	88fa      	ldrh	r2, [r7, #6]
 8002e32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002e3e:	e034      	b.n	8002eaa <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fa98 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e03c      	b.n	8002ee6 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d111      	bne.n	8002e9a <HAL_UART_Transmit+0xc6>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10d      	bne.n	8002e9a <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	881a      	ldrh	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	3302      	adds	r3, #2
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	e007      	b.n	8002eaa <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	60ba      	str	r2, [r7, #8]
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1c4      	bne.n	8002e40 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2140      	movs	r1, #64	; 0x40
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fa66 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e00a      	b.n	8002ee6 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002efc:	2310      	movs	r3, #16
 8002efe:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b9f      	ldr	r3, [pc, #636]	; (80031a8 <UART_SetConfig+0x2b8>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a8e      	ldr	r2, [pc, #568]	; (80031ac <UART_SetConfig+0x2bc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d121      	bne.n	8002fbc <UART_SetConfig+0xcc>
 8002f78:	4b8d      	ldr	r3, [pc, #564]	; (80031b0 <UART_SetConfig+0x2c0>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d817      	bhi.n	8002fb4 <UART_SetConfig+0xc4>
 8002f84:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <UART_SetConfig+0x9c>)
 8002f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002f9d 	.word	0x08002f9d
 8002f90:	08002fa9 	.word	0x08002fa9
 8002f94:	08002faf 	.word	0x08002faf
 8002f98:	08002fa3 	.word	0x08002fa3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	75fb      	strb	r3, [r7, #23]
 8002fa0:	e01e      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	75fb      	strb	r3, [r7, #23]
 8002fa6:	e01b      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	75fb      	strb	r3, [r7, #23]
 8002fac:	e018      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e015      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	75fb      	strb	r3, [r7, #23]
 8002fb8:	bf00      	nop
 8002fba:	e011      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7c      	ldr	r2, [pc, #496]	; (80031b4 <UART_SetConfig+0x2c4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d102      	bne.n	8002fcc <UART_SetConfig+0xdc>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
 8002fca:	e009      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a79      	ldr	r2, [pc, #484]	; (80031b8 <UART_SetConfig+0x2c8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d102      	bne.n	8002fdc <UART_SetConfig+0xec>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
 8002fda:	e001      	b.n	8002fe0 <UART_SetConfig+0xf0>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe8:	d16f      	bne.n	80030ca <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d857      	bhi.n	80030a0 <UART_SetConfig+0x1b0>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <UART_SetConfig+0x108>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	0800301d 	.word	0x0800301d
 8002ffc:	08003039 	.word	0x08003039
 8003000:	08003055 	.word	0x08003055
 8003004:	080030a1 	.word	0x080030a1
 8003008:	0800306f 	.word	0x0800306f
 800300c:	080030a1 	.word	0x080030a1
 8003010:	080030a1 	.word	0x080030a1
 8003014:	080030a1 	.word	0x080030a1
 8003018:	0800308b 	.word	0x0800308b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800301c:	f7fe fe34 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8003020:	4603      	mov	r3, r0
 8003022:	005a      	lsls	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	441a      	add	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	82bb      	strh	r3, [r7, #20]
        break;
 8003036:	e036      	b.n	80030a6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003038:	f7fe fe48 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 800303c:	4603      	mov	r3, r0
 800303e:	005a      	lsls	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	085b      	lsrs	r3, r3, #1
 8003046:	441a      	add	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003050:	82bb      	strh	r3, [r7, #20]
        break;
 8003052:	e028      	b.n	80030a6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800305e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6852      	ldr	r2, [r2, #4]
 8003066:	fbb3 f3f2 	udiv	r3, r3, r2
 800306a:	82bb      	strh	r3, [r7, #20]
        break;
 800306c:	e01b      	b.n	80030a6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800306e:	f7fe fd95 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8003072:	4603      	mov	r3, r0
 8003074:	005a      	lsls	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	441a      	add	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	fbb2 f3f3 	udiv	r3, r2, r3
 8003086:	82bb      	strh	r3, [r7, #20]
        break;
 8003088:	e00d      	b.n	80030a6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	82bb      	strh	r3, [r7, #20]
        break;
 800309e:	e002      	b.n	80030a6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	74fb      	strb	r3, [r7, #19]
        break;
 80030a4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80030a6:	8abb      	ldrh	r3, [r7, #20]
 80030a8:	f023 030f 	bic.w	r3, r3, #15
 80030ac:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ae:	8abb      	ldrh	r3, [r7, #20]
 80030b0:	105b      	asrs	r3, r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	897b      	ldrh	r3, [r7, #10]
 80030bc:	4313      	orrs	r3, r2
 80030be:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	897a      	ldrh	r2, [r7, #10]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	e069      	b.n	800319e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d863      	bhi.n	8003198 <UART_SetConfig+0x2a8>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0x1e8>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	0800311d 	.word	0x0800311d
 80030e0:	0800313d 	.word	0x0800313d
 80030e4:	08003199 	.word	0x08003199
 80030e8:	0800315d 	.word	0x0800315d
 80030ec:	08003199 	.word	0x08003199
 80030f0:	08003199 	.word	0x08003199
 80030f4:	08003199 	.word	0x08003199
 80030f8:	0800317d 	.word	0x0800317d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030fc:	f7fe fdc4 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60da      	str	r2, [r3, #12]
        break;
 800311a:	e040      	b.n	800319e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800311c:	f7fe fdd6 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	441a      	add	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60da      	str	r2, [r3, #12]
        break;
 800313a:	e030      	b.n	800319e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003146:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6852      	ldr	r2, [r2, #4]
 800314e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60da      	str	r2, [r3, #12]
        break;
 800315a:	e020      	b.n	800319e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800315c:	f7fe fd1e 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
        break;
 800317a:	e010      	b.n	800319e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	085b      	lsrs	r3, r3, #1
 8003182:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60da      	str	r2, [r3, #12]
        break;
 8003196:	e002      	b.n	800319e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	74fb      	strb	r3, [r7, #19]
        break;
 800319c:	bf00      	nop
    }
  }

  return ret;
 800319e:	7cfb      	ldrb	r3, [r7, #19]

}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40004800 	.word	0x40004800

080031bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ba:	d10a      	bne.n	80032d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003312:	f7fd f80f 	bl	8000334 <HAL_GetTick>
 8003316:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b08      	cmp	r3, #8
 8003324:	d10e      	bne.n	8003344 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003326:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f82c 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e022      	b.n	800338a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d10e      	bne.n	8003370 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003352:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f816 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e00c      	b.n	800338a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	e02c      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d028      	beq.n	80033fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80033b2:	f7fc ffbf 	bl	8000334 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d21d      	bcs.n	80033fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e00f      	b.n	800341e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4013      	ands	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	429a      	cmp	r2, r3
 800341a:	d0c3      	beq.n	80033a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <ICM_readBytes>:
 *
 * SPI abstraction
 *
 */
void ICM_readBytes(uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
 8003434:	4613      	mov	r3, r2
 8003436:	80bb      	strh	r3, [r7, #4]
	reg = reg | 0x80;
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800343e:	b2db      	uxtb	r3, r3
 8003440:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8003442:	2200      	movs	r2, #0
 8003444:	2110      	movs	r1, #16
 8003446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800344a:	f7fd f9fd 	bl	8000848 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 800344e:	1df9      	adds	r1, r7, #7
 8003450:	2332      	movs	r3, #50	; 0x32
 8003452:	2201      	movs	r2, #1
 8003454:	4809      	ldr	r0, [pc, #36]	; (800347c <ICM_readBytes+0x54>)
 8003456:	f7fe fe6f 	bl	8002138 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BUS, pData, Size, 50);
 800345a:	88ba      	ldrh	r2, [r7, #4]
 800345c:	2332      	movs	r3, #50	; 0x32
 800345e:	6839      	ldr	r1, [r7, #0]
 8003460:	4806      	ldr	r0, [pc, #24]	; (800347c <ICM_readBytes+0x54>)
 8003462:	f7fe ffbf 	bl	80023e4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8003466:	2201      	movs	r2, #1
 8003468:	2110      	movs	r1, #16
 800346a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800346e:	f7fd f9eb 	bl	8000848 <HAL_GPIO_WritePin>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000188 	.word	0x20000188

08003480 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(uint8_t reg, uint8_t* pData) // ***
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	6039      	str	r1, [r7, #0]
 800348a:	71fb      	strb	r3, [r7, #7]
	reg = reg | 0x80;
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003492:	b2db      	uxtb	r3, r3
 8003494:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8003496:	2200      	movs	r2, #0
 8003498:	2110      	movs	r1, #16
 800349a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349e:	f7fd f9d3 	bl	8000848 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 80034a2:	1df9      	adds	r1, r7, #7
 80034a4:	2332      	movs	r3, #50	; 0x32
 80034a6:	2201      	movs	r2, #1
 80034a8:	4810      	ldr	r0, [pc, #64]	; (80034ec <ICM_ReadOneByte+0x6c>)
 80034aa:	f7fe fe45 	bl	8002138 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 80034ae:	bf00      	nop
 80034b0:	480e      	ldr	r0, [pc, #56]	; (80034ec <ICM_ReadOneByte+0x6c>)
 80034b2:	f7ff faba 	bl	8002a2a <HAL_SPI_GetState>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d1f9      	bne.n	80034b0 <ICM_ReadOneByte+0x30>
		;
	HAL_SPI_Receive(SPI_BUS, pData, 1, 50);
 80034bc:	2332      	movs	r3, #50	; 0x32
 80034be:	2201      	movs	r2, #1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	480a      	ldr	r0, [pc, #40]	; (80034ec <ICM_ReadOneByte+0x6c>)
 80034c4:	f7fe ff8e 	bl	80023e4 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 80034c8:	bf00      	nop
 80034ca:	4808      	ldr	r0, [pc, #32]	; (80034ec <ICM_ReadOneByte+0x6c>)
 80034cc:	f7ff faad 	bl	8002a2a <HAL_SPI_GetState>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d1f9      	bne.n	80034ca <ICM_ReadOneByte+0x4a>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80034d6:	2201      	movs	r2, #1
 80034d8:	2110      	movs	r1, #16
 80034da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034de:	f7fd f9b3 	bl	8000848 <HAL_GPIO_WritePin>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000188 	.word	0x20000188

080034f0 <ICM_WriteOneByte>:

void ICM_WriteOneByte(uint8_t reg, uint8_t Data) // ***
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	460a      	mov	r2, r1
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003506:	b2db      	uxtb	r3, r3
 8003508:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 800350a:	2200      	movs	r2, #0
 800350c:	2110      	movs	r1, #16
 800350e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003512:	f7fd f999 	bl	8000848 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8003516:	1df9      	adds	r1, r7, #7
 8003518:	2332      	movs	r3, #50	; 0x32
 800351a:	2201      	movs	r2, #1
 800351c:	4809      	ldr	r0, [pc, #36]	; (8003544 <ICM_WriteOneByte+0x54>)
 800351e:	f7fe fe0b 	bl	8002138 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BUS, &Data, 1, 50);
 8003522:	1db9      	adds	r1, r7, #6
 8003524:	2332      	movs	r3, #50	; 0x32
 8003526:	2201      	movs	r2, #1
 8003528:	4806      	ldr	r0, [pc, #24]	; (8003544 <ICM_WriteOneByte+0x54>)
 800352a:	f7fe fe05 	bl	8002138 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800352e:	2201      	movs	r2, #1
 8003530:	2110      	movs	r1, #16
 8003532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003536:	f7fd f987 	bl	8000848 <HAL_GPIO_WritePin>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000188 	.word	0x20000188

08003548 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(uint8_t reg,uint8_t value)
  {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	460a      	mov	r2, r1
 8003552:	71fb      	strb	r3, [r7, #7]
 8003554:	4613      	mov	r3, r2
 8003556:	71bb      	strb	r3, [r7, #6]
  	ICM_WriteOneByte(0x7F, 0x30);
 8003558:	2130      	movs	r1, #48	; 0x30
 800355a:	207f      	movs	r0, #127	; 0x7f
 800355c:	f7ff ffc8 	bl	80034f0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003560:	2001      	movs	r0, #1
 8003562:	f7fc fef3 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C);//mode: write
 8003566:	210c      	movs	r1, #12
 8003568:	2003      	movs	r0, #3
 800356a:	f7ff ffc1 	bl	80034f0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800356e:	2001      	movs	r0, #1
 8003570:	f7fc feec 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);//set reg addr
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	4619      	mov	r1, r3
 8003578:	2004      	movs	r0, #4
 800357a:	f7ff ffb9 	bl	80034f0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800357e:	2001      	movs	r0, #1
 8003580:	f7fc fee4 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,value);//send value
 8003584:	79bb      	ldrb	r3, [r7, #6]
 8003586:	4619      	mov	r1, r3
 8003588:	2006      	movs	r0, #6
 800358a:	f7ff ffb1 	bl	80034f0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800358e:	2001      	movs	r0, #1
 8003590:	f7fc fedc 	bl	800034c <HAL_Delay>
  }
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(uint8_t reg)
  {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  	uint8_t  Data;
  	ICM_WriteOneByte(0x7F, 0x30);
 80035a6:	2130      	movs	r1, #48	; 0x30
 80035a8:	207f      	movs	r0, #127	; 0x7f
 80035aa:	f7ff ffa1 	bl	80034f0 <ICM_WriteOneByte>
    HAL_Delay(1);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7fc fecc 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C|0x80);
 80035b4:	218c      	movs	r1, #140	; 0x8c
 80035b6:	2003      	movs	r0, #3
 80035b8:	f7ff ff9a 	bl	80034f0 <ICM_WriteOneByte>
    HAL_Delay(1);
 80035bc:	2001      	movs	r0, #1
 80035be:	f7fc fec5 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);// set reg addr
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	4619      	mov	r1, r3
 80035c6:	2004      	movs	r0, #4
 80035c8:	f7ff ff92 	bl	80034f0 <ICM_WriteOneByte>
    HAL_Delay(1);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fc febd 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,0xff);//read
 80035d2:	21ff      	movs	r1, #255	; 0xff
 80035d4:	2006      	movs	r0, #6
 80035d6:	f7ff ff8b 	bl	80034f0 <ICM_WriteOneByte>
  	HAL_Delay(1);
 80035da:	2001      	movs	r0, #1
 80035dc:	f7fc feb6 	bl	800034c <HAL_Delay>
  	ICM_WriteOneByte(0x7F, 0x00);
 80035e0:	2100      	movs	r1, #0
 80035e2:	207f      	movs	r0, #127	; 0x7f
 80035e4:	f7ff ff84 	bl	80034f0 <ICM_WriteOneByte>
  	ICM_ReadOneByte(0x3B,&Data);
 80035e8:	f107 030f 	add.w	r3, r7, #15
 80035ec:	4619      	mov	r1, r3
 80035ee:	203b      	movs	r0, #59	; 0x3b
 80035f0:	f7ff ff46 	bl	8003480 <ICM_ReadOneByte>
    HAL_Delay(1);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7fc fea9 	bl	800034c <HAL_Delay>
  	return Data;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
  }
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(int16_t magn[3]) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
	uint8_t mag_buffer[10];

	      mag_buffer[0] =ICM_Mag_Read(0x01);
 800360c:	2001      	movs	r0, #1
 800360e:	f7ff ffc5 	bl	800359c <ICM_Mag_Read>
 8003612:	4603      	mov	r3, r0
 8003614:	733b      	strb	r3, [r7, #12]

	      mag_buffer[1] =ICM_Mag_Read(0x11);
 8003616:	2011      	movs	r0, #17
 8003618:	f7ff ffc0 	bl	800359c <ICM_Mag_Read>
 800361c:	4603      	mov	r3, r0
 800361e:	737b      	strb	r3, [r7, #13]
	  	  mag_buffer[2] =ICM_Mag_Read(0x12);
 8003620:	2012      	movs	r0, #18
 8003622:	f7ff ffbb 	bl	800359c <ICM_Mag_Read>
 8003626:	4603      	mov	r3, r0
 8003628:	73bb      	strb	r3, [r7, #14]
	  	  magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 800362a:	7b7b      	ldrb	r3, [r7, #13]
 800362c:	b21a      	sxth	r2, r3
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	b21b      	sxth	r3, r3
 8003634:	4313      	orrs	r3, r2
 8003636:	b21a      	sxth	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	801a      	strh	r2, [r3, #0]
	    	mag_buffer[3] =ICM_Mag_Read(0x13);
 800363c:	2013      	movs	r0, #19
 800363e:	f7ff ffad 	bl	800359c <ICM_Mag_Read>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]
	      mag_buffer[4] =ICM_Mag_Read(0x14);
 8003646:	2014      	movs	r0, #20
 8003648:	f7ff ffa8 	bl	800359c <ICM_Mag_Read>
 800364c:	4603      	mov	r3, r0
 800364e:	743b      	strb	r3, [r7, #16]
	    	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	b219      	sxth	r1, r3
 8003654:	7c3b      	ldrb	r3, [r7, #16]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b21a      	sxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3302      	adds	r3, #2
 800365e:	430a      	orrs	r2, r1
 8003660:	b212      	sxth	r2, r2
 8003662:	801a      	strh	r2, [r3, #0]
	  	 	mag_buffer[5] =ICM_Mag_Read(0x15);
 8003664:	2015      	movs	r0, #21
 8003666:	f7ff ff99 	bl	800359c <ICM_Mag_Read>
 800366a:	4603      	mov	r3, r0
 800366c:	747b      	strb	r3, [r7, #17]
	      mag_buffer[6] =ICM_Mag_Read(0x16);
 800366e:	2016      	movs	r0, #22
 8003670:	f7ff ff94 	bl	800359c <ICM_Mag_Read>
 8003674:	4603      	mov	r3, r0
 8003676:	74bb      	strb	r3, [r7, #18]
	  		magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8003678:	7c7b      	ldrb	r3, [r7, #17]
 800367a:	b219      	sxth	r1, r3
 800367c:	7cbb      	ldrb	r3, [r7, #18]
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	b21a      	sxth	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	430a      	orrs	r2, r1
 8003688:	b212      	sxth	r2, r2
 800368a:	801a      	strh	r2, [r3, #0]

	     	i2c_Mag_write(0x31,0x01);
 800368c:	2101      	movs	r1, #1
 800368e:	2031      	movs	r0, #49	; 0x31
 8003690:	f7ff ff5a 	bl	8003548 <i2c_Mag_write>
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(void) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b0b4      	sub	sp, #208	; 0xd0
 80036a0:	af00      	add	r7, sp, #0
	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 80036a2:	23ea      	movs	r3, #234	; 0xea
 80036a4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint8_t test = ICM_WHOAMI();
 80036a8:	f000 f96e 	bl	8003988 <ICM_WHOAMI>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if (test == whoami) {
 80036b2:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 80036b6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d122      	bne.n	8003704 <ICM_PowerOn+0x68>
		ICM_CSHigh();
 80036be:	f000 f93b 	bl	8003938 <ICM_CSHigh>
		HAL_Delay(10);
 80036c2:	200a      	movs	r0, #10
 80036c4:	f7fc fe42 	bl	800034c <HAL_Delay>
		ICM_SelectBank(USER_BANK_0);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f000 f91f 	bl	800390c <ICM_SelectBank>
		HAL_Delay(10);
 80036ce:	200a      	movs	r0, #10
 80036d0:	f7fc fe3c 	bl	800034c <HAL_Delay>
		ICM_Disable_I2C();
 80036d4:	f000 f928 	bl	8003928 <ICM_Disable_I2C>
		HAL_Delay(10);
 80036d8:	200a      	movs	r0, #10
 80036da:	f7fc fe37 	bl	800034c <HAL_Delay>
		ICM_SetClock((uint8_t)CLK_BEST_AVAIL);
 80036de:	2001      	movs	r0, #1
 80036e0:	f000 f934 	bl	800394c <ICM_SetClock>
		HAL_Delay(10);
 80036e4:	200a      	movs	r0, #10
 80036e6:	f7fc fe31 	bl	800034c <HAL_Delay>
		ICM_AccelGyroOff();
 80036ea:	f000 f93d 	bl	8003968 <ICM_AccelGyroOff>
		HAL_Delay(20);
 80036ee:	2014      	movs	r0, #20
 80036f0:	f7fc fe2c 	bl	800034c <HAL_Delay>
		ICM_AccelGyroOn();
 80036f4:	f000 f940 	bl	8003978 <ICM_AccelGyroOn>
		HAL_Delay(10);
 80036f8:	200a      	movs	r0, #10
 80036fa:	f7fc fe27 	bl	800034c <HAL_Delay>
		ICM_Initialize();
 80036fe:	f000 f81f 	bl	8003740 <ICM_Initialize>
	} else {
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		HAL_UART_Transmit(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer), 100);
		HAL_Delay(100);
	}
}
 8003702:	e014      	b.n	800372e <ICM_PowerOn+0x92>
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
 8003704:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	490b      	ldr	r1, [pc, #44]	; (8003738 <ICM_PowerOn+0x9c>)
 800370c:	4618      	mov	r0, r3
 800370e:	f001 ffb9 	bl	8005684 <siprintf>
		HAL_UART_Transmit(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer), 100);
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	4618      	mov	r0, r3
 8003716:	f7fc fd5b 	bl	80001d0 <strlen>
 800371a:	4603      	mov	r3, r0
 800371c:	b29a      	uxth	r2, r3
 800371e:	1d39      	adds	r1, r7, #4
 8003720:	2364      	movs	r3, #100	; 0x64
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <ICM_PowerOn+0xa0>)
 8003724:	f7ff fb56 	bl	8002dd4 <HAL_UART_Transmit>
		HAL_Delay(100);
 8003728:	2064      	movs	r0, #100	; 0x64
 800372a:	f7fc fe0f 	bl	800034c <HAL_Delay>
}
 800372e:	bf00      	nop
 8003730:	37d0      	adds	r7, #208	; 0xd0
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	08005e94 	.word	0x08005e94
 800373c:	200001fc 	.word	0x200001fc

08003740 <ICM_Initialize>:
uint16_t ICM_Initialize(void) {
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
		ICM_SelectBank(USER_BANK_2);
 8003744:	2020      	movs	r0, #32
 8003746:	f000 f8e1 	bl	800390c <ICM_SelectBank>
		HAL_Delay(20);
 800374a:	2014      	movs	r0, #20
 800374c:	f7fc fdfe 	bl	800034c <HAL_Delay>
		ICM_SetGyroRateLPF(GYRO_RATE_250, GYRO_LPF_17HZ);
 8003750:	2129      	movs	r1, #41	; 0x29
 8003752:	2000      	movs	r0, #0
 8003754:	f000 f927 	bl	80039a6 <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 8003758:	200a      	movs	r0, #10
 800375a:	f7fc fdf7 	bl	800034c <HAL_Delay>

		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A);
 800375e:	210a      	movs	r1, #10
 8003760:	2000      	movs	r0, #0
 8003762:	f7ff fec5 	bl	80034f0 <ICM_WriteOneByte>
		HAL_Delay(10);
 8003766:	200a      	movs	r0, #10
 8003768:	f7fc fdf0 	bl	800034c <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(0x14, (0x04 | 0x11));
 800376c:	2115      	movs	r1, #21
 800376e:	2014      	movs	r0, #20
 8003770:	f7ff febe 	bl	80034f0 <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00);
 8003774:	2100      	movs	r1, #0
 8003776:	2010      	movs	r0, #16
 8003778:	f7ff feba 	bl	80034f0 <ICM_WriteOneByte>
		HAL_Delay(10);
 800377c:	200a      	movs	r0, #10
 800377e:	f7fc fde5 	bl	800034c <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A);
 8003782:	210a      	movs	r1, #10
 8003784:	2011      	movs	r0, #17
 8003786:	f7ff feb3 	bl	80034f0 <ICM_WriteOneByte>
		HAL_Delay(10);
 800378a:	200a      	movs	r0, #10
 800378c:	f7fc fdde 	bl	800034c <HAL_Delay>

		ICM_SelectBank(USER_BANK_2);
 8003790:	2020      	movs	r0, #32
 8003792:	f000 f8bb 	bl	800390c <ICM_SelectBank>
		HAL_Delay(20);
 8003796:	2014      	movs	r0, #20
 8003798:	f7fc fdd8 	bl	800034c <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00); // Select user bank 0
 800379c:	2100      	movs	r1, #0
 800379e:	207f      	movs	r0, #127	; 0x7f
 80037a0:	f7ff fea6 	bl	80034f0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80037a4:	2130      	movs	r1, #48	; 0x30
 80037a6:	200f      	movs	r0, #15
 80037a8:	f7ff fea2 	bl	80034f0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20); // I2C_MST_EN
 80037ac:	2120      	movs	r1, #32
 80037ae:	2003      	movs	r0, #3
 80037b0:	f7ff fe9e 	bl	80034f0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30); // Select user bank 3
 80037b4:	2130      	movs	r1, #48	; 0x30
 80037b6:	207f      	movs	r0, #127	; 0x7f
 80037b8:	f7ff fe9a 	bl	80034f0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80037bc:	214d      	movs	r1, #77	; 0x4d
 80037be:	2001      	movs	r0, #1
 80037c0:	f7ff fe96 	bl	80034f0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80037c4:	2101      	movs	r1, #1
 80037c6:	2002      	movs	r0, #2
 80037c8:	f7ff fe92 	bl	80034f0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 80037cc:	2181      	movs	r1, #129	; 0x81
 80037ce:	2005      	movs	r0, #5
 80037d0:	f7ff fe8e 	bl	80034f0 <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01); // Reset AK8963
 80037d4:	2101      	movs	r1, #1
 80037d6:	2032      	movs	r0, #50	; 0x32
 80037d8:	f7ff feb6 	bl	8003548 <i2c_Mag_write>
		HAL_Delay(1000);
 80037dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037e0:	f7fc fdb4 	bl	800034c <HAL_Delay>
		i2c_Mag_write(0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80037e4:	2102      	movs	r1, #2
 80037e6:	2031      	movs	r0, #49	; 0x31
 80037e8:	f7ff feae 	bl	8003548 <i2c_Mag_write>

		return 1337;
 80037ec:	f240 5339 	movw	r3, #1337	; 0x539
	}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
	uint8_t raw_data[12];
	ICM_readBytes(0x2D, raw_data, 12);
 80037fa:	1d3b      	adds	r3, r7, #4
 80037fc:	220c      	movs	r2, #12
 80037fe:	4619      	mov	r1, r3
 8003800:	202d      	movs	r0, #45	; 0x2d
 8003802:	f7ff fe11 	bl	8003428 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8003806:	793b      	ldrb	r3, [r7, #4]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	b21a      	sxth	r2, r3
 800380c:	797b      	ldrb	r3, [r7, #5]
 800380e:	b21b      	sxth	r3, r3
 8003810:	4313      	orrs	r3, r2
 8003812:	b21a      	sxth	r2, r3
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 8003816:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8003818:	79bb      	ldrb	r3, [r7, #6]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	b21a      	sxth	r2, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	b21b      	sxth	r3, r3
 8003822:	4313      	orrs	r3, r2
 8003824:	b21a      	sxth	r2, r3
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 8003828:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 800382a:	7a3b      	ldrb	r3, [r7, #8]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	b21a      	sxth	r2, r3
 8003830:	7a7b      	ldrb	r3, [r7, #9]
 8003832:	b21b      	sxth	r3, r3
 8003834:	4313      	orrs	r3, r2
 8003836:	b21a      	sxth	r2, r3
 8003838:	4b31      	ldr	r3, [pc, #196]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 800383a:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 800383c:	7abb      	ldrb	r3, [r7, #10]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	b21a      	sxth	r2, r3
 8003842:	7afb      	ldrb	r3, [r7, #11]
 8003844:	b21b      	sxth	r3, r3
 8003846:	4313      	orrs	r3, r2
 8003848:	b21a      	sxth	r2, r3
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 800384c:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800384e:	7b3b      	ldrb	r3, [r7, #12]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	b21a      	sxth	r2, r3
 8003854:	7b7b      	ldrb	r3, [r7, #13]
 8003856:	b21b      	sxth	r3, r3
 8003858:	4313      	orrs	r3, r2
 800385a:	b21a      	sxth	r2, r3
 800385c:	4b29      	ldr	r3, [pc, #164]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 800385e:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8003860:	7bbb      	ldrb	r3, [r7, #14]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	b21a      	sxth	r2, r3
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	b21b      	sxth	r3, r3
 800386a:	4313      	orrs	r3, r2
 800386c:	b21a      	sxth	r2, r3
 800386e:	4b25      	ldr	r3, [pc, #148]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 8003870:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 8003874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003878:	2b00      	cmp	r3, #0
 800387a:	da00      	bge.n	800387e <ICM_ReadAccelGyro+0x8a>
 800387c:	3307      	adds	r3, #7
 800387e:	10db      	asrs	r3, r3, #3
 8003880:	b21a      	sxth	r2, r3
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 8003884:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 8003886:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 8003888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800388c:	2b00      	cmp	r3, #0
 800388e:	da00      	bge.n	8003892 <ICM_ReadAccelGyro+0x9e>
 8003890:	3307      	adds	r3, #7
 8003892:	10db      	asrs	r3, r3, #3
 8003894:	b21a      	sxth	r2, r3
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 8003898:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 800389c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da00      	bge.n	80038a6 <ICM_ReadAccelGyro+0xb2>
 80038a4:	3307      	adds	r3, #7
 80038a6:	10db      	asrs	r3, r3, #3
 80038a8:	b21a      	sxth	r2, r3
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <ICM_ReadAccelGyro+0x10c>)
 80038ac:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 80038b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <ICM_ReadAccelGyro+0x114>)
 80038b6:	fb82 1203 	smull	r1, r2, r2, r3
 80038ba:	1112      	asrs	r2, r2, #4
 80038bc:	17db      	asrs	r3, r3, #31
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	b21a      	sxth	r2, r3
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 80038c4:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 80038c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038cc:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <ICM_ReadAccelGyro+0x114>)
 80038ce:	fb82 1203 	smull	r1, r2, r2, r3
 80038d2:	1112      	asrs	r2, r2, #4
 80038d4:	17db      	asrs	r3, r3, #31
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	b21a      	sxth	r2, r3
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 80038dc:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 80038e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038e4:	4a08      	ldr	r2, [pc, #32]	; (8003908 <ICM_ReadAccelGyro+0x114>)
 80038e6:	fb82 1203 	smull	r1, r2, r2, r3
 80038ea:	1112      	asrs	r2, r2, #4
 80038ec:	17db      	asrs	r3, r3, #31
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	b21a      	sxth	r2, r3
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <ICM_ReadAccelGyro+0x110>)
 80038f4:	809a      	strh	r2, [r3, #4]
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200001ec 	.word	0x200001ec
 8003904:	200001f4 	.word	0x200001f4
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <ICM_SelectBank>:
void ICM_SelectBank(uint8_t bank) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank);
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4619      	mov	r1, r3
 800391a:	207f      	movs	r0, #127	; 0x7f
 800391c:	f7ff fde8 	bl	80034f0 <ICM_WriteOneByte>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <ICM_Disable_I2C>:
void ICM_Disable_I2C(void) {
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x03, 0x78);
 800392c:	2178      	movs	r1, #120	; 0x78
 800392e:	2003      	movs	r0, #3
 8003930:	f7ff fdde 	bl	80034f0 <ICM_WriteOneByte>
}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}

08003938 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 800393c:	2201      	movs	r2, #1
 800393e:	2110      	movs	r1, #16
 8003940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003944:	f7fc ff80 	bl	8000848 <HAL_GPIO_WritePin>
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}

0800394c <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(uint8_t clk) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk);
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	4619      	mov	r1, r3
 800395a:	2006      	movs	r0, #6
 800395c:	f7ff fdc8 	bl	80034f0 <ICM_WriteOneByte>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(void) {
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07));
 800396c:	213f      	movs	r1, #63	; 0x3f
 800396e:	2007      	movs	r0, #7
 8003970:	f7ff fdbe 	bl	80034f0 <ICM_WriteOneByte>
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}

08003978 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x07, (0x00 | 0x00));
 800397c:	2100      	movs	r1, #0
 800397e:	2007      	movs	r0, #7
 8003980:	f7ff fdb6 	bl	80034f0 <ICM_WriteOneByte>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(void) {
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
	uint8_t spiData = 0x01;
 800398e:	2301      	movs	r3, #1
 8003990:	71fb      	strb	r3, [r7, #7]
	ICM_ReadOneByte(0x00, &spiData);
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	4619      	mov	r1, r3
 8003996:	2000      	movs	r0, #0
 8003998:	f7ff fd72 	bl	8003480 <ICM_ReadOneByte>
	return spiData;
 800399c:	79fb      	ldrb	r3, [r7, #7]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf) {
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	460a      	mov	r2, r1
 80039b0:	71fb      	strb	r3, [r7, #7]
 80039b2:	4613      	mov	r3, r2
 80039b4:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf));
 80039b6:	79fa      	ldrb	r2, [r7, #7]
 80039b8:	79bb      	ldrb	r3, [r7, #6]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	2001      	movs	r0, #1
 80039c2:	f7ff fd95 	bl	80034f0 <ICM_WriteOneByte>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <NRF24_DelayMicroSeconds+0x38>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <NRF24_DelayMicroSeconds+0x3c>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0c9a      	lsrs	r2, r3, #18
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80039f0:	bf00      	nop
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	60fa      	str	r2, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1fa      	bne.n	80039f2 <NRF24_DelayMicroSeconds+0x22>
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	20000010 	.word	0x20000010
 8003a0c:	165e9f81 	.word	0x165e9f81

08003a10 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <NRF24_csn+0x20>
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <NRF24_csn+0x38>)
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <NRF24_csn+0x3c>)
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	2201      	movs	r2, #1
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f7fc ff0d 	bl	8000848 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8003a2e:	e007      	b.n	8003a40 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <NRF24_csn+0x38>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <NRF24_csn+0x3c>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f7fc ff04 	bl	8000848 <HAL_GPIO_WritePin>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000009c 	.word	0x2000009c
 8003a4c:	200000a0 	.word	0x200000a0

08003a50 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <NRF24_ce+0x20>
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <NRF24_ce+0x38>)
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <NRF24_ce+0x3c>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fc feed 	bl	8000848 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8003a6e:	e007      	b.n	8003a80 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <NRF24_ce+0x38>)
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <NRF24_ce+0x3c>)
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	f7fc fee4 	bl	8000848 <HAL_GPIO_WritePin>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	2000009c 	.word	0x2000009c
 8003a8c:	200000a2 	.word	0x200000a2

08003a90 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f7ff ffb8 	bl	8003a10 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003aaa:	f107 010c 	add.w	r1, r7, #12
 8003aae:	2364      	movs	r3, #100	; 0x64
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	480a      	ldr	r0, [pc, #40]	; (8003adc <NRF24_read_register+0x4c>)
 8003ab4:	f7fe fb40 	bl	8002138 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8003ab8:	f107 030c 	add.w	r3, r7, #12
 8003abc:	1c59      	adds	r1, r3, #1
 8003abe:	2364      	movs	r3, #100	; 0x64
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4806      	ldr	r0, [pc, #24]	; (8003adc <NRF24_read_register+0x4c>)
 8003ac4:	f7fe fc8e 	bl	80023e4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8003ac8:	7b7b      	ldrb	r3, [r7, #13]
 8003aca:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8003acc:	2001      	movs	r0, #1
 8003ace:	f7ff ff9f 	bl	8003a10 <NRF24_csn>
	return retData;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200000a4 	.word	0x200000a4

08003ae0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	6039      	str	r1, [r7, #0]
 8003aea:	71fb      	strb	r3, [r7, #7]
 8003aec:	4613      	mov	r3, r2
 8003aee:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7ff ff8d 	bl	8003a10 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003b00:	f107 010c 	add.w	r1, r7, #12
 8003b04:	2364      	movs	r3, #100	; 0x64
 8003b06:	2201      	movs	r2, #1
 8003b08:	4808      	ldr	r0, [pc, #32]	; (8003b2c <NRF24_read_registerN+0x4c>)
 8003b0a:	f7fe fb15 	bl	8002138 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8003b0e:	79bb      	ldrb	r3, [r7, #6]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	2364      	movs	r3, #100	; 0x64
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	4805      	ldr	r0, [pc, #20]	; (8003b2c <NRF24_read_registerN+0x4c>)
 8003b18:	f7fe fc64 	bl	80023e4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	f7ff ff77 	bl	8003a10 <NRF24_csn>
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200000a4 	.word	0x200000a4

08003b30 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	460a      	mov	r2, r1
 8003b3a:	71fb      	strb	r3, [r7, #7]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7ff ff65 	bl	8003a10 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f043 0320 	orr.w	r3, r3, #32
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8003b50:	79bb      	ldrb	r3, [r7, #6]
 8003b52:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8003b54:	f107 010c 	add.w	r1, r7, #12
 8003b58:	2364      	movs	r3, #100	; 0x64
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	4804      	ldr	r0, [pc, #16]	; (8003b70 <NRF24_write_register+0x40>)
 8003b5e:	f7fe faeb 	bl	8002138 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7ff ff54 	bl	8003a10 <NRF24_csn>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200000a4 	.word	0x200000a4

08003b74 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	6039      	str	r1, [r7, #0]
 8003b7e:	71fb      	strb	r3, [r7, #7]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7ff ff43 	bl	8003a10 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	f043 0320 	orr.w	r3, r3, #32
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8003b94:	f107 010c 	add.w	r1, r7, #12
 8003b98:	2364      	movs	r3, #100	; 0x64
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	4808      	ldr	r0, [pc, #32]	; (8003bc0 <NRF24_write_registerN+0x4c>)
 8003b9e:	f7fe facb 	bl	8002138 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8003ba2:	79bb      	ldrb	r3, [r7, #6]
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	2364      	movs	r3, #100	; 0x64
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <NRF24_write_registerN+0x4c>)
 8003bac:	f7fe fac4 	bl	8002138 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f7ff ff2d 	bl	8003a10 <NRF24_csn>
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200000a4 	.word	0x200000a4

08003bc4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7ff ff1d 	bl	8003a10 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8003bd6:	23a0      	movs	r3, #160	; 0xa0
 8003bd8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8003bda:	f107 010f 	add.w	r1, r7, #15
 8003bde:	2364      	movs	r3, #100	; 0x64
 8003be0:	2201      	movs	r2, #1
 8003be2:	4808      	ldr	r0, [pc, #32]	; (8003c04 <NRF24_write_payload+0x40>)
 8003be4:	f7fe faa8 	bl	8002138 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	2364      	movs	r3, #100	; 0x64
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4804      	ldr	r0, [pc, #16]	; (8003c04 <NRF24_write_payload+0x40>)
 8003bf2:	f7fe faa1 	bl	8002138 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f7ff ff0a 	bl	8003a10 <NRF24_csn>
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200000a4 	.word	0x200000a4

08003c08 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8003c0c:	21ff      	movs	r1, #255	; 0xff
 8003c0e:	20e1      	movs	r0, #225	; 0xe1
 8003c10:	f7ff ff8e 	bl	8003b30 <NRF24_write_register>
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8003c1c:	21ff      	movs	r1, #255	; 0xff
 8003c1e:	20e2      	movs	r0, #226	; 0xe2
 8003c20:	f7ff ff86 	bl	8003b30 <NRF24_write_register>
}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8003c2e:	2007      	movs	r0, #7
 8003c30:	f7ff ff2e 	bl	8003a90 <NRF24_read_register>
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8003c38:	79fb      	ldrb	r3, [r7, #7]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8003c44:	b082      	sub	sp, #8
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]
 8003c54:	4613      	mov	r3, r2
 8003c56:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003c58:	4b66      	ldr	r3, [pc, #408]	; (8003df4 <NRF24_begin+0x1b0>)
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	2264      	movs	r2, #100	; 0x64
 8003c62:	4619      	mov	r1, r3
 8003c64:	f001 fcfa 	bl	800565c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8003c68:	4a63      	ldr	r2, [pc, #396]	; (8003df8 <NRF24_begin+0x1b4>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8003c6e:	4a63      	ldr	r2, [pc, #396]	; (8003dfc <NRF24_begin+0x1b8>)
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003c74:	4a62      	ldr	r2, [pc, #392]	; (8003e00 <NRF24_begin+0x1bc>)
 8003c76:	883b      	ldrh	r3, [r7, #0]
 8003c78:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	f7ff fec8 	bl	8003a10 <NRF24_csn>
	NRF24_ce(0);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f7ff fee5 	bl	8003a50 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8003c86:	2005      	movs	r0, #5
 8003c88:	f7fc fb60 	bl	800034c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8003c8c:	2108      	movs	r1, #8
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f7ff ff4e 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8003c94:	213f      	movs	r1, #63	; 0x3f
 8003c96:	2001      	movs	r0, #1
 8003c98:	f7ff ff4a 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003c9c:	2103      	movs	r1, #3
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	f7ff ff46 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8003ca4:	2103      	movs	r1, #3
 8003ca6:	2003      	movs	r0, #3
 8003ca8:	f7ff ff42 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003cac:	2103      	movs	r1, #3
 8003cae:	2004      	movs	r0, #4
 8003cb0:	f7ff ff3e 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	2005      	movs	r0, #5
 8003cb8:	f7ff ff3a 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003cbc:	210f      	movs	r1, #15
 8003cbe:	2006      	movs	r0, #6
 8003cc0:	f7ff ff36 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8003cc4:	210e      	movs	r1, #14
 8003cc6:	2007      	movs	r0, #7
 8003cc8:	f7ff ff32 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2008      	movs	r0, #8
 8003cd0:	f7ff ff2e 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2009      	movs	r0, #9
 8003cd8:	f7ff ff2a 	bl	8003b30 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003cdc:	23e7      	movs	r3, #231	; 0xe7
 8003cde:	733b      	strb	r3, [r7, #12]
 8003ce0:	23e7      	movs	r3, #231	; 0xe7
 8003ce2:	72fb      	strb	r3, [r7, #11]
 8003ce4:	23e7      	movs	r3, #231	; 0xe7
 8003ce6:	72bb      	strb	r3, [r7, #10]
 8003ce8:	23e7      	movs	r3, #231	; 0xe7
 8003cea:	727b      	strb	r3, [r7, #9]
 8003cec:	23e7      	movs	r3, #231	; 0xe7
 8003cee:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	2205      	movs	r2, #5
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	200a      	movs	r0, #10
 8003cfa:	f7ff ff3b 	bl	8003b74 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8003cfe:	23c2      	movs	r3, #194	; 0xc2
 8003d00:	733b      	strb	r3, [r7, #12]
 8003d02:	23c2      	movs	r3, #194	; 0xc2
 8003d04:	72fb      	strb	r3, [r7, #11]
 8003d06:	23c2      	movs	r3, #194	; 0xc2
 8003d08:	72bb      	strb	r3, [r7, #10]
 8003d0a:	23c2      	movs	r3, #194	; 0xc2
 8003d0c:	727b      	strb	r3, [r7, #9]
 8003d0e:	23c2      	movs	r3, #194	; 0xc2
 8003d10:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	2205      	movs	r2, #5
 8003d18:	4619      	mov	r1, r3
 8003d1a:	200b      	movs	r0, #11
 8003d1c:	f7ff ff2a 	bl	8003b74 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8003d20:	21c3      	movs	r1, #195	; 0xc3
 8003d22:	200c      	movs	r0, #12
 8003d24:	f7ff ff04 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8003d28:	21c4      	movs	r1, #196	; 0xc4
 8003d2a:	200d      	movs	r0, #13
 8003d2c:	f7ff ff00 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8003d30:	21c5      	movs	r1, #197	; 0xc5
 8003d32:	200e      	movs	r0, #14
 8003d34:	f7ff fefc 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8003d38:	21c6      	movs	r1, #198	; 0xc6
 8003d3a:	200f      	movs	r0, #15
 8003d3c:	f7ff fef8 	bl	8003b30 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8003d40:	23e7      	movs	r3, #231	; 0xe7
 8003d42:	733b      	strb	r3, [r7, #12]
 8003d44:	23e7      	movs	r3, #231	; 0xe7
 8003d46:	72fb      	strb	r3, [r7, #11]
 8003d48:	23e7      	movs	r3, #231	; 0xe7
 8003d4a:	72bb      	strb	r3, [r7, #10]
 8003d4c:	23e7      	movs	r3, #231	; 0xe7
 8003d4e:	727b      	strb	r3, [r7, #9]
 8003d50:	23e7      	movs	r3, #231	; 0xe7
 8003d52:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	2205      	movs	r2, #5
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	2010      	movs	r0, #16
 8003d5e:	f7ff ff09 	bl	8003b74 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8003d62:	2100      	movs	r1, #0
 8003d64:	2011      	movs	r0, #17
 8003d66:	f7ff fee3 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	2012      	movs	r0, #18
 8003d6e:	f7ff fedf 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003d72:	2100      	movs	r1, #0
 8003d74:	2013      	movs	r0, #19
 8003d76:	f7ff fedb 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2014      	movs	r0, #20
 8003d7e:	f7ff fed7 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003d82:	2100      	movs	r1, #0
 8003d84:	2015      	movs	r0, #21
 8003d86:	f7ff fed3 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2016      	movs	r0, #22
 8003d8e:	f7ff fecf 	bl	8003b30 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8003d92:	f000 fae3 	bl	800435c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8003d96:	2100      	movs	r1, #0
 8003d98:	201c      	movs	r0, #28
 8003d9a:	f7ff fec9 	bl	8003b30 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	201d      	movs	r0, #29
 8003da2:	f7ff fec5 	bl	8003b30 <NRF24_write_register>
	printRadioSettings();
 8003da6:	f000 faf3 	bl	8004390 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8003daa:	210f      	movs	r1, #15
 8003dac:	200f      	movs	r0, #15
 8003dae:	f000 f8ad 	bl	8003f0c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8003db2:	2003      	movs	r0, #3
 8003db4:	f000 f987 	bl	80040c6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8003db8:	2001      	movs	r0, #1
 8003dba:	f000 f9bd 	bl	8004138 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f000 fa00 	bl	80041c4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8003dc4:	f000 f952 	bl	800406c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8003dc8:	2020      	movs	r0, #32
 8003dca:	f000 f8cf 	bl	8003f6c <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8003dce:	f000 fabc 	bl	800434a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8003dd2:	204c      	movs	r0, #76	; 0x4c
 8003dd4:	f000 f8b5 	bl	8003f42 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8003dd8:	f7ff ff16 	bl	8003c08 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003ddc:	f7ff ff1c 	bl	8003c18 <NRF24_flush_rx>

	NRF24_powerDown();
 8003de0:	f000 fa18 	bl	8004214 <NRF24_powerDown>

}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dee:	b002      	add	sp, #8
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	200000a4 	.word	0x200000a4
 8003df8:	2000009c 	.word	0x2000009c
 8003dfc:	200000a0 	.word	0x200000a0
 8003e00:	200000a2 	.word	0x200000a2

08003e04 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7ff fe21 	bl	8003a50 <NRF24_ce>
	NRF24_flush_tx();
 8003e0e:	f7ff fefb 	bl	8003c08 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003e12:	f7ff ff01 	bl	8003c18 <NRF24_flush_rx>
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8003e28:	f000 fa8f 	bl	800434a <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fa2e 	bl	8004292 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8003e36:	f7fc fa7d 	bl	8000334 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8003e3c:	230a      	movs	r3, #10
 8003e3e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8003e40:	f107 030d 	add.w	r3, r7, #13
 8003e44:	2201      	movs	r2, #1
 8003e46:	4619      	mov	r1, r3
 8003e48:	2008      	movs	r0, #8
 8003e4a:	f7ff fe49 	bl	8003ae0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8003e4e:	f7ff feeb 	bl	8003c28 <NRF24_get_status>
 8003e52:	4603      	mov	r3, r0
 8003e54:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <NRF24_write+0x54>
 8003e60:	f7fc fa68 	bl	8000334 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d8e7      	bhi.n	8003e40 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8003e70:	f107 010b 	add.w	r1, r7, #11
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <NRF24_write+0x90>)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fa32 	bl	80042e4 <NRF24_whatHappened>
	retStatus = tx_ok;
 8003e80:	7b3b      	ldrb	r3, [r7, #12]
 8003e82:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <NRF24_write+0x90>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8003e8c:	f000 f886 	bl	8003f9c <NRF24_getDynamicPayloadSize>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <NRF24_write+0x94>)
 8003e96:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8003e98:	f000 f80c 	bl	8003eb4 <NRF24_available>
	NRF24_flush_tx();
 8003e9c:	f7ff feb4 	bl	8003c08 <NRF24_flush_tx>
	return retStatus;
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000094 	.word	0x20000094
 8003eb0:	20000095 	.word	0x20000095

08003eb4 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f000 f9ba 	bl	8004232 <NRF24_availablePipe>
 8003ebe:	4603      	mov	r3, r0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8003ece:	463b      	mov	r3, r7
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	200a      	movs	r0, #10
 8003ed6:	f7ff fe4d 	bl	8003b74 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8003eda:	463b      	mov	r3, r7
 8003edc:	2205      	movs	r2, #5
 8003ede:	4619      	mov	r1, r3
 8003ee0:	2010      	movs	r0, #16
 8003ee2:	f7ff fe47 	bl	8003b74 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <NRF24_openWritingPipe+0x44>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bf28      	it	cs
 8003ef4:	4613      	movcs	r3, r2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2011      	movs	r0, #17
 8003efc:	f7ff fe18 	bl	8003b30 <NRF24_write_register>
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000096 	.word	0x20000096

08003f0c <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	460a      	mov	r2, r1
 8003f16:	71fb      	strb	r3, [r7, #7]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	b25a      	sxtb	r2, r3
 8003f22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	b25b      	sxtb	r3, r3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	4619      	mov	r1, r3
 8003f34:	2004      	movs	r0, #4
 8003f36:	f7ff fdfb 	bl	8003b30 <NRF24_write_register>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8003f4c:	237f      	movs	r3, #127	; 0x7f
 8003f4e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bf28      	it	cs
 8003f58:	4613      	movcs	r3, r2
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	2005      	movs	r0, #5
 8003f60:	f7ff fde6 	bl	8003b30 <NRF24_write_register>
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8003f76:	2320      	movs	r3, #32
 8003f78:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	bf28      	it	cs
 8003f82:	4613      	movcs	r3, r2
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <NRF24_setPayloadSize+0x2c>)
 8003f88:	701a      	strb	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000096 	.word	0x20000096

08003f9c <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8003fa0:	2060      	movs	r0, #96	; 0x60
 8003fa2:	f7ff fd75 	bl	8003a90 <NRF24_read_register>
 8003fa6:	4603      	mov	r3, r0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}

08003fac <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8003fb0:	201d      	movs	r0, #29
 8003fb2:	f7ff fd6d 	bl	8003a90 <NRF24_read_register>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f043 0306 	orr.w	r3, r3, #6
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	201d      	movs	r0, #29
 8003fc2:	f7ff fdb5 	bl	8003b30 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8003fc6:	201d      	movs	r0, #29
 8003fc8:	f7ff fd62 	bl	8003a90 <NRF24_read_register>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8003fd2:	f000 f9c3 	bl	800435c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8003fd6:	201d      	movs	r0, #29
 8003fd8:	f7ff fd5a 	bl	8003a90 <NRF24_read_register>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f043 0306 	orr.w	r3, r3, #6
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	201d      	movs	r0, #29
 8003fe8:	f7ff fda2 	bl	8003b30 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8003fec:	201c      	movs	r0, #28
 8003fee:	f7ff fd4f 	bl	8003a90 <NRF24_read_register>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f043 0303 	orr.w	r3, r3, #3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	201c      	movs	r0, #28
 8003ffe:	f7ff fd97 	bl	8003b30 <NRF24_write_register>
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800400c:	201d      	movs	r0, #29
 800400e:	f7ff fd3f 	bl	8003a90 <NRF24_read_register>
 8004012:	4603      	mov	r3, r0
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4619      	mov	r1, r3
 800401c:	201d      	movs	r0, #29
 800401e:	f7ff fd87 	bl	8003b30 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8004022:	201d      	movs	r0, #29
 8004024:	f7ff fd34 	bl	8003a90 <NRF24_read_register>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10c      	bne.n	8004048 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800402e:	f000 f995 	bl	800435c <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8004032:	201d      	movs	r0, #29
 8004034:	f7ff fd2c 	bl	8003a90 <NRF24_read_register>
 8004038:	4603      	mov	r3, r0
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	201d      	movs	r0, #29
 8004044:	f7ff fd74 	bl	8003b30 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004048:	201c      	movs	r0, #28
 800404a:	f7ff fd21 	bl	8003a90 <NRF24_read_register>
 800404e:	4603      	mov	r3, r0
 8004050:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004054:	b2db      	uxtb	r3, r3
 8004056:	4619      	mov	r1, r3
 8004058:	201c      	movs	r0, #28
 800405a:	f7ff fd69 	bl	8003b30 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800405e:	4b02      	ldr	r3, [pc, #8]	; (8004068 <NRF24_enableDynamicPayloads+0x60>)
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]

}
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000097 	.word	0x20000097

0800406c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8004070:	201d      	movs	r0, #29
 8004072:	f7ff fd0d 	bl	8003a90 <NRF24_read_register>
 8004076:	4603      	mov	r3, r0
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4619      	mov	r1, r3
 8004080:	201d      	movs	r0, #29
 8004082:	f7ff fd55 	bl	8003b30 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8004086:	2100      	movs	r1, #0
 8004088:	201c      	movs	r0, #28
 800408a:	f7ff fd51 	bl	8003b30 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800408e:	4b02      	ldr	r3, [pc, #8]	; (8004098 <NRF24_disableDynamicPayloads+0x2c>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000097 	.word	0x20000097

0800409c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80040ac:	213f      	movs	r1, #63	; 0x3f
 80040ae:	2001      	movs	r0, #1
 80040b0:	f7ff fd3e 	bl	8003b30 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80040b4:	e003      	b.n	80040be <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80040b6:	2100      	movs	r1, #0
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7ff fd39 	bl	8003b30 <NRF24_write_register>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	4603      	mov	r3, r0
 80040ce:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80040d0:	2006      	movs	r0, #6
 80040d2:	f7ff fcdd 	bl	8003a90 <NRF24_read_register>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	f023 0306 	bic.w	r3, r3, #6
 80040e0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d104      	bne.n	80040f2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	f043 0306 	orr.w	r3, r3, #6
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	e019      	b.n	8004126 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d104      	bne.n	8004102 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	f043 0304 	orr.w	r3, r3, #4
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e011      	b.n	8004126 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d104      	bne.n	8004112 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	e009      	b.n	8004126 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	2b04      	cmp	r3, #4
 800411c:	d103      	bne.n	8004126 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	f043 0306 	orr.w	r3, r3, #6
 8004124:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	4619      	mov	r1, r3
 800412a:	2006      	movs	r0, #6
 800412c:	f7ff fd00 	bl	8003b30 <NRF24_write_register>
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004146:	2006      	movs	r0, #6
 8004148:	f7ff fca2 	bl	8003a90 <NRF24_read_register>
 800414c:	4603      	mov	r3, r0
 800414e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <NRF24_setDataRate+0x88>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8004156:	7bbb      	ldrb	r3, [r7, #14]
 8004158:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800415c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d107      	bne.n	8004174 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <NRF24_setDataRate+0x88>)
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800416a:	7bbb      	ldrb	r3, [r7, #14]
 800416c:	f043 0320 	orr.w	r3, r3, #32
 8004170:	73bb      	strb	r3, [r7, #14]
 8004172:	e00d      	b.n	8004190 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <NRF24_setDataRate+0x88>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	f043 0308 	orr.w	r3, r3, #8
 8004186:	73bb      	strb	r3, [r7, #14]
 8004188:	e002      	b.n	8004190 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <NRF24_setDataRate+0x88>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	4619      	mov	r1, r3
 8004194:	2006      	movs	r0, #6
 8004196:	f7ff fccb 	bl	8003b30 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800419a:	2006      	movs	r0, #6
 800419c:	f7ff fc78 	bl	8003a90 <NRF24_read_register>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	7bbb      	ldrb	r3, [r7, #14]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d102      	bne.n	80041b0 <NRF24_setDataRate+0x78>
  {
    result = true;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e002      	b.n	80041b6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <NRF24_setDataRate+0x88>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20000098 	.word	0x20000098

080041c4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7ff fc5e 	bl	8003a90 <NRF24_read_register>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f023 030c 	bic.w	r3, r3, #12
 80041da:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00f      	beq.n	8004202 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d104      	bne.n	80041f2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	f043 0308 	orr.w	r3, r3, #8
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e007      	b.n	8004202 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	f043 0304 	orr.w	r3, r3, #4
 8004200:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	4619      	mov	r1, r3
 8004206:	2000      	movs	r0, #0
 8004208:	f7ff fc92 	bl	8003b30 <NRF24_write_register>
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004218:	2000      	movs	r0, #0
 800421a:	f7ff fc39 	bl	8003a90 <NRF24_read_register>
 800421e:	4603      	mov	r3, r0
 8004220:	f023 0302 	bic.w	r3, r3, #2
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	2000      	movs	r0, #0
 800422a:	f7ff fc81 	bl	8003b30 <NRF24_write_register>
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}

08004232 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800423a:	f7ff fcf5 	bl	8003c28 <NRF24_get_status>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004252:	7bbb      	ldrb	r3, [r7, #14]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	b2da      	uxtb	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800426e:	2140      	movs	r1, #64	; 0x40
 8004270:	2007      	movs	r0, #7
 8004272:	f7ff fc5d 	bl	8003b30 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004280:	2120      	movs	r1, #32
 8004282:	2007      	movs	r0, #7
 8004284:	f7ff fc54 	bl	8003b30 <NRF24_write_register>
    }
  }
  return result;
 8004288:	7bbb      	ldrb	r3, [r7, #14]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800429e:	2000      	movs	r0, #0
 80042a0:	f7ff fbf6 	bl	8003a90 <NRF24_read_register>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f043 0302 	orr.w	r3, r3, #2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	2000      	movs	r0, #0
 80042b6:	f7ff fc3b 	bl	8003b30 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 80042ba:	2096      	movs	r0, #150	; 0x96
 80042bc:	f7ff fb88 	bl	80039d0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fc7d 	bl	8003bc4 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f7ff fbc0 	bl	8003a50 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80042d0:	200f      	movs	r0, #15
 80042d2:	f7ff fb7d 	bl	80039d0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7ff fbba 	bl	8003a50 <NRF24_ce>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80042f0:	f7ff fc9a 	bl	8003c28 <NRF24_get_status>
 80042f4:	4603      	mov	r3, r0
 80042f6:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80042fe:	2170      	movs	r1, #112	; 0x70
 8004300:	2007      	movs	r0, #7
 8004302:	f7ff fc15 	bl	8003b30 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2da      	uxtb	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	701a      	strb	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800434e:	2170      	movs	r1, #112	; 0x70
 8004350:	2007      	movs	r0, #7
 8004352:	f7ff fbed 	bl	8003b30 <NRF24_write_register>
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004362:	2000      	movs	r0, #0
 8004364:	f7ff fb54 	bl	8003a10 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004368:	2350      	movs	r3, #80	; 0x50
 800436a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800436c:	2373      	movs	r3, #115	; 0x73
 800436e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004370:	1d39      	adds	r1, r7, #4
 8004372:	2364      	movs	r3, #100	; 0x64
 8004374:	2202      	movs	r2, #2
 8004376:	4805      	ldr	r0, [pc, #20]	; (800438c <NRF24_ACTIVATE_cmd+0x30>)
 8004378:	f7fd fede 	bl	8002138 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800437c:	2001      	movs	r0, #1
 800437e:	f7ff fb47 	bl	8003a10 <NRF24_csn>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	200000a4 	.word	0x200000a4

08004390 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004392:	b0a1      	sub	sp, #132	; 0x84
 8004394:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004396:	f107 0308 	add.w	r3, r7, #8
 800439a:	4ab6      	ldr	r2, [pc, #728]	; (8004674 <printRadioSettings+0x2e4>)
 800439c:	461c      	mov	r4, r3
 800439e:	4615      	mov	r5, r2
 80043a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	8022      	strh	r2, [r4, #0]
 80043b2:	3402      	adds	r4, #2
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fb ff07 	bl	80001d0 <strlen>
 80043c2:	4603      	mov	r3, r0
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	f107 0108 	add.w	r1, r7, #8
 80043ca:	230a      	movs	r3, #10
 80043cc:	48aa      	ldr	r0, [pc, #680]	; (8004678 <printRadioSettings+0x2e8>)
 80043ce:	f7fe fd01 	bl	8002dd4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7ff fb5c 	bl	8003a90 <NRF24_read_register>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80043de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d020      	beq.n	800442c <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80043ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <printRadioSettings+0x7e>
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4aa0      	ldr	r2, [pc, #640]	; (800467c <printRadioSettings+0x2ec>)
 80043fc:	461c      	mov	r4, r3
 80043fe:	4615      	mov	r5, r2
 8004400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800440c:	e017      	b.n	800443e <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	4a9b      	ldr	r2, [pc, #620]	; (8004680 <printRadioSettings+0x2f0>)
 8004414:	461c      	mov	r4, r3
 8004416:	4615      	mov	r5, r2
 8004418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800441a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800441c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004420:	c403      	stmia	r4!, {r0, r1}
 8004422:	8022      	strh	r2, [r4, #0]
 8004424:	3402      	adds	r4, #2
 8004426:	0c13      	lsrs	r3, r2, #16
 8004428:	7023      	strb	r3, [r4, #0]
 800442a:	e008      	b.n	800443e <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800442c:	f107 0308 	add.w	r3, r7, #8
 8004430:	4a94      	ldr	r2, [pc, #592]	; (8004684 <printRadioSettings+0x2f4>)
 8004432:	461c      	mov	r4, r3
 8004434:	4615      	mov	r5, r2
 8004436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800443a:	682b      	ldr	r3, [r5, #0]
 800443c:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	4618      	mov	r0, r3
 8004444:	f7fb fec4 	bl	80001d0 <strlen>
 8004448:	4603      	mov	r3, r0
 800444a:	b29a      	uxth	r2, r3
 800444c:	f107 0108 	add.w	r1, r7, #8
 8004450:	230a      	movs	r3, #10
 8004452:	4889      	ldr	r0, [pc, #548]	; (8004678 <printRadioSettings+0x2e8>)
 8004454:	f7fe fcbe 	bl	8002dd4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004458:	2001      	movs	r0, #1
 800445a:	f7ff fb19 	bl	8003a90 <NRF24_read_register>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004464:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004468:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800446c:	2b00      	cmp	r3, #0
 800446e:	bfcc      	ite	gt
 8004470:	2301      	movgt	r3, #1
 8004472:	2300      	movle	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004478:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800447c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfcc      	ite	gt
 8004484:	2301      	movgt	r3, #1
 8004486:	2300      	movle	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800448c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004490:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004494:	2b00      	cmp	r3, #0
 8004496:	bfcc      	ite	gt
 8004498:	2301      	movgt	r3, #1
 800449a:	2300      	movle	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044a4:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bfcc      	ite	gt
 80044ac:	2301      	movgt	r3, #1
 80044ae:	2300      	movle	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044b8:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044bc:	2b00      	cmp	r3, #0
 80044be:	bfcc      	ite	gt
 80044c0:	2301      	movgt	r3, #1
 80044c2:	2300      	movle	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80044c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044cc:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bfcc      	ite	gt
 80044d4:	2301      	movgt	r3, #1
 80044d6:	2300      	movle	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f107 0008 	add.w	r0, r7, #8
 80044de:	9303      	str	r3, [sp, #12]
 80044e0:	9402      	str	r4, [sp, #8]
 80044e2:	9101      	str	r1, [sp, #4]
 80044e4:	9200      	str	r2, [sp, #0]
 80044e6:	4633      	mov	r3, r6
 80044e8:	462a      	mov	r2, r5
 80044ea:	4967      	ldr	r1, [pc, #412]	; (8004688 <printRadioSettings+0x2f8>)
 80044ec:	f001 f8ca 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80044f0:	f107 0308 	add.w	r3, r7, #8
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fb fe6b 	bl	80001d0 <strlen>
 80044fa:	4603      	mov	r3, r0
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	f107 0108 	add.w	r1, r7, #8
 8004502:	230a      	movs	r3, #10
 8004504:	485c      	ldr	r0, [pc, #368]	; (8004678 <printRadioSettings+0x2e8>)
 8004506:	f7fe fc65 	bl	8002dd4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800450a:	2002      	movs	r0, #2
 800450c:	f7ff fac0 	bl	8003a90 <NRF24_read_register>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004516:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800451a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfcc      	ite	gt
 8004522:	2301      	movgt	r3, #1
 8004524:	2300      	movle	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800452a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800452e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004532:	2b00      	cmp	r3, #0
 8004534:	bfcc      	ite	gt
 8004536:	2301      	movgt	r3, #1
 8004538:	2300      	movle	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800453e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004542:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfcc      	ite	gt
 800454a:	2301      	movgt	r3, #1
 800454c:	2300      	movle	r3, #0
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004552:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004556:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfcc      	ite	gt
 800455e:	2301      	movgt	r3, #1
 8004560:	2300      	movle	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004566:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800456a:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800456e:	2b00      	cmp	r3, #0
 8004570:	bfcc      	ite	gt
 8004572:	2301      	movgt	r3, #1
 8004574:	2300      	movle	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800457a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800457e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfcc      	ite	gt
 8004586:	2301      	movgt	r3, #1
 8004588:	2300      	movle	r3, #0
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f107 0008 	add.w	r0, r7, #8
 8004590:	9303      	str	r3, [sp, #12]
 8004592:	9402      	str	r4, [sp, #8]
 8004594:	9101      	str	r1, [sp, #4]
 8004596:	9200      	str	r2, [sp, #0]
 8004598:	4633      	mov	r3, r6
 800459a:	462a      	mov	r2, r5
 800459c:	493b      	ldr	r1, [pc, #236]	; (800468c <printRadioSettings+0x2fc>)
 800459e:	f001 f871 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb fe12 	bl	80001d0 <strlen>
 80045ac:	4603      	mov	r3, r0
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	f107 0108 	add.w	r1, r7, #8
 80045b4:	230a      	movs	r3, #10
 80045b6:	4830      	ldr	r0, [pc, #192]	; (8004678 <printRadioSettings+0x2e8>)
 80045b8:	f7fe fc0c 	bl	8002dd4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80045bc:	2003      	movs	r0, #3
 80045be:	f7ff fa67 	bl	8003a90 <NRF24_read_register>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80045cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80045d0:	3302      	adds	r3, #2
 80045d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80045d6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80045da:	f107 0308 	add.w	r3, r7, #8
 80045de:	492c      	ldr	r1, [pc, #176]	; (8004690 <printRadioSettings+0x300>)
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 f84f 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80045e6:	f107 0308 	add.w	r3, r7, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fb fdf0 	bl	80001d0 <strlen>
 80045f0:	4603      	mov	r3, r0
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	f107 0108 	add.w	r1, r7, #8
 80045f8:	230a      	movs	r3, #10
 80045fa:	481f      	ldr	r0, [pc, #124]	; (8004678 <printRadioSettings+0x2e8>)
 80045fc:	f7fe fbea 	bl	8002dd4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004600:	2005      	movs	r0, #5
 8004602:	f7ff fa45 	bl	8003a90 <NRF24_read_register>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800460c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004614:	f107 0308 	add.w	r3, r7, #8
 8004618:	491e      	ldr	r1, [pc, #120]	; (8004694 <printRadioSettings+0x304>)
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f832 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004620:	f107 0308 	add.w	r3, r7, #8
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb fdd3 	bl	80001d0 <strlen>
 800462a:	4603      	mov	r3, r0
 800462c:	b29a      	uxth	r2, r3
 800462e:	f107 0108 	add.w	r1, r7, #8
 8004632:	230a      	movs	r3, #10
 8004634:	4810      	ldr	r0, [pc, #64]	; (8004678 <printRadioSettings+0x2e8>)
 8004636:	f7fe fbcd 	bl	8002dd4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800463a:	2006      	movs	r0, #6
 800463c:	f7ff fa28 	bl	8003a90 <NRF24_read_register>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004646:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d024      	beq.n	800469c <printRadioSettings+0x30c>
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <printRadioSettings+0x308>)
 8004658:	461c      	mov	r4, r3
 800465a:	4615      	mov	r5, r2
 800465c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800465e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004660:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	3404      	adds	r4, #4
 8004668:	8021      	strh	r1, [r4, #0]
 800466a:	3402      	adds	r4, #2
 800466c:	0c0b      	lsrs	r3, r1, #16
 800466e:	7023      	strb	r3, [r4, #0]
 8004670:	e023      	b.n	80046ba <printRadioSettings+0x32a>
 8004672:	bf00      	nop
 8004674:	08005eb8 	.word	0x08005eb8
 8004678:	20000108 	.word	0x20000108
 800467c:	08005eec 	.word	0x08005eec
 8004680:	08005f08 	.word	0x08005f08
 8004684:	08005f24 	.word	0x08005f24
 8004688:	08005f38 	.word	0x08005f38
 800468c:	08005f7c 	.word	0x08005f7c
 8004690:	08005fc8 	.word	0x08005fc8
 8004694:	08005fe4 	.word	0x08005fe4
 8004698:	08005ff8 	.word	0x08005ff8
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800469c:	f107 0308 	add.w	r3, r7, #8
 80046a0:	4a29      	ldr	r2, [pc, #164]	; (8004748 <printRadioSettings+0x3b8>)
 80046a2:	461c      	mov	r4, r3
 80046a4:	4615      	mov	r5, r2
 80046a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046ae:	6020      	str	r0, [r4, #0]
 80046b0:	3404      	adds	r4, #4
 80046b2:	8021      	strh	r1, [r4, #0]
 80046b4:	3402      	adds	r4, #2
 80046b6:	0c0b      	lsrs	r3, r1, #16
 80046b8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fb fd86 	bl	80001d0 <strlen>
 80046c4:	4603      	mov	r3, r0
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	f107 0108 	add.w	r1, r7, #8
 80046cc:	230a      	movs	r3, #10
 80046ce:	481f      	ldr	r0, [pc, #124]	; (800474c <printRadioSettings+0x3bc>)
 80046d0:	f7fe fb80 	bl	8002dd4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80046d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046d8:	f003 0306 	and.w	r3, r3, #6
 80046dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80046e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80046ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <printRadioSettings+0x376>
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4a16      	ldr	r2, [pc, #88]	; (8004750 <printRadioSettings+0x3c0>)
 80046f8:	461c      	mov	r4, r3
 80046fa:	4615      	mov	r5, r2
 80046fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	e037      	b.n	8004776 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8004706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800470a:	2b01      	cmp	r3, #1
 800470c:	d109      	bne.n	8004722 <printRadioSettings+0x392>
 800470e:	f107 0308 	add.w	r3, r7, #8
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <printRadioSettings+0x3c4>)
 8004714:	461c      	mov	r4, r3
 8004716:	4615      	mov	r5, r2
 8004718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	e029      	b.n	8004776 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8004722:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004726:	2b02      	cmp	r3, #2
 8004728:	d118      	bne.n	800475c <printRadioSettings+0x3cc>
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <printRadioSettings+0x3c8>)
 8004730:	461c      	mov	r4, r3
 8004732:	4615      	mov	r5, r2
 8004734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004738:	682b      	ldr	r3, [r5, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	8022      	strh	r2, [r4, #0]
 800473e:	3402      	adds	r4, #2
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	7023      	strb	r3, [r4, #0]
 8004744:	e017      	b.n	8004776 <printRadioSettings+0x3e6>
 8004746:	bf00      	nop
 8004748:	08006010 	.word	0x08006010
 800474c:	20000108 	.word	0x20000108
 8004750:	08006028 	.word	0x08006028
 8004754:	0800603c 	.word	0x0800603c
 8004758:	08006050 	.word	0x08006050
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800475c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004760:	2b03      	cmp	r3, #3
 8004762:	d108      	bne.n	8004776 <printRadioSettings+0x3e6>
 8004764:	f107 0308 	add.w	r3, r7, #8
 8004768:	4ad7      	ldr	r2, [pc, #860]	; (8004ac8 <printRadioSettings+0x738>)
 800476a:	461c      	mov	r4, r3
 800476c:	4615      	mov	r5, r2
 800476e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004772:	682b      	ldr	r3, [r5, #0]
 8004774:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004776:	f107 0308 	add.w	r3, r7, #8
 800477a:	4618      	mov	r0, r3
 800477c:	f7fb fd28 	bl	80001d0 <strlen>
 8004780:	4603      	mov	r3, r0
 8004782:	b29a      	uxth	r2, r3
 8004784:	f107 0108 	add.w	r1, r7, #8
 8004788:	230a      	movs	r3, #10
 800478a:	48d0      	ldr	r0, [pc, #832]	; (8004acc <printRadioSettings+0x73c>)
 800478c:	f7fe fb22 	bl	8002dd4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8004790:	463b      	mov	r3, r7
 8004792:	2205      	movs	r2, #5
 8004794:	4619      	mov	r1, r3
 8004796:	200a      	movs	r0, #10
 8004798:	f7ff f9a2 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800479c:	793b      	ldrb	r3, [r7, #4]
 800479e:	461c      	mov	r4, r3
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	461d      	mov	r5, r3
 80047a4:	78bb      	ldrb	r3, [r7, #2]
 80047a6:	787a      	ldrb	r2, [r7, #1]
 80047a8:	7839      	ldrb	r1, [r7, #0]
 80047aa:	f107 0008 	add.w	r0, r7, #8
 80047ae:	9102      	str	r1, [sp, #8]
 80047b0:	9201      	str	r2, [sp, #4]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462b      	mov	r3, r5
 80047b6:	4622      	mov	r2, r4
 80047b8:	49c5      	ldr	r1, [pc, #788]	; (8004ad0 <printRadioSettings+0x740>)
 80047ba:	f000 ff63 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fd04 	bl	80001d0 <strlen>
 80047c8:	4603      	mov	r3, r0
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	f107 0108 	add.w	r1, r7, #8
 80047d0:	230a      	movs	r3, #10
 80047d2:	48be      	ldr	r0, [pc, #760]	; (8004acc <printRadioSettings+0x73c>)
 80047d4:	f7fe fafe 	bl	8002dd4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80047d8:	463b      	mov	r3, r7
 80047da:	2205      	movs	r2, #5
 80047dc:	4619      	mov	r1, r3
 80047de:	200b      	movs	r0, #11
 80047e0:	f7ff f97e 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80047e4:	793b      	ldrb	r3, [r7, #4]
 80047e6:	461c      	mov	r4, r3
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	461d      	mov	r5, r3
 80047ec:	78bb      	ldrb	r3, [r7, #2]
 80047ee:	787a      	ldrb	r2, [r7, #1]
 80047f0:	7839      	ldrb	r1, [r7, #0]
 80047f2:	f107 0008 	add.w	r0, r7, #8
 80047f6:	9102      	str	r1, [sp, #8]
 80047f8:	9201      	str	r2, [sp, #4]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	462b      	mov	r3, r5
 80047fe:	4622      	mov	r2, r4
 8004800:	49b4      	ldr	r1, [pc, #720]	; (8004ad4 <printRadioSettings+0x744>)
 8004802:	f000 ff3f 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004806:	f107 0308 	add.w	r3, r7, #8
 800480a:	4618      	mov	r0, r3
 800480c:	f7fb fce0 	bl	80001d0 <strlen>
 8004810:	4603      	mov	r3, r0
 8004812:	b29a      	uxth	r2, r3
 8004814:	f107 0108 	add.w	r1, r7, #8
 8004818:	230a      	movs	r3, #10
 800481a:	48ac      	ldr	r0, [pc, #688]	; (8004acc <printRadioSettings+0x73c>)
 800481c:	f7fe fada 	bl	8002dd4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8004820:	463b      	mov	r3, r7
 8004822:	2201      	movs	r2, #1
 8004824:	4619      	mov	r1, r3
 8004826:	200c      	movs	r0, #12
 8004828:	f7ff f95a 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800482c:	783b      	ldrb	r3, [r7, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	49a8      	ldr	r1, [pc, #672]	; (8004ad8 <printRadioSettings+0x748>)
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ff24 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	4618      	mov	r0, r3
 8004842:	f7fb fcc5 	bl	80001d0 <strlen>
 8004846:	4603      	mov	r3, r0
 8004848:	b29a      	uxth	r2, r3
 800484a:	f107 0108 	add.w	r1, r7, #8
 800484e:	230a      	movs	r3, #10
 8004850:	489e      	ldr	r0, [pc, #632]	; (8004acc <printRadioSettings+0x73c>)
 8004852:	f7fe fabf 	bl	8002dd4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8004856:	463b      	mov	r3, r7
 8004858:	2201      	movs	r2, #1
 800485a:	4619      	mov	r1, r3
 800485c:	200d      	movs	r0, #13
 800485e:	f7ff f93f 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004862:	783b      	ldrb	r3, [r7, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	499c      	ldr	r1, [pc, #624]	; (8004adc <printRadioSettings+0x74c>)
 800486c:	4618      	mov	r0, r3
 800486e:	f000 ff09 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4618      	mov	r0, r3
 8004878:	f7fb fcaa 	bl	80001d0 <strlen>
 800487c:	4603      	mov	r3, r0
 800487e:	b29a      	uxth	r2, r3
 8004880:	f107 0108 	add.w	r1, r7, #8
 8004884:	230a      	movs	r3, #10
 8004886:	4891      	ldr	r0, [pc, #580]	; (8004acc <printRadioSettings+0x73c>)
 8004888:	f7fe faa4 	bl	8002dd4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800488c:	463b      	mov	r3, r7
 800488e:	2201      	movs	r2, #1
 8004890:	4619      	mov	r1, r3
 8004892:	200e      	movs	r0, #14
 8004894:	f7ff f924 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8004898:	783b      	ldrb	r3, [r7, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	498f      	ldr	r1, [pc, #572]	; (8004ae0 <printRadioSettings+0x750>)
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 feee 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048a8:	f107 0308 	add.w	r3, r7, #8
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fb fc8f 	bl	80001d0 <strlen>
 80048b2:	4603      	mov	r3, r0
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	f107 0108 	add.w	r1, r7, #8
 80048ba:	230a      	movs	r3, #10
 80048bc:	4883      	ldr	r0, [pc, #524]	; (8004acc <printRadioSettings+0x73c>)
 80048be:	f7fe fa89 	bl	8002dd4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80048c2:	463b      	mov	r3, r7
 80048c4:	2201      	movs	r2, #1
 80048c6:	4619      	mov	r1, r3
 80048c8:	200f      	movs	r0, #15
 80048ca:	f7ff f909 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80048ce:	783b      	ldrb	r3, [r7, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	f107 0308 	add.w	r3, r7, #8
 80048d6:	4983      	ldr	r1, [pc, #524]	; (8004ae4 <printRadioSettings+0x754>)
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fed3 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80048de:	f107 0308 	add.w	r3, r7, #8
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fc74 	bl	80001d0 <strlen>
 80048e8:	4603      	mov	r3, r0
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f107 0108 	add.w	r1, r7, #8
 80048f0:	230a      	movs	r3, #10
 80048f2:	4876      	ldr	r0, [pc, #472]	; (8004acc <printRadioSettings+0x73c>)
 80048f4:	f7fe fa6e 	bl	8002dd4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80048f8:	463b      	mov	r3, r7
 80048fa:	2205      	movs	r2, #5
 80048fc:	4619      	mov	r1, r3
 80048fe:	2010      	movs	r0, #16
 8004900:	f7ff f8ee 	bl	8003ae0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8004904:	793b      	ldrb	r3, [r7, #4]
 8004906:	461c      	mov	r4, r3
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	461d      	mov	r5, r3
 800490c:	78bb      	ldrb	r3, [r7, #2]
 800490e:	787a      	ldrb	r2, [r7, #1]
 8004910:	7839      	ldrb	r1, [r7, #0]
 8004912:	f107 0008 	add.w	r0, r7, #8
 8004916:	9102      	str	r1, [sp, #8]
 8004918:	9201      	str	r2, [sp, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	462b      	mov	r3, r5
 800491e:	4622      	mov	r2, r4
 8004920:	4971      	ldr	r1, [pc, #452]	; (8004ae8 <printRadioSettings+0x758>)
 8004922:	f000 feaf 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4618      	mov	r0, r3
 800492c:	f7fb fc50 	bl	80001d0 <strlen>
 8004930:	4603      	mov	r3, r0
 8004932:	b29a      	uxth	r2, r3
 8004934:	f107 0108 	add.w	r1, r7, #8
 8004938:	230a      	movs	r3, #10
 800493a:	4864      	ldr	r0, [pc, #400]	; (8004acc <printRadioSettings+0x73c>)
 800493c:	f7fe fa4a 	bl	8002dd4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8004940:	2011      	movs	r0, #17
 8004942:	f7ff f8a5 	bl	8003a90 <NRF24_read_register>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800494c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004954:	f107 0308 	add.w	r3, r7, #8
 8004958:	4964      	ldr	r1, [pc, #400]	; (8004aec <printRadioSettings+0x75c>)
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fe92 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004960:	f107 0308 	add.w	r3, r7, #8
 8004964:	4618      	mov	r0, r3
 8004966:	f7fb fc33 	bl	80001d0 <strlen>
 800496a:	4603      	mov	r3, r0
 800496c:	b29a      	uxth	r2, r3
 800496e:	f107 0108 	add.w	r1, r7, #8
 8004972:	230a      	movs	r3, #10
 8004974:	4855      	ldr	r0, [pc, #340]	; (8004acc <printRadioSettings+0x73c>)
 8004976:	f7fe fa2d 	bl	8002dd4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800497a:	2012      	movs	r0, #18
 800497c:	f7ff f888 	bl	8003a90 <NRF24_read_register>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004986:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800498a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	4957      	ldr	r1, [pc, #348]	; (8004af0 <printRadioSettings+0x760>)
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fe75 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fc16 	bl	80001d0 <strlen>
 80049a4:	4603      	mov	r3, r0
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	f107 0108 	add.w	r1, r7, #8
 80049ac:	230a      	movs	r3, #10
 80049ae:	4847      	ldr	r0, [pc, #284]	; (8004acc <printRadioSettings+0x73c>)
 80049b0:	f7fe fa10 	bl	8002dd4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80049b4:	2013      	movs	r0, #19
 80049b6:	f7ff f86b 	bl	8003a90 <NRF24_read_register>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80049c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c8:	f107 0308 	add.w	r3, r7, #8
 80049cc:	4949      	ldr	r1, [pc, #292]	; (8004af4 <printRadioSettings+0x764>)
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fe58 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fb fbf9 	bl	80001d0 <strlen>
 80049de:	4603      	mov	r3, r0
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	f107 0108 	add.w	r1, r7, #8
 80049e6:	230a      	movs	r3, #10
 80049e8:	4838      	ldr	r0, [pc, #224]	; (8004acc <printRadioSettings+0x73c>)
 80049ea:	f7fe f9f3 	bl	8002dd4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80049ee:	2014      	movs	r0, #20
 80049f0:	f7ff f84e 	bl	8003a90 <NRF24_read_register>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80049fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a02:	f107 0308 	add.w	r3, r7, #8
 8004a06:	493c      	ldr	r1, [pc, #240]	; (8004af8 <printRadioSettings+0x768>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fe3b 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a0e:	f107 0308 	add.w	r3, r7, #8
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fb fbdc 	bl	80001d0 <strlen>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	f107 0108 	add.w	r1, r7, #8
 8004a20:	230a      	movs	r3, #10
 8004a22:	482a      	ldr	r0, [pc, #168]	; (8004acc <printRadioSettings+0x73c>)
 8004a24:	f7fe f9d6 	bl	8002dd4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8004a28:	2015      	movs	r0, #21
 8004a2a:	f7ff f831 	bl	8003a90 <NRF24_read_register>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a3c:	f107 0308 	add.w	r3, r7, #8
 8004a40:	492e      	ldr	r1, [pc, #184]	; (8004afc <printRadioSettings+0x76c>)
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fe1e 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a48:	f107 0308 	add.w	r3, r7, #8
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fbbf 	bl	80001d0 <strlen>
 8004a52:	4603      	mov	r3, r0
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	f107 0108 	add.w	r1, r7, #8
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	481b      	ldr	r0, [pc, #108]	; (8004acc <printRadioSettings+0x73c>)
 8004a5e:	f7fe f9b9 	bl	8002dd4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8004a62:	2016      	movs	r0, #22
 8004a64:	f7ff f814 	bl	8003a90 <NRF24_read_register>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8004a6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a76:	f107 0308 	add.w	r3, r7, #8
 8004a7a:	4921      	ldr	r1, [pc, #132]	; (8004b00 <printRadioSettings+0x770>)
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fe01 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004a82:	f107 0308 	add.w	r3, r7, #8
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fb fba2 	bl	80001d0 <strlen>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	f107 0108 	add.w	r1, r7, #8
 8004a94:	230a      	movs	r3, #10
 8004a96:	480d      	ldr	r0, [pc, #52]	; (8004acc <printRadioSettings+0x73c>)
 8004a98:	f7fe f99c 	bl	8002dd4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8004a9c:	201c      	movs	r0, #28
 8004a9e:	f7fe fff7 	bl	8003a90 <NRF24_read_register>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004aa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004aac:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bfcc      	ite	gt
 8004ab4:	2301      	movgt	r3, #1
 8004ab6:	2300      	movle	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004abc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	e01e      	b.n	8004b04 <printRadioSettings+0x774>
 8004ac6:	bf00      	nop
 8004ac8:	08006064 	.word	0x08006064
 8004acc:	20000108 	.word	0x20000108
 8004ad0:	08006078 	.word	0x08006078
 8004ad4:	080060a8 	.word	0x080060a8
 8004ad8:	080060d8 	.word	0x080060d8
 8004adc:	08006100 	.word	0x08006100
 8004ae0:	08006128 	.word	0x08006128
 8004ae4:	08006150 	.word	0x08006150
 8004ae8:	08006178 	.word	0x08006178
 8004aec:	080061a4 	.word	0x080061a4
 8004af0:	080061c0 	.word	0x080061c0
 8004af4:	080061dc 	.word	0x080061dc
 8004af8:	080061f8 	.word	0x080061f8
 8004afc:	08006214 	.word	0x08006214
 8004b00:	08006230 	.word	0x08006230
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bfcc      	ite	gt
 8004b08:	2301      	movgt	r3, #1
 8004b0a:	2300      	movle	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b14:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bfcc      	ite	gt
 8004b1c:	2301      	movgt	r3, #1
 8004b1e:	2300      	movle	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b28:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bfcc      	ite	gt
 8004b30:	2301      	movgt	r3, #1
 8004b32:	2300      	movle	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b3c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bfcc      	ite	gt
 8004b44:	2301      	movgt	r3, #1
 8004b46:	2300      	movle	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004b4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b50:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bfcc      	ite	gt
 8004b58:	2301      	movgt	r3, #1
 8004b5a:	2300      	movle	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f107 0008 	add.w	r0, r7, #8
 8004b62:	9303      	str	r3, [sp, #12]
 8004b64:	9402      	str	r4, [sp, #8]
 8004b66:	9101      	str	r1, [sp, #4]
 8004b68:	9200      	str	r2, [sp, #0]
 8004b6a:	4633      	mov	r3, r6
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	494a      	ldr	r1, [pc, #296]	; (8004c98 <printRadioSettings+0x908>)
 8004b70:	f000 fd88 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004b74:	f107 0308 	add.w	r3, r7, #8
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fb fb29 	bl	80001d0 <strlen>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	f107 0108 	add.w	r1, r7, #8
 8004b86:	230a      	movs	r3, #10
 8004b88:	4844      	ldr	r0, [pc, #272]	; (8004c9c <printRadioSettings+0x90c>)
 8004b8a:	f7fe f923 	bl	8002dd4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8004b8e:	201d      	movs	r0, #29
 8004b90:	f7fe ff7e 	bl	8003a90 <NRF24_read_register>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8004b9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00c      	beq.n	8004bc0 <printRadioSettings+0x830>
 8004ba6:	f107 0308 	add.w	r3, r7, #8
 8004baa:	4a3d      	ldr	r2, [pc, #244]	; (8004ca0 <printRadioSettings+0x910>)
 8004bac:	461c      	mov	r4, r3
 8004bae:	4615      	mov	r5, r2
 8004bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004bb8:	6020      	str	r0, [r4, #0]
 8004bba:	3404      	adds	r4, #4
 8004bbc:	8021      	strh	r1, [r4, #0]
 8004bbe:	e00e      	b.n	8004bde <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <printRadioSettings+0x914>)
 8004bc6:	461c      	mov	r4, r3
 8004bc8:	4615      	mov	r5, r2
 8004bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	3404      	adds	r4, #4
 8004bd6:	8021      	strh	r1, [r4, #0]
 8004bd8:	3402      	adds	r4, #2
 8004bda:	0c0b      	lsrs	r3, r1, #16
 8004bdc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004bde:	f107 0308 	add.w	r3, r7, #8
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fb faf4 	bl	80001d0 <strlen>
 8004be8:	4603      	mov	r3, r0
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	f107 0108 	add.w	r1, r7, #8
 8004bf0:	230a      	movs	r3, #10
 8004bf2:	482a      	ldr	r0, [pc, #168]	; (8004c9c <printRadioSettings+0x90c>)
 8004bf4:	f7fe f8ee 	bl	8002dd4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8004bf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <printRadioSettings+0x88c>
 8004c04:	f107 0308 	add.w	r3, r7, #8
 8004c08:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <printRadioSettings+0x918>)
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	4615      	mov	r5, r2
 8004c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c16:	c403      	stmia	r4!, {r0, r1}
 8004c18:	8022      	strh	r2, [r4, #0]
 8004c1a:	e00d      	b.n	8004c38 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8004c1c:	f107 0308 	add.w	r3, r7, #8
 8004c20:	4a22      	ldr	r2, [pc, #136]	; (8004cac <printRadioSettings+0x91c>)
 8004c22:	461c      	mov	r4, r3
 8004c24:	4615      	mov	r5, r2
 8004c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c2e:	c403      	stmia	r4!, {r0, r1}
 8004c30:	8022      	strh	r2, [r4, #0]
 8004c32:	3402      	adds	r4, #2
 8004c34:	0c13      	lsrs	r3, r2, #16
 8004c36:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb fac7 	bl	80001d0 <strlen>
 8004c42:	4603      	mov	r3, r0
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	f107 0108 	add.w	r1, r7, #8
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	4813      	ldr	r0, [pc, #76]	; (8004c9c <printRadioSettings+0x90c>)
 8004c4e:	f7fe f8c1 	bl	8002dd4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004c52:	f107 0308 	add.w	r3, r7, #8
 8004c56:	4a16      	ldr	r2, [pc, #88]	; (8004cb0 <printRadioSettings+0x920>)
 8004c58:	461c      	mov	r4, r3
 8004c5a:	4615      	mov	r5, r2
 8004c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	8022      	strh	r2, [r4, #0]
 8004c6e:	3402      	adds	r4, #2
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fb faa9 	bl	80001d0 <strlen>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	f107 0108 	add.w	r1, r7, #8
 8004c86:	230a      	movs	r3, #10
 8004c88:	4804      	ldr	r0, [pc, #16]	; (8004c9c <printRadioSettings+0x90c>)
 8004c8a:	f7fe f8a3 	bl	8002dd4 <HAL_UART_Transmit>
}
 8004c8e:	bf00      	nop
 8004c90:	3774      	adds	r7, #116	; 0x74
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	0800624c 	.word	0x0800624c
 8004c9c:	20000108 	.word	0x20000108
 8004ca0:	08006298 	.word	0x08006298
 8004ca4:	080062b0 	.word	0x080062b0
 8004ca8:	080062c8 	.word	0x080062c8
 8004cac:	080062e4 	.word	0x080062e4
 8004cb0:	08005eb8 	.word	0x08005eb8

08004cb4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	f107 0c08 	add.w	ip, r7, #8
 8004cbe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <nrf24_DebugUART_Init+0x2c>)
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f107 0108 	add.w	r1, r7, #8
 8004cca:	2370      	movs	r3, #112	; 0x70
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f000 fcc5 	bl	800565c <memcpy>
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cda:	b004      	add	sp, #16
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000108 	.word	0x20000108

08004ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce6:	b0af      	sub	sp, #188	; 0xbc
 8004ce8:	af18      	add	r7, sp, #96	; 0x60
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cea:	f7fb fac9 	bl	8000280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cee:	f000 f8cd 	bl	8004e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cf2:	f000 fa0d 	bl	8005110 <MX_GPIO_Init>
  MX_I2C2_Init();
 8004cf6:	f000 f91f 	bl	8004f38 <MX_I2C2_Init>
  MX_SPI2_Init();
 8004cfa:	f000 f95d 	bl	8004fb8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8004cfe:	f000 f999 	bl	8005034 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8004d02:	f000 f9d5 	bl	80050b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(nRF_CS_GPIO_Port, nRF_CS_Pin, nRF_CE_Pin, hspi3);
 8004d06:	4c56      	ldr	r4, [pc, #344]	; (8004e60 <main+0x17c>)
 8004d08:	4668      	mov	r0, sp
 8004d0a:	1d23      	adds	r3, r4, #4
 8004d0c:	2260      	movs	r2, #96	; 0x60
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f000 fca4 	bl	800565c <memcpy>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	2102      	movs	r1, #2
 8004d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d1e:	f7fe ff91 	bl	8003c44 <NRF24_begin>
     nrf24_DebugUART_Init(huart2);
 8004d22:	4c50      	ldr	r4, [pc, #320]	; (8004e64 <main+0x180>)
 8004d24:	4668      	mov	r0, sp
 8004d26:	f104 0310 	add.w	r3, r4, #16
 8004d2a:	2260      	movs	r2, #96	; 0x60
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f000 fc95 	bl	800565c <memcpy>
 8004d32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004d36:	f7ff ffbd 	bl	8004cb4 <nrf24_DebugUART_Init>

     NRF24_stopListening();
 8004d3a:	f7ff f863 	bl	8003e04 <NRF24_stopListening>
     NRF24_openWritingPipe(TxpipeAddrs);
 8004d3e:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <main+0x184>)
 8004d40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d44:	4618      	mov	r0, r3
 8004d46:	4621      	mov	r1, r4
 8004d48:	f7ff f8bc 	bl	8003ec4 <NRF24_openWritingPipe>
     NRF24_setAutoAck(true);
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7ff f9a5 	bl	800409c <NRF24_setAutoAck>
     NRF24_setChannel(52);
 8004d52:	2034      	movs	r0, #52	; 0x34
 8004d54:	f7ff f8f5 	bl	8003f42 <NRF24_setChannel>
     NRF24_setPayloadSize(32);
 8004d58:	2020      	movs	r0, #32
 8004d5a:	f7ff f907 	bl	8003f6c <NRF24_setPayloadSize>

     NRF24_enableDynamicPayloads();
 8004d5e:	f7ff f953 	bl	8004008 <NRF24_enableDynamicPayloads>
     NRF24_enableAckPayload();
 8004d62:	f7ff f923 	bl	8003fac <NRF24_enableAckPayload>

     printRadioSettings();
 8004d66:	f7ff fb13 	bl	8004390 <printRadioSettings>

     ICM_SelectBank(USER_BANK_0);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7fe fdce 	bl	800390c <ICM_SelectBank>
     ICM_PowerOn();
 8004d70:	f7fe fc94 	bl	800369c <ICM_PowerOn>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	ICM_SelectBank(USER_BANK_0);
 8004d74:	2000      	movs	r0, #0
 8004d76:	f7fe fdc9 	bl	800390c <ICM_SelectBank>
	HAL_Delay(10);
 8004d7a:	200a      	movs	r0, #10
 8004d7c:	f7fb fae6 	bl	800034c <HAL_Delay>

	// Obtain accelerometer and gyro data
	ICM_ReadAccelGyro();
 8004d80:	f7fe fd38 	bl	80037f4 <ICM_ReadAccelGyro>

	// Obtain magnetometer data
	int16_t mag_data[3];
	ICM_ReadMag(mag_data);
 8004d84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fc3b 	bl	8003604 <ICM_ReadMag>
//			ppgunsigned16 = 0;
//	}

	// Print raw, but joined, axis data values to screen

	memcpy(tx_buffer, accel_data, sizeof(accel_data));
 8004d8e:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <main+0x188>)
 8004d90:	4a37      	ldr	r2, [pc, #220]	; (8004e70 <main+0x18c>)
 8004d92:	6811      	ldr	r1, [r2, #0]
 8004d94:	6019      	str	r1, [r3, #0]
 8004d96:	8892      	ldrh	r2, [r2, #4]
 8004d98:	809a      	strh	r2, [r3, #4]
	memcpy(&tx_buffer[3], gyro_data, sizeof(gyro_data));
 8004d9a:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <main+0x188>)
 8004d9c:	4a35      	ldr	r2, [pc, #212]	; (8004e74 <main+0x190>)
 8004d9e:	3306      	adds	r3, #6
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	6019      	str	r1, [r3, #0]
 8004da4:	8892      	ldrh	r2, [r2, #4]
 8004da6:	809a      	strh	r2, [r3, #4]
	memcpy(&tx_buffer[6], mag_data, sizeof(mag_data));
 8004da8:	4b30      	ldr	r3, [pc, #192]	; (8004e6c <main+0x188>)
 8004daa:	330c      	adds	r3, #12
 8004dac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004db0:	6810      	ldr	r0, [r2, #0]
 8004db2:	6018      	str	r0, [r3, #0]
 8004db4:	8892      	ldrh	r2, [r2, #4]
 8004db6:	809a      	strh	r2, [r3, #4]
	sprintf(uart_buffer,
			"(Ax: %i | Ay: %i | Az: %i)   "
			"(Gx: %i | Gy: %i | Gz: %i)   "
			"(Mx: %i | My: %i | Mz: %i)   "
			" \r\n",
			accel_data[0], accel_data[1], accel_data[2],
 8004db8:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <main+0x18c>)
 8004dba:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(uart_buffer,
 8004dbe:	469c      	mov	ip, r3
			accel_data[0], accel_data[1], accel_data[2],
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <main+0x18c>)
 8004dc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(uart_buffer,
 8004dc6:	469e      	mov	lr, r3
			accel_data[0], accel_data[1], accel_data[2],
 8004dc8:	4b29      	ldr	r3, [pc, #164]	; (8004e70 <main+0x18c>)
 8004dca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf(uart_buffer,
 8004dce:	461a      	mov	r2, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 8004dd0:	4b28      	ldr	r3, [pc, #160]	; (8004e74 <main+0x190>)
 8004dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(uart_buffer,
 8004dd6:	4619      	mov	r1, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 8004dd8:	4b26      	ldr	r3, [pc, #152]	; (8004e74 <main+0x190>)
 8004dda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf(uart_buffer,
 8004dde:	4618      	mov	r0, r3
			gyro_data[0], gyro_data[1], gyro_data[2],
 8004de0:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <main+0x190>)
 8004de2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			mag_data[0], mag_data[1], mag_data[2]);
 8004de6:	f9b7 4050 	ldrsh.w	r4, [r7, #80]	; 0x50
 8004dea:	f9b7 5052 	ldrsh.w	r5, [r7, #82]	; 0x52
 8004dee:	f9b7 6054 	ldrsh.w	r6, [r7, #84]	; 0x54
	sprintf(uart_buffer,
 8004df2:	9606      	str	r6, [sp, #24]
 8004df4:	9505      	str	r5, [sp, #20]
 8004df6:	9404      	str	r4, [sp, #16]
 8004df8:	9303      	str	r3, [sp, #12]
 8004dfa:	9002      	str	r0, [sp, #8]
 8004dfc:	9101      	str	r1, [sp, #4]
 8004dfe:	9200      	str	r2, [sp, #0]
 8004e00:	4673      	mov	r3, lr
 8004e02:	4662      	mov	r2, ip
 8004e04:	491c      	ldr	r1, [pc, #112]	; (8004e78 <main+0x194>)
 8004e06:	481d      	ldr	r0, [pc, #116]	; (8004e7c <main+0x198>)
 8004e08:	f000 fc3c 	bl	8005684 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8004e0c:	481b      	ldr	r0, [pc, #108]	; (8004e7c <main+0x198>)
 8004e0e:	f7fb f9df 	bl	80001d0 <strlen>
 8004e12:	4603      	mov	r3, r0
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e1a:	4918      	ldr	r1, [pc, #96]	; (8004e7c <main+0x198>)
 8004e1c:	4811      	ldr	r0, [pc, #68]	; (8004e64 <main+0x180>)
 8004e1e:	f7fd ffd9 	bl	8002dd4 <HAL_UART_Transmit>

	if(NRF24_write(tx_buffer, sizeof(tx_buffer))) {
 8004e22:	2114      	movs	r1, #20
 8004e24:	4811      	ldr	r0, [pc, #68]	; (8004e6c <main+0x188>)
 8004e26:	f7fe fff9 	bl	8003e1c <NRF24_write>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0a1      	beq.n	8004d74 <main+0x90>
		HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 8004e30:	230a      	movs	r3, #10
 8004e32:	221a      	movs	r2, #26
 8004e34:	4912      	ldr	r1, [pc, #72]	; (8004e80 <main+0x19c>)
 8004e36:	480b      	ldr	r0, [pc, #44]	; (8004e64 <main+0x180>)
 8004e38:	f7fd ffcc 	bl	8002dd4 <HAL_UART_Transmit>
		char myDataack[80];
		sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <main+0x1a0>)
 8004e40:	4911      	ldr	r1, [pc, #68]	; (8004e88 <main+0x1a4>)
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fc1e 	bl	8005684 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)myDataack, strlen(myDataack), 10);
 8004e48:	463b      	mov	r3, r7
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb f9c0 	bl	80001d0 <strlen>
 8004e50:	4603      	mov	r3, r0
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	4639      	mov	r1, r7
 8004e56:	230a      	movs	r3, #10
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <main+0x180>)
 8004e5a:	f7fd ffbb 	bl	8002dd4 <HAL_UART_Transmit>
  {
 8004e5e:	e789      	b.n	8004d74 <main+0x90>
 8004e60:	200002e0 	.word	0x200002e0
 8004e64:	200001fc 	.word	0x200001fc
 8004e68:	20000008 	.word	0x20000008
 8004e6c:	20000344 	.word	0x20000344
 8004e70:	200001ec 	.word	0x200001ec
 8004e74:	200001f4 	.word	0x200001f4
 8004e78:	080063fc 	.word	0x080063fc
 8004e7c:	20000358 	.word	0x20000358
 8004e80:	08006458 	.word	0x08006458
 8004e84:	20000274 	.word	0x20000274
 8004e88:	08006474 	.word	0x08006474

08004e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b09c      	sub	sp, #112	; 0x70
 8004e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004e96:	2228      	movs	r2, #40	; 0x28
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fbe9 	bl	8005672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ea0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004eb0:	1d3b      	adds	r3, r7, #4
 8004eb2:	2230      	movs	r2, #48	; 0x30
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fbdb 	bl	8005672 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004ed0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ed6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fb fdf4 	bl	8000ac8 <HAL_RCC_OscConfig>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004ee6:	f000 f95d 	bl	80051a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004eea:	230f      	movs	r3, #15
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004efc:	2300      	movs	r3, #0
 8004efe:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f04:	2102      	movs	r1, #2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc fccc 	bl	80018a4 <HAL_RCC_ClockConfig>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004f12:	f000 f947 	bl	80051a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fc fef5 	bl	8001d10 <HAL_RCCEx_PeriphCLKConfig>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004f2c:	f000 f93a 	bl	80051a4 <Error_Handler>
  }
}
 8004f30:	bf00      	nop
 8004f32:	3770      	adds	r7, #112	; 0x70
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f3e:	4a1c      	ldr	r2, [pc, #112]	; (8004fb0 <MX_I2C2_Init+0x78>)
 8004f40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8004f42:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <MX_I2C2_Init+0x7c>)
 8004f46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f4e:	4b17      	ldr	r3, [pc, #92]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f54:	4b15      	ldr	r3, [pc, #84]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004f5a:	4b14      	ldr	r3, [pc, #80]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f60:	4b12      	ldr	r3, [pc, #72]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f66:	4b11      	ldr	r3, [pc, #68]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004f72:	480e      	ldr	r0, [pc, #56]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f74:	f7fb fc80 	bl	8000878 <HAL_I2C_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004f7e:	f000 f911 	bl	80051a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f82:	2100      	movs	r1, #0
 8004f84:	4809      	ldr	r0, [pc, #36]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f86:	f7fb fd06 	bl	8000996 <HAL_I2CEx_ConfigAnalogFilter>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004f90:	f000 f908 	bl	80051a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004f94:	2100      	movs	r1, #0
 8004f96:	4805      	ldr	r0, [pc, #20]	; (8004fac <MX_I2C2_Init+0x74>)
 8004f98:	f7fb fd48 	bl	8000a2c <HAL_I2CEx_ConfigDigitalFilter>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004fa2:	f000 f8ff 	bl	80051a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000294 	.word	0x20000294
 8004fb0:	40005800 	.word	0x40005800
 8004fb4:	2000090e 	.word	0x2000090e

08004fb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <MX_SPI2_Init+0x74>)
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <MX_SPI2_Init+0x78>)
 8004fc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <MX_SPI2_Init+0x74>)
 8004fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <MX_SPI2_Init+0x74>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fd0:	4b16      	ldr	r3, [pc, #88]	; (800502c <MX_SPI2_Init+0x74>)
 8004fd2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004fd6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	; (800502c <MX_SPI2_Init+0x74>)
 8004fda:	2202      	movs	r2, #2
 8004fdc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004fde:	4b13      	ldr	r3, [pc, #76]	; (800502c <MX_SPI2_Init+0x74>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <MX_SPI2_Init+0x74>)
 8004fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <MX_SPI2_Init+0x74>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	; (800502c <MX_SPI2_Init+0x74>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <MX_SPI2_Init+0x74>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffe:	4b0b      	ldr	r3, [pc, #44]	; (800502c <MX_SPI2_Init+0x74>)
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <MX_SPI2_Init+0x74>)
 8005006:	2207      	movs	r2, #7
 8005008:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800500a:	4b08      	ldr	r3, [pc, #32]	; (800502c <MX_SPI2_Init+0x74>)
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005010:	4b06      	ldr	r3, [pc, #24]	; (800502c <MX_SPI2_Init+0x74>)
 8005012:	2200      	movs	r2, #0
 8005014:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005016:	4805      	ldr	r0, [pc, #20]	; (800502c <MX_SPI2_Init+0x74>)
 8005018:	f7fc fffc 	bl	8002014 <HAL_SPI_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005022:	f000 f8bf 	bl	80051a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000188 	.word	0x20000188
 8005030:	40003800 	.word	0x40003800

08005034 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <MX_SPI3_Init+0x74>)
 800503a:	4a1c      	ldr	r2, [pc, #112]	; (80050ac <MX_SPI3_Init+0x78>)
 800503c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005046:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005048:	2200      	movs	r2, #0
 800504a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800504c:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <MX_SPI3_Init+0x74>)
 800504e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005052:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005056:	2200      	movs	r2, #0
 8005058:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <MX_SPI3_Init+0x74>)
 800505c:	2200      	movs	r2, #0
 800505e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005066:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005068:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <MX_SPI3_Init+0x74>)
 800506a:	2210      	movs	r2, #16
 800506c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800506e:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005070:	2200      	movs	r2, #0
 8005072:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005076:	2200      	movs	r2, #0
 8005078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <MX_SPI3_Init+0x74>)
 800507c:	2200      	movs	r2, #0
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005082:	2207      	movs	r2, #7
 8005084:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <MX_SPI3_Init+0x74>)
 800508e:	2208      	movs	r2, #8
 8005090:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005092:	4805      	ldr	r0, [pc, #20]	; (80050a8 <MX_SPI3_Init+0x74>)
 8005094:	f7fc ffbe 	bl	8002014 <HAL_SPI_Init>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800509e:	f000 f881 	bl	80051a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	200002e0 	.word	0x200002e0
 80050ac:	40003c00 	.word	0x40003c00

080050b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050b4:	4b14      	ldr	r3, [pc, #80]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <MX_USART2_UART_Init+0x5c>)
 80050b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80050c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050d6:	220c      	movs	r2, #12
 80050d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050dc:	2200      	movs	r2, #0
 80050de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80050f2:	4805      	ldr	r0, [pc, #20]	; (8005108 <MX_USART2_UART_Init+0x58>)
 80050f4:	f7fd fe1d 	bl	8002d32 <HAL_UART_Init>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80050fe:	f000 f851 	bl	80051a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200001fc 	.word	0x200001fc
 800510c:	40004400 	.word	0x40004400

08005110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005116:	f107 030c 	add.w	r3, r7, #12
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	609a      	str	r2, [r3, #8]
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005126:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <MX_GPIO_Init+0x90>)
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <MX_GPIO_Init+0x90>)
 800512c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005130:	6153      	str	r3, [r2, #20]
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <MX_GPIO_Init+0x90>)
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	60bb      	str	r3, [r7, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800513e:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <MX_GPIO_Init+0x90>)
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <MX_GPIO_Init+0x90>)
 8005144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005148:	6153      	str	r3, [r2, #20]
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <MX_GPIO_Init+0x90>)
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <MX_GPIO_Init+0x90>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <MX_GPIO_Init+0x90>)
 800515c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005160:	6153      	str	r3, [r2, #20]
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <MX_GPIO_Init+0x90>)
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRF_CE_Pin|nRF_CS_Pin|ICM_CS_Pin|ICM2_CS_Pin, GPIO_PIN_RESET);
 800516e:	2200      	movs	r2, #0
 8005170:	2133      	movs	r1, #51	; 0x33
 8005172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005176:	f7fb fb67 	bl	8000848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : nRF_CE_Pin nRF_CS_Pin ICM_CS_Pin ICM2_CS_Pin */
  GPIO_InitStruct.Pin = nRF_CE_Pin|nRF_CS_Pin|ICM_CS_Pin|ICM2_CS_Pin;
 800517a:	2333      	movs	r3, #51	; 0x33
 800517c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800517e:	2301      	movs	r3, #1
 8005180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	4619      	mov	r1, r3
 8005190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005194:	f7fb f9e2 	bl	800055c <HAL_GPIO_Init>

}
 8005198:	bf00      	nop
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40021000 	.word	0x40021000

080051a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <HAL_MspInit+0x44>)
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	4a0e      	ldr	r2, [pc, #56]	; (80051f8 <HAL_MspInit+0x44>)
 80051c0:	f043 0301 	orr.w	r3, r3, #1
 80051c4:	6193      	str	r3, [r2, #24]
 80051c6:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <HAL_MspInit+0x44>)
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	607b      	str	r3, [r7, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <HAL_MspInit+0x44>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <HAL_MspInit+0x44>)
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	61d3      	str	r3, [r2, #28]
 80051de:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_MspInit+0x44>)
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40021000 	.word	0x40021000

080051fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08a      	sub	sp, #40	; 0x28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a26      	ldr	r2, [pc, #152]	; (80052b4 <HAL_I2C_MspInit+0xb8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d145      	bne.n	80052aa <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800521e:	4b26      	ldr	r3, [pc, #152]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 8005224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005228:	6153      	str	r3, [r2, #20]
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	6153      	str	r3, [r2, #20]
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PF0-OSC_IN     ------> I2C2_SDA
    PA9     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800524e:	2301      	movs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005252:	2312      	movs	r3, #18
 8005254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005256:	2301      	movs	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800525a:	2303      	movs	r3, #3
 800525c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800525e:	2304      	movs	r3, #4
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005262:	f107 0314 	add.w	r3, r7, #20
 8005266:	4619      	mov	r1, r3
 8005268:	4814      	ldr	r0, [pc, #80]	; (80052bc <HAL_I2C_MspInit+0xc0>)
 800526a:	f7fb f977 	bl	800055c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800526e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005274:	2312      	movs	r3, #18
 8005276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005278:	2301      	movs	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800527c:	2303      	movs	r3, #3
 800527e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005280:	2304      	movs	r3, #4
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	4619      	mov	r1, r3
 800528a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800528e:	f7fb f965 	bl	800055c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005292:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 8005298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800529c:	61d3      	str	r3, [r2, #28]
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_I2C_MspInit+0xbc>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80052aa:	bf00      	nop
 80052ac:	3728      	adds	r7, #40	; 0x28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40005800 	.word	0x40005800
 80052b8:	40021000 	.word	0x40021000
 80052bc:	48001400 	.word	0x48001400

080052c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08c      	sub	sp, #48	; 0x30
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c8:	f107 031c 	add.w	r3, r7, #28
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a3d      	ldr	r2, [pc, #244]	; (80053d4 <HAL_SPI_MspInit+0x114>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d146      	bne.n	8005370 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80052e2:	4b3d      	ldr	r3, [pc, #244]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	4a3c      	ldr	r2, [pc, #240]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 80052e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052ec:	61d3      	str	r3, [r2, #28]
 80052ee:	4b3a      	ldr	r3, [pc, #232]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052fa:	4b37      	ldr	r3, [pc, #220]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	4a36      	ldr	r2, [pc, #216]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005304:	6153      	str	r3, [r2, #20]
 8005306:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005312:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4a30      	ldr	r2, [pc, #192]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531c:	6153      	str	r3, [r2, #20]
 800531e:	4b2e      	ldr	r3, [pc, #184]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005326:	613b      	str	r3, [r7, #16]
 8005328:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration    
    PF1-OSC_OUT     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800532a:	2302      	movs	r3, #2
 800532c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532e:	2302      	movs	r3, #2
 8005330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005332:	2300      	movs	r3, #0
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005336:	2303      	movs	r3, #3
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800533a:	2305      	movs	r3, #5
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800533e:	f107 031c 	add.w	r3, r7, #28
 8005342:	4619      	mov	r1, r3
 8005344:	4825      	ldr	r0, [pc, #148]	; (80053dc <HAL_SPI_MspInit+0x11c>)
 8005346:	f7fb f909 	bl	800055c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800534a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800534e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005350:	2302      	movs	r3, #2
 8005352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005358:	2303      	movs	r3, #3
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800535c:	2305      	movs	r3, #5
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005360:	f107 031c 	add.w	r3, r7, #28
 8005364:	4619      	mov	r1, r3
 8005366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800536a:	f7fb f8f7 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800536e:	e02c      	b.n	80053ca <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <HAL_SPI_MspInit+0x120>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d127      	bne.n	80053ca <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005384:	61d3      	str	r3, [r2, #28]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005392:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 8005398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539c:	6153      	str	r3, [r2, #20]
 800539e:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <HAL_SPI_MspInit+0x118>)
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80053aa:	2338      	movs	r3, #56	; 0x38
 80053ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ae:	2302      	movs	r3, #2
 80053b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053b6:	2303      	movs	r3, #3
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80053ba:	2306      	movs	r3, #6
 80053bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053be:	f107 031c 	add.w	r3, r7, #28
 80053c2:	4619      	mov	r1, r3
 80053c4:	4807      	ldr	r0, [pc, #28]	; (80053e4 <HAL_SPI_MspInit+0x124>)
 80053c6:	f7fb f8c9 	bl	800055c <HAL_GPIO_Init>
}
 80053ca:	bf00      	nop
 80053cc:	3730      	adds	r7, #48	; 0x30
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40003800 	.word	0x40003800
 80053d8:	40021000 	.word	0x40021000
 80053dc:	48001400 	.word	0x48001400
 80053e0:	40003c00 	.word	0x40003c00
 80053e4:	48000400 	.word	0x48000400

080053e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f0:	f107 0314 	add.w	r3, r7, #20
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a17      	ldr	r2, [pc, #92]	; (8005464 <HAL_UART_MspInit+0x7c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d128      	bne.n	800545c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800540a:	4b17      	ldr	r3, [pc, #92]	; (8005468 <HAL_UART_MspInit+0x80>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4a16      	ldr	r2, [pc, #88]	; (8005468 <HAL_UART_MspInit+0x80>)
 8005410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005414:	61d3      	str	r3, [r2, #28]
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <HAL_UART_MspInit+0x80>)
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <HAL_UART_MspInit+0x80>)
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	4a10      	ldr	r2, [pc, #64]	; (8005468 <HAL_UART_MspInit+0x80>)
 8005428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800542c:	6153      	str	r3, [r2, #20]
 800542e:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <HAL_UART_MspInit+0x80>)
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800543a:	230c      	movs	r3, #12
 800543c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543e:	2302      	movs	r3, #2
 8005440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005446:	2303      	movs	r3, #3
 8005448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800544a:	2307      	movs	r3, #7
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	4619      	mov	r1, r3
 8005454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005458:	f7fb f880 	bl	800055c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800545c:	bf00      	nop
 800545e:	3728      	adds	r7, #40	; 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40004400 	.word	0x40004400
 8005468:	40021000 	.word	0x40021000

0800546c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800547a:	b480      	push	{r7}
 800547c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800547e:	e7fe      	b.n	800547e <HardFault_Handler+0x4>

08005480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005484:	e7fe      	b.n	8005484 <MemManage_Handler+0x4>

08005486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800548a:	e7fe      	b.n	800548a <BusFault_Handler+0x4>

0800548c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005490:	e7fe      	b.n	8005490 <UsageFault_Handler+0x4>

08005492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005492:	b480      	push	{r7}
 8005494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054ae:	b480      	push	{r7}
 80054b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80054b2:	bf00      	nop
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80054c0:	f7fa ff24 	bl	800030c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80054c4:	bf00      	nop
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80054d0:	4b11      	ldr	r3, [pc, #68]	; (8005518 <_sbrk+0x50>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <_sbrk+0x16>
		heap_end = &end;
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <_sbrk+0x50>)
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <_sbrk+0x54>)
 80054dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <_sbrk+0x50>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <_sbrk+0x50>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	466a      	mov	r2, sp
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d907      	bls.n	8005502 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80054f2:	f000 f889 	bl	8005608 <__errno>
 80054f6:	4602      	mov	r2, r0
 80054f8:	230c      	movs	r3, #12
 80054fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	e006      	b.n	8005510 <_sbrk+0x48>
	}

	heap_end += incr;
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <_sbrk+0x50>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	4a03      	ldr	r2, [pc, #12]	; (8005518 <_sbrk+0x50>)
 800550c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800550e:	68fb      	ldr	r3, [r7, #12]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000178 	.word	0x20000178
 800551c:	200003c0 	.word	0x200003c0

08005520 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005524:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <SystemInit+0x84>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	4a1e      	ldr	r2, [pc, #120]	; (80055a4 <SystemInit+0x84>)
 800552c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005534:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <SystemInit+0x88>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <SystemInit+0x88>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005540:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <SystemInit+0x88>)
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4918      	ldr	r1, [pc, #96]	; (80055a8 <SystemInit+0x88>)
 8005546:	4b19      	ldr	r3, [pc, #100]	; (80055ac <SystemInit+0x8c>)
 8005548:	4013      	ands	r3, r2
 800554a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800554c:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <SystemInit+0x88>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <SystemInit+0x88>)
 8005552:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800555c:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <SystemInit+0x88>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a11      	ldr	r2, [pc, #68]	; (80055a8 <SystemInit+0x88>)
 8005562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005566:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005568:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <SystemInit+0x88>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <SystemInit+0x88>)
 800556e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005572:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <SystemInit+0x88>)
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	4a0b      	ldr	r2, [pc, #44]	; (80055a8 <SystemInit+0x88>)
 800557a:	f023 030f 	bic.w	r3, r3, #15
 800557e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005580:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <SystemInit+0x88>)
 8005582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005584:	4908      	ldr	r1, [pc, #32]	; (80055a8 <SystemInit+0x88>)
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <SystemInit+0x90>)
 8005588:	4013      	ands	r3, r2
 800558a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <SystemInit+0x88>)
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005592:	4b04      	ldr	r3, [pc, #16]	; (80055a4 <SystemInit+0x84>)
 8005594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005598:	609a      	str	r2, [r3, #8]
#endif
}
 800559a:	bf00      	nop
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	e000ed00 	.word	0xe000ed00
 80055a8:	40021000 	.word	0x40021000
 80055ac:	f87fc00c 	.word	0xf87fc00c
 80055b0:	ff00fccc 	.word	0xff00fccc

080055b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80055b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80055b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80055ba:	e003      	b.n	80055c4 <LoopCopyDataInit>

080055bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80055be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80055c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80055c2:	3104      	adds	r1, #4

080055c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80055c4:	480b      	ldr	r0, [pc, #44]	; (80055f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80055c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80055ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80055cc:	d3f6      	bcc.n	80055bc <CopyDataInit>
	ldr	r2, =_sbss
 80055ce:	4a0b      	ldr	r2, [pc, #44]	; (80055fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80055d0:	e002      	b.n	80055d8 <LoopFillZerobss>

080055d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80055d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80055d4:	f842 3b04 	str.w	r3, [r2], #4

080055d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <LoopForever+0x16>)
	cmp	r2, r3
 80055da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80055dc:	d3f9      	bcc.n	80055d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055de:	f7ff ff9f 	bl	8005520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055e2:	f000 f817 	bl	8005614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055e6:	f7ff fb7d 	bl	8004ce4 <main>

080055ea <LoopForever>:

LoopForever:
    b LoopForever
 80055ea:	e7fe      	b.n	80055ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80055ec:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 80055f0:	080064fc 	.word	0x080064fc
	ldr	r0, =_sdata
 80055f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80055f8:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80055fc:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8005600:	200003c0 	.word	0x200003c0

08005604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005604:	e7fe      	b.n	8005604 <ADC1_IRQHandler>
	...

08005608 <__errno>:
 8005608:	4b01      	ldr	r3, [pc, #4]	; (8005610 <__errno+0x8>)
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000014 	.word	0x20000014

08005614 <__libc_init_array>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4e0d      	ldr	r6, [pc, #52]	; (800564c <__libc_init_array+0x38>)
 8005618:	4c0d      	ldr	r4, [pc, #52]	; (8005650 <__libc_init_array+0x3c>)
 800561a:	1ba4      	subs	r4, r4, r6
 800561c:	10a4      	asrs	r4, r4, #2
 800561e:	2500      	movs	r5, #0
 8005620:	42a5      	cmp	r5, r4
 8005622:	d109      	bne.n	8005638 <__libc_init_array+0x24>
 8005624:	4e0b      	ldr	r6, [pc, #44]	; (8005654 <__libc_init_array+0x40>)
 8005626:	4c0c      	ldr	r4, [pc, #48]	; (8005658 <__libc_init_array+0x44>)
 8005628:	f000 fc28 	bl	8005e7c <_init>
 800562c:	1ba4      	subs	r4, r4, r6
 800562e:	10a4      	asrs	r4, r4, #2
 8005630:	2500      	movs	r5, #0
 8005632:	42a5      	cmp	r5, r4
 8005634:	d105      	bne.n	8005642 <__libc_init_array+0x2e>
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800563c:	4798      	blx	r3
 800563e:	3501      	adds	r5, #1
 8005640:	e7ee      	b.n	8005620 <__libc_init_array+0xc>
 8005642:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005646:	4798      	blx	r3
 8005648:	3501      	adds	r5, #1
 800564a:	e7f2      	b.n	8005632 <__libc_init_array+0x1e>
 800564c:	080064f4 	.word	0x080064f4
 8005650:	080064f4 	.word	0x080064f4
 8005654:	080064f4 	.word	0x080064f4
 8005658:	080064f8 	.word	0x080064f8

0800565c <memcpy>:
 800565c:	b510      	push	{r4, lr}
 800565e:	1e43      	subs	r3, r0, #1
 8005660:	440a      	add	r2, r1
 8005662:	4291      	cmp	r1, r2
 8005664:	d100      	bne.n	8005668 <memcpy+0xc>
 8005666:	bd10      	pop	{r4, pc}
 8005668:	f811 4b01 	ldrb.w	r4, [r1], #1
 800566c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005670:	e7f7      	b.n	8005662 <memcpy+0x6>

08005672 <memset>:
 8005672:	4402      	add	r2, r0
 8005674:	4603      	mov	r3, r0
 8005676:	4293      	cmp	r3, r2
 8005678:	d100      	bne.n	800567c <memset+0xa>
 800567a:	4770      	bx	lr
 800567c:	f803 1b01 	strb.w	r1, [r3], #1
 8005680:	e7f9      	b.n	8005676 <memset+0x4>
	...

08005684 <siprintf>:
 8005684:	b40e      	push	{r1, r2, r3}
 8005686:	b500      	push	{lr}
 8005688:	b09c      	sub	sp, #112	; 0x70
 800568a:	ab1d      	add	r3, sp, #116	; 0x74
 800568c:	9002      	str	r0, [sp, #8]
 800568e:	9006      	str	r0, [sp, #24]
 8005690:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005694:	4809      	ldr	r0, [pc, #36]	; (80056bc <siprintf+0x38>)
 8005696:	9107      	str	r1, [sp, #28]
 8005698:	9104      	str	r1, [sp, #16]
 800569a:	4909      	ldr	r1, [pc, #36]	; (80056c0 <siprintf+0x3c>)
 800569c:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a0:	9105      	str	r1, [sp, #20]
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	a902      	add	r1, sp, #8
 80056a8:	f000 f866 	bl	8005778 <_svfiprintf_r>
 80056ac:	9b02      	ldr	r3, [sp, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	b01c      	add	sp, #112	; 0x70
 80056b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b8:	b003      	add	sp, #12
 80056ba:	4770      	bx	lr
 80056bc:	20000014 	.word	0x20000014
 80056c0:	ffff0208 	.word	0xffff0208

080056c4 <__ssputs_r>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	688e      	ldr	r6, [r1, #8]
 80056ca:	429e      	cmp	r6, r3
 80056cc:	4682      	mov	sl, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	4690      	mov	r8, r2
 80056d2:	4699      	mov	r9, r3
 80056d4:	d837      	bhi.n	8005746 <__ssputs_r+0x82>
 80056d6:	898a      	ldrh	r2, [r1, #12]
 80056d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056dc:	d031      	beq.n	8005742 <__ssputs_r+0x7e>
 80056de:	6825      	ldr	r5, [r4, #0]
 80056e0:	6909      	ldr	r1, [r1, #16]
 80056e2:	1a6f      	subs	r7, r5, r1
 80056e4:	6965      	ldr	r5, [r4, #20]
 80056e6:	2302      	movs	r3, #2
 80056e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80056f0:	f109 0301 	add.w	r3, r9, #1
 80056f4:	443b      	add	r3, r7
 80056f6:	429d      	cmp	r5, r3
 80056f8:	bf38      	it	cc
 80056fa:	461d      	movcc	r5, r3
 80056fc:	0553      	lsls	r3, r2, #21
 80056fe:	d530      	bpl.n	8005762 <__ssputs_r+0x9e>
 8005700:	4629      	mov	r1, r5
 8005702:	f000 fb21 	bl	8005d48 <_malloc_r>
 8005706:	4606      	mov	r6, r0
 8005708:	b950      	cbnz	r0, 8005720 <__ssputs_r+0x5c>
 800570a:	230c      	movs	r3, #12
 800570c:	f8ca 3000 	str.w	r3, [sl]
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005720:	463a      	mov	r2, r7
 8005722:	6921      	ldr	r1, [r4, #16]
 8005724:	f7ff ff9a 	bl	800565c <memcpy>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800572e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	6126      	str	r6, [r4, #16]
 8005736:	6165      	str	r5, [r4, #20]
 8005738:	443e      	add	r6, r7
 800573a:	1bed      	subs	r5, r5, r7
 800573c:	6026      	str	r6, [r4, #0]
 800573e:	60a5      	str	r5, [r4, #8]
 8005740:	464e      	mov	r6, r9
 8005742:	454e      	cmp	r6, r9
 8005744:	d900      	bls.n	8005748 <__ssputs_r+0x84>
 8005746:	464e      	mov	r6, r9
 8005748:	4632      	mov	r2, r6
 800574a:	4641      	mov	r1, r8
 800574c:	6820      	ldr	r0, [r4, #0]
 800574e:	f000 fa93 	bl	8005c78 <memmove>
 8005752:	68a3      	ldr	r3, [r4, #8]
 8005754:	1b9b      	subs	r3, r3, r6
 8005756:	60a3      	str	r3, [r4, #8]
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	441e      	add	r6, r3
 800575c:	6026      	str	r6, [r4, #0]
 800575e:	2000      	movs	r0, #0
 8005760:	e7dc      	b.n	800571c <__ssputs_r+0x58>
 8005762:	462a      	mov	r2, r5
 8005764:	f000 fb4a 	bl	8005dfc <_realloc_r>
 8005768:	4606      	mov	r6, r0
 800576a:	2800      	cmp	r0, #0
 800576c:	d1e2      	bne.n	8005734 <__ssputs_r+0x70>
 800576e:	6921      	ldr	r1, [r4, #16]
 8005770:	4650      	mov	r0, sl
 8005772:	f000 fa9b 	bl	8005cac <_free_r>
 8005776:	e7c8      	b.n	800570a <__ssputs_r+0x46>

08005778 <_svfiprintf_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	461d      	mov	r5, r3
 800577e:	898b      	ldrh	r3, [r1, #12]
 8005780:	061f      	lsls	r7, r3, #24
 8005782:	b09d      	sub	sp, #116	; 0x74
 8005784:	4680      	mov	r8, r0
 8005786:	460c      	mov	r4, r1
 8005788:	4616      	mov	r6, r2
 800578a:	d50f      	bpl.n	80057ac <_svfiprintf_r+0x34>
 800578c:	690b      	ldr	r3, [r1, #16]
 800578e:	b96b      	cbnz	r3, 80057ac <_svfiprintf_r+0x34>
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	f000 fad9 	bl	8005d48 <_malloc_r>
 8005796:	6020      	str	r0, [r4, #0]
 8005798:	6120      	str	r0, [r4, #16]
 800579a:	b928      	cbnz	r0, 80057a8 <_svfiprintf_r+0x30>
 800579c:	230c      	movs	r3, #12
 800579e:	f8c8 3000 	str.w	r3, [r8]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	e0c8      	b.n	800593a <_svfiprintf_r+0x1c2>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	6163      	str	r3, [r4, #20]
 80057ac:	2300      	movs	r3, #0
 80057ae:	9309      	str	r3, [sp, #36]	; 0x24
 80057b0:	2320      	movs	r3, #32
 80057b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057b6:	2330      	movs	r3, #48	; 0x30
 80057b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057bc:	9503      	str	r5, [sp, #12]
 80057be:	f04f 0b01 	mov.w	fp, #1
 80057c2:	4637      	mov	r7, r6
 80057c4:	463d      	mov	r5, r7
 80057c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057ca:	b10b      	cbz	r3, 80057d0 <_svfiprintf_r+0x58>
 80057cc:	2b25      	cmp	r3, #37	; 0x25
 80057ce:	d13e      	bne.n	800584e <_svfiprintf_r+0xd6>
 80057d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80057d4:	d00b      	beq.n	80057ee <_svfiprintf_r+0x76>
 80057d6:	4653      	mov	r3, sl
 80057d8:	4632      	mov	r2, r6
 80057da:	4621      	mov	r1, r4
 80057dc:	4640      	mov	r0, r8
 80057de:	f7ff ff71 	bl	80056c4 <__ssputs_r>
 80057e2:	3001      	adds	r0, #1
 80057e4:	f000 80a4 	beq.w	8005930 <_svfiprintf_r+0x1b8>
 80057e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ea:	4453      	add	r3, sl
 80057ec:	9309      	str	r3, [sp, #36]	; 0x24
 80057ee:	783b      	ldrb	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 809d 	beq.w	8005930 <_svfiprintf_r+0x1b8>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f04f 32ff 	mov.w	r2, #4294967295
 80057fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	9307      	str	r3, [sp, #28]
 8005804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005808:	931a      	str	r3, [sp, #104]	; 0x68
 800580a:	462f      	mov	r7, r5
 800580c:	2205      	movs	r2, #5
 800580e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005812:	4850      	ldr	r0, [pc, #320]	; (8005954 <_svfiprintf_r+0x1dc>)
 8005814:	f7fa fce4 	bl	80001e0 <memchr>
 8005818:	9b04      	ldr	r3, [sp, #16]
 800581a:	b9d0      	cbnz	r0, 8005852 <_svfiprintf_r+0xda>
 800581c:	06d9      	lsls	r1, r3, #27
 800581e:	bf44      	itt	mi
 8005820:	2220      	movmi	r2, #32
 8005822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005826:	071a      	lsls	r2, r3, #28
 8005828:	bf44      	itt	mi
 800582a:	222b      	movmi	r2, #43	; 0x2b
 800582c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005830:	782a      	ldrb	r2, [r5, #0]
 8005832:	2a2a      	cmp	r2, #42	; 0x2a
 8005834:	d015      	beq.n	8005862 <_svfiprintf_r+0xea>
 8005836:	9a07      	ldr	r2, [sp, #28]
 8005838:	462f      	mov	r7, r5
 800583a:	2000      	movs	r0, #0
 800583c:	250a      	movs	r5, #10
 800583e:	4639      	mov	r1, r7
 8005840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005844:	3b30      	subs	r3, #48	; 0x30
 8005846:	2b09      	cmp	r3, #9
 8005848:	d94d      	bls.n	80058e6 <_svfiprintf_r+0x16e>
 800584a:	b1b8      	cbz	r0, 800587c <_svfiprintf_r+0x104>
 800584c:	e00f      	b.n	800586e <_svfiprintf_r+0xf6>
 800584e:	462f      	mov	r7, r5
 8005850:	e7b8      	b.n	80057c4 <_svfiprintf_r+0x4c>
 8005852:	4a40      	ldr	r2, [pc, #256]	; (8005954 <_svfiprintf_r+0x1dc>)
 8005854:	1a80      	subs	r0, r0, r2
 8005856:	fa0b f000 	lsl.w	r0, fp, r0
 800585a:	4318      	orrs	r0, r3
 800585c:	9004      	str	r0, [sp, #16]
 800585e:	463d      	mov	r5, r7
 8005860:	e7d3      	b.n	800580a <_svfiprintf_r+0x92>
 8005862:	9a03      	ldr	r2, [sp, #12]
 8005864:	1d11      	adds	r1, r2, #4
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	9103      	str	r1, [sp, #12]
 800586a:	2a00      	cmp	r2, #0
 800586c:	db01      	blt.n	8005872 <_svfiprintf_r+0xfa>
 800586e:	9207      	str	r2, [sp, #28]
 8005870:	e004      	b.n	800587c <_svfiprintf_r+0x104>
 8005872:	4252      	negs	r2, r2
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	9207      	str	r2, [sp, #28]
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	783b      	ldrb	r3, [r7, #0]
 800587e:	2b2e      	cmp	r3, #46	; 0x2e
 8005880:	d10c      	bne.n	800589c <_svfiprintf_r+0x124>
 8005882:	787b      	ldrb	r3, [r7, #1]
 8005884:	2b2a      	cmp	r3, #42	; 0x2a
 8005886:	d133      	bne.n	80058f0 <_svfiprintf_r+0x178>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9203      	str	r2, [sp, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	bfb8      	it	lt
 8005894:	f04f 33ff 	movlt.w	r3, #4294967295
 8005898:	3702      	adds	r7, #2
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	4d2e      	ldr	r5, [pc, #184]	; (8005958 <_svfiprintf_r+0x1e0>)
 800589e:	7839      	ldrb	r1, [r7, #0]
 80058a0:	2203      	movs	r2, #3
 80058a2:	4628      	mov	r0, r5
 80058a4:	f7fa fc9c 	bl	80001e0 <memchr>
 80058a8:	b138      	cbz	r0, 80058ba <_svfiprintf_r+0x142>
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	1b40      	subs	r0, r0, r5
 80058ae:	fa03 f000 	lsl.w	r0, r3, r0
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	4303      	orrs	r3, r0
 80058b6:	3701      	adds	r7, #1
 80058b8:	9304      	str	r3, [sp, #16]
 80058ba:	7839      	ldrb	r1, [r7, #0]
 80058bc:	4827      	ldr	r0, [pc, #156]	; (800595c <_svfiprintf_r+0x1e4>)
 80058be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058c2:	2206      	movs	r2, #6
 80058c4:	1c7e      	adds	r6, r7, #1
 80058c6:	f7fa fc8b 	bl	80001e0 <memchr>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d038      	beq.n	8005940 <_svfiprintf_r+0x1c8>
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <_svfiprintf_r+0x1e8>)
 80058d0:	bb13      	cbnz	r3, 8005918 <_svfiprintf_r+0x1a0>
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	3307      	adds	r3, #7
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	3308      	adds	r3, #8
 80058dc:	9303      	str	r3, [sp, #12]
 80058de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e0:	444b      	add	r3, r9
 80058e2:	9309      	str	r3, [sp, #36]	; 0x24
 80058e4:	e76d      	b.n	80057c2 <_svfiprintf_r+0x4a>
 80058e6:	fb05 3202 	mla	r2, r5, r2, r3
 80058ea:	2001      	movs	r0, #1
 80058ec:	460f      	mov	r7, r1
 80058ee:	e7a6      	b.n	800583e <_svfiprintf_r+0xc6>
 80058f0:	2300      	movs	r3, #0
 80058f2:	3701      	adds	r7, #1
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	4619      	mov	r1, r3
 80058f8:	250a      	movs	r5, #10
 80058fa:	4638      	mov	r0, r7
 80058fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005900:	3a30      	subs	r2, #48	; 0x30
 8005902:	2a09      	cmp	r2, #9
 8005904:	d903      	bls.n	800590e <_svfiprintf_r+0x196>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0c8      	beq.n	800589c <_svfiprintf_r+0x124>
 800590a:	9105      	str	r1, [sp, #20]
 800590c:	e7c6      	b.n	800589c <_svfiprintf_r+0x124>
 800590e:	fb05 2101 	mla	r1, r5, r1, r2
 8005912:	2301      	movs	r3, #1
 8005914:	4607      	mov	r7, r0
 8005916:	e7f0      	b.n	80058fa <_svfiprintf_r+0x182>
 8005918:	ab03      	add	r3, sp, #12
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	4622      	mov	r2, r4
 800591e:	4b11      	ldr	r3, [pc, #68]	; (8005964 <_svfiprintf_r+0x1ec>)
 8005920:	a904      	add	r1, sp, #16
 8005922:	4640      	mov	r0, r8
 8005924:	f3af 8000 	nop.w
 8005928:	f1b0 3fff 	cmp.w	r0, #4294967295
 800592c:	4681      	mov	r9, r0
 800592e:	d1d6      	bne.n	80058de <_svfiprintf_r+0x166>
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	065b      	lsls	r3, r3, #25
 8005934:	f53f af35 	bmi.w	80057a2 <_svfiprintf_r+0x2a>
 8005938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800593a:	b01d      	add	sp, #116	; 0x74
 800593c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005940:	ab03      	add	r3, sp, #12
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	4622      	mov	r2, r4
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <_svfiprintf_r+0x1ec>)
 8005948:	a904      	add	r1, sp, #16
 800594a:	4640      	mov	r0, r8
 800594c:	f000 f882 	bl	8005a54 <_printf_i>
 8005950:	e7ea      	b.n	8005928 <_svfiprintf_r+0x1b0>
 8005952:	bf00      	nop
 8005954:	080064c0 	.word	0x080064c0
 8005958:	080064c6 	.word	0x080064c6
 800595c:	080064ca 	.word	0x080064ca
 8005960:	00000000 	.word	0x00000000
 8005964:	080056c5 	.word	0x080056c5

08005968 <_printf_common>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4691      	mov	r9, r2
 800596e:	461f      	mov	r7, r3
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005978:	4293      	cmp	r3, r2
 800597a:	bfb8      	it	lt
 800597c:	4613      	movlt	r3, r2
 800597e:	f8c9 3000 	str.w	r3, [r9]
 8005982:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005986:	4606      	mov	r6, r0
 8005988:	460c      	mov	r4, r1
 800598a:	b112      	cbz	r2, 8005992 <_printf_common+0x2a>
 800598c:	3301      	adds	r3, #1
 800598e:	f8c9 3000 	str.w	r3, [r9]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	0699      	lsls	r1, r3, #26
 8005996:	bf42      	ittt	mi
 8005998:	f8d9 3000 	ldrmi.w	r3, [r9]
 800599c:	3302      	addmi	r3, #2
 800599e:	f8c9 3000 	strmi.w	r3, [r9]
 80059a2:	6825      	ldr	r5, [r4, #0]
 80059a4:	f015 0506 	ands.w	r5, r5, #6
 80059a8:	d107      	bne.n	80059ba <_printf_common+0x52>
 80059aa:	f104 0a19 	add.w	sl, r4, #25
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	f8d9 2000 	ldr.w	r2, [r9]
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	42ab      	cmp	r3, r5
 80059b8:	dc28      	bgt.n	8005a0c <_printf_common+0xa4>
 80059ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	3300      	adds	r3, #0
 80059c2:	bf18      	it	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	0692      	lsls	r2, r2, #26
 80059c8:	d42d      	bmi.n	8005a26 <_printf_common+0xbe>
 80059ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ce:	4639      	mov	r1, r7
 80059d0:	4630      	mov	r0, r6
 80059d2:	47c0      	blx	r8
 80059d4:	3001      	adds	r0, #1
 80059d6:	d020      	beq.n	8005a1a <_printf_common+0xb2>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	68e5      	ldr	r5, [r4, #12]
 80059dc:	f8d9 2000 	ldr.w	r2, [r9]
 80059e0:	f003 0306 	and.w	r3, r3, #6
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	bf08      	it	eq
 80059e8:	1aad      	subeq	r5, r5, r2
 80059ea:	68a3      	ldr	r3, [r4, #8]
 80059ec:	6922      	ldr	r2, [r4, #16]
 80059ee:	bf0c      	ite	eq
 80059f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059f4:	2500      	movne	r5, #0
 80059f6:	4293      	cmp	r3, r2
 80059f8:	bfc4      	itt	gt
 80059fa:	1a9b      	subgt	r3, r3, r2
 80059fc:	18ed      	addgt	r5, r5, r3
 80059fe:	f04f 0900 	mov.w	r9, #0
 8005a02:	341a      	adds	r4, #26
 8005a04:	454d      	cmp	r5, r9
 8005a06:	d11a      	bne.n	8005a3e <_printf_common+0xd6>
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e008      	b.n	8005a1e <_printf_common+0xb6>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4652      	mov	r2, sl
 8005a10:	4639      	mov	r1, r7
 8005a12:	4630      	mov	r0, r6
 8005a14:	47c0      	blx	r8
 8005a16:	3001      	adds	r0, #1
 8005a18:	d103      	bne.n	8005a22 <_printf_common+0xba>
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a22:	3501      	adds	r5, #1
 8005a24:	e7c3      	b.n	80059ae <_printf_common+0x46>
 8005a26:	18e1      	adds	r1, r4, r3
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	2030      	movs	r0, #48	; 0x30
 8005a2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a30:	4422      	add	r2, r4
 8005a32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	e7c5      	b.n	80059ca <_printf_common+0x62>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4622      	mov	r2, r4
 8005a42:	4639      	mov	r1, r7
 8005a44:	4630      	mov	r0, r6
 8005a46:	47c0      	blx	r8
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d0e6      	beq.n	8005a1a <_printf_common+0xb2>
 8005a4c:	f109 0901 	add.w	r9, r9, #1
 8005a50:	e7d8      	b.n	8005a04 <_printf_common+0x9c>
	...

08005a54 <_printf_i>:
 8005a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	7e09      	ldrb	r1, [r1, #24]
 8005a60:	b085      	sub	sp, #20
 8005a62:	296e      	cmp	r1, #110	; 0x6e
 8005a64:	4617      	mov	r7, r2
 8005a66:	4606      	mov	r6, r0
 8005a68:	4698      	mov	r8, r3
 8005a6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a6c:	f000 80b3 	beq.w	8005bd6 <_printf_i+0x182>
 8005a70:	d822      	bhi.n	8005ab8 <_printf_i+0x64>
 8005a72:	2963      	cmp	r1, #99	; 0x63
 8005a74:	d036      	beq.n	8005ae4 <_printf_i+0x90>
 8005a76:	d80a      	bhi.n	8005a8e <_printf_i+0x3a>
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	f000 80b9 	beq.w	8005bf0 <_printf_i+0x19c>
 8005a7e:	2958      	cmp	r1, #88	; 0x58
 8005a80:	f000 8083 	beq.w	8005b8a <_printf_i+0x136>
 8005a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a8c:	e032      	b.n	8005af4 <_printf_i+0xa0>
 8005a8e:	2964      	cmp	r1, #100	; 0x64
 8005a90:	d001      	beq.n	8005a96 <_printf_i+0x42>
 8005a92:	2969      	cmp	r1, #105	; 0x69
 8005a94:	d1f6      	bne.n	8005a84 <_printf_i+0x30>
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	6813      	ldr	r3, [r2, #0]
 8005a9a:	0605      	lsls	r5, r0, #24
 8005a9c:	f103 0104 	add.w	r1, r3, #4
 8005aa0:	d52a      	bpl.n	8005af8 <_printf_i+0xa4>
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da03      	bge.n	8005ab2 <_printf_i+0x5e>
 8005aaa:	222d      	movs	r2, #45	; 0x2d
 8005aac:	425b      	negs	r3, r3
 8005aae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ab2:	486f      	ldr	r0, [pc, #444]	; (8005c70 <_printf_i+0x21c>)
 8005ab4:	220a      	movs	r2, #10
 8005ab6:	e039      	b.n	8005b2c <_printf_i+0xd8>
 8005ab8:	2973      	cmp	r1, #115	; 0x73
 8005aba:	f000 809d 	beq.w	8005bf8 <_printf_i+0x1a4>
 8005abe:	d808      	bhi.n	8005ad2 <_printf_i+0x7e>
 8005ac0:	296f      	cmp	r1, #111	; 0x6f
 8005ac2:	d020      	beq.n	8005b06 <_printf_i+0xb2>
 8005ac4:	2970      	cmp	r1, #112	; 0x70
 8005ac6:	d1dd      	bne.n	8005a84 <_printf_i+0x30>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f043 0320 	orr.w	r3, r3, #32
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	e003      	b.n	8005ada <_printf_i+0x86>
 8005ad2:	2975      	cmp	r1, #117	; 0x75
 8005ad4:	d017      	beq.n	8005b06 <_printf_i+0xb2>
 8005ad6:	2978      	cmp	r1, #120	; 0x78
 8005ad8:	d1d4      	bne.n	8005a84 <_printf_i+0x30>
 8005ada:	2378      	movs	r3, #120	; 0x78
 8005adc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ae0:	4864      	ldr	r0, [pc, #400]	; (8005c74 <_printf_i+0x220>)
 8005ae2:	e055      	b.n	8005b90 <_printf_i+0x13c>
 8005ae4:	6813      	ldr	r3, [r2, #0]
 8005ae6:	1d19      	adds	r1, r3, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6011      	str	r1, [r2, #0]
 8005aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005af4:	2301      	movs	r3, #1
 8005af6:	e08c      	b.n	8005c12 <_printf_i+0x1be>
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6011      	str	r1, [r2, #0]
 8005afc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b00:	bf18      	it	ne
 8005b02:	b21b      	sxthne	r3, r3
 8005b04:	e7cf      	b.n	8005aa6 <_printf_i+0x52>
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	6825      	ldr	r5, [r4, #0]
 8005b0a:	1d18      	adds	r0, r3, #4
 8005b0c:	6010      	str	r0, [r2, #0]
 8005b0e:	0628      	lsls	r0, r5, #24
 8005b10:	d501      	bpl.n	8005b16 <_printf_i+0xc2>
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	e002      	b.n	8005b1c <_printf_i+0xc8>
 8005b16:	0668      	lsls	r0, r5, #25
 8005b18:	d5fb      	bpl.n	8005b12 <_printf_i+0xbe>
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	4854      	ldr	r0, [pc, #336]	; (8005c70 <_printf_i+0x21c>)
 8005b1e:	296f      	cmp	r1, #111	; 0x6f
 8005b20:	bf14      	ite	ne
 8005b22:	220a      	movne	r2, #10
 8005b24:	2208      	moveq	r2, #8
 8005b26:	2100      	movs	r1, #0
 8005b28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b2c:	6865      	ldr	r5, [r4, #4]
 8005b2e:	60a5      	str	r5, [r4, #8]
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	f2c0 8095 	blt.w	8005c60 <_printf_i+0x20c>
 8005b36:	6821      	ldr	r1, [r4, #0]
 8005b38:	f021 0104 	bic.w	r1, r1, #4
 8005b3c:	6021      	str	r1, [r4, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d13d      	bne.n	8005bbe <_printf_i+0x16a>
 8005b42:	2d00      	cmp	r5, #0
 8005b44:	f040 808e 	bne.w	8005c64 <_printf_i+0x210>
 8005b48:	4665      	mov	r5, ip
 8005b4a:	2a08      	cmp	r2, #8
 8005b4c:	d10b      	bne.n	8005b66 <_printf_i+0x112>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	07db      	lsls	r3, r3, #31
 8005b52:	d508      	bpl.n	8005b66 <_printf_i+0x112>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	bfde      	ittt	le
 8005b5c:	2330      	movle	r3, #48	; 0x30
 8005b5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b66:	ebac 0305 	sub.w	r3, ip, r5
 8005b6a:	6123      	str	r3, [r4, #16]
 8005b6c:	f8cd 8000 	str.w	r8, [sp]
 8005b70:	463b      	mov	r3, r7
 8005b72:	aa03      	add	r2, sp, #12
 8005b74:	4621      	mov	r1, r4
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7ff fef6 	bl	8005968 <_printf_common>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d14d      	bne.n	8005c1c <_printf_i+0x1c8>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	b005      	add	sp, #20
 8005b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	4839      	ldr	r0, [pc, #228]	; (8005c70 <_printf_i+0x21c>)
 8005b8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	6821      	ldr	r1, [r4, #0]
 8005b94:	1d1d      	adds	r5, r3, #4
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6015      	str	r5, [r2, #0]
 8005b9a:	060a      	lsls	r2, r1, #24
 8005b9c:	d50b      	bpl.n	8005bb6 <_printf_i+0x162>
 8005b9e:	07ca      	lsls	r2, r1, #31
 8005ba0:	bf44      	itt	mi
 8005ba2:	f041 0120 	orrmi.w	r1, r1, #32
 8005ba6:	6021      	strmi	r1, [r4, #0]
 8005ba8:	b91b      	cbnz	r3, 8005bb2 <_printf_i+0x15e>
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	f022 0220 	bic.w	r2, r2, #32
 8005bb0:	6022      	str	r2, [r4, #0]
 8005bb2:	2210      	movs	r2, #16
 8005bb4:	e7b7      	b.n	8005b26 <_printf_i+0xd2>
 8005bb6:	064d      	lsls	r5, r1, #25
 8005bb8:	bf48      	it	mi
 8005bba:	b29b      	uxthmi	r3, r3
 8005bbc:	e7ef      	b.n	8005b9e <_printf_i+0x14a>
 8005bbe:	4665      	mov	r5, ip
 8005bc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bc4:	fb02 3311 	mls	r3, r2, r1, r3
 8005bc8:	5cc3      	ldrb	r3, [r0, r3]
 8005bca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bce:	460b      	mov	r3, r1
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	d1f5      	bne.n	8005bc0 <_printf_i+0x16c>
 8005bd4:	e7b9      	b.n	8005b4a <_printf_i+0xf6>
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	6825      	ldr	r5, [r4, #0]
 8005bda:	6961      	ldr	r1, [r4, #20]
 8005bdc:	1d18      	adds	r0, r3, #4
 8005bde:	6010      	str	r0, [r2, #0]
 8005be0:	0628      	lsls	r0, r5, #24
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	d501      	bpl.n	8005bea <_printf_i+0x196>
 8005be6:	6019      	str	r1, [r3, #0]
 8005be8:	e002      	b.n	8005bf0 <_printf_i+0x19c>
 8005bea:	066a      	lsls	r2, r5, #25
 8005bec:	d5fb      	bpl.n	8005be6 <_printf_i+0x192>
 8005bee:	8019      	strh	r1, [r3, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6123      	str	r3, [r4, #16]
 8005bf4:	4665      	mov	r5, ip
 8005bf6:	e7b9      	b.n	8005b6c <_printf_i+0x118>
 8005bf8:	6813      	ldr	r3, [r2, #0]
 8005bfa:	1d19      	adds	r1, r3, #4
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	681d      	ldr	r5, [r3, #0]
 8005c00:	6862      	ldr	r2, [r4, #4]
 8005c02:	2100      	movs	r1, #0
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7fa faeb 	bl	80001e0 <memchr>
 8005c0a:	b108      	cbz	r0, 8005c10 <_printf_i+0x1bc>
 8005c0c:	1b40      	subs	r0, r0, r5
 8005c0e:	6060      	str	r0, [r4, #4]
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2300      	movs	r3, #0
 8005c16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c1a:	e7a7      	b.n	8005b6c <_printf_i+0x118>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	462a      	mov	r2, r5
 8005c20:	4639      	mov	r1, r7
 8005c22:	4630      	mov	r0, r6
 8005c24:	47c0      	blx	r8
 8005c26:	3001      	adds	r0, #1
 8005c28:	d0aa      	beq.n	8005b80 <_printf_i+0x12c>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	079b      	lsls	r3, r3, #30
 8005c2e:	d413      	bmi.n	8005c58 <_printf_i+0x204>
 8005c30:	68e0      	ldr	r0, [r4, #12]
 8005c32:	9b03      	ldr	r3, [sp, #12]
 8005c34:	4298      	cmp	r0, r3
 8005c36:	bfb8      	it	lt
 8005c38:	4618      	movlt	r0, r3
 8005c3a:	e7a3      	b.n	8005b84 <_printf_i+0x130>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	464a      	mov	r2, r9
 8005c40:	4639      	mov	r1, r7
 8005c42:	4630      	mov	r0, r6
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d09a      	beq.n	8005b80 <_printf_i+0x12c>
 8005c4a:	3501      	adds	r5, #1
 8005c4c:	68e3      	ldr	r3, [r4, #12]
 8005c4e:	9a03      	ldr	r2, [sp, #12]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	dcf2      	bgt.n	8005c3c <_printf_i+0x1e8>
 8005c56:	e7eb      	b.n	8005c30 <_printf_i+0x1dc>
 8005c58:	2500      	movs	r5, #0
 8005c5a:	f104 0919 	add.w	r9, r4, #25
 8005c5e:	e7f5      	b.n	8005c4c <_printf_i+0x1f8>
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ac      	bne.n	8005bbe <_printf_i+0x16a>
 8005c64:	7803      	ldrb	r3, [r0, #0]
 8005c66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c6e:	e76c      	b.n	8005b4a <_printf_i+0xf6>
 8005c70:	080064d1 	.word	0x080064d1
 8005c74:	080064e2 	.word	0x080064e2

08005c78 <memmove>:
 8005c78:	4288      	cmp	r0, r1
 8005c7a:	b510      	push	{r4, lr}
 8005c7c:	eb01 0302 	add.w	r3, r1, r2
 8005c80:	d807      	bhi.n	8005c92 <memmove+0x1a>
 8005c82:	1e42      	subs	r2, r0, #1
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d00a      	beq.n	8005c9e <memmove+0x26>
 8005c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c90:	e7f8      	b.n	8005c84 <memmove+0xc>
 8005c92:	4283      	cmp	r3, r0
 8005c94:	d9f5      	bls.n	8005c82 <memmove+0xa>
 8005c96:	1881      	adds	r1, r0, r2
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	42d3      	cmn	r3, r2
 8005c9c:	d100      	bne.n	8005ca0 <memmove+0x28>
 8005c9e:	bd10      	pop	{r4, pc}
 8005ca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ca4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ca8:	e7f7      	b.n	8005c9a <memmove+0x22>
	...

08005cac <_free_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4605      	mov	r5, r0
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	d045      	beq.n	8005d40 <_free_r+0x94>
 8005cb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb8:	1f0c      	subs	r4, r1, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bfb8      	it	lt
 8005cbe:	18e4      	addlt	r4, r4, r3
 8005cc0:	f000 f8d2 	bl	8005e68 <__malloc_lock>
 8005cc4:	4a1f      	ldr	r2, [pc, #124]	; (8005d44 <_free_r+0x98>)
 8005cc6:	6813      	ldr	r3, [r2, #0]
 8005cc8:	4610      	mov	r0, r2
 8005cca:	b933      	cbnz	r3, 8005cda <_free_r+0x2e>
 8005ccc:	6063      	str	r3, [r4, #4]
 8005cce:	6014      	str	r4, [r2, #0]
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd6:	f000 b8c8 	b.w	8005e6a <__malloc_unlock>
 8005cda:	42a3      	cmp	r3, r4
 8005cdc:	d90c      	bls.n	8005cf8 <_free_r+0x4c>
 8005cde:	6821      	ldr	r1, [r4, #0]
 8005ce0:	1862      	adds	r2, r4, r1
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bf04      	itt	eq
 8005ce6:	681a      	ldreq	r2, [r3, #0]
 8005ce8:	685b      	ldreq	r3, [r3, #4]
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	bf04      	itt	eq
 8005cee:	1852      	addeq	r2, r2, r1
 8005cf0:	6022      	streq	r2, [r4, #0]
 8005cf2:	6004      	str	r4, [r0, #0]
 8005cf4:	e7ec      	b.n	8005cd0 <_free_r+0x24>
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	b10a      	cbz	r2, 8005d00 <_free_r+0x54>
 8005cfc:	42a2      	cmp	r2, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x4a>
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	1858      	adds	r0, r3, r1
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x74>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	4401      	add	r1, r0
 8005d0c:	1858      	adds	r0, r3, r1
 8005d0e:	4282      	cmp	r2, r0
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	d1dd      	bne.n	8005cd0 <_free_r+0x24>
 8005d14:	6810      	ldr	r0, [r2, #0]
 8005d16:	6852      	ldr	r2, [r2, #4]
 8005d18:	605a      	str	r2, [r3, #4]
 8005d1a:	4401      	add	r1, r0
 8005d1c:	6019      	str	r1, [r3, #0]
 8005d1e:	e7d7      	b.n	8005cd0 <_free_r+0x24>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x7c>
 8005d22:	230c      	movs	r3, #12
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	e7d3      	b.n	8005cd0 <_free_r+0x24>
 8005d28:	6820      	ldr	r0, [r4, #0]
 8005d2a:	1821      	adds	r1, r4, r0
 8005d2c:	428a      	cmp	r2, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6811      	ldreq	r1, [r2, #0]
 8005d32:	6852      	ldreq	r2, [r2, #4]
 8005d34:	6062      	str	r2, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1809      	addeq	r1, r1, r0
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	605c      	str	r4, [r3, #4]
 8005d3e:	e7c7      	b.n	8005cd0 <_free_r+0x24>
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	bf00      	nop
 8005d44:	2000017c 	.word	0x2000017c

08005d48 <_malloc_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	1ccd      	adds	r5, r1, #3
 8005d4c:	f025 0503 	bic.w	r5, r5, #3
 8005d50:	3508      	adds	r5, #8
 8005d52:	2d0c      	cmp	r5, #12
 8005d54:	bf38      	it	cc
 8005d56:	250c      	movcc	r5, #12
 8005d58:	2d00      	cmp	r5, #0
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	db01      	blt.n	8005d62 <_malloc_r+0x1a>
 8005d5e:	42a9      	cmp	r1, r5
 8005d60:	d903      	bls.n	8005d6a <_malloc_r+0x22>
 8005d62:	230c      	movs	r3, #12
 8005d64:	6033      	str	r3, [r6, #0]
 8005d66:	2000      	movs	r0, #0
 8005d68:	bd70      	pop	{r4, r5, r6, pc}
 8005d6a:	f000 f87d 	bl	8005e68 <__malloc_lock>
 8005d6e:	4a21      	ldr	r2, [pc, #132]	; (8005df4 <_malloc_r+0xac>)
 8005d70:	6814      	ldr	r4, [r2, #0]
 8005d72:	4621      	mov	r1, r4
 8005d74:	b991      	cbnz	r1, 8005d9c <_malloc_r+0x54>
 8005d76:	4c20      	ldr	r4, [pc, #128]	; (8005df8 <_malloc_r+0xb0>)
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	b91b      	cbnz	r3, 8005d84 <_malloc_r+0x3c>
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f863 	bl	8005e48 <_sbrk_r>
 8005d82:	6020      	str	r0, [r4, #0]
 8005d84:	4629      	mov	r1, r5
 8005d86:	4630      	mov	r0, r6
 8005d88:	f000 f85e 	bl	8005e48 <_sbrk_r>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d124      	bne.n	8005dda <_malloc_r+0x92>
 8005d90:	230c      	movs	r3, #12
 8005d92:	6033      	str	r3, [r6, #0]
 8005d94:	4630      	mov	r0, r6
 8005d96:	f000 f868 	bl	8005e6a <__malloc_unlock>
 8005d9a:	e7e4      	b.n	8005d66 <_malloc_r+0x1e>
 8005d9c:	680b      	ldr	r3, [r1, #0]
 8005d9e:	1b5b      	subs	r3, r3, r5
 8005da0:	d418      	bmi.n	8005dd4 <_malloc_r+0x8c>
 8005da2:	2b0b      	cmp	r3, #11
 8005da4:	d90f      	bls.n	8005dc6 <_malloc_r+0x7e>
 8005da6:	600b      	str	r3, [r1, #0]
 8005da8:	50cd      	str	r5, [r1, r3]
 8005daa:	18cc      	adds	r4, r1, r3
 8005dac:	4630      	mov	r0, r6
 8005dae:	f000 f85c 	bl	8005e6a <__malloc_unlock>
 8005db2:	f104 000b 	add.w	r0, r4, #11
 8005db6:	1d23      	adds	r3, r4, #4
 8005db8:	f020 0007 	bic.w	r0, r0, #7
 8005dbc:	1ac3      	subs	r3, r0, r3
 8005dbe:	d0d3      	beq.n	8005d68 <_malloc_r+0x20>
 8005dc0:	425a      	negs	r2, r3
 8005dc2:	50e2      	str	r2, [r4, r3]
 8005dc4:	e7d0      	b.n	8005d68 <_malloc_r+0x20>
 8005dc6:	428c      	cmp	r4, r1
 8005dc8:	684b      	ldr	r3, [r1, #4]
 8005dca:	bf16      	itet	ne
 8005dcc:	6063      	strne	r3, [r4, #4]
 8005dce:	6013      	streq	r3, [r2, #0]
 8005dd0:	460c      	movne	r4, r1
 8005dd2:	e7eb      	b.n	8005dac <_malloc_r+0x64>
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	6849      	ldr	r1, [r1, #4]
 8005dd8:	e7cc      	b.n	8005d74 <_malloc_r+0x2c>
 8005dda:	1cc4      	adds	r4, r0, #3
 8005ddc:	f024 0403 	bic.w	r4, r4, #3
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d005      	beq.n	8005df0 <_malloc_r+0xa8>
 8005de4:	1a21      	subs	r1, r4, r0
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 f82e 	bl	8005e48 <_sbrk_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d0cf      	beq.n	8005d90 <_malloc_r+0x48>
 8005df0:	6025      	str	r5, [r4, #0]
 8005df2:	e7db      	b.n	8005dac <_malloc_r+0x64>
 8005df4:	2000017c 	.word	0x2000017c
 8005df8:	20000180 	.word	0x20000180

08005dfc <_realloc_r>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	4607      	mov	r7, r0
 8005e00:	4614      	mov	r4, r2
 8005e02:	460e      	mov	r6, r1
 8005e04:	b921      	cbnz	r1, 8005e10 <_realloc_r+0x14>
 8005e06:	4611      	mov	r1, r2
 8005e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e0c:	f7ff bf9c 	b.w	8005d48 <_malloc_r>
 8005e10:	b922      	cbnz	r2, 8005e1c <_realloc_r+0x20>
 8005e12:	f7ff ff4b 	bl	8005cac <_free_r>
 8005e16:	4625      	mov	r5, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e1c:	f000 f826 	bl	8005e6c <_malloc_usable_size_r>
 8005e20:	42a0      	cmp	r0, r4
 8005e22:	d20f      	bcs.n	8005e44 <_realloc_r+0x48>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4638      	mov	r0, r7
 8005e28:	f7ff ff8e 	bl	8005d48 <_malloc_r>
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d0f2      	beq.n	8005e18 <_realloc_r+0x1c>
 8005e32:	4631      	mov	r1, r6
 8005e34:	4622      	mov	r2, r4
 8005e36:	f7ff fc11 	bl	800565c <memcpy>
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f7ff ff35 	bl	8005cac <_free_r>
 8005e42:	e7e9      	b.n	8005e18 <_realloc_r+0x1c>
 8005e44:	4635      	mov	r5, r6
 8005e46:	e7e7      	b.n	8005e18 <_realloc_r+0x1c>

08005e48 <_sbrk_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4c06      	ldr	r4, [pc, #24]	; (8005e64 <_sbrk_r+0x1c>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4605      	mov	r5, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	f7ff fb38 	bl	80054c8 <_sbrk>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_sbrk_r+0x1a>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_sbrk_r+0x1a>
 8005e60:	602b      	str	r3, [r5, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	200003bc 	.word	0x200003bc

08005e68 <__malloc_lock>:
 8005e68:	4770      	bx	lr

08005e6a <__malloc_unlock>:
 8005e6a:	4770      	bx	lr

08005e6c <_malloc_usable_size_r>:
 8005e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e70:	1f18      	subs	r0, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bfbc      	itt	lt
 8005e76:	580b      	ldrlt	r3, [r1, r0]
 8005e78:	18c0      	addlt	r0, r0, r3
 8005e7a:	4770      	bx	lr

08005e7c <_init>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr

08005e88 <_fini>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr
