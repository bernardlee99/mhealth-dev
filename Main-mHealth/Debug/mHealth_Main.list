
mHealth_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce8  08007ce8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf0  08007cf0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007cf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000078  08007d70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08007d70  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001470f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027b3  00000000  00000000  000347b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001018  00000000  00000000  000380c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000276c8  00000000  00000000  000390d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d86c  00000000  00000000  000607a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eda1d  00000000  00000000  0006e00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ba29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  0015baa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007654 	.word	0x08007654

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007654 	.word	0x08007654

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f93c 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f006 fa41 	bl	8006a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f93c 	bl	8000856 <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 f914 	bl	800081e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	20000010 	.word	0x20000010
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000198 	.word	0x20000198
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000198 	.word	0x20000198

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000678:	d004      	beq.n	8000684 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_Delay+0x40>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000684:	bf00      	nop
 8000686:	f7ff ffdf 	bl	8000648 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	d8f7      	bhi.n	8000686 <HAL_Delay+0x26>
  {
  }
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000004 	.word	0x20000004

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800087c:	2300      	movs	r3, #0
 800087e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000886:	2b01      	cmp	r3, #1
 8000888:	d101      	bne.n	800088e <HAL_DMA_Start_IT+0x20>
 800088a:	2302      	movs	r3, #2
 800088c:	e04b      	b.n	8000926 <HAL_DMA_Start_IT+0xb8>
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d13a      	bne.n	8000918 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2202      	movs	r2, #2
 80008a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2200      	movs	r2, #0
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 0201 	bic.w	r2, r2, #1
 80008be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f831 	bl	800092e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 020e 	orr.w	r2, r2, #14
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e00f      	b.n	8000906 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 0204 	bic.w	r2, r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 020a 	orr.w	r2, r2, #10
 8000904:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0201 	orr.w	r2, r2, #1
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e005      	b.n	8000924 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000920:	2302      	movs	r3, #2
 8000922:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000924:	7dfb      	ldrb	r3, [r7, #23]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	f003 021c 	and.w	r2, r3, #28
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b10      	cmp	r3, #16
 800095e:	d108      	bne.n	8000972 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000970:	e007      	b.n	8000982 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e17f      	b.n	8000ca0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8171 	beq.w	8000c9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x38>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b12      	cmp	r3, #18
 80009c6:	d123      	bne.n	8000a10 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	08da      	lsrs	r2, r3, #3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3208      	adds	r2, #8
 80009d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0203 	and.w	r2, r3, #3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d00b      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b12      	cmp	r3, #18
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d118      	bne.n	8000b04 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	f003 0201 	and.w	r2, r3, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 80ac 	beq.w	8000c9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b5e      	ldr	r3, [pc, #376]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	4a5d      	ldr	r2, [pc, #372]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4e:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5a:	4a59      	ldr	r2, [pc, #356]	; (8000cc0 <HAL_GPIO_Init+0x330>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b84:	d025      	beq.n	8000bd2 <HAL_GPIO_Init+0x242>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4e      	ldr	r2, [pc, #312]	; (8000cc4 <HAL_GPIO_Init+0x334>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d01f      	beq.n	8000bce <HAL_GPIO_Init+0x23e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4d      	ldr	r2, [pc, #308]	; (8000cc8 <HAL_GPIO_Init+0x338>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d019      	beq.n	8000bca <HAL_GPIO_Init+0x23a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <HAL_GPIO_Init+0x33c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d013      	beq.n	8000bc6 <HAL_GPIO_Init+0x236>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4b      	ldr	r2, [pc, #300]	; (8000cd0 <HAL_GPIO_Init+0x340>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d00d      	beq.n	8000bc2 <HAL_GPIO_Init+0x232>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <HAL_GPIO_Init+0x344>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d007      	beq.n	8000bbe <HAL_GPIO_Init+0x22e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <HAL_GPIO_Init+0x348>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_GPIO_Init+0x22a>
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	e00c      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bba:	2307      	movs	r3, #7
 8000bbc:	e00a      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	e008      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e004      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	f002 0203 	and.w	r2, r2, #3
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000be4:	4936      	ldr	r1, [pc, #216]	; (8000cc0 <HAL_GPIO_Init+0x330>)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	3302      	adds	r3, #2
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c16:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c40:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f47f ae78 	bne.w	80009a0 <HAL_GPIO_Init+0x10>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	48001000 	.word	0x48001000
 8000cd4:	48001400 	.word	0x48001400
 8000cd8:	48001800 	.word	0x48001800
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e081      	b.n	8000e26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d106      	bne.n	8000d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f005 fe9a 	bl	8006a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2224      	movs	r2, #36	; 0x24
 8000d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0201 	bic.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	e006      	b.n	8000d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d104      	bne.n	8000daa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000da8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691a      	ldr	r2, [r3, #16]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	ea42 0103 	orr.w	r1, r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	021a      	lsls	r2, r3, #8
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69d9      	ldr	r1, [r3, #28]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1a      	ldr	r2, [r3, #32]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2220      	movs	r2, #32
 8000e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	817b      	strh	r3, [r7, #10]
 8000e40:	4613      	mov	r3, r2
 8000e42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b20      	cmp	r3, #32
 8000e4e:	f040 80da 	bne.w	8001006 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_I2C_Master_Transmit+0x30>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e0d3      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1d8>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e68:	f7ff fbee 	bl	8000648 <HAL_GetTick>
 8000e6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2319      	movs	r3, #25
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f000 f9e6 	bl	800124c <I2C_WaitOnFlagUntilTimeout>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0be      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2221      	movs	r2, #33	; 0x21
 8000e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2210      	movs	r2, #16
 8000e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	893a      	ldrh	r2, [r7, #8]
 8000eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	2bff      	cmp	r3, #255	; 0xff
 8000eba:	d90e      	bls.n	8000eda <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	22ff      	movs	r2, #255	; 0xff
 8000ec0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	8979      	ldrh	r1, [r7, #10]
 8000eca:	4b51      	ldr	r3, [pc, #324]	; (8001010 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 fb48 	bl	8001568 <I2C_TransferConfig>
 8000ed8:	e06c      	b.n	8000fb4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	8979      	ldrh	r1, [r7, #10]
 8000eec:	4b48      	ldr	r3, [pc, #288]	; (8001010 <HAL_I2C_Master_Transmit+0x1e0>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f000 fb37 	bl	8001568 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000efa:	e05b      	b.n	8000fb4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000efc:	697a      	ldr	r2, [r7, #20]
 8000efe:	6a39      	ldr	r1, [r7, #32]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f000 f9e3 	bl	80012cc <I2C_WaitOnTXISFlagUntilTimeout>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e07b      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d034      	beq.n	8000fb4 <HAL_I2C_Master_Transmit+0x184>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d130      	bne.n	8000fb4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	6a3b      	ldr	r3, [r7, #32]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f000 f975 	bl	800124c <I2C_WaitOnFlagUntilTimeout>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e04d      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d90e      	bls.n	8000f94 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	22ff      	movs	r2, #255	; 0xff
 8000f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	8979      	ldrh	r1, [r7, #10]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 faeb 	bl	8001568 <I2C_TransferConfig>
 8000f92:	e00f      	b.n	8000fb4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	8979      	ldrh	r1, [r7, #10]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9300      	str	r3, [sp, #0]
 8000faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 fada 	bl	8001568 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d19e      	bne.n	8000efc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	6a39      	ldr	r1, [r7, #32]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f9c2 	bl	800134c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e01a      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6859      	ldr	r1, [r3, #4]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_I2C_Master_Transmit+0x1e4>)
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2220      	movs	r2, #32
 8000fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001006:	2302      	movs	r3, #2
  }
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	80002000 	.word	0x80002000
 8001014:	fe00e800 	.word	0xfe00e800

08001018 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	461a      	mov	r2, r3
 8001024:	460b      	mov	r3, r1
 8001026:	817b      	strh	r3, [r7, #10]
 8001028:	4613      	mov	r3, r2
 800102a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b20      	cmp	r3, #32
 8001036:	f040 80db 	bne.w	80011f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_I2C_Master_Receive+0x30>
 8001044:	2302      	movs	r3, #2
 8001046:	e0d4      	b.n	80011f2 <HAL_I2C_Master_Receive+0x1da>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001050:	f7ff fafa 	bl	8000648 <HAL_GetTick>
 8001054:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2319      	movs	r3, #25
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f000 f8f2 	bl	800124c <I2C_WaitOnFlagUntilTimeout>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0bf      	b.n	80011f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	2222      	movs	r2, #34	; 0x22
 8001076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2210      	movs	r2, #16
 800107e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2200      	movs	r2, #0
 8001086:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	893a      	ldrh	r2, [r7, #8]
 8001092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2bff      	cmp	r3, #255	; 0xff
 80010a2:	d90e      	bls.n	80010c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	22ff      	movs	r2, #255	; 0xff
 80010a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	8979      	ldrh	r1, [r7, #10]
 80010b2:	4b52      	ldr	r3, [pc, #328]	; (80011fc <HAL_I2C_Master_Receive+0x1e4>)
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 fa54 	bl	8001568 <I2C_TransferConfig>
 80010c0:	e06d      	b.n	800119e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	8979      	ldrh	r1, [r7, #10]
 80010d4:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_I2C_Master_Receive+0x1e4>)
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fa43 	bl	8001568 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010e2:	e05c      	b.n	800119e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	6a39      	ldr	r1, [r7, #32]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f96b 	bl	80013c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e07c      	b.n	80011f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001114:	3b01      	subs	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001120:	b29b      	uxth	r3, r3
 8001122:	3b01      	subs	r3, #1
 8001124:	b29a      	uxth	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112e:	b29b      	uxth	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d034      	beq.n	800119e <HAL_I2C_Master_Receive+0x186>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001138:	2b00      	cmp	r3, #0
 800113a:	d130      	bne.n	800119e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 f880 	bl	800124c <I2C_WaitOnFlagUntilTimeout>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e04d      	b.n	80011f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115a:	b29b      	uxth	r3, r3
 800115c:	2bff      	cmp	r3, #255	; 0xff
 800115e:	d90e      	bls.n	800117e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	22ff      	movs	r2, #255	; 0xff
 8001164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116a:	b2da      	uxtb	r2, r3
 800116c:	8979      	ldrh	r1, [r7, #10]
 800116e:	2300      	movs	r3, #0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 f9f6 	bl	8001568 <I2C_TransferConfig>
 800117c:	e00f      	b.n	800119e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001182:	b29a      	uxth	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118c:	b2da      	uxtb	r2, r3
 800118e:	8979      	ldrh	r1, [r7, #10]
 8001190:	2300      	movs	r3, #0
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f9e5 	bl	8001568 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d19d      	bne.n	80010e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	6a39      	ldr	r1, [r7, #32]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f8cd 	bl	800134c <I2C_WaitOnSTOPFlagUntilTimeout>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e01a      	b.n	80011f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2220      	movs	r2, #32
 80011c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6859      	ldr	r1, [r3, #4]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_I2C_Master_Receive+0x1e8>)
 80011d0:	400b      	ands	r3, r1
 80011d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2220      	movs	r2, #32
 80011d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e000      	b.n	80011f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80011f0:	2302      	movs	r3, #2
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	80002400 	.word	0x80002400
 8001200:	fe00e800 	.word	0xfe00e800

08001204 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b02      	cmp	r3, #2
 8001218:	d103      	bne.n	8001222 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d007      	beq.n	8001240 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	619a      	str	r2, [r3, #24]
  }
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4613      	mov	r3, r2
 800125a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800125c:	e022      	b.n	80012a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d01e      	beq.n	80012a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001266:	f7ff f9ef 	bl	8000648 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d302      	bcc.n	800127c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d113      	bne.n	80012a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f043 0220 	orr.w	r2, r3, #32
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2220      	movs	r2, #32
 800128c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e00f      	b.n	80012c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4013      	ands	r3, r2
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	bf0c      	ite	eq
 80012b4:	2301      	moveq	r3, #1
 80012b6:	2300      	movne	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d0cd      	beq.n	800125e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012d8:	e02c      	b.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f8dc 	bl	800149c <I2C_IsAcknowledgeFailed>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e02a      	b.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d01e      	beq.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012f6:	f7ff f9a7 	bl	8000648 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	429a      	cmp	r2, r3
 8001304:	d302      	bcc.n	800130c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d113      	bne.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f043 0220 	orr.w	r2, r3, #32
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2220      	movs	r2, #32
 800131c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e007      	b.n	8001344 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b02      	cmp	r3, #2
 8001340:	d1cb      	bne.n	80012da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001358:	e028      	b.n	80013ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 f89c 	bl	800149c <I2C_IsAcknowledgeFailed>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e026      	b.n	80013bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800136e:	f7ff f96b 	bl	8000648 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	429a      	cmp	r2, r3
 800137c:	d302      	bcc.n	8001384 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d113      	bne.n	80013ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f043 0220 	orr.w	r2, r3, #32
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2220      	movs	r2, #32
 8001394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e007      	b.n	80013bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d1cf      	bne.n	800135a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013d0:	e055      	b.n	800147e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f860 	bl	800149c <I2C_IsAcknowledgeFailed>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e053      	b.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0320 	and.w	r3, r3, #32
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	d129      	bne.n	8001448 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d105      	bne.n	800140e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e03f      	b.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2220      	movs	r2, #32
 8001414:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001422:	400b      	ands	r3, r1
 8001424:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2220      	movs	r2, #32
 8001430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e022      	b.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001448:	f7ff f8fe 	bl	8000648 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	429a      	cmp	r2, r3
 8001456:	d302      	bcc.n	800145e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f043 0220 	orr.w	r2, r3, #32
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2220      	movs	r2, #32
 800146e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e007      	b.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b04      	cmp	r3, #4
 800148a:	d1a2      	bne.n	80013d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	fe00e800 	.word	0xfe00e800

0800149c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d151      	bne.n	800155a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014b6:	e022      	b.n	80014fe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014be:	d01e      	beq.n	80014fe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c0:	f7ff f8c2 	bl	8000648 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d302      	bcc.n	80014d6 <I2C_IsAcknowledgeFailed+0x3a>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d113      	bne.n	80014fe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f043 0220 	orr.w	r2, r3, #32
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2220      	movs	r2, #32
 80014e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e02e      	b.n	800155c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b20      	cmp	r3, #32
 800150a:	d1d5      	bne.n	80014b8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2210      	movs	r2, #16
 8001512:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2220      	movs	r2, #32
 800151a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7ff fe71 	bl	8001204 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <I2C_IsAcknowledgeFailed+0xc8>)
 800152e:	400b      	ands	r3, r1
 8001530:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f043 0204 	orr.w	r2, r3, #4
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	fe00e800 	.word	0xfe00e800

08001568 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	4613      	mov	r3, r2
 8001578:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	0d5b      	lsrs	r3, r3, #21
 8001584:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <I2C_TransferConfig+0x58>)
 800158a:	430b      	orrs	r3, r1
 800158c:	43db      	mvns	r3, r3
 800158e:	ea02 0103 	and.w	r1, r2, r3
 8001592:	897b      	ldrh	r3, [r7, #10]
 8001594:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001598:	7a7b      	ldrb	r3, [r7, #9]
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	431a      	orrs	r2, r3
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	03ff63ff 	.word	0x03ff63ff

080015c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d138      	bne.n	800164c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e032      	b.n	800164e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2224      	movs	r2, #36	; 0x24
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6819      	ldr	r1, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	e000      	b.n	800164e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800164c:	2302      	movs	r3, #2
  }
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b20      	cmp	r3, #32
 800166e:	d139      	bne.n	80016e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800167a:	2302      	movs	r3, #2
 800167c:	e033      	b.n	80016e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2224      	movs	r2, #36	; 0x24
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2220      	movs	r2, #32
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e000      	b.n	80016e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_PWREx_GetVoltageRange+0x18>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000

08001710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800171e:	d130      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d038      	beq.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800173e:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2232      	movs	r2, #50	; 0x32
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	4a1b      	ldr	r2, [pc, #108]	; (80017b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	0c9b      	lsrs	r3, r3, #18
 8001750:	3301      	adds	r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001754:	e002      	b.n	800175c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3b01      	subs	r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001768:	d102      	bne.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x60>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f2      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800177c:	d110      	bne.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e00f      	b.n	80017a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d007      	beq.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40007000 	.word	0x40007000
 80017b4:	20000010 	.word	0x20000010
 80017b8:	431bde83 	.word	0x431bde83

080017bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e39d      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ce:	4ba4      	ldr	r3, [pc, #656]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d8:	4ba1      	ldr	r3, [pc, #644]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80e1 	beq.w	80019b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <HAL_RCC_OscConfig+0x4a>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b0c      	cmp	r3, #12
 80017fa:	f040 8088 	bne.w	800190e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b01      	cmp	r3, #1
 8001802:	f040 8084 	bne.w	800190e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001806:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x62>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e375      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1a      	ldr	r2, [r3, #32]
 8001822:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <HAL_RCC_OscConfig+0x7c>
 800182e:	4b8c      	ldr	r3, [pc, #560]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001836:	e005      	b.n	8001844 <HAL_RCC_OscConfig+0x88>
 8001838:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800183a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001844:	4293      	cmp	r3, r2
 8001846:	d223      	bcs.n	8001890 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fd09 	bl	8002264 <RCC_SetFlashLatencyFromMSIRange>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e356      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185c:	4b80      	ldr	r3, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7f      	ldr	r2, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001862:	f043 0308 	orr.w	r3, r3, #8
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	497a      	ldr	r1, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800187a:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	4975      	ldr	r1, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]
 800188e:	e022      	b.n	80018d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001890:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	496d      	ldr	r1, [pc, #436]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ae:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	4968      	ldr	r1, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fccc 	bl	8002264 <RCC_SetFlashLatencyFromMSIRange>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e319      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d6:	f000 fc03 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80018da:	4601      	mov	r1, r0
 80018dc:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	091b      	lsrs	r3, r3, #4
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4a5f      	ldr	r2, [pc, #380]	; (8001a64 <HAL_RCC_OscConfig+0x2a8>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	fa21 f303 	lsr.w	r3, r1, r3
 80018f2:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x2b0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe58 	bl	80005b0 <HAL_InitTick>
 8001900:	4603      	mov	r3, r0
 8001902:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d052      	beq.n	80019b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	e2fd      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d032      	beq.n	800197c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001916:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a51      	ldr	r2, [pc, #324]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001922:	f7fe fe91 	bl	8000648 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192a:	f7fe fe8d 	bl	8000648 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e2e6      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800193c:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001948:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a44      	ldr	r2, [pc, #272]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	493f      	ldr	r1, [pc, #252]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	493a      	ldr	r1, [pc, #232]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
 800197a:	e01a      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a37      	ldr	r2, [pc, #220]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001988:	f7fe fe5e 	bl	8000648 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001990:	f7fe fe5a 	bl	8000648 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e2b3      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x1d4>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d074      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x214>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d10e      	bne.n	80019e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d10b      	bne.n	80019e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d064      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x2ea>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d160      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e290      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d106      	bne.n	8001a00 <HAL_RCC_OscConfig+0x244>
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0x280>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x268>
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x280>
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_RCC_OscConfig+0x2a4>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7fe fe00 	bl	8000648 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	e011      	b.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7fe fdfc 	bl	8000648 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	; 0x64
 8001a58:	d90a      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e255      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08007c6c 	.word	0x08007c6c
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a70:	4bae      	ldr	r3, [pc, #696]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0e7      	beq.n	8001a4c <HAL_RCC_OscConfig+0x290>
 8001a7c:	e014      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7fe fde3 	bl	8000648 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a86:	f7fe fddf 	bl	8000648 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e238      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a98:	4ba4      	ldr	r3, [pc, #656]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x2ca>
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d060      	beq.n	8001b76 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x30a>
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d119      	bne.n	8001af4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d116      	bne.n	8001af4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac6:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x322>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e215      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ade:	4b93      	ldr	r3, [pc, #588]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	061b      	lsls	r3, r3, #24
 8001aec:	498f      	ldr	r1, [pc, #572]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af2:	e040      	b.n	8001b76 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d023      	beq.n	8001b44 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001afc:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7fe fd9e 	bl	8000648 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b10:	f7fe fd9a 	bl	8000648 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1f3      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	061b      	lsls	r3, r3, #24
 8001b3c:	497b      	ldr	r1, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7fe fd7a 	bl	8000648 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7fe fd76 	bl	8000648 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1cf      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d03c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8a:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7fe fd55 	bl	8000648 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba2:	f7fe fd51 	bl	8000648 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1aa      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb4:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0ef      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3e6>
 8001bc2:	e01b      	b.n	8001bfc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	4a58      	ldr	r2, [pc, #352]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7fe fd38 	bl	8000648 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7fe fd34 	bl	8000648 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e18d      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bee:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ef      	bne.n	8001bdc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a5 	beq.w	8001d54 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1e:	4a43      	ldr	r2, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6593      	str	r3, [r2, #88]	; 0x58
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_OscConfig+0x574>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x574>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3a      	ldr	r2, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x574>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe fcfb 	bl	8000648 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7fe fcf7 	bl	8000648 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e150      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x574>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_RCC_OscConfig+0x4d2>
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c8c:	e024      	b.n	8001cd8 <HAL_RCC_OscConfig+0x51c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d110      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4fc>
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	4a23      	ldr	r2, [pc, #140]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cac:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCC_OscConfig+0x51c>
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d016      	beq.n	8001d0e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7fe fcb2 	bl	8000648 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7fe fcae 	bl	8000648 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e105      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x570>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ed      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x52c>
 8001d0c:	e019      	b.n	8001d42 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7fe fc9b 	bl	8000648 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d14:	e00e      	b.n	8001d34 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7fe fc97 	bl	8000648 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d905      	bls.n	8001d34 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0ee      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d34:	4b77      	ldr	r3, [pc, #476]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1e9      	bne.n	8001d16 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b72      	ldr	r3, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	4a71      	ldr	r2, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80d5 	beq.w	8001f08 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	f000 808e 	beq.w	8001e82 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d15b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a68      	ldr	r2, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fc65 	bl	8000648 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fc61 	bl	8000648 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e0ba      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_RCC_OscConfig+0x75c>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001db0:	3a01      	subs	r2, #1
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dba:	0212      	lsls	r2, r2, #8
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc2:	0852      	lsrs	r2, r2, #1
 8001dc4:	3a01      	subs	r2, #1
 8001dc6:	0552      	lsls	r2, r2, #21
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dce:	0852      	lsrs	r2, r2, #1
 8001dd0:	3a01      	subs	r2, #1
 8001dd2:	0652      	lsls	r2, r2, #25
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dda:	0912      	lsrs	r2, r2, #4
 8001ddc:	0452      	lsls	r2, r2, #17
 8001dde:	430a      	orrs	r2, r1
 8001de0:	494c      	ldr	r1, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de6:	4b4b      	ldr	r3, [pc, #300]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a4a      	ldr	r2, [pc, #296]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df2:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a47      	ldr	r2, [pc, #284]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fc23 	bl	8000648 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe fc1f 	bl	8000648 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e078      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e18:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x64a>
 8001e24:	e070      	b.n	8001f08 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e32:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e44:	f023 0303 	bic.w	r3, r3, #3
 8001e48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fbf5 	bl	8000648 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fbf1 	bl	8000648 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e04a      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x6a6>
 8001e80:	e042      	b.n	8001f08 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e03d      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x758>)
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 0203 	and.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d130      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	3b01      	subs	r3, #1
 8001eae:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d127      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d11f      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ece:	2a07      	cmp	r2, #7
 8001ed0:	bf14      	ite	ne
 8001ed2:	2201      	movne	r2, #1
 8001ed4:	2200      	moveq	r2, #0
 8001ed6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d113      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d109      	bne.n	8001f04 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	f99d808c 	.word	0xf99d808c

08001f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0c8      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b66      	ldr	r3, [pc, #408]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b63      	ldr	r3, [pc, #396]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4961      	ldr	r1, [pc, #388]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b0      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d04c      	beq.n	8002006 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f74:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d121      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e09e      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d115      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e092      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e086      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e07e      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc4:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 0203 	bic.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	493f      	ldr	r1, [pc, #252]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd6:	f7fe fb37 	bl	8000648 <HAL_GetTick>
 8001fda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fde:	f7fe fb33 	bl	8000648 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e066      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 020c 	and.w	r2, r3, #12
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	429a      	cmp	r2, r3
 8002004:	d1eb      	bne.n	8001fde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	492c      	ldr	r1, [pc, #176]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d210      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 0207 	bic.w	r2, r3, #7
 800203a:	4924      	ldr	r1, [pc, #144]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b22      	ldr	r3, [pc, #136]	; (80020cc <HAL_RCC_ClockConfig+0x1b0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e036      	b.n	80020c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4918      	ldr	r1, [pc, #96]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4910      	ldr	r1, [pc, #64]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002092:	f000 f825 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002096:	4601      	mov	r1, r0
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_RCC_ClockConfig+0x1b4>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	5cd3      	ldrb	r3, [r2, r3]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	fa21 f303 	lsr.w	r3, r1, r3
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa7a 	bl	80005b0 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	72fb      	strb	r3, [r7, #11]

  return status;
 80020c0:	7afb      	ldrb	r3, [r7, #11]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08007c6c 	.word	0x08007c6c
 80020d8:	20000010 	.word	0x20000010
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f8:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x34>
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b0c      	cmp	r3, #12
 800210c:	d121      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d11e      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e005      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10d      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d102      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e004      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d101      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002166:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d133      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0xa4>
 800217e:	2b03      	cmp	r3, #3
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0xaa>
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002186:	617b      	str	r3, [r7, #20]
      break;
 8002188:	e005      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	617b      	str	r3, [r7, #20]
      break;
 8002194:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	3301      	adds	r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	fb02 f203 	mul.w	r2, r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0e5b      	lsrs	r3, r3, #25
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	3301      	adds	r3, #1
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021d6:	69bb      	ldr	r3, [r7, #24]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3724      	adds	r7, #36	; 0x24
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08007c84 	.word	0x08007c84
 80021ec:	00f42400 	.word	0x00f42400
 80021f0:	007a1200 	.word	0x007a1200

080021f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_GetHCLKFreq+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000010 	.word	0x20000010

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002210:	f7ff fff0 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002214:	4601      	mov	r1, r0
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa21 f303 	lsr.w	r3, r1, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08007c7c 	.word	0x08007c7c

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800223c:	f7ff ffda 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002240:	4601      	mov	r1, r0
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0adb      	lsrs	r3, r3, #11
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	08007c7c 	.word	0x08007c7c

08002264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800227c:	f7ff fa3a 	bl	80016f4 <HAL_PWREx_GetVoltageRange>
 8002280:	6178      	str	r0, [r7, #20]
 8002282:	e014      	b.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800229c:	f7ff fa2a 	bl	80016f4 <HAL_PWREx_GetVoltageRange>
 80022a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b4:	d10b      	bne.n	80022ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b80      	cmp	r3, #128	; 0x80
 80022ba:	d919      	bls.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2ba0      	cmp	r3, #160	; 0xa0
 80022c0:	d902      	bls.n	80022c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c2:	2302      	movs	r3, #2
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e013      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c8:	2301      	movs	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	e010      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b80      	cmp	r3, #128	; 0x80
 80022d2:	d902      	bls.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d4:	2303      	movs	r3, #3
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	e00a      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d102      	bne.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e004      	b.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b70      	cmp	r3, #112	; 0x70
 80022ea:	d101      	bne.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 0207 	bic.w	r2, r3, #7
 80022f8:	4909      	ldr	r1, [pc, #36]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	40022000 	.word	0x40022000

08002324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800232c:	2300      	movs	r3, #0
 800232e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002330:	2300      	movs	r3, #0
 8002332:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03f      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002348:	d01c      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800234a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234e:	d802      	bhi.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00e      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002354:	e01f      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002356:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800235a:	d003      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800235c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002360:	d01c      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002362:	e018      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002364:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a84      	ldr	r2, [pc, #528]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002370:	e015      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fab9 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002382:	e00c      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3320      	adds	r3, #32
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fba0 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002394:	e003      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	74fb      	strb	r3, [r7, #19]
      break;
 800239a:	e000      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800239c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a4:	4b75      	ldr	r3, [pc, #468]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b2:	4972      	ldr	r1, [pc, #456]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ba:	e001      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d03f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d4:	d01c      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80023d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023da:	d802      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00e      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80023e0:	e01f      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80023e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023e6:	d003      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80023e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023ec:	d01c      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80023ee:	e018      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023fc:	e015      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fa73 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3320      	adds	r3, #32
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fb5a 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	74fb      	strb	r3, [r7, #19]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002430:	4b52      	ldr	r3, [pc, #328]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243e:	494f      	ldr	r1, [pc, #316]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002446:	e001      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a0 	beq.w	800259a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b3e      	ldr	r3, [pc, #248]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248c:	2301      	movs	r3, #1
 800248e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3a      	ldr	r2, [pc, #232]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249c:	f7fe f8d4 	bl	8000648 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a2:	e009      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a4:	f7fe f8d0 	bl	8000648 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	74fb      	strb	r3, [r7, #19]
        break;
 80024b6:	e005      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d15c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01f      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d019      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800250c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d016      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe f88f 	bl	8000648 <HAL_GetTick>
 800252a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e00b      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe f88b 	bl	8000648 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d902      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	74fb      	strb	r3, [r7, #19]
            break;
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ec      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256a:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002572:	e009      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002574:	7cfb      	ldrb	r3, [r7, #19]
 8002576:	74bb      	strb	r3, [r7, #18]
 8002578:	e006      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002588:	7c7b      	ldrb	r3, [r7, #17]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b9e      	ldr	r3, [pc, #632]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	4a9d      	ldr	r2, [pc, #628]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a6:	4b98      	ldr	r3, [pc, #608]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 0203 	bic.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	4994      	ldr	r1, [pc, #592]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c8:	4b8f      	ldr	r3, [pc, #572]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 020c 	bic.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	498c      	ldr	r1, [pc, #560]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ea:	4b87      	ldr	r3, [pc, #540]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	4983      	ldr	r1, [pc, #524]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800260c:	4b7e      	ldr	r3, [pc, #504]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	497b      	ldr	r1, [pc, #492]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800262e:	4b76      	ldr	r3, [pc, #472]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263c:	4972      	ldr	r1, [pc, #456]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002650:	4b6d      	ldr	r3, [pc, #436]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	496a      	ldr	r1, [pc, #424]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	4961      	ldr	r1, [pc, #388]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002694:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	4959      	ldr	r1, [pc, #356]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b6:	4b54      	ldr	r3, [pc, #336]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d8:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	4948      	ldr	r1, [pc, #288]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	493f      	ldr	r1, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d028      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272a:	4937      	ldr	r1, [pc, #220]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800273a:	d106      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800273c:	4b32      	ldr	r3, [pc, #200]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a31      	ldr	r2, [pc, #196]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002746:	60d3      	str	r3, [r2, #12]
 8002748:	e011      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002752:	d10c      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	2101      	movs	r1, #1
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f8c8 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d028      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	491f      	ldr	r1, [pc, #124]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002798:	d106      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a4:	60d3      	str	r3, [r2, #12]
 80027a6:	e011      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f899 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f6:	d109      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a02      	ldr	r2, [pc, #8]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
 8002804:	e014      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3304      	adds	r3, #4
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f867 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002822:	4603      	mov	r3, r0
 8002824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002826:	7cfb      	ldrb	r3, [r7, #19]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	4928      	ldr	r1, [pc, #160]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002856:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285a:	d10d      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f844 	bl	80028f0 <RCCEx_PLLSAI1_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d014      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	74bb      	strb	r3, [r7, #18]
 8002876:	e011      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d10c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3320      	adds	r3, #32
 8002886:	2102      	movs	r1, #2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 f921 	bl	8002ad0 <RCCEx_PLLSAI2_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b6:	490d      	ldr	r1, [pc, #52]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000

080028f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290a:	4b70      	ldr	r3, [pc, #448]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0203 	and.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
       ||
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002922:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
       ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d044      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e041      	b.n	80029c0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d00c      	beq.n	800295e <RCCEx_PLLSAI1_Config+0x6e>
 8002944:	2b03      	cmp	r3, #3
 8002946:	d013      	beq.n	8002970 <RCCEx_PLLSAI1_Config+0x80>
 8002948:	2b01      	cmp	r3, #1
 800294a:	d120      	bne.n	800298e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800294c:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d11d      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800295c:	e01a      	b.n	8002994 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800296e:	e013      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002970:	4b56      	ldr	r3, [pc, #344]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800297c:	4b53      	ldr	r3, [pc, #332]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800298c:	e006      	b.n	800299c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
      break;
 8002992:	e004      	b.n	800299e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002994:	bf00      	nop
 8002996:	e002      	b.n	800299e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800299c:	bf00      	nop
    }

    if(status == HAL_OK)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10d      	bne.n	80029c0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029a4:	4b49      	ldr	r3, [pc, #292]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6819      	ldr	r1, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	430b      	orrs	r3, r1
 80029ba:	4944      	ldr	r1, [pc, #272]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d17d      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a40      	ldr	r2, [pc, #256]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d2:	f7fd fe39 	bl	8000648 <HAL_GetTick>
 80029d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029d8:	e009      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029da:	f7fd fe35 	bl	8000648 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d902      	bls.n	80029ee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	73fb      	strb	r3, [r7, #15]
        break;
 80029ec:	e005      	b.n	80029fa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ee:	4b37      	ldr	r3, [pc, #220]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ef      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d160      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d111      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	0211      	lsls	r1, r2, #8
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68d2      	ldr	r2, [r2, #12]
 8002a1c:	0912      	lsrs	r2, r2, #4
 8002a1e:	0452      	lsls	r2, r2, #17
 8002a20:	430a      	orrs	r2, r1
 8002a22:	492a      	ldr	r1, [pc, #168]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	610b      	str	r3, [r1, #16]
 8002a28:	e027      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d112      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	0211      	lsls	r1, r2, #8
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6912      	ldr	r2, [r2, #16]
 8002a46:	0852      	lsrs	r2, r2, #1
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0552      	lsls	r2, r2, #21
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	491f      	ldr	r1, [pc, #124]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
 8002a54:	e011      	b.n	8002a7a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6892      	ldr	r2, [r2, #8]
 8002a66:	0211      	lsls	r1, r2, #8
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6952      	ldr	r2, [r2, #20]
 8002a6c:	0852      	lsrs	r2, r2, #1
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	0652      	lsls	r2, r2, #25
 8002a72:	430a      	orrs	r2, r1
 8002a74:	4915      	ldr	r1, [pc, #84]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a13      	ldr	r2, [pc, #76]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fd fddf 	bl	8000648 <HAL_GetTick>
 8002a8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a8c:	e009      	b.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8e:	f7fd fddb 	bl	8000648 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d902      	bls.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa0:	e005      	b.n	8002aae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ef      	beq.n	8002a8e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d106      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ade:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d018      	beq.n	8002b1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10d      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
       ||
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b02:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
       ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d044      	beq.n	8002ba0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
 8002b1a:	e041      	b.n	8002ba0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d00c      	beq.n	8002b3e <RCCEx_PLLSAI2_Config+0x6e>
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d013      	beq.n	8002b50 <RCCEx_PLLSAI2_Config+0x80>
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d120      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b2c:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11d      	bne.n	8002b74 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e01a      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d116      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e013      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b50:	4b4b      	ldr	r3, [pc, #300]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10f      	bne.n	8002b7c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b5c:	4b48      	ldr	r3, [pc, #288]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b6c:	e006      	b.n	8002b7c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
      break;
 8002b72:	e004      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b74:	bf00      	nop
 8002b76:	e002      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b78:	bf00      	nop
 8002b7a:	e000      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b7c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10d      	bne.n	8002ba0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b84:	4b3e      	ldr	r3, [pc, #248]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	4939      	ldr	r1, [pc, #228]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d167      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ba6:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb2:	f7fd fd49 	bl	8000648 <HAL_GetTick>
 8002bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb8:	e009      	b.n	8002bce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bba:	f7fd fd45 	bl	8000648 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d902      	bls.n	8002bce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	73fb      	strb	r3, [r7, #15]
        break;
 8002bcc:	e005      	b.n	8002bda <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bce:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1ef      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d14a      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d111      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	0211      	lsls	r1, r2, #8
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68d2      	ldr	r2, [r2, #12]
 8002bfc:	0912      	lsrs	r2, r2, #4
 8002bfe:	0452      	lsls	r2, r2, #17
 8002c00:	430a      	orrs	r2, r1
 8002c02:	491f      	ldr	r1, [pc, #124]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	614b      	str	r3, [r1, #20]
 8002c08:	e011      	b.n	8002c2e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6892      	ldr	r2, [r2, #8]
 8002c1a:	0211      	lsls	r1, r2, #8
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6912      	ldr	r2, [r2, #16]
 8002c20:	0852      	lsrs	r2, r2, #1
 8002c22:	3a01      	subs	r2, #1
 8002c24:	0652      	lsls	r2, r2, #25
 8002c26:	430a      	orrs	r2, r1
 8002c28:	4915      	ldr	r1, [pc, #84]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fd fd05 	bl	8000648 <HAL_GetTick>
 8002c3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c40:	e009      	b.n	8002c56 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c42:	f7fd fd01 	bl	8000648 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d902      	bls.n	8002c56 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	73fb      	strb	r3, [r7, #15]
          break;
 8002c54:	e005      	b.n	8002c62 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ef      	beq.n	8002c42 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07c      	b.n	8002d90 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f003 ff21 	bl	8006af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd6:	d902      	bls.n	8002cde <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e002      	b.n	8002ce4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cec:	d007      	beq.n	8002cfe <HAL_SPI_Init+0x7a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10b      	bne.n	8002d1e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d0e:	d903      	bls.n	8002d18 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
 8002d16:	e002      	b.n	8002d1e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	ea42 0103 	orr.w	r1, r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0204 	and.w	r2, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	ea42 0103 	orr.w	r1, r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b088      	sub	sp, #32
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_SPI_Transmit+0x22>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e150      	b.n	800305c <HAL_SPI_Transmit+0x2c4>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dc2:	f7fd fc41 	bl	8000648 <HAL_GetTick>
 8002dc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ddc:	e135      	b.n	800304a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SPI_Transmit+0x52>
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dee:	e12c      	b.n	800304a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2203      	movs	r2, #3
 8002df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3a:	d107      	bne.n	8002e4c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d007      	beq.n	8002e6a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e72:	d94b      	bls.n	8002f0c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_SPI_Transmit+0xea>
 8002e7c:	8afb      	ldrh	r3, [r7, #22]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d13e      	bne.n	8002f00 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	1c9a      	adds	r2, r3, #2
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ea6:	e02b      	b.n	8002f00 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d112      	bne.n	8002edc <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eda:	e011      	b.n	8002f00 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002edc:	f7fd fbb4 	bl	8000648 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d803      	bhi.n	8002ef4 <HAL_SPI_Transmit+0x15c>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef2:	d102      	bne.n	8002efa <HAL_SPI_Transmit+0x162>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002efe:	e0a4      	b.n	800304a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ce      	bne.n	8002ea8 <HAL_SPI_Transmit+0x110>
 8002f0a:	e07c      	b.n	8003006 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_SPI_Transmit+0x182>
 8002f14:	8afb      	ldrh	r3, [r7, #22]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d170      	bne.n	8002ffc <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d912      	bls.n	8002f4a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b02      	subs	r3, #2
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f48:	e058      	b.n	8002ffc <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f70:	e044      	b.n	8002ffc <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d12b      	bne.n	8002fd8 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d912      	bls.n	8002fb0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	881a      	ldrh	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b02      	subs	r3, #2
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fae:	e025      	b.n	8002ffc <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fd6:	e011      	b.n	8002ffc <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd8:	f7fd fb36 	bl	8000648 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d803      	bhi.n	8002ff0 <HAL_SPI_Transmit+0x258>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d102      	bne.n	8002ff6 <HAL_SPI_Transmit+0x25e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ffa:	e026      	b.n	800304a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1b5      	bne.n	8002f72 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fca2 	bl	8003954 <SPI_EndRxTxTransaction>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e000      	b.n	800304a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003048:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800305a:	7ffb      	ldrb	r3, [r7, #31]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003080:	d112      	bne.n	80030a8 <HAL_SPI_Receive+0x44>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10e      	bne.n	80030a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2204      	movs	r2, #4
 800308e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f908 	bl	80032b4 <HAL_SPI_TransmitReceive>
 80030a4:	4603      	mov	r3, r0
 80030a6:	e101      	b.n	80032ac <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_SPI_Receive+0x52>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e0fa      	b.n	80032ac <HAL_SPI_Receive+0x248>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030be:	f7fd fac3 	bl	8000648 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d002      	beq.n	80030d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030d4:	e0e1      	b.n	800329a <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_Receive+0x7e>
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030e6:	e0d8      	b.n	800329a <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2204      	movs	r2, #4
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003132:	d908      	bls.n	8003146 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	e007      	b.n	8003156 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003154:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d107      	bne.n	8003170 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800316e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d007      	beq.n	800318e <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003196:	d867      	bhi.n	8003268 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003198:	e030      	b.n	80031fc <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d117      	bne.n	80031d8 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f103 020c 	add.w	r2, r3, #12
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031d6:	e011      	b.n	80031fc <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d8:	f7fd fa36 	bl	8000648 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d803      	bhi.n	80031f0 <HAL_SPI_Receive+0x18c>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d102      	bne.n	80031f6 <HAL_SPI_Receive+0x192>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031fa:	e04e      	b.n	800329a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1c8      	bne.n	800319a <HAL_SPI_Receive+0x136>
 8003208:	e034      	b.n	8003274 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d115      	bne.n	8003244 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	b292      	uxth	r2, r2
 8003224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003242:	e011      	b.n	8003268 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003244:	f7fd fa00 	bl	8000648 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d803      	bhi.n	800325c <HAL_SPI_Receive+0x1f8>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d102      	bne.n	8003262 <HAL_SPI_Receive+0x1fe>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003266:	e018      	b.n	800329a <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ca      	bne.n	800320a <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	6839      	ldr	r1, [r7, #0]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fb13 	bl	80038a4 <SPI_EndRxTransaction>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
 8003296:	e000      	b.n	800329a <HAL_SPI_Receive+0x236>
  }

error :
 8003298:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032c2:	2301      	movs	r3, #1
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_SPI_TransmitReceive+0x26>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e1fb      	b.n	80036d2 <HAL_SPI_TransmitReceive+0x41e>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e2:	f7fd f9b1 	bl	8000648 <HAL_GetTick>
 80032e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032f6:	887b      	ldrh	r3, [r7, #2]
 80032f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032fe:	7efb      	ldrb	r3, [r7, #27]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d00e      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x6e>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330a:	d106      	bne.n	800331a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <HAL_SPI_TransmitReceive+0x66>
 8003314:	7efb      	ldrb	r3, [r7, #27]
 8003316:	2b04      	cmp	r3, #4
 8003318:	d003      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800331a:	2302      	movs	r3, #2
 800331c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003320:	e1cd      	b.n	80036be <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d005      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x80>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x80>
 800332e:	887b      	ldrh	r3, [r7, #2]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800333a:	e1c0      	b.n	80036be <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b04      	cmp	r3, #4
 8003346:	d003      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2205      	movs	r2, #5
 800334c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	887a      	ldrh	r2, [r7, #2]
 8003360:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003392:	d802      	bhi.n	800339a <HAL_SPI_TransmitReceive+0xe6>
 8003394:	8a3b      	ldrh	r3, [r7, #16]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d908      	bls.n	80033ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	e007      	b.n	80033bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d007      	beq.n	80033da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033e2:	d97c      	bls.n	80034de <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_SPI_TransmitReceive+0x13e>
 80033ec:	8a7b      	ldrh	r3, [r7, #18]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d169      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	881a      	ldrh	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003416:	e056      	b.n	80034c6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d11b      	bne.n	800345e <HAL_SPI_TransmitReceive+0x1aa>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d016      	beq.n	800345e <HAL_SPI_TransmitReceive+0x1aa>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	2b01      	cmp	r3, #1
 8003434:	d113      	bne.n	800345e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d11c      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x1f2>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	b292      	uxth	r2, r2
 8003484:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034a2:	2301      	movs	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034a6:	f7fd f8cf 	bl	8000648 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d807      	bhi.n	80034c6 <HAL_SPI_TransmitReceive+0x212>
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d003      	beq.n	80034c6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034c4:	e0fb      	b.n	80036be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1a3      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x164>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d19d      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x164>
 80034dc:	e0df      	b.n	800369e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x23a>
 80034e6:	8a7b      	ldrh	r3, [r7, #18]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	f040 80cb 	bne.w	8003684 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d912      	bls.n	800351e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b02      	subs	r3, #2
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800351c:	e0b2      	b.n	8003684 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003544:	e09e      	b.n	8003684 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d134      	bne.n	80035be <HAL_SPI_TransmitReceive+0x30a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02f      	beq.n	80035be <HAL_SPI_TransmitReceive+0x30a>
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	2b01      	cmp	r3, #1
 8003562:	d12c      	bne.n	80035be <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d912      	bls.n	8003594 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	1c9a      	adds	r2, r3, #2
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b02      	subs	r3, #2
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003592:	e012      	b.n	80035ba <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	330c      	adds	r3, #12
 800359e:	7812      	ldrb	r2, [r2, #0]
 80035a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d148      	bne.n	800365e <HAL_SPI_TransmitReceive+0x3aa>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d042      	beq.n	800365e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d923      	bls.n	800362c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	b292      	uxth	r2, r2
 80035f0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	1c9a      	adds	r2, r3, #2
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b02      	subs	r3, #2
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d81f      	bhi.n	800365a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e016      	b.n	800365a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f103 020c 	add.w	r2, r3, #12
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365a:	2301      	movs	r3, #1
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800365e:	f7fc fff3 	bl	8000648 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366a:	429a      	cmp	r2, r3
 800366c:	d803      	bhi.n	8003676 <HAL_SPI_TransmitReceive+0x3c2>
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d102      	bne.n	800367c <HAL_SPI_TransmitReceive+0x3c8>
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003682:	e01c      	b.n	80036be <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	f47f af5b 	bne.w	8003546 <HAL_SPI_TransmitReceive+0x292>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	f47f af54 	bne.w	8003546 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f956 	bl	8003954 <SPI_EndRxTxTransaction>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	661a      	str	r2, [r3, #96]	; 0x60
 80036ba:	e000      	b.n	80036be <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80036bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3728      	adds	r7, #40	; 0x28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e8:	b2db      	uxtb	r3, r3
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003706:	e04c      	b.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d048      	beq.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003710:	f7fc ff9a 	bl	8000648 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d902      	bls.n	8003726 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d13d      	bne.n	80037a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373e:	d111      	bne.n	8003764 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003748:	d004      	beq.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003752:	d107      	bne.n	8003764 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d10f      	bne.n	800378e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800378c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e00f      	b.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4013      	ands	r3, r2
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1a3      	bne.n	8003708 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80037d8:	e057      	b.n	800388a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037e0:	d106      	bne.n	80037f0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	330c      	adds	r3, #12
 80037ee:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d048      	beq.n	800388a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80037f8:	f7fc ff26 	bl	8000648 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d902      	bls.n	800380e <SPI_WaitFifoStateUntilTimeout+0x44>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d13d      	bne.n	800388a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800381c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003826:	d111      	bne.n	800384c <SPI_WaitFifoStateUntilTimeout+0x82>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003830:	d004      	beq.n	800383c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383a:	d107      	bne.n	800384c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d10f      	bne.n	8003876 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e008      	b.n	800389c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d19f      	bne.n	80037da <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b8:	d111      	bne.n	80038de <SPI_EndRxTransaction+0x3a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	d004      	beq.n	80038ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038cc:	d107      	bne.n	80038de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	; 0x80
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f7ff ff04 	bl	80036f6 <SPI_WaitFlagStateUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	f043 0220 	orr.w	r2, r3, #32
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e023      	b.n	800394c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390c:	d11d      	bne.n	800394a <SPI_EndRxTransaction+0xa6>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d004      	beq.n	8003922 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003920:	d113      	bne.n	800394a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff ff4b 	bl	80037ca <SPI_WaitFifoStateUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e000      	b.n	800394c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2200      	movs	r2, #0
 8003968:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff ff2c 	bl	80037ca <SPI_WaitFifoStateUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e027      	b.n	80039d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2200      	movs	r2, #0
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff feaf 	bl	80036f6 <SPI_WaitFlagStateUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e014      	b.n	80039d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f7ff ff05 	bl	80037ca <SPI_WaitFifoStateUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e000      	b.n	80039d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e040      	b.n	8003a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f003 f8ee 	bl	8006be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f95a 	bl	8003cd8 <UART_SetConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e022      	b.n	8003a74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fc96 	bl	8004368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fd1d 	bl	80044ac <UART_CheckIdleState>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	f040 8081 	bne.w	8003b98 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_Transmit+0x26>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e079      	b.n	8003b9a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x38>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e072      	b.n	8003b9a <HAL_UART_Transmit+0x11e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2221      	movs	r2, #33	; 0x21
 8003ac6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ac8:	f7fc fdbe 	bl	8000648 <HAL_GetTick>
 8003acc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae6:	d108      	bne.n	8003afa <HAL_UART_Transmit+0x7e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d104      	bne.n	8003afa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e003      	b.n	8003b02 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b02:	e02d      	b.n	8003b60 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fd11 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e03d      	b.n	8003b9a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b30:	b292      	uxth	r2, r2
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	3302      	adds	r3, #2
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e008      	b.n	8003b4e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b292      	uxth	r2, r2
 8003b46:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1cb      	bne.n	8003b04 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2140      	movs	r1, #64	; 0x40
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fcdd 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e009      	b.n	8003b9a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d164      	bne.n	8003c84 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_UART_Transmit_DMA+0x22>
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e05d      	b.n	8003c86 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_UART_Transmit_DMA+0x34>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e056      	b.n	8003c86 <HAL_UART_Transmit_DMA+0xe2>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2221      	movs	r2, #33	; 0x21
 8003c00:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d02a      	beq.n	8003c60 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c0e:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_UART_Transmit_DMA+0xec>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_UART_Transmit_DMA+0xf0>)
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <HAL_UART_Transmit_DMA+0xf4>)
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c26:	2200      	movs	r2, #0
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	4619      	mov	r1, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3328      	adds	r3, #40	; 0x28
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	f7fc fe16 	bl	800086e <HAL_DMA_Start_IT>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00b      	beq.n	8003c60 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e012      	b.n	8003c86 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2240      	movs	r2, #64	; 0x40
 8003c66:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08004631 	.word	0x08004631
 8003c94:	08004685 	.word	0x08004685
 8003c98:	080046a1 	.word	0x080046a1

08003c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4bac      	ldr	r3, [pc, #688]	; (8003fc0 <UART_SetConfig+0x2e8>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	69f9      	ldr	r1, [r7, #28]
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4aa2      	ldr	r2, [pc, #648]	; (8003fc4 <UART_SetConfig+0x2ec>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a99      	ldr	r2, [pc, #612]	; (8003fc8 <UART_SetConfig+0x2f0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d121      	bne.n	8003dac <UART_SetConfig+0xd4>
 8003d68:	4b98      	ldr	r3, [pc, #608]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d816      	bhi.n	8003da4 <UART_SetConfig+0xcc>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0xa4>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d99 	.word	0x08003d99
 8003d84:	08003d93 	.word	0x08003d93
 8003d88:	08003d9f 	.word	0x08003d9f
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e0e8      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003d92:	2302      	movs	r3, #2
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e0e5      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	e0e2      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	76fb      	strb	r3, [r7, #27]
 8003da2:	e0df      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003da4:	2310      	movs	r3, #16
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	bf00      	nop
 8003daa:	e0db      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a87      	ldr	r2, [pc, #540]	; (8003fd0 <UART_SetConfig+0x2f8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d134      	bne.n	8003e20 <UART_SetConfig+0x148>
 8003db6:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	d829      	bhi.n	8003e18 <UART_SetConfig+0x140>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0xf4>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e0d 	.word	0x08003e0d
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e07 	.word	0x08003e07
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e19 	.word	0x08003e19
 8003df8:	08003e19 	.word	0x08003e19
 8003dfc:	08003e13 	.word	0x08003e13
 8003e00:	2300      	movs	r3, #0
 8003e02:	76fb      	strb	r3, [r7, #27]
 8003e04:	e0ae      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e06:	2302      	movs	r3, #2
 8003e08:	76fb      	strb	r3, [r7, #27]
 8003e0a:	e0ab      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	76fb      	strb	r3, [r7, #27]
 8003e10:	e0a8      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e12:	2308      	movs	r3, #8
 8003e14:	76fb      	strb	r3, [r7, #27]
 8003e16:	e0a5      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	76fb      	strb	r3, [r7, #27]
 8003e1c:	bf00      	nop
 8003e1e:	e0a1      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6b      	ldr	r2, [pc, #428]	; (8003fd4 <UART_SetConfig+0x2fc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d120      	bne.n	8003e6c <UART_SetConfig+0x194>
 8003e2a:	4b68      	ldr	r3, [pc, #416]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d00f      	beq.n	8003e58 <UART_SetConfig+0x180>
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d802      	bhi.n	8003e42 <UART_SetConfig+0x16a>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <UART_SetConfig+0x174>
 8003e40:	e010      	b.n	8003e64 <UART_SetConfig+0x18c>
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d005      	beq.n	8003e52 <UART_SetConfig+0x17a>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d009      	beq.n	8003e5e <UART_SetConfig+0x186>
 8003e4a:	e00b      	b.n	8003e64 <UART_SetConfig+0x18c>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	76fb      	strb	r3, [r7, #27]
 8003e50:	e088      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e52:	2302      	movs	r3, #2
 8003e54:	76fb      	strb	r3, [r7, #27]
 8003e56:	e085      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	76fb      	strb	r3, [r7, #27]
 8003e5c:	e082      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	76fb      	strb	r3, [r7, #27]
 8003e62:	e07f      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e64:	2310      	movs	r3, #16
 8003e66:	76fb      	strb	r3, [r7, #27]
 8003e68:	bf00      	nop
 8003e6a:	e07b      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a59      	ldr	r2, [pc, #356]	; (8003fd8 <UART_SetConfig+0x300>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d120      	bne.n	8003eb8 <UART_SetConfig+0x1e0>
 8003e76:	4b55      	ldr	r3, [pc, #340]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d00f      	beq.n	8003ea4 <UART_SetConfig+0x1cc>
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d802      	bhi.n	8003e8e <UART_SetConfig+0x1b6>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <UART_SetConfig+0x1c0>
 8003e8c:	e010      	b.n	8003eb0 <UART_SetConfig+0x1d8>
 8003e8e:	2b80      	cmp	r3, #128	; 0x80
 8003e90:	d005      	beq.n	8003e9e <UART_SetConfig+0x1c6>
 8003e92:	2bc0      	cmp	r3, #192	; 0xc0
 8003e94:	d009      	beq.n	8003eaa <UART_SetConfig+0x1d2>
 8003e96:	e00b      	b.n	8003eb0 <UART_SetConfig+0x1d8>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	76fb      	strb	r3, [r7, #27]
 8003e9c:	e062      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	76fb      	strb	r3, [r7, #27]
 8003ea2:	e05f      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	76fb      	strb	r3, [r7, #27]
 8003ea8:	e05c      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	76fb      	strb	r3, [r7, #27]
 8003eae:	e059      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	76fb      	strb	r3, [r7, #27]
 8003eb4:	bf00      	nop
 8003eb6:	e055      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a47      	ldr	r2, [pc, #284]	; (8003fdc <UART_SetConfig+0x304>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d124      	bne.n	8003f0c <UART_SetConfig+0x234>
 8003ec2:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed0:	d012      	beq.n	8003ef8 <UART_SetConfig+0x220>
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d802      	bhi.n	8003ede <UART_SetConfig+0x206>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <UART_SetConfig+0x214>
 8003edc:	e012      	b.n	8003f04 <UART_SetConfig+0x22c>
 8003ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee2:	d006      	beq.n	8003ef2 <UART_SetConfig+0x21a>
 8003ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee8:	d009      	beq.n	8003efe <UART_SetConfig+0x226>
 8003eea:	e00b      	b.n	8003f04 <UART_SetConfig+0x22c>
 8003eec:	2300      	movs	r3, #0
 8003eee:	76fb      	strb	r3, [r7, #27]
 8003ef0:	e038      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	76fb      	strb	r3, [r7, #27]
 8003ef6:	e035      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	76fb      	strb	r3, [r7, #27]
 8003efc:	e032      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003efe:	2308      	movs	r3, #8
 8003f00:	76fb      	strb	r3, [r7, #27]
 8003f02:	e02f      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f04:	2310      	movs	r3, #16
 8003f06:	76fb      	strb	r3, [r7, #27]
 8003f08:	bf00      	nop
 8003f0a:	e02b      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2c      	ldr	r2, [pc, #176]	; (8003fc4 <UART_SetConfig+0x2ec>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d124      	bne.n	8003f60 <UART_SetConfig+0x288>
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f24:	d012      	beq.n	8003f4c <UART_SetConfig+0x274>
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d802      	bhi.n	8003f32 <UART_SetConfig+0x25a>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <UART_SetConfig+0x268>
 8003f30:	e012      	b.n	8003f58 <UART_SetConfig+0x280>
 8003f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f36:	d006      	beq.n	8003f46 <UART_SetConfig+0x26e>
 8003f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3c:	d009      	beq.n	8003f52 <UART_SetConfig+0x27a>
 8003f3e:	e00b      	b.n	8003f58 <UART_SetConfig+0x280>
 8003f40:	2300      	movs	r3, #0
 8003f42:	76fb      	strb	r3, [r7, #27]
 8003f44:	e00e      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f46:	2302      	movs	r3, #2
 8003f48:	76fb      	strb	r3, [r7, #27]
 8003f4a:	e00b      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	76fb      	strb	r3, [r7, #27]
 8003f50:	e008      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f52:	2308      	movs	r3, #8
 8003f54:	76fb      	strb	r3, [r7, #27]
 8003f56:	e005      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	76fb      	strb	r3, [r7, #27]
 8003f5c:	bf00      	nop
 8003f5e:	e001      	b.n	8003f64 <UART_SetConfig+0x28c>
 8003f60:	2310      	movs	r3, #16
 8003f62:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <UART_SetConfig+0x2ec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f040 80fa 	bne.w	8004164 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f70:	7efb      	ldrb	r3, [r7, #27]
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d836      	bhi.n	8003fe4 <UART_SetConfig+0x30c>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x2a4>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fe5 	.word	0x08003fe5
 8003f84:	08003fa9 	.word	0x08003fa9
 8003f88:	08003fe5 	.word	0x08003fe5
 8003f8c:	08003faf 	.word	0x08003faf
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fb7 	.word	0x08003fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fe f934 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8003fa4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fa6:	e020      	b.n	8003fea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <UART_SetConfig+0x308>)
 8003faa:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fac:	e01d      	b.n	8003fea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003fae:	f7fe f897 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8003fb2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fb4:	e019      	b.n	8003fea <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fba:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003fbc:	e015      	b.n	8003fea <UART_SetConfig+0x312>
 8003fbe:	bf00      	nop
 8003fc0:	efff69f3 	.word	0xefff69f3
 8003fc4:	40008000 	.word	0x40008000
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40004400 	.word	0x40004400
 8003fd4:	40004800 	.word	0x40004800
 8003fd8:	40004c00 	.word	0x40004c00
 8003fdc:	40005000 	.word	0x40005000
 8003fe0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	74fb      	strb	r3, [r7, #19]
        break;
 8003fe8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 81ac 	beq.w	800434a <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d305      	bcc.n	800400e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	429a      	cmp	r2, r3
 800400c:	d902      	bls.n	8004014 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	74fb      	strb	r3, [r7, #19]
 8004012:	e19a      	b.n	800434a <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004014:	7efb      	ldrb	r3, [r7, #27]
 8004016:	2b08      	cmp	r3, #8
 8004018:	f200 8091 	bhi.w	800413e <UART_SetConfig+0x466>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x34c>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004049 	.word	0x08004049
 8004028:	0800413f 	.word	0x0800413f
 800402c:	08004095 	.word	0x08004095
 8004030:	0800413f 	.word	0x0800413f
 8004034:	080040c9 	.word	0x080040c9
 8004038:	0800413f 	.word	0x0800413f
 800403c:	0800413f 	.word	0x0800413f
 8004040:	0800413f 	.word	0x0800413f
 8004044:	08004115 	.word	0x08004115
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004048:	f7fe f8e0 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 800404c:	4603      	mov	r3, r0
 800404e:	4619      	mov	r1, r3
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	0214      	lsls	r4, r2, #8
 800405e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004062:	020b      	lsls	r3, r1, #8
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6852      	ldr	r2, [r2, #4]
 8004068:	0852      	lsrs	r2, r2, #1
 800406a:	4611      	mov	r1, r2
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	eb13 0b01 	adds.w	fp, r3, r1
 8004074:	eb44 0c02 	adc.w	ip, r4, r2
 8004078:	4658      	mov	r0, fp
 800407a:	4661      	mov	r1, ip
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f04f 0400 	mov.w	r4, #0
 8004084:	461a      	mov	r2, r3
 8004086:	4623      	mov	r3, r4
 8004088:	f7fc f8fa 	bl	8000280 <__aeabi_uldivmod>
 800408c:	4603      	mov	r3, r0
 800408e:	460c      	mov	r4, r1
 8004090:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004092:	e057      	b.n	8004144 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	f04f 0400 	mov.w	r4, #0
 800409e:	49b1      	ldr	r1, [pc, #708]	; (8004364 <UART_SetConfig+0x68c>)
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	eb13 0b01 	adds.w	fp, r3, r1
 80040a8:	eb44 0c02 	adc.w	ip, r4, r2
 80040ac:	4658      	mov	r0, fp
 80040ae:	4661      	mov	r1, ip
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f04f 0400 	mov.w	r4, #0
 80040b8:	461a      	mov	r2, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	f7fc f8e0 	bl	8000280 <__aeabi_uldivmod>
 80040c0:	4603      	mov	r3, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80040c6:	e03d      	b.n	8004144 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80040c8:	f7fe f80a 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80040cc:	4603      	mov	r3, r0
 80040ce:	4619      	mov	r1, r3
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	0214      	lsls	r4, r2, #8
 80040de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80040e2:	020b      	lsls	r3, r1, #8
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6852      	ldr	r2, [r2, #4]
 80040e8:	0852      	lsrs	r2, r2, #1
 80040ea:	4611      	mov	r1, r2
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	eb13 0b01 	adds.w	fp, r3, r1
 80040f4:	eb44 0c02 	adc.w	ip, r4, r2
 80040f8:	4658      	mov	r0, fp
 80040fa:	4661      	mov	r1, ip
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f04f 0400 	mov.w	r4, #0
 8004104:	461a      	mov	r2, r3
 8004106:	4623      	mov	r3, r4
 8004108:	f7fc f8ba 	bl	8000280 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004112:	e017      	b.n	8004144 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	085b      	lsrs	r3, r3, #1
 800411a:	f04f 0400 	mov.w	r4, #0
 800411e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004122:	f144 0100 	adc.w	r1, r4, #0
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f04f 0400 	mov.w	r4, #0
 800412e:	461a      	mov	r2, r3
 8004130:	4623      	mov	r3, r4
 8004132:	f7fc f8a5 	bl	8000280 <__aeabi_uldivmod>
 8004136:	4603      	mov	r3, r0
 8004138:	460c      	mov	r4, r1
 800413a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800413c:	e002      	b.n	8004144 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	74fb      	strb	r3, [r7, #19]
            break;
 8004142:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414a:	d308      	bcc.n	800415e <UART_SetConfig+0x486>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004152:	d204      	bcs.n	800415e <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	e0f5      	b.n	800434a <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	74fb      	strb	r3, [r7, #19]
 8004162:	e0f2      	b.n	800434a <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416c:	d17f      	bne.n	800426e <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800416e:	7efb      	ldrb	r3, [r7, #27]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d85c      	bhi.n	800422e <UART_SetConfig+0x556>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0x4a4>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041bf 	.word	0x080041bf
 8004184:	080041dd 	.word	0x080041dd
 8004188:	0800422f 	.word	0x0800422f
 800418c:	080041f9 	.word	0x080041f9
 8004190:	0800422f 	.word	0x0800422f
 8004194:	0800422f 	.word	0x0800422f
 8004198:	0800422f 	.word	0x0800422f
 800419c:	08004217 	.word	0x08004217
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041a0:	f7fe f834 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 80041a4:	4603      	mov	r3, r0
 80041a6:	005a      	lsls	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	441a      	add	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041bc:	e03a      	b.n	8004234 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041be:	f7fe f83b 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 80041c2:	4603      	mov	r3, r0
 80041c4:	005a      	lsls	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041da:	e02b      	b.n	8004234 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80041e6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6852      	ldr	r2, [r2, #4]
 80041ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80041f6:	e01d      	b.n	8004234 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80041f8:	f7fd ff72 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80041fc:	4603      	mov	r3, r0
 80041fe:	005a      	lsls	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	441a      	add	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004210:	b29b      	uxth	r3, r3
 8004212:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004214:	e00e      	b.n	8004234 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	b29b      	uxth	r3, r3
 800422a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800422c:	e002      	b.n	8004234 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	74fb      	strb	r3, [r7, #19]
        break;
 8004232:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d916      	bls.n	8004268 <UART_SetConfig+0x590>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d212      	bcs.n	8004268 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	b29a      	uxth	r2, r3
 8004258:	897b      	ldrh	r3, [r7, #10]
 800425a:	4313      	orrs	r3, r2
 800425c:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	897a      	ldrh	r2, [r7, #10]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e070      	b.n	800434a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	74fb      	strb	r3, [r7, #19]
 800426c:	e06d      	b.n	800434a <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800426e:	7efb      	ldrb	r3, [r7, #27]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d859      	bhi.n	8004328 <UART_SetConfig+0x650>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <UART_SetConfig+0x5a4>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042bd 	.word	0x080042bd
 8004284:	080042d9 	.word	0x080042d9
 8004288:	08004329 	.word	0x08004329
 800428c:	080042f5 	.word	0x080042f5
 8004290:	08004329 	.word	0x08004329
 8004294:	08004329 	.word	0x08004329
 8004298:	08004329 	.word	0x08004329
 800429c:	08004311 	.word	0x08004311
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042a0:	f7fd ffb4 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	441a      	add	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042ba:	e038      	b.n	800432e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80042bc:	f7fd ffbc 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042d6:	e02a      	b.n	800432e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80042e2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6852      	ldr	r2, [r2, #4]
 80042ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80042f2:	e01c      	b.n	800432e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042f4:	f7fd fef4 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	b29b      	uxth	r3, r3
 800430c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800430e:	e00e      	b.n	800432e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	b29b      	uxth	r3, r3
 8004324:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004326:	e002      	b.n	800432e <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	74fb      	strb	r3, [r7, #19]
        break;
 800432c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b0f      	cmp	r3, #15
 8004332:	d908      	bls.n	8004346 <UART_SetConfig+0x66e>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433a:	d204      	bcs.n	8004346 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	e001      	b.n	800434a <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004362:	bf00      	nop
 8004364:	f4240000 	.word	0xf4240000

08004368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00a      	beq.n	80043d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00a      	beq.n	80043f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	f003 0310 	and.w	r3, r3, #16
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01a      	beq.n	800447e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004466:	d10a      	bne.n	800447e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044ba:	f7fc f8c5 	bl	8000648 <HAL_GetTick>
 80044be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d10e      	bne.n	80044ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f82a 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e020      	b.n	800452e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d10e      	bne.n	8004518 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f814 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e00a      	b.n	800452e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	e02a      	b.n	800459e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d026      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fc f87a 	bl	8000648 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <UART_WaitOnFlagUntilTimeout+0x30>
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11b      	bne.n	800459e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004574:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e00f      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69da      	ldr	r2, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4013      	ands	r3, r2
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	bf0c      	ite	eq
 80045ae:	2301      	moveq	r3, #1
 80045b0:	2300      	movne	r3, #0
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d0c5      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80045dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004606:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d114      	bne.n	8004676 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004662:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004672:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004674:	e002      	b.n	800467c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff fb10 	bl	8003c9c <HAL_UART_TxCpltCallback>
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f7ff fb0c 	bl	8003cb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d109      	bne.n	80046dc <UART_DMAError+0x3c>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b21      	cmp	r3, #33	; 0x21
 80046cc:	d106      	bne.n	80046dc <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff75 	bl	80045c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d109      	bne.n	80046fe <UART_DMAError+0x5e>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b22      	cmp	r3, #34	; 0x22
 80046ee:	d106      	bne.n	80046fe <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	f7ff ff79 	bl	80045f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004702:	f043 0210 	orr.w	r2, r3, #16
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff fada 	bl	8003cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <ICM_readBytes>:
#include "main.h"
#include "ICM_20948.h"


void ICM_readBytes(uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
 8004724:	4613      	mov	r3, r2
 8004726:	80bb      	strh	r3, [r7, #4]
	reg = reg | 0x80;
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800472e:	b2db      	uxtb	r3, r3
 8004730:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8004732:	2200      	movs	r2, #0
 8004734:	2110      	movs	r1, #16
 8004736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800473a:	f7fc fad1 	bl	8000ce0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 800473e:	1df9      	adds	r1, r7, #7
 8004740:	2332      	movs	r3, #50	; 0x32
 8004742:	2201      	movs	r2, #1
 8004744:	4809      	ldr	r0, [pc, #36]	; (800476c <ICM_readBytes+0x54>)
 8004746:	f7fe fb27 	bl	8002d98 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BUS, pData, Size, 50);
 800474a:	88ba      	ldrh	r2, [r7, #4]
 800474c:	2332      	movs	r3, #50	; 0x32
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	4806      	ldr	r0, [pc, #24]	; (800476c <ICM_readBytes+0x54>)
 8004752:	f7fe fc87 	bl	8003064 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8004756:	2201      	movs	r2, #1
 8004758:	2110      	movs	r1, #16
 800475a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800475e:	f7fc fabf 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200001ac 	.word	0x200001ac

08004770 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(uint8_t reg, uint8_t* pData) // ***
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	71fb      	strb	r3, [r7, #7]
	reg = reg | 0x80;
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004782:	b2db      	uxtb	r3, r3
 8004784:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8004786:	2200      	movs	r2, #0
 8004788:	2110      	movs	r1, #16
 800478a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800478e:	f7fc faa7 	bl	8000ce0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8004792:	1df9      	adds	r1, r7, #7
 8004794:	2332      	movs	r3, #50	; 0x32
 8004796:	2201      	movs	r2, #1
 8004798:	4810      	ldr	r0, [pc, #64]	; (80047dc <ICM_ReadOneByte+0x6c>)
 800479a:	f7fe fafd 	bl	8002d98 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 800479e:	bf00      	nop
 80047a0:	480e      	ldr	r0, [pc, #56]	; (80047dc <ICM_ReadOneByte+0x6c>)
 80047a2:	f7fe ff9a 	bl	80036da <HAL_SPI_GetState>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d1f9      	bne.n	80047a0 <ICM_ReadOneByte+0x30>
		;
	HAL_SPI_Receive(SPI_BUS, pData, 1, 50);
 80047ac:	2332      	movs	r3, #50	; 0x32
 80047ae:	2201      	movs	r2, #1
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	480a      	ldr	r0, [pc, #40]	; (80047dc <ICM_ReadOneByte+0x6c>)
 80047b4:	f7fe fc56 	bl	8003064 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 80047b8:	bf00      	nop
 80047ba:	4808      	ldr	r0, [pc, #32]	; (80047dc <ICM_ReadOneByte+0x6c>)
 80047bc:	f7fe ff8d 	bl	80036da <HAL_SPI_GetState>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d1f9      	bne.n	80047ba <ICM_ReadOneByte+0x4a>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80047c6:	2201      	movs	r2, #1
 80047c8:	2110      	movs	r1, #16
 80047ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047ce:	f7fc fa87 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200001ac 	.word	0x200001ac

080047e0 <ICM_WriteOneByte>:

void ICM_WriteOneByte(uint8_t reg, uint8_t Data) // ***
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	460a      	mov	r2, r1
 80047ea:	71fb      	strb	r3, [r7, #7]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2110      	movs	r1, #16
 80047fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004802:	f7fc fa6d 	bl	8000ce0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8004806:	1df9      	adds	r1, r7, #7
 8004808:	2332      	movs	r3, #50	; 0x32
 800480a:	2201      	movs	r2, #1
 800480c:	4809      	ldr	r0, [pc, #36]	; (8004834 <ICM_WriteOneByte+0x54>)
 800480e:	f7fe fac3 	bl	8002d98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BUS, &Data, 1, 50);
 8004812:	1db9      	adds	r1, r7, #6
 8004814:	2332      	movs	r3, #50	; 0x32
 8004816:	2201      	movs	r2, #1
 8004818:	4806      	ldr	r0, [pc, #24]	; (8004834 <ICM_WriteOneByte+0x54>)
 800481a:	f7fe fabd 	bl	8002d98 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800481e:	2201      	movs	r2, #1
 8004820:	2110      	movs	r1, #16
 8004822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004826:	f7fc fa5b 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200001ac 	.word	0x200001ac

08004838 <i2c_Mag_write>:

void i2c_Mag_write(uint8_t reg,uint8_t value)
  {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	460a      	mov	r2, r1
 8004842:	71fb      	strb	r3, [r7, #7]
 8004844:	4613      	mov	r3, r2
 8004846:	71bb      	strb	r3, [r7, #6]
  	ICM_WriteOneByte(0x7F, 0x30);
 8004848:	2130      	movs	r1, #48	; 0x30
 800484a:	207f      	movs	r0, #127	; 0x7f
 800484c:	f7ff ffc8 	bl	80047e0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8004850:	2001      	movs	r0, #1
 8004852:	f7fb ff05 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C);//mode: write
 8004856:	210c      	movs	r1, #12
 8004858:	2003      	movs	r0, #3
 800485a:	f7ff ffc1 	bl	80047e0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800485e:	2001      	movs	r0, #1
 8004860:	f7fb fefe 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);//set reg addr
 8004864:	79fb      	ldrb	r3, [r7, #7]
 8004866:	4619      	mov	r1, r3
 8004868:	2004      	movs	r0, #4
 800486a:	f7ff ffb9 	bl	80047e0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800486e:	2001      	movs	r0, #1
 8004870:	f7fb fef6 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,value);//send value
 8004874:	79bb      	ldrb	r3, [r7, #6]
 8004876:	4619      	mov	r1, r3
 8004878:	2006      	movs	r0, #6
 800487a:	f7ff ffb1 	bl	80047e0 <ICM_WriteOneByte>

  	HAL_Delay(1);
 800487e:	2001      	movs	r0, #1
 8004880:	f7fb feee 	bl	8000660 <HAL_Delay>
  }
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(uint8_t reg)
  {
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]
  	uint8_t  Data;
  	ICM_WriteOneByte(0x7F, 0x30);
 8004896:	2130      	movs	r1, #48	; 0x30
 8004898:	207f      	movs	r0, #127	; 0x7f
 800489a:	f7ff ffa1 	bl	80047e0 <ICM_WriteOneByte>
    HAL_Delay(1);
 800489e:	2001      	movs	r0, #1
 80048a0:	f7fb fede 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C|0x80);
 80048a4:	218c      	movs	r1, #140	; 0x8c
 80048a6:	2003      	movs	r0, #3
 80048a8:	f7ff ff9a 	bl	80047e0 <ICM_WriteOneByte>
    HAL_Delay(1);
 80048ac:	2001      	movs	r0, #1
 80048ae:	f7fb fed7 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);// set reg addr
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	4619      	mov	r1, r3
 80048b6:	2004      	movs	r0, #4
 80048b8:	f7ff ff92 	bl	80047e0 <ICM_WriteOneByte>
    HAL_Delay(1);
 80048bc:	2001      	movs	r0, #1
 80048be:	f7fb fecf 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,0xff);//read
 80048c2:	21ff      	movs	r1, #255	; 0xff
 80048c4:	2006      	movs	r0, #6
 80048c6:	f7ff ff8b 	bl	80047e0 <ICM_WriteOneByte>
  	HAL_Delay(1);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f7fb fec8 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x7F, 0x00);
 80048d0:	2100      	movs	r1, #0
 80048d2:	207f      	movs	r0, #127	; 0x7f
 80048d4:	f7ff ff84 	bl	80047e0 <ICM_WriteOneByte>
  	ICM_ReadOneByte(0x3B,&Data);
 80048d8:	f107 030f 	add.w	r3, r7, #15
 80048dc:	4619      	mov	r1, r3
 80048de:	203b      	movs	r0, #59	; 0x3b
 80048e0:	f7ff ff46 	bl	8004770 <ICM_ReadOneByte>
    HAL_Delay(1);
 80048e4:	2001      	movs	r0, #1
 80048e6:	f7fb febb 	bl	8000660 <HAL_Delay>
  	return Data;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
  }
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(int16_t magn[3]) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	uint8_t mag_buffer[10];

	      mag_buffer[0] =ICM_Mag_Read(0x01);
 80048fc:	2001      	movs	r0, #1
 80048fe:	f7ff ffc5 	bl	800488c <ICM_Mag_Read>
 8004902:	4603      	mov	r3, r0
 8004904:	733b      	strb	r3, [r7, #12]

	      mag_buffer[1] =ICM_Mag_Read(0x11);
 8004906:	2011      	movs	r0, #17
 8004908:	f7ff ffc0 	bl	800488c <ICM_Mag_Read>
 800490c:	4603      	mov	r3, r0
 800490e:	737b      	strb	r3, [r7, #13]
	  	  mag_buffer[2] =ICM_Mag_Read(0x12);
 8004910:	2012      	movs	r0, #18
 8004912:	f7ff ffbb 	bl	800488c <ICM_Mag_Read>
 8004916:	4603      	mov	r3, r0
 8004918:	73bb      	strb	r3, [r7, #14]
	  	  magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 800491a:	7b7b      	ldrb	r3, [r7, #13]
 800491c:	b21a      	sxth	r2, r3
 800491e:	7bbb      	ldrb	r3, [r7, #14]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	b21b      	sxth	r3, r3
 8004924:	4313      	orrs	r3, r2
 8004926:	b21a      	sxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	801a      	strh	r2, [r3, #0]
	    	mag_buffer[3] =ICM_Mag_Read(0x13);
 800492c:	2013      	movs	r0, #19
 800492e:	f7ff ffad 	bl	800488c <ICM_Mag_Read>
 8004932:	4603      	mov	r3, r0
 8004934:	73fb      	strb	r3, [r7, #15]
	      mag_buffer[4] =ICM_Mag_Read(0x14);
 8004936:	2014      	movs	r0, #20
 8004938:	f7ff ffa8 	bl	800488c <ICM_Mag_Read>
 800493c:	4603      	mov	r3, r0
 800493e:	743b      	strb	r3, [r7, #16]
	    	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	b219      	sxth	r1, r3
 8004944:	7c3b      	ldrb	r3, [r7, #16]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	b21a      	sxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3302      	adds	r3, #2
 800494e:	430a      	orrs	r2, r1
 8004950:	b212      	sxth	r2, r2
 8004952:	801a      	strh	r2, [r3, #0]
	  	 	mag_buffer[5] =ICM_Mag_Read(0x15);
 8004954:	2015      	movs	r0, #21
 8004956:	f7ff ff99 	bl	800488c <ICM_Mag_Read>
 800495a:	4603      	mov	r3, r0
 800495c:	747b      	strb	r3, [r7, #17]
	      mag_buffer[6] =ICM_Mag_Read(0x16);
 800495e:	2016      	movs	r0, #22
 8004960:	f7ff ff94 	bl	800488c <ICM_Mag_Read>
 8004964:	4603      	mov	r3, r0
 8004966:	74bb      	strb	r3, [r7, #18]
	  		magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8004968:	7c7b      	ldrb	r3, [r7, #17]
 800496a:	b219      	sxth	r1, r3
 800496c:	7cbb      	ldrb	r3, [r7, #18]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	b21a      	sxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	430a      	orrs	r2, r1
 8004978:	b212      	sxth	r2, r2
 800497a:	801a      	strh	r2, [r3, #0]

	     	i2c_Mag_write(0x31,0x01);
 800497c:	2101      	movs	r1, #1
 800497e:	2031      	movs	r0, #49	; 0x31
 8004980:	f7ff ff5a 	bl	8004838 <i2c_Mag_write>
}
 8004984:	bf00      	nop
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(void) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b0b4      	sub	sp, #208	; 0xd0
 8004990:	af00      	add	r7, sp, #0
	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 8004992:	23ea      	movs	r3, #234	; 0xea
 8004994:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint8_t test = ICM_WHOAMI();
 8004998:	f000 f96e 	bl	8004c78 <ICM_WHOAMI>
 800499c:	4603      	mov	r3, r0
 800499e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if (test == whoami) {
 80049a2:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 80049a6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d122      	bne.n	80049f4 <ICM_PowerOn+0x68>
		ICM_CSHigh();
 80049ae:	f000 f93b 	bl	8004c28 <ICM_CSHigh>
		HAL_Delay(10);
 80049b2:	200a      	movs	r0, #10
 80049b4:	f7fb fe54 	bl	8000660 <HAL_Delay>
		ICM_SelectBank(USER_BANK_0);
 80049b8:	2000      	movs	r0, #0
 80049ba:	f000 f91f 	bl	8004bfc <ICM_SelectBank>
		HAL_Delay(10);
 80049be:	200a      	movs	r0, #10
 80049c0:	f7fb fe4e 	bl	8000660 <HAL_Delay>
		ICM_Disable_I2C();
 80049c4:	f000 f928 	bl	8004c18 <ICM_Disable_I2C>
		HAL_Delay(10);
 80049c8:	200a      	movs	r0, #10
 80049ca:	f7fb fe49 	bl	8000660 <HAL_Delay>
		ICM_SetClock((uint8_t)CLK_BEST_AVAIL);
 80049ce:	2001      	movs	r0, #1
 80049d0:	f000 f934 	bl	8004c3c <ICM_SetClock>
		HAL_Delay(10);
 80049d4:	200a      	movs	r0, #10
 80049d6:	f7fb fe43 	bl	8000660 <HAL_Delay>
		ICM_AccelGyroOff();
 80049da:	f000 f93d 	bl	8004c58 <ICM_AccelGyroOff>
		HAL_Delay(20);
 80049de:	2014      	movs	r0, #20
 80049e0:	f7fb fe3e 	bl	8000660 <HAL_Delay>
		ICM_AccelGyroOn();
 80049e4:	f000 f940 	bl	8004c68 <ICM_AccelGyroOn>
		HAL_Delay(10);
 80049e8:	200a      	movs	r0, #10
 80049ea:	f7fb fe39 	bl	8000660 <HAL_Delay>
		ICM_Initialize();
 80049ee:	f000 f81f 	bl	8004a30 <ICM_Initialize>
	} else {
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		HAL_Delay(100);
	}
}
 80049f2:	e014      	b.n	8004a1e <ICM_PowerOn+0x92>
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
 80049f4:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 80049f8:	1d3b      	adds	r3, r7, #4
 80049fa:	490b      	ldr	r1, [pc, #44]	; (8004a28 <ICM_PowerOn+0x9c>)
 80049fc:	4618      	mov	r0, r3
 80049fe:	f002 fa2d 	bl	8006e5c <siprintf>
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fb fbe3 	bl	80001d0 <strlen>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	1d3b      	adds	r3, r7, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4806      	ldr	r0, [pc, #24]	; (8004a2c <ICM_PowerOn+0xa0>)
 8004a14:	f7ff f8c6 	bl	8003ba4 <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 8004a18:	2064      	movs	r0, #100	; 0x64
 8004a1a:	f7fb fe21 	bl	8000660 <HAL_Delay>
}
 8004a1e:	bf00      	nop
 8004a20:	37d0      	adds	r7, #208	; 0xd0
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	0800766c 	.word	0x0800766c
 8004a2c:	20000210 	.word	0x20000210

08004a30 <ICM_Initialize>:
uint16_t ICM_Initialize(void) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
		ICM_SelectBank(USER_BANK_2);
 8004a34:	2020      	movs	r0, #32
 8004a36:	f000 f8e1 	bl	8004bfc <ICM_SelectBank>
		HAL_Delay(20);
 8004a3a:	2014      	movs	r0, #20
 8004a3c:	f7fb fe10 	bl	8000660 <HAL_Delay>
		ICM_SetGyroRateLPF(GYRO_RATE_500, GYRO_LPF_17HZ);
 8004a40:	2129      	movs	r1, #41	; 0x29
 8004a42:	2001      	movs	r0, #1
 8004a44:	f000 f927 	bl	8004c96 <ICM_SetGyroRateLPF>
		//ICM_SetGyroRateLPF(GYRO_RATE_500, 0x00);
		HAL_Delay(10);
 8004a48:	200a      	movs	r0, #10
 8004a4a:	f7fb fe09 	bl	8000660 <HAL_Delay>


		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A);
 8004a4e:	210a      	movs	r1, #10
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7ff fec5 	bl	80047e0 <ICM_WriteOneByte>
		HAL_Delay(10);
 8004a56:	200a      	movs	r0, #10
 8004a58:	f7fb fe02 	bl	8000660 <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(0x14, (0x04 | 0x11));
 8004a5c:	2115      	movs	r1, #21
 8004a5e:	2014      	movs	r0, #20
 8004a60:	f7ff febe 	bl	80047e0 <ICM_WriteOneByte>
		//ICM_WriteOneByte(0x14, 0x04);

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00);
 8004a64:	2100      	movs	r1, #0
 8004a66:	2010      	movs	r0, #16
 8004a68:	f7ff feba 	bl	80047e0 <ICM_WriteOneByte>
		HAL_Delay(10);
 8004a6c:	200a      	movs	r0, #10
 8004a6e:	f7fb fdf7 	bl	8000660 <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A);
 8004a72:	210a      	movs	r1, #10
 8004a74:	2011      	movs	r0, #17
 8004a76:	f7ff feb3 	bl	80047e0 <ICM_WriteOneByte>
		HAL_Delay(10);
 8004a7a:	200a      	movs	r0, #10
 8004a7c:	f7fb fdf0 	bl	8000660 <HAL_Delay>

		ICM_SelectBank(USER_BANK_2);
 8004a80:	2020      	movs	r0, #32
 8004a82:	f000 f8bb 	bl	8004bfc <ICM_SelectBank>
		HAL_Delay(20);
 8004a86:	2014      	movs	r0, #20
 8004a88:	f7fb fdea 	bl	8000660 <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00); // Select user bank 0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	207f      	movs	r0, #127	; 0x7f
 8004a90:	f7ff fea6 	bl	80047e0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8004a94:	2130      	movs	r1, #48	; 0x30
 8004a96:	200f      	movs	r0, #15
 8004a98:	f7ff fea2 	bl	80047e0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20); // I2C_MST_EN
 8004a9c:	2120      	movs	r1, #32
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	f7ff fe9e 	bl	80047e0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30); // Select user bank 3
 8004aa4:	2130      	movs	r1, #48	; 0x30
 8004aa6:	207f      	movs	r0, #127	; 0x7f
 8004aa8:	f7ff fe9a 	bl	80047e0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8004aac:	214d      	movs	r1, #77	; 0x4d
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f7ff fe96 	bl	80047e0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	2002      	movs	r0, #2
 8004ab8:	f7ff fe92 	bl	80047e0 <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8004abc:	2181      	movs	r1, #129	; 0x81
 8004abe:	2005      	movs	r0, #5
 8004ac0:	f7ff fe8e 	bl	80047e0 <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01); // Reset AK8963
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	2032      	movs	r0, #50	; 0x32
 8004ac8:	f7ff feb6 	bl	8004838 <i2c_Mag_write>
		HAL_Delay(1000);
 8004acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ad0:	f7fb fdc6 	bl	8000660 <HAL_Delay>
		i2c_Mag_write(0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	2031      	movs	r0, #49	; 0x31
 8004ad8:	f7ff feae 	bl	8004838 <i2c_Mag_write>

		return 1337;
 8004adc:	f240 5339 	movw	r3, #1337	; 0x539
	}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(void) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
	uint8_t raw_data[12];
	ICM_readBytes(0x2D, raw_data, 12);
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	220c      	movs	r2, #12
 8004aee:	4619      	mov	r1, r3
 8004af0:	202d      	movs	r0, #45	; 0x2d
 8004af2:	f7ff fe11 	bl	8004718 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8004af6:	793b      	ldrb	r3, [r7, #4]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	b21a      	sxth	r2, r3
 8004afc:	797b      	ldrb	r3, [r7, #5]
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	4313      	orrs	r3, r2
 8004b02:	b21a      	sxth	r2, r3
 8004b04:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b06:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8004b08:	79bb      	ldrb	r3, [r7, #6]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	b21a      	sxth	r2, r3
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	b21b      	sxth	r3, r3
 8004b12:	4313      	orrs	r3, r2
 8004b14:	b21a      	sxth	r2, r3
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b18:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8004b1a:	7a3b      	ldrb	r3, [r7, #8]
 8004b1c:	021b      	lsls	r3, r3, #8
 8004b1e:	b21a      	sxth	r2, r3
 8004b20:	7a7b      	ldrb	r3, [r7, #9]
 8004b22:	b21b      	sxth	r3, r3
 8004b24:	4313      	orrs	r3, r2
 8004b26:	b21a      	sxth	r2, r3
 8004b28:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b2a:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8004b2c:	7abb      	ldrb	r3, [r7, #10]
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	b21a      	sxth	r2, r3
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	b21b      	sxth	r3, r3
 8004b36:	4313      	orrs	r3, r2
 8004b38:	b21a      	sxth	r2, r3
 8004b3a:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004b3c:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8004b3e:	7b3b      	ldrb	r3, [r7, #12]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	b21a      	sxth	r2, r3
 8004b44:	7b7b      	ldrb	r3, [r7, #13]
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	b21a      	sxth	r2, r3
 8004b4c:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004b4e:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	b21a      	sxth	r2, r3
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	b21b      	sxth	r3, r3
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	b21a      	sxth	r2, r3
 8004b5e:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004b60:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da00      	bge.n	8004b6e <ICM_ReadAccelGyro+0x8a>
 8004b6c:	3307      	adds	r3, #7
 8004b6e:	10db      	asrs	r3, r3, #3
 8004b70:	b21a      	sxth	r2, r3
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b74:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da00      	bge.n	8004b82 <ICM_ReadAccelGyro+0x9e>
 8004b80:	3307      	adds	r3, #7
 8004b82:	10db      	asrs	r3, r3, #3
 8004b84:	b21a      	sxth	r2, r3
 8004b86:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b88:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da00      	bge.n	8004b96 <ICM_ReadAccelGyro+0xb2>
 8004b94:	3307      	adds	r3, #7
 8004b96:	10db      	asrs	r3, r3, #3
 8004b98:	b21a      	sxth	r2, r3
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <ICM_ReadAccelGyro+0x10c>)
 8004b9c:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <ICM_ReadAccelGyro+0x114>)
 8004ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8004baa:	1112      	asrs	r2, r2, #4
 8004bac:	17db      	asrs	r3, r3, #31
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b21a      	sxth	r2, r3
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004bb4:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 8004bb6:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004bb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <ICM_ReadAccelGyro+0x114>)
 8004bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8004bc2:	1112      	asrs	r2, r2, #4
 8004bc4:	17db      	asrs	r3, r3, #31
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b21a      	sxth	r2, r3
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004bcc:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 8004bce:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004bd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004bd4:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <ICM_ReadAccelGyro+0x114>)
 8004bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8004bda:	1112      	asrs	r2, r2, #4
 8004bdc:	17db      	asrs	r3, r3, #31
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	b21a      	sxth	r2, r3
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <ICM_ReadAccelGyro+0x110>)
 8004be4:	809a      	strh	r2, [r3, #4]
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	2000019c 	.word	0x2000019c
 8004bf4:	200001a4 	.word	0x200001a4
 8004bf8:	10624dd3 	.word	0x10624dd3

08004bfc <ICM_SelectBank>:
void ICM_SelectBank(uint8_t bank) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank);
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	207f      	movs	r0, #127	; 0x7f
 8004c0c:	f7ff fde8 	bl	80047e0 <ICM_WriteOneByte>
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <ICM_Disable_I2C>:
void ICM_Disable_I2C(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x03, 0x78);
 8004c1c:	2178      	movs	r1, #120	; 0x78
 8004c1e:	2003      	movs	r0, #3
 8004c20:	f7ff fdde 	bl	80047e0 <ICM_WriteOneByte>
}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	2110      	movs	r1, #16
 8004c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c34:	f7fc f854 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8004c38:	bf00      	nop
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(uint8_t clk) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk);
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	2006      	movs	r0, #6
 8004c4c:	f7ff fdc8 	bl	80047e0 <ICM_WriteOneByte>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(void) {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07));
 8004c5c:	213f      	movs	r1, #63	; 0x3f
 8004c5e:	2007      	movs	r0, #7
 8004c60:	f7ff fdbe 	bl	80047e0 <ICM_WriteOneByte>
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x07, (0x00 | 0x00));
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2007      	movs	r0, #7
 8004c70:	f7ff fdb6 	bl	80047e0 <ICM_WriteOneByte>
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(void) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	uint8_t spiData = 0x01;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	71fb      	strb	r3, [r7, #7]
	ICM_ReadOneByte(0x00, &spiData);
 8004c82:	1dfb      	adds	r3, r7, #7
 8004c84:	4619      	mov	r1, r3
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7ff fd72 	bl	8004770 <ICM_ReadOneByte>
	return spiData;
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf) {
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	71fb      	strb	r3, [r7, #7]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf));
 8004ca6:	79fa      	ldrb	r2, [r7, #7]
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4619      	mov	r1, r3
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f7ff fd95 	bl	80047e0 <ICM_WriteOneByte>
}
 8004cb6:	bf00      	nop
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <MAX86150_setup>:

/**********************************************************************************
 * FUNCTION DEFINITIONS
 **********************************************************************************/

void MAX86150_setup() {
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
	// =====================================

	// Copying this setup code from github
	//sprintf(uartBuffer, "Before: %d\r\n", readRegister8(MAX86150_Address, MAX86150_SystemControl));
	//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 1000);
	writeRegister8(MAX86150_Address, MAX86150_SystemControl,0x01);
 8004cc4:	230d      	movs	r3, #13
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4619      	mov	r1, r3
 8004cca:	20bc      	movs	r0, #188	; 0xbc
 8004ccc:	f000 f9ca 	bl	8005064 <writeRegister8>
	HAL_Delay(100);
 8004cd0:	2064      	movs	r0, #100	; 0x64
 8004cd2:	f7fb fcc5 	bl	8000660 <HAL_Delay>
	//sprintf(uartBuffer, "After: %d\r\n", readRegister8(MAX86150_Address, MAX86150_SystemControl));
	//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 1000);
	writeRegister8(MAX86150_Address, MAX86150_FIFOConfig,0x7F);
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	227f      	movs	r2, #127	; 0x7f
 8004cda:	4619      	mov	r1, r3
 8004cdc:	20bc      	movs	r0, #188	; 0xbc
 8004cde:	f000 f9c1 	bl	8005064 <writeRegister8>
	// Default to average 4 samples
//	setFIFOAverage(MAX86150_SMPAVG_4);
	setFIFOAverage(0x5F);
 8004ce2:	205f      	movs	r0, #95	; 0x5f
 8004ce4:	f000 f9dc 	bl	80050a0 <setFIFOAverage>


	uint16_t FIFOCode = 0x00;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	80fb      	strh	r3, [r7, #6]

	FIFOCode = FIFOCode<<4 | 0x0009;// : FIFOCode;  //insert ECG front of ETI in FIFO
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	b21b      	sxth	r3, r3
 8004cf2:	f043 0309 	orr.w	r3, r3, #9
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	80fb      	strh	r3, [r7, #6]
	FIFOCode = FIFOCode<<8 | 0x0021;//) : FIFOCode; //insert Red(2) and IR (1) in front of ECG in FIFO
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	80fb      	strh	r3, [r7, #6]

	writeRegister8(MAX86150_Address, MAX86150_FIFODataControl1,(0b00100001));
 8004d08:	2309      	movs	r3, #9
 8004d0a:	2221      	movs	r2, #33	; 0x21
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	20bc      	movs	r0, #188	; 0xbc
 8004d10:	f000 f9a8 	bl	8005064 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_FIFODataControl2,(0b00001001));
 8004d14:	230a      	movs	r3, #10
 8004d16:	2209      	movs	r2, #9
 8004d18:	4619      	mov	r1, r3
 8004d1a:	20bc      	movs	r0, #188	; 0xbc
 8004d1c:	f000 f9a2 	bl	8005064 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_PPGConfig1,(0b11010001));
 8004d20:	230e      	movs	r3, #14
 8004d22:	22d1      	movs	r2, #209	; 0xd1
 8004d24:	4619      	mov	r1, r3
 8004d26:	20bc      	movs	r0, #188	; 0xbc
 8004d28:	f000 f99c 	bl	8005064 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_PPGConfig2,0x06);
 8004d2c:	230f      	movs	r3, #15
 8004d2e:	2206      	movs	r2, #6
 8004d30:	4619      	mov	r1, r3
 8004d32:	20bc      	movs	r0, #188	; 0xbc
 8004d34:	f000 f996 	bl	8005064 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_LEDRange,0x00);
 8004d38:	2314      	movs	r3, #20
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	20bc      	movs	r0, #188	; 0xbc
 8004d40:	f000 f990 	bl	8005064 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_SystemControl,0x04); // start FIFO
 8004d44:	230d      	movs	r3, #13
 8004d46:	2204      	movs	r2, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	20bc      	movs	r0, #188	; 0xbc
 8004d4c:	f000 f98a 	bl	8005064 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_ECGConfig1,0b00000011);
 8004d50:	233c      	movs	r3, #60	; 0x3c
 8004d52:	2203      	movs	r2, #3
 8004d54:	4619      	mov	r1, r3
 8004d56:	20bc      	movs	r0, #188	; 0xbc
 8004d58:	f000 f984 	bl	8005064 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_ECGConfig2,0b00001101);
 8004d5c:	233e      	movs	r3, #62	; 0x3e
 8004d5e:	220d      	movs	r2, #13
 8004d60:	4619      	mov	r1, r3
 8004d62:	20bc      	movs	r0, #188	; 0xbc
 8004d64:	f000 f97e 	bl	8005064 <writeRegister8>

	setPulseAmplitudeRed(0xFF);
 8004d68:	20ff      	movs	r0, #255	; 0xff
 8004d6a:	f000 f9a8 	bl	80050be <setPulseAmplitudeRed>
	setPulseAmplitudeIR(0xFF);
 8004d6e:	20ff      	movs	r0, #255	; 0xff
 8004d70:	f000 f9b4 	bl	80050dc <setPulseAmplitudeIR>

	clearFIFO();
 8004d74:	f000 f9c1 	bl	80050fa <clearFIFO>
//	setPulseAmplitudeRed(0x3F);
//	setPulseAmplitudeIR(0x3F);
	// 0x7F = 25.4 mA
//	setPulseAmplitudeProximity(0x7F);

}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <bitMask>:

// Given a register, read from it, mask the bits, change it
void bitMask(uint8_t reg, uint8_t mask, uint8_t value) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	71bb      	strb	r3, [r7, #6]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	717b      	strb	r3, [r7, #5]

	// Read the contents of the register
	uint8_t originalContents = readRegister8(MAX86150_Address, reg);
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	4619      	mov	r1, r3
 8004d96:	20bc      	movs	r0, #188	; 0xbc
 8004d98:	f000 f944 	bl	8005024 <readRegister8>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]

	// Zero-out portions of the register I'm interested in
	originalContents = (reg & mask);
 8004da0:	79fa      	ldrb	r2, [r7, #7]
 8004da2:	79bb      	ldrb	r3, [r7, #6]
 8004da4:	4013      	ands	r3, r2
 8004da6:	73fb      	strb	r3, [r7, #15]

	// Change contents
	writeRegister8(MAX86150_Address, reg, (originalContents | value));
 8004da8:	7bfa      	ldrb	r2, [r7, #15]
 8004daa:	797b      	ldrb	r3, [r7, #5]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	79fb      	ldrb	r3, [r7, #7]
 8004db2:	4619      	mov	r1, r3
 8004db4:	20bc      	movs	r0, #188	; 0xbc
 8004db6:	f000 f955 	bl	8005064 <writeRegister8>
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <MAX86150_check>:


uint16_t MAX86150_check() {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8

	uint8_t readPointer = getReadPointer();
 8004dca:	f000 f917 	bl	8004ffc <getReadPointer>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	757b      	strb	r3, [r7, #21]
	uint8_t writePointer = getWritePointer();
 8004dd2:	f000 f91d 	bl	8005010 <getWritePointer>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	753b      	strb	r3, [r7, #20]

	uint8_t activeDevices = 3;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	74fb      	strb	r3, [r7, #19]
	uint8_t numberOfSamples = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	75fb      	strb	r3, [r7, #23]

	// Do we have new data
	if (readPointer != writePointer) {
 8004de2:	7d7a      	ldrb	r2, [r7, #21]
 8004de4:	7d3b      	ldrb	r3, [r7, #20]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	f000 80ec 	beq.w	8004fc4 <MAX86150_check+0x200>

		// Number of samples to read from the sensor
		numberOfSamples = writePointer - readPointer;
 8004dec:	7d3a      	ldrb	r2, [r7, #20]
 8004dee:	7d7b      	ldrb	r3, [r7, #21]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	75fb      	strb	r3, [r7, #23]
			numberOfSamples += I2C_BUFFER_LENGTH; // wrap condition
		}

		//We now have the number of readings, now calc uint8_ts to read
		//For this example we are just doing Red and IR (3 uint8_ts each)
		uint8_t bytesLeftToRead = numberOfSamples * activeDevices * 3;
 8004df4:	7dfa      	ldrb	r2, [r7, #23]
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	fb12 f303 	smulbb	r3, r2, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	0052      	lsls	r2, r2, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	75bb      	strb	r3, [r7, #22]

		// Get ready to read a burst of data
		HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, &MAX86150_FIFODataRegister, 1, 10);
 8004e06:	230a      	movs	r3, #10
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4a70      	ldr	r2, [pc, #448]	; (8004fd0 <MAX86150_check+0x20c>)
 8004e0e:	21bc      	movs	r1, #188	; 0xbc
 8004e10:	4870      	ldr	r0, [pc, #448]	; (8004fd4 <MAX86150_check+0x210>)
 8004e12:	f7fc f80d 	bl	8000e30 <HAL_I2C_Master_Transmit>

		while(bytesLeftToRead > 0) {
 8004e16:	e0d1      	b.n	8004fbc <MAX86150_check+0x1f8>
			int8_t toGet = bytesLeftToRead;
 8004e18:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004e1c:	74bb      	strb	r3, [r7, #18]
			if(toGet > I2C_BUFFER_LENGTH) {
 8004e1e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	dd0f      	ble.n	8004e46 <MAX86150_check+0x82>
				toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (activeDevices * 3));
 8004e26:	7cfa      	ldrb	r2, [r7, #19]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4413      	add	r3, r2
 8004e2e:	2220      	movs	r2, #32
 8004e30:	fb92 f1f3 	sdiv	r1, r2, r3
 8004e34:	fb03 f301 	mul.w	r3, r3, r1
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f1c3 0320 	rsb	r3, r3, #32
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	74bb      	strb	r3, [r7, #18]
			}

			bytesLeftToRead -= toGet;
 8004e46:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	7dba      	ldrb	r2, [r7, #22]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	75bb      	strb	r3, [r7, #22]

			HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &toGet, sizeof(toGet), 100);
 8004e52:	f107 0212 	add.w	r2, r7, #18
 8004e56:	2364      	movs	r3, #100	; 0x64
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	21bc      	movs	r1, #188	; 0xbc
 8004e5e:	485d      	ldr	r0, [pc, #372]	; (8004fd4 <MAX86150_check+0x210>)
 8004e60:	f7fc f8da 	bl	8001018 <HAL_I2C_Master_Receive>

			while(toGet > 0) {
 8004e64:	e0a5      	b.n	8004fb2 <MAX86150_check+0x1ee>
				sense.head++; //Advance the head of the storage struct
 8004e66:	4b5c      	ldr	r3, [pc, #368]	; (8004fd8 <MAX86150_check+0x214>)
 8004e68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <MAX86150_check+0x214>)
 8004e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				sense.head %= STORAGE_SIZE; //Wrap condition
 8004e76:	4b58      	ldr	r3, [pc, #352]	; (8004fd8 <MAX86150_check+0x214>)
 8004e78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4b55      	ldr	r3, [pc, #340]	; (8004fd8 <MAX86150_check+0x214>)
 8004e84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

				uint8_t temp[sizeof(uint32_t)]; //Array of 4 uint8_ts that we will convert into long
				uint32_t tempLong;

				temp[3] = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
				HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[2], 1, 100);
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	2364      	movs	r3, #100	; 0x64
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2301      	movs	r3, #1
 8004e98:	21bc      	movs	r1, #188	; 0xbc
 8004e9a:	484e      	ldr	r0, [pc, #312]	; (8004fd4 <MAX86150_check+0x210>)
 8004e9c:	f7fc f8bc 	bl	8001018 <HAL_I2C_Master_Receive>
				HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[1], 1, 100);
 8004ea0:	f107 030c 	add.w	r3, r7, #12
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	2364      	movs	r3, #100	; 0x64
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	21bc      	movs	r1, #188	; 0xbc
 8004eae:	4849      	ldr	r0, [pc, #292]	; (8004fd4 <MAX86150_check+0x210>)
 8004eb0:	f7fc f8b2 	bl	8001018 <HAL_I2C_Master_Receive>
				HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[0], 1, 100);
 8004eb4:	f107 020c 	add.w	r2, r7, #12
 8004eb8:	2364      	movs	r3, #100	; 0x64
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	21bc      	movs	r1, #188	; 0xbc
 8004ec0:	4844      	ldr	r0, [pc, #272]	; (8004fd4 <MAX86150_check+0x210>)
 8004ec2:	f7fc f8a9 	bl	8001018 <HAL_I2C_Master_Receive>

				//Convert array to long
				memcpy(&tempLong, temp, sizeof(tempLong));
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	60bb      	str	r3, [r7, #8]

				tempLong &= 0x7FFFF; //Zero out all but 18 bits
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed0:	60bb      	str	r3, [r7, #8]

				sense.red[sense.head] = tempLong; //Store this reading into the sense array
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <MAX86150_check+0x214>)
 8004ed4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ed8:	4619      	mov	r1, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <MAX86150_check+0x214>)
 8004ede:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

				if (activeDevices > 1)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d92c      	bls.n	8004f42 <MAX86150_check+0x17e>
					{
					  //Burst read three more uint8_ts - IR
					  temp[3] = 0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
					  HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[2], 1, 100);
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	1c9a      	adds	r2, r3, #2
 8004ef2:	2364      	movs	r3, #100	; 0x64
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	21bc      	movs	r1, #188	; 0xbc
 8004efa:	4836      	ldr	r0, [pc, #216]	; (8004fd4 <MAX86150_check+0x210>)
 8004efc:	f7fc f88c 	bl	8001018 <HAL_I2C_Master_Receive>
					  HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[1], 1, 100);
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	2364      	movs	r3, #100	; 0x64
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	21bc      	movs	r1, #188	; 0xbc
 8004f0e:	4831      	ldr	r0, [pc, #196]	; (8004fd4 <MAX86150_check+0x210>)
 8004f10:	f7fc f882 	bl	8001018 <HAL_I2C_Master_Receive>
					  HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[0], 1, 100);
 8004f14:	f107 020c 	add.w	r2, r7, #12
 8004f18:	2364      	movs	r3, #100	; 0x64
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	21bc      	movs	r1, #188	; 0xbc
 8004f20:	482c      	ldr	r0, [pc, #176]	; (8004fd4 <MAX86150_check+0x210>)
 8004f22:	f7fc f879 	bl	8001018 <HAL_I2C_Master_Receive>

					  //Convert array to long
					  memcpy(&tempLong, temp, sizeof(tempLong));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	60bb      	str	r3, [r7, #8]
						//Serial.println(tempLong);
					  tempLong &= 0x7FFFF; //Zero out all but 18 bits
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f30:	60bb      	str	r3, [r7, #8]

					  sense.IR[sense.head] = tempLong;
 8004f32:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <MAX86150_check+0x214>)
 8004f34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	4927      	ldr	r1, [pc, #156]	; (8004fd8 <MAX86150_check+0x214>)
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}

					if (activeDevices > 2)
 8004f42:	7cfb      	ldrb	r3, [r7, #19]
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d928      	bls.n	8004f9a <MAX86150_check+0x1d6>
					{
					  //Burst read three more uint8_ts - ECG
								int32_t tempLongSigned;

					  temp[3] = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
					  HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[2], 1, 100);
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	2364      	movs	r3, #100	; 0x64
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2301      	movs	r3, #1
 8004f58:	21bc      	movs	r1, #188	; 0xbc
 8004f5a:	481e      	ldr	r0, [pc, #120]	; (8004fd4 <MAX86150_check+0x210>)
 8004f5c:	f7fc f85c 	bl	8001018 <HAL_I2C_Master_Receive>
					  HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[1], 1, 100);
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	2364      	movs	r3, #100	; 0x64
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	21bc      	movs	r1, #188	; 0xbc
 8004f6e:	4819      	ldr	r0, [pc, #100]	; (8004fd4 <MAX86150_check+0x210>)
 8004f70:	f7fc f852 	bl	8001018 <HAL_I2C_Master_Receive>
					  HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &temp[0], 1, 100);
 8004f74:	f107 020c 	add.w	r2, r7, #12
 8004f78:	2364      	movs	r3, #100	; 0x64
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	21bc      	movs	r1, #188	; 0xbc
 8004f80:	4814      	ldr	r0, [pc, #80]	; (8004fd4 <MAX86150_check+0x210>)
 8004f82:	f7fc f849 	bl	8001018 <HAL_I2C_Master_Receive>
								//Serial.println(tempLong);
					  //Convert array to long
					  memcpy(&tempLongSigned, temp, sizeof(tempLongSigned));
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	607b      	str	r3, [r7, #4]

							//tempLong &= 0x3FFFF; //Zero out all but 18 bits

					  sense.ecg[sense.head] = tempLongSigned;
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <MAX86150_check+0x214>)
 8004f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4911      	ldr	r1, [pc, #68]	; (8004fd8 <MAX86150_check+0x214>)
 8004f94:	3308      	adds	r3, #8
 8004f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					}

					toGet -= activeDevices * 3;
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	4413      	add	r3, r2
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	74bb      	strb	r3, [r7, #18]
			while(toGet > 0) {
 8004fb2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f73f af55 	bgt.w	8004e66 <MAX86150_check+0xa2>
		while(bytesLeftToRead > 0) {
 8004fbc:	7dbb      	ldrb	r3, [r7, #22]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f47f af2a 	bne.w	8004e18 <MAX86150_check+0x54>
				  }
				} //End while (uint8_tsLeftToRead > 0)
			  } //End readPtr != writePtr
			  return (numberOfSamples); //Let the world know how much new data we found
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	b29b      	uxth	r3, r3
			}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	08007c6b 	.word	0x08007c6b
 8004fd4:	20000298 	.word	0x20000298
 8004fd8:	200002e4 	.word	0x200002e4

08004fdc <MAX86150_getFIFORed>:


uint32_t MAX86150_getFIFORed(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return (sense.red[sense.tail]);
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <MAX86150_getFIFORed+0x1c>)
 8004fe2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <MAX86150_getFIFORed+0x1c>)
 8004fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	200002e4 	.word	0x200002e4

08004ffc <getReadPointer>:
uint32_t getFIFOIR(void)
{
  return (sense.IR[sense.tail]);
}

uint8_t getReadPointer() {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0

	return readRegister8(MAX86150_Address, MAX86150_FIFOReadPointer);
 8005000:	2306      	movs	r3, #6
 8005002:	4619      	mov	r1, r3
 8005004:	20bc      	movs	r0, #188	; 0xbc
 8005006:	f000 f80d 	bl	8005024 <readRegister8>
 800500a:	4603      	mov	r3, r0
}
 800500c:	4618      	mov	r0, r3
 800500e:	bd80      	pop	{r7, pc}

08005010 <getWritePointer>:

uint8_t getWritePointer() {
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0

	return readRegister8(MAX86150_Address, MAX86150_FIFOWritePointer);
 8005014:	2304      	movs	r3, #4
 8005016:	4619      	mov	r1, r3
 8005018:	20bc      	movs	r0, #188	; 0xbc
 800501a:	f000 f803 	bl	8005024 <readRegister8>
 800501e:	4603      	mov	r3, r0
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd80      	pop	{r7, pc}

08005024 <readRegister8>:



// I2C Communication
uint8_t readRegister8(uint8_t address, uint8_t reg) {
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af02      	add	r7, sp, #8
 800502a:	4603      	mov	r3, r0
 800502c:	460a      	mov	r2, r1
 800502e:	71fb      	strb	r3, [r7, #7]
 8005030:	4613      	mov	r3, r2
 8005032:	71bb      	strb	r3, [r7, #6]

//	uint8_t data[2];
	uint8_t registerContents;
//	data[0] = reg;

	HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, &reg, 1, 100);
 8005034:	1dba      	adds	r2, r7, #6
 8005036:	2364      	movs	r3, #100	; 0x64
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2301      	movs	r3, #1
 800503c:	21bc      	movs	r1, #188	; 0xbc
 800503e:	4808      	ldr	r0, [pc, #32]	; (8005060 <readRegister8+0x3c>)
 8005040:	f7fb fef6 	bl	8000e30 <HAL_I2C_Master_Transmit>


	// Store the data from the I2C Communication in data[1]
	HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &registerContents, 1, 100);
 8005044:	f107 020f 	add.w	r2, r7, #15
 8005048:	2364      	movs	r3, #100	; 0x64
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2301      	movs	r3, #1
 800504e:	21bc      	movs	r1, #188	; 0xbc
 8005050:	4803      	ldr	r0, [pc, #12]	; (8005060 <readRegister8+0x3c>)
 8005052:	f7fb ffe1 	bl	8001018 <HAL_I2C_Master_Receive>

	return registerContents;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000298 	.word	0x20000298

08005064 <writeRegister8>:

// The 7-bit address of device, the register you want to write to, the value you want to write
void writeRegister8(uint8_t SevenBitAddress, uint8_t reg, uint8_t value) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af02      	add	r7, sp, #8
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
 800506e:	460b      	mov	r3, r1
 8005070:	71bb      	strb	r3, [r7, #6]
 8005072:	4613      	mov	r3, r2
 8005074:	717b      	strb	r3, [r7, #5]

	uint8_t data[2];

	data[0] = reg;
 8005076:	79bb      	ldrb	r3, [r7, #6]
 8005078:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800507a:	797b      	ldrb	r3, [r7, #5]
 800507c:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, data, 2, 100);
 800507e:	f107 020c 	add.w	r2, r7, #12
 8005082:	2364      	movs	r3, #100	; 0x64
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2302      	movs	r3, #2
 8005088:	21bc      	movs	r1, #188	; 0xbc
 800508a:	4804      	ldr	r0, [pc, #16]	; (800509c <writeRegister8+0x38>)
 800508c:	f7fb fed0 	bl	8000e30 <HAL_I2C_Master_Transmit>
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]

	return;
 8005094:	bf00      	nop

}
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000298 	.word	0x20000298

080050a0 <setFIFOAverage>:

void setFIFOAverage(uint8_t numSamp) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]

	bitMask(MAX86150_FIFOConfig, MAX86150_SampleRate_MASK, numSamp);
 80050aa:	2008      	movs	r0, #8
 80050ac:	21c3      	movs	r1, #195	; 0xc3
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	461a      	mov	r2, r3
 80050b2:	f7ff fe65 	bl	8004d80 <bitMask>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <setPulseAmplitudeRed>:

	// LEDPulseWidth_50, _100, _200, _400
	bitMask(MAX86150_PPGConfig1,MAX86150_LEDPulseWidth_MASK, pulseWidth);
}

void setPulseAmplitudeRed(uint8_t amplitude) {
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	4603      	mov	r3, r0
 80050c6:	71fb      	strb	r3, [r7, #7]

	writeRegister8(MAX86150_Address, MAX86150_LED2_RED, amplitude);
 80050c8:	2112      	movs	r1, #18
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	461a      	mov	r2, r3
 80050ce:	20bc      	movs	r0, #188	; 0xbc
 80050d0:	f7ff ffc8 	bl	8005064 <writeRegister8>
}
 80050d4:	bf00      	nop
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <setPulseAmplitudeIR>:


void setPulseAmplitudeIR(uint8_t amplitude) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]

	writeRegister8(MAX86150_Address, MAX86150_LED1_IR, amplitude);
 80050e6:	2111      	movs	r1, #17
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	461a      	mov	r2, r3
 80050ec:	20bc      	movs	r0, #188	; 0xbc
 80050ee:	f7ff ffb9 	bl	8005064 <writeRegister8>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <clearFIFO>:
void disablePROX_INT(void) {

	bitMask(MAX86150_INT_EN1, MAX86150_INT_PROX_MASK, MAX86150_INT_PROX_DISABLE);
}

void clearFIFO(void) {
 80050fa:	b580      	push	{r7, lr}
 80050fc:	af00      	add	r7, sp, #0

	writeRegister8(MAX86150_Address, MAX86150_FIFOWritePointer, 0);
 80050fe:	2304      	movs	r3, #4
 8005100:	2200      	movs	r2, #0
 8005102:	4619      	mov	r1, r3
 8005104:	20bc      	movs	r0, #188	; 0xbc
 8005106:	f7ff ffad 	bl	8005064 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_OverflowCounter, 0);
 800510a:	2305      	movs	r3, #5
 800510c:	2200      	movs	r2, #0
 800510e:	4619      	mov	r1, r3
 8005110:	20bc      	movs	r0, #188	; 0xbc
 8005112:	f7ff ffa7 	bl	8005064 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_FIFOReadPointer, 0);
 8005116:	2306      	movs	r3, #6
 8005118:	2200      	movs	r2, #0
 800511a:	4619      	mov	r1, r3
 800511c:	20bc      	movs	r0, #188	; 0xbc
 800511e:	f7ff ffa1 	bl	8005064 <writeRegister8>
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <NRF24_DelayMicroSeconds+0x38>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <NRF24_DelayMicroSeconds+0x3c>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0c9a      	lsrs	r2, r3, #18
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8005148:	bf00      	nop
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1e5a      	subs	r2, r3, #1
 800514e:	60fa      	str	r2, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1fa      	bne.n	800514a <NRF24_DelayMicroSeconds+0x22>
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	20000010 	.word	0x20000010
 8005164:	165e9f81 	.word	0x165e9f81

08005168 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <NRF24_csn+0x20>
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <NRF24_csn+0x38>)
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <NRF24_csn+0x3c>)
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	4619      	mov	r1, r3
 8005182:	f7fb fdad 	bl	8000ce0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8005186:	e007      	b.n	8005198 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <NRF24_csn+0x38>)
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <NRF24_csn+0x3c>)
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	2200      	movs	r2, #0
 8005192:	4619      	mov	r1, r3
 8005194:	f7fb fda4 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	2000009c 	.word	0x2000009c
 80051a4:	200000a0 	.word	0x200000a0

080051a8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <NRF24_ce+0x20>
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <NRF24_ce+0x38>)
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <NRF24_ce+0x3c>)
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7fb fd8d 	bl	8000ce0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80051c6:	e007      	b.n	80051d8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80051c8:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <NRF24_ce+0x38>)
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <NRF24_ce+0x3c>)
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2200      	movs	r2, #0
 80051d2:	4619      	mov	r1, r3
 80051d4:	f7fb fd84 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000009c 	.word	0x2000009c
 80051e4:	200000a2 	.word	0x200000a2

080051e8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7ff ffb8 	bl	8005168 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8005202:	f107 010c 	add.w	r1, r7, #12
 8005206:	2364      	movs	r3, #100	; 0x64
 8005208:	2201      	movs	r2, #1
 800520a:	480a      	ldr	r0, [pc, #40]	; (8005234 <NRF24_read_register+0x4c>)
 800520c:	f7fd fdc4 	bl	8002d98 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8005210:	f107 030c 	add.w	r3, r7, #12
 8005214:	1c59      	adds	r1, r3, #1
 8005216:	2364      	movs	r3, #100	; 0x64
 8005218:	2201      	movs	r2, #1
 800521a:	4806      	ldr	r0, [pc, #24]	; (8005234 <NRF24_read_register+0x4c>)
 800521c:	f7fd ff22 	bl	8003064 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8005220:	7b7b      	ldrb	r3, [r7, #13]
 8005222:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8005224:	2001      	movs	r0, #1
 8005226:	f7ff ff9f 	bl	8005168 <NRF24_csn>
	return retData;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	200000a4 	.word	0x200000a4

08005238 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	6039      	str	r1, [r7, #0]
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	4613      	mov	r3, r2
 8005246:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005248:	2000      	movs	r0, #0
 800524a:	f7ff ff8d 	bl	8005168 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	b2db      	uxtb	r3, r3
 8005256:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8005258:	f107 010c 	add.w	r1, r7, #12
 800525c:	2364      	movs	r3, #100	; 0x64
 800525e:	2201      	movs	r2, #1
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <NRF24_read_registerN+0x4c>)
 8005262:	f7fd fd99 	bl	8002d98 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8005266:	79bb      	ldrb	r3, [r7, #6]
 8005268:	b29a      	uxth	r2, r3
 800526a:	2364      	movs	r3, #100	; 0x64
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	4805      	ldr	r0, [pc, #20]	; (8005284 <NRF24_read_registerN+0x4c>)
 8005270:	f7fd fef8 	bl	8003064 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8005274:	2001      	movs	r0, #1
 8005276:	f7ff ff77 	bl	8005168 <NRF24_csn>
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200000a4 	.word	0x200000a4

08005288 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	460a      	mov	r2, r1
 8005292:	71fb      	strb	r3, [r7, #7]
 8005294:	4613      	mov	r3, r2
 8005296:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005298:	2000      	movs	r0, #0
 800529a:	f7ff ff65 	bl	8005168 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	f043 0320 	orr.w	r3, r3, #32
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80052a8:	79bb      	ldrb	r3, [r7, #6]
 80052aa:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80052ac:	f107 010c 	add.w	r1, r7, #12
 80052b0:	2364      	movs	r3, #100	; 0x64
 80052b2:	2202      	movs	r2, #2
 80052b4:	4804      	ldr	r0, [pc, #16]	; (80052c8 <NRF24_write_register+0x40>)
 80052b6:	f7fd fd6f 	bl	8002d98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80052ba:	2001      	movs	r0, #1
 80052bc:	f7ff ff54 	bl	8005168 <NRF24_csn>
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200000a4 	.word	0x200000a4

080052cc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	6039      	str	r1, [r7, #0]
 80052d6:	71fb      	strb	r3, [r7, #7]
 80052d8:	4613      	mov	r3, r2
 80052da:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80052dc:	2000      	movs	r0, #0
 80052de:	f7ff ff43 	bl	8005168 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	f043 0320 	orr.w	r3, r3, #32
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80052ec:	f107 010c 	add.w	r1, r7, #12
 80052f0:	2364      	movs	r3, #100	; 0x64
 80052f2:	2201      	movs	r2, #1
 80052f4:	4808      	ldr	r0, [pc, #32]	; (8005318 <NRF24_write_registerN+0x4c>)
 80052f6:	f7fd fd4f 	bl	8002d98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80052fa:	79bb      	ldrb	r3, [r7, #6]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	2364      	movs	r3, #100	; 0x64
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	4805      	ldr	r0, [pc, #20]	; (8005318 <NRF24_write_registerN+0x4c>)
 8005304:	f7fd fd48 	bl	8002d98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8005308:	2001      	movs	r0, #1
 800530a:	f7ff ff2d 	bl	8005168 <NRF24_csn>
}
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200000a4 	.word	0x200000a4

0800531c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8005328:	2000      	movs	r0, #0
 800532a:	f7ff ff1d 	bl	8005168 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800532e:	23a0      	movs	r3, #160	; 0xa0
 8005330:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8005332:	f107 010f 	add.w	r1, r7, #15
 8005336:	2364      	movs	r3, #100	; 0x64
 8005338:	2201      	movs	r2, #1
 800533a:	4808      	ldr	r0, [pc, #32]	; (800535c <NRF24_write_payload+0x40>)
 800533c:	f7fd fd2c 	bl	8002d98 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	b29a      	uxth	r2, r3
 8005344:	2364      	movs	r3, #100	; 0x64
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4804      	ldr	r0, [pc, #16]	; (800535c <NRF24_write_payload+0x40>)
 800534a:	f7fd fd25 	bl	8002d98 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800534e:	2001      	movs	r0, #1
 8005350:	f7ff ff0a 	bl	8005168 <NRF24_csn>
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	200000a4 	.word	0x200000a4

08005360 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8005364:	21ff      	movs	r1, #255	; 0xff
 8005366:	20e1      	movs	r0, #225	; 0xe1
 8005368:	f7ff ff8e 	bl	8005288 <NRF24_write_register>
}
 800536c:	bf00      	nop
 800536e:	bd80      	pop	{r7, pc}

08005370 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8005374:	21ff      	movs	r1, #255	; 0xff
 8005376:	20e2      	movs	r0, #226	; 0xe2
 8005378:	f7ff ff86 	bl	8005288 <NRF24_write_register>
}
 800537c:	bf00      	nop
 800537e:	bd80      	pop	{r7, pc}

08005380 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8005386:	2007      	movs	r0, #7
 8005388:	f7ff ff2e 	bl	80051e8 <NRF24_read_register>
 800538c:	4603      	mov	r3, r0
 800538e:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8005390:	79fb      	ldrb	r3, [r7, #7]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 800539c:	b082      	sub	sp, #8
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	460b      	mov	r3, r1
 80053aa:	807b      	strh	r3, [r7, #2]
 80053ac:	4613      	mov	r3, r2
 80053ae:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80053b0:	4b66      	ldr	r3, [pc, #408]	; (800554c <NRF24_begin+0x1b0>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f107 031c 	add.w	r3, r7, #28
 80053b8:	2264      	movs	r2, #100	; 0x64
 80053ba:	4619      	mov	r1, r3
 80053bc:	f001 fd3a 	bl	8006e34 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80053c0:	4a63      	ldr	r2, [pc, #396]	; (8005550 <NRF24_begin+0x1b4>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80053c6:	4a63      	ldr	r2, [pc, #396]	; (8005554 <NRF24_begin+0x1b8>)
 80053c8:	887b      	ldrh	r3, [r7, #2]
 80053ca:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80053cc:	4a62      	ldr	r2, [pc, #392]	; (8005558 <NRF24_begin+0x1bc>)
 80053ce:	883b      	ldrh	r3, [r7, #0]
 80053d0:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80053d2:	2001      	movs	r0, #1
 80053d4:	f7ff fec8 	bl	8005168 <NRF24_csn>
	NRF24_ce(0);
 80053d8:	2000      	movs	r0, #0
 80053da:	f7ff fee5 	bl	80051a8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80053de:	2005      	movs	r0, #5
 80053e0:	f7fb f93e 	bl	8000660 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80053e4:	2108      	movs	r1, #8
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7ff ff4e 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80053ec:	213f      	movs	r1, #63	; 0x3f
 80053ee:	2001      	movs	r0, #1
 80053f0:	f7ff ff4a 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80053f4:	2103      	movs	r1, #3
 80053f6:	2002      	movs	r0, #2
 80053f8:	f7ff ff46 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80053fc:	2103      	movs	r1, #3
 80053fe:	2003      	movs	r0, #3
 8005400:	f7ff ff42 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8005404:	2103      	movs	r1, #3
 8005406:	2004      	movs	r0, #4
 8005408:	f7ff ff3e 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800540c:	2102      	movs	r1, #2
 800540e:	2005      	movs	r0, #5
 8005410:	f7ff ff3a 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8005414:	210f      	movs	r1, #15
 8005416:	2006      	movs	r0, #6
 8005418:	f7ff ff36 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800541c:	210e      	movs	r1, #14
 800541e:	2007      	movs	r0, #7
 8005420:	f7ff ff32 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8005424:	2100      	movs	r1, #0
 8005426:	2008      	movs	r0, #8
 8005428:	f7ff ff2e 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800542c:	2100      	movs	r1, #0
 800542e:	2009      	movs	r0, #9
 8005430:	f7ff ff2a 	bl	8005288 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8005434:	23e7      	movs	r3, #231	; 0xe7
 8005436:	733b      	strb	r3, [r7, #12]
 8005438:	23e7      	movs	r3, #231	; 0xe7
 800543a:	72fb      	strb	r3, [r7, #11]
 800543c:	23e7      	movs	r3, #231	; 0xe7
 800543e:	72bb      	strb	r3, [r7, #10]
 8005440:	23e7      	movs	r3, #231	; 0xe7
 8005442:	727b      	strb	r3, [r7, #9]
 8005444:	23e7      	movs	r3, #231	; 0xe7
 8005446:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	2205      	movs	r2, #5
 800544e:	4619      	mov	r1, r3
 8005450:	200a      	movs	r0, #10
 8005452:	f7ff ff3b 	bl	80052cc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8005456:	23c2      	movs	r3, #194	; 0xc2
 8005458:	733b      	strb	r3, [r7, #12]
 800545a:	23c2      	movs	r3, #194	; 0xc2
 800545c:	72fb      	strb	r3, [r7, #11]
 800545e:	23c2      	movs	r3, #194	; 0xc2
 8005460:	72bb      	strb	r3, [r7, #10]
 8005462:	23c2      	movs	r3, #194	; 0xc2
 8005464:	727b      	strb	r3, [r7, #9]
 8005466:	23c2      	movs	r3, #194	; 0xc2
 8005468:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800546a:	f107 0308 	add.w	r3, r7, #8
 800546e:	2205      	movs	r2, #5
 8005470:	4619      	mov	r1, r3
 8005472:	200b      	movs	r0, #11
 8005474:	f7ff ff2a 	bl	80052cc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8005478:	21c3      	movs	r1, #195	; 0xc3
 800547a:	200c      	movs	r0, #12
 800547c:	f7ff ff04 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8005480:	21c4      	movs	r1, #196	; 0xc4
 8005482:	200d      	movs	r0, #13
 8005484:	f7ff ff00 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8005488:	21c5      	movs	r1, #197	; 0xc5
 800548a:	200e      	movs	r0, #14
 800548c:	f7ff fefc 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8005490:	21c6      	movs	r1, #198	; 0xc6
 8005492:	200f      	movs	r0, #15
 8005494:	f7ff fef8 	bl	8005288 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8005498:	23e7      	movs	r3, #231	; 0xe7
 800549a:	733b      	strb	r3, [r7, #12]
 800549c:	23e7      	movs	r3, #231	; 0xe7
 800549e:	72fb      	strb	r3, [r7, #11]
 80054a0:	23e7      	movs	r3, #231	; 0xe7
 80054a2:	72bb      	strb	r3, [r7, #10]
 80054a4:	23e7      	movs	r3, #231	; 0xe7
 80054a6:	727b      	strb	r3, [r7, #9]
 80054a8:	23e7      	movs	r3, #231	; 0xe7
 80054aa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	2205      	movs	r2, #5
 80054b2:	4619      	mov	r1, r3
 80054b4:	2010      	movs	r0, #16
 80054b6:	f7ff ff09 	bl	80052cc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80054ba:	2100      	movs	r1, #0
 80054bc:	2011      	movs	r0, #17
 80054be:	f7ff fee3 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80054c2:	2100      	movs	r1, #0
 80054c4:	2012      	movs	r0, #18
 80054c6:	f7ff fedf 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80054ca:	2100      	movs	r1, #0
 80054cc:	2013      	movs	r0, #19
 80054ce:	f7ff fedb 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80054d2:	2100      	movs	r1, #0
 80054d4:	2014      	movs	r0, #20
 80054d6:	f7ff fed7 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80054da:	2100      	movs	r1, #0
 80054dc:	2015      	movs	r0, #21
 80054de:	f7ff fed3 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80054e2:	2100      	movs	r1, #0
 80054e4:	2016      	movs	r0, #22
 80054e6:	f7ff fecf 	bl	8005288 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80054ea:	f000 fae3 	bl	8005ab4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80054ee:	2100      	movs	r1, #0
 80054f0:	201c      	movs	r0, #28
 80054f2:	f7ff fec9 	bl	8005288 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80054f6:	2100      	movs	r1, #0
 80054f8:	201d      	movs	r0, #29
 80054fa:	f7ff fec5 	bl	8005288 <NRF24_write_register>
	printRadioSettings();
 80054fe:	f000 faf3 	bl	8005ae8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8005502:	210f      	movs	r1, #15
 8005504:	200f      	movs	r0, #15
 8005506:	f000 f8ad 	bl	8005664 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800550a:	2003      	movs	r0, #3
 800550c:	f000 f987 	bl	800581e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8005510:	2001      	movs	r0, #1
 8005512:	f000 f9bd 	bl	8005890 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8005516:	2002      	movs	r0, #2
 8005518:	f000 fa00 	bl	800591c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800551c:	f000 f952 	bl	80057c4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8005520:	2020      	movs	r0, #32
 8005522:	f000 f8cf 	bl	80056c4 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8005526:	f000 fabc 	bl	8005aa2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800552a:	204c      	movs	r0, #76	; 0x4c
 800552c:	f000 f8b5 	bl	800569a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8005530:	f7ff ff16 	bl	8005360 <NRF24_flush_tx>
	NRF24_flush_rx();
 8005534:	f7ff ff1c 	bl	8005370 <NRF24_flush_rx>

	NRF24_powerDown();
 8005538:	f000 fa18 	bl	800596c <NRF24_powerDown>

}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005546:	b002      	add	sp, #8
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	200000a4 	.word	0x200000a4
 8005550:	2000009c 	.word	0x2000009c
 8005554:	200000a0 	.word	0x200000a0
 8005558:	200000a2 	.word	0x200000a2

0800555c <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8005560:	2000      	movs	r0, #0
 8005562:	f7ff fe21 	bl	80051a8 <NRF24_ce>
	NRF24_flush_tx();
 8005566:	f7ff fefb 	bl	8005360 <NRF24_flush_tx>
	NRF24_flush_rx();
 800556a:	f7ff ff01 	bl	8005370 <NRF24_flush_rx>
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8005580:	f000 fa8f 	bl	8005aa2 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	4619      	mov	r1, r3
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fa2e 	bl	80059ea <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800558e:	f7fb f85b 	bl	8000648 <HAL_GetTick>
 8005592:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8005594:	230a      	movs	r3, #10
 8005596:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8005598:	f107 030d 	add.w	r3, r7, #13
 800559c:	2201      	movs	r2, #1
 800559e:	4619      	mov	r1, r3
 80055a0:	2008      	movs	r0, #8
 80055a2:	f7ff fe49 	bl	8005238 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80055a6:	f7ff feeb 	bl	8005380 <NRF24_get_status>
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <NRF24_write+0x54>
 80055b8:	f7fb f846 	bl	8000648 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d8e7      	bhi.n	8005598 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80055c8:	f107 010b 	add.w	r1, r7, #11
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <NRF24_write+0x90>)
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fa32 	bl	8005a3c <NRF24_whatHappened>
	retStatus = tx_ok;
 80055d8:	7b3b      	ldrb	r3, [r7, #12]
 80055da:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <NRF24_write+0x90>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 80055e4:	f000 f886 	bl	80056f4 <NRF24_getDynamicPayloadSize>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <NRF24_write+0x94>)
 80055ee:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 80055f0:	f000 f80c 	bl	800560c <NRF24_available>
	NRF24_flush_tx();
 80055f4:	f7ff feb4 	bl	8005360 <NRF24_flush_tx>
	return retStatus;
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000094 	.word	0x20000094
 8005608:	20000095 	.word	0x20000095

0800560c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8005610:	2000      	movs	r0, #0
 8005612:	f000 f9ba 	bl	800598a <NRF24_availablePipe>
 8005616:	4603      	mov	r3, r0
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}

0800561c <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8005626:	463b      	mov	r3, r7
 8005628:	2205      	movs	r2, #5
 800562a:	4619      	mov	r1, r3
 800562c:	200a      	movs	r0, #10
 800562e:	f7ff fe4d 	bl	80052cc <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8005632:	463b      	mov	r3, r7
 8005634:	2205      	movs	r2, #5
 8005636:	4619      	mov	r1, r3
 8005638:	2010      	movs	r0, #16
 800563a:	f7ff fe47 	bl	80052cc <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 800563e:	2320      	movs	r3, #32
 8005640:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <NRF24_openWritingPipe+0x44>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	4293      	cmp	r3, r2
 800564a:	bf28      	it	cs
 800564c:	4613      	movcs	r3, r2
 800564e:	b2db      	uxtb	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	2011      	movs	r0, #17
 8005654:	f7ff fe18 	bl	8005288 <NRF24_write_register>
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000096 	.word	0x20000096

08005664 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	460a      	mov	r2, r1
 800566e:	71fb      	strb	r3, [r7, #7]
 8005670:	4613      	mov	r3, r2
 8005672:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	b25a      	sxtb	r2, r3
 800567a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	b25b      	sxtb	r3, r3
 8005684:	4313      	orrs	r3, r2
 8005686:	b25b      	sxtb	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	4619      	mov	r1, r3
 800568c:	2004      	movs	r0, #4
 800568e:	f7ff fdfb 	bl	8005288 <NRF24_write_register>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	4603      	mov	r3, r0
 80056a2:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80056a4:	237f      	movs	r3, #127	; 0x7f
 80056a6:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80056a8:	7bfa      	ldrb	r2, [r7, #15]
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bf28      	it	cs
 80056b0:	4613      	movcs	r3, r2
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	4619      	mov	r1, r3
 80056b6:	2005      	movs	r0, #5
 80056b8:	f7ff fde6 	bl	8005288 <NRF24_write_register>
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80056ce:	2320      	movs	r3, #32
 80056d0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	4293      	cmp	r3, r2
 80056d8:	bf28      	it	cs
 80056da:	4613      	movcs	r3, r2
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <NRF24_setPayloadSize+0x2c>)
 80056e0:	701a      	strb	r2, [r3, #0]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000096 	.word	0x20000096

080056f4 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80056f8:	2060      	movs	r0, #96	; 0x60
 80056fa:	f7ff fd75 	bl	80051e8 <NRF24_read_register>
 80056fe:	4603      	mov	r3, r0
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}

08005704 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005708:	201d      	movs	r0, #29
 800570a:	f7ff fd6d 	bl	80051e8 <NRF24_read_register>
 800570e:	4603      	mov	r3, r0
 8005710:	f043 0306 	orr.w	r3, r3, #6
 8005714:	b2db      	uxtb	r3, r3
 8005716:	4619      	mov	r1, r3
 8005718:	201d      	movs	r0, #29
 800571a:	f7ff fdb5 	bl	8005288 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800571e:	201d      	movs	r0, #29
 8005720:	f7ff fd62 	bl	80051e8 <NRF24_read_register>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800572a:	f000 f9c3 	bl	8005ab4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800572e:	201d      	movs	r0, #29
 8005730:	f7ff fd5a 	bl	80051e8 <NRF24_read_register>
 8005734:	4603      	mov	r3, r0
 8005736:	f043 0306 	orr.w	r3, r3, #6
 800573a:	b2db      	uxtb	r3, r3
 800573c:	4619      	mov	r1, r3
 800573e:	201d      	movs	r0, #29
 8005740:	f7ff fda2 	bl	8005288 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005744:	201c      	movs	r0, #28
 8005746:	f7ff fd4f 	bl	80051e8 <NRF24_read_register>
 800574a:	4603      	mov	r3, r0
 800574c:	f043 0303 	orr.w	r3, r3, #3
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	201c      	movs	r0, #28
 8005756:	f7ff fd97 	bl	8005288 <NRF24_write_register>
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005764:	201d      	movs	r0, #29
 8005766:	f7ff fd3f 	bl	80051e8 <NRF24_read_register>
 800576a:	4603      	mov	r3, r0
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	201d      	movs	r0, #29
 8005776:	f7ff fd87 	bl	8005288 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800577a:	201d      	movs	r0, #29
 800577c:	f7ff fd34 	bl	80051e8 <NRF24_read_register>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10c      	bne.n	80057a0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005786:	f000 f995 	bl	8005ab4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800578a:	201d      	movs	r0, #29
 800578c:	f7ff fd2c 	bl	80051e8 <NRF24_read_register>
 8005790:	4603      	mov	r3, r0
 8005792:	f043 0304 	orr.w	r3, r3, #4
 8005796:	b2db      	uxtb	r3, r3
 8005798:	4619      	mov	r1, r3
 800579a:	201d      	movs	r0, #29
 800579c:	f7ff fd74 	bl	8005288 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80057a0:	201c      	movs	r0, #28
 80057a2:	f7ff fd21 	bl	80051e8 <NRF24_read_register>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	201c      	movs	r0, #28
 80057b2:	f7ff fd69 	bl	8005288 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80057b6:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <NRF24_enableDynamicPayloads+0x60>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]

}
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	20000097 	.word	0x20000097

080057c4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80057c8:	201d      	movs	r0, #29
 80057ca:	f7ff fd0d 	bl	80051e8 <NRF24_read_register>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	4619      	mov	r1, r3
 80057d8:	201d      	movs	r0, #29
 80057da:	f7ff fd55 	bl	8005288 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80057de:	2100      	movs	r1, #0
 80057e0:	201c      	movs	r0, #28
 80057e2:	f7ff fd51 	bl	8005288 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80057e6:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <NRF24_disableDynamicPayloads+0x2c>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000097 	.word	0x20000097

080057f4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	4603      	mov	r3, r0
 80057fc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8005804:	213f      	movs	r1, #63	; 0x3f
 8005806:	2001      	movs	r0, #1
 8005808:	f7ff fd3e 	bl	8005288 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800580c:	e003      	b.n	8005816 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800580e:	2100      	movs	r1, #0
 8005810:	2001      	movs	r0, #1
 8005812:	f7ff fd39 	bl	8005288 <NRF24_write_register>
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005828:	2006      	movs	r0, #6
 800582a:	f7ff fcdd 	bl	80051e8 <NRF24_read_register>
 800582e:	4603      	mov	r3, r0
 8005830:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	f023 0306 	bic.w	r3, r3, #6
 8005838:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d104      	bne.n	800584a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	f043 0306 	orr.w	r3, r3, #6
 8005846:	73fb      	strb	r3, [r7, #15]
 8005848:	e019      	b.n	800587e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d104      	bne.n	800585a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	f043 0304 	orr.w	r3, r3, #4
 8005856:	73fb      	strb	r3, [r7, #15]
 8005858:	e011      	b.n	800587e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d104      	bne.n	800586a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	e009      	b.n	800587e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d103      	bne.n	800587e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	f043 0306 	orr.w	r3, r3, #6
 800587c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	4619      	mov	r1, r3
 8005882:	2006      	movs	r0, #6
 8005884:	f7ff fd00 	bl	8005288 <NRF24_write_register>
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800589e:	2006      	movs	r0, #6
 80058a0:	f7ff fca2 	bl	80051e8 <NRF24_read_register>
 80058a4:	4603      	mov	r3, r0
 80058a6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <NRF24_setDataRate+0x88>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80058b4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80058b6:	79fb      	ldrb	r3, [r7, #7]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d107      	bne.n	80058cc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <NRF24_setDataRate+0x88>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	73bb      	strb	r3, [r7, #14]
 80058ca:	e00d      	b.n	80058e8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d107      	bne.n	80058e2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80058d2:	4b11      	ldr	r3, [pc, #68]	; (8005918 <NRF24_setDataRate+0x88>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80058d8:	7bbb      	ldrb	r3, [r7, #14]
 80058da:	f043 0308 	orr.w	r3, r3, #8
 80058de:	73bb      	strb	r3, [r7, #14]
 80058e0:	e002      	b.n	80058e8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80058e2:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <NRF24_setDataRate+0x88>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	4619      	mov	r1, r3
 80058ec:	2006      	movs	r0, #6
 80058ee:	f7ff fccb 	bl	8005288 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80058f2:	2006      	movs	r0, #6
 80058f4:	f7ff fc78 	bl	80051e8 <NRF24_read_register>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	7bbb      	ldrb	r3, [r7, #14]
 80058fe:	4293      	cmp	r3, r2
 8005900:	d102      	bne.n	8005908 <NRF24_setDataRate+0x78>
  {
    result = true;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
 8005906:	e002      	b.n	800590e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <NRF24_setDataRate+0x88>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000098 	.word	0x20000098

0800591c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8005926:	2000      	movs	r0, #0
 8005928:	f7ff fc5e 	bl	80051e8 <NRF24_read_register>
 800592c:	4603      	mov	r3, r0
 800592e:	f023 030c 	bic.w	r3, r3, #12
 8005932:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00f      	beq.n	800595a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d104      	bne.n	800594a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	f043 0308 	orr.w	r3, r3, #8
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e007      	b.n	800595a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	f043 0308 	orr.w	r3, r3, #8
 8005950:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	f043 0304 	orr.w	r3, r3, #4
 8005958:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	4619      	mov	r1, r3
 800595e:	2000      	movs	r0, #0
 8005960:	f7ff fc92 	bl	8005288 <NRF24_write_register>
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8005970:	2000      	movs	r0, #0
 8005972:	f7ff fc39 	bl	80051e8 <NRF24_read_register>
 8005976:	4603      	mov	r3, r0
 8005978:	f023 0302 	bic.w	r3, r3, #2
 800597c:	b2db      	uxtb	r3, r3
 800597e:	4619      	mov	r1, r3
 8005980:	2000      	movs	r0, #0
 8005982:	f7ff fc81 	bl	8005288 <NRF24_write_register>
}
 8005986:	bf00      	nop
 8005988:	bd80      	pop	{r7, pc}

0800598a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b084      	sub	sp, #16
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8005992:	f7ff fcf5 	bl	8005380 <NRF24_get_status>
 8005996:	4603      	mov	r3, r0
 8005998:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d017      	beq.n	80059e0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80059c6:	2140      	movs	r1, #64	; 0x40
 80059c8:	2007      	movs	r0, #7
 80059ca:	f7ff fc5d 	bl	8005288 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80059d8:	2120      	movs	r1, #32
 80059da:	2007      	movs	r0, #7
 80059dc:	f7ff fc54 	bl	8005288 <NRF24_write_register>
    }
  }
  return result;
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80059f6:	2000      	movs	r0, #0
 80059f8:	f7ff fbf6 	bl	80051e8 <NRF24_read_register>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f043 0302 	orr.w	r3, r3, #2
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	f7ff fc3b 	bl	8005288 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8005a12:	2096      	movs	r0, #150	; 0x96
 8005a14:	f7ff fb88 	bl	8005128 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fc7d 	bl	800531c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8005a22:	2001      	movs	r0, #1
 8005a24:	f7ff fbc0 	bl	80051a8 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8005a28:	200f      	movs	r0, #15
 8005a2a:	f7ff fb7d 	bl	8005128 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f7ff fbba 	bl	80051a8 <NRF24_ce>
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8005a48:	f7ff fc9a 	bl	8005380 <NRF24_get_status>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8005a56:	2170      	movs	r1, #112	; 0x70
 8005a58:	2007      	movs	r0, #7
 8005a5a:	f7ff fc15 	bl	8005288 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf14      	ite	ne
 8005a68:	2301      	movne	r3, #1
 8005a6a:	2300      	moveq	r3, #0
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bf14      	ite	ne
 8005a7c:	2301      	movne	r3, #1
 8005a7e:	2300      	moveq	r3, #0
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	701a      	strb	r2, [r3, #0]
}
 8005a9a:	bf00      	nop
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8005aa6:	2170      	movs	r1, #112	; 0x70
 8005aa8:	2007      	movs	r0, #7
 8005aaa:	f7ff fbed 	bl	8005288 <NRF24_write_register>
}
 8005aae:	bf00      	nop
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7ff fb54 	bl	8005168 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8005ac0:	2350      	movs	r3, #80	; 0x50
 8005ac2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8005ac4:	2373      	movs	r3, #115	; 0x73
 8005ac6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8005ac8:	1d39      	adds	r1, r7, #4
 8005aca:	2364      	movs	r3, #100	; 0x64
 8005acc:	2202      	movs	r2, #2
 8005ace:	4805      	ldr	r0, [pc, #20]	; (8005ae4 <NRF24_ACTIVATE_cmd+0x30>)
 8005ad0:	f7fd f962 	bl	8002d98 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7ff fb47 	bl	8005168 <NRF24_csn>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200000a4 	.word	0x200000a4

08005ae8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8005ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aea:	b0a1      	sub	sp, #132	; 0x84
 8005aec:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005aee:	f107 0308 	add.w	r3, r7, #8
 8005af2:	4ab6      	ldr	r2, [pc, #728]	; (8005dcc <printRadioSettings+0x2e4>)
 8005af4:	461c      	mov	r4, r3
 8005af6:	4615      	mov	r5, r2
 8005af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	8022      	strh	r2, [r4, #0]
 8005b0a:	3402      	adds	r4, #2
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005b10:	f107 0308 	add.w	r3, r7, #8
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fa fb5b 	bl	80001d0 <strlen>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	f107 0108 	add.w	r1, r7, #8
 8005b22:	230a      	movs	r3, #10
 8005b24:	48aa      	ldr	r0, [pc, #680]	; (8005dd0 <printRadioSettings+0x2e8>)
 8005b26:	f7fd ffa9 	bl	8003a7c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7ff fb5c 	bl	80051e8 <NRF24_read_register>
 8005b30:	4603      	mov	r3, r0
 8005b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8005b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d020      	beq.n	8005b84 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8005b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <printRadioSettings+0x7e>
 8005b4e:	f107 0308 	add.w	r3, r7, #8
 8005b52:	4aa0      	ldr	r2, [pc, #640]	; (8005dd4 <printRadioSettings+0x2ec>)
 8005b54:	461c      	mov	r4, r3
 8005b56:	4615      	mov	r5, r2
 8005b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b64:	e017      	b.n	8005b96 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4a9b      	ldr	r2, [pc, #620]	; (8005dd8 <printRadioSettings+0x2f0>)
 8005b6c:	461c      	mov	r4, r3
 8005b6e:	4615      	mov	r5, r2
 8005b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b78:	c403      	stmia	r4!, {r0, r1}
 8005b7a:	8022      	strh	r2, [r4, #0]
 8005b7c:	3402      	adds	r4, #2
 8005b7e:	0c13      	lsrs	r3, r2, #16
 8005b80:	7023      	strb	r3, [r4, #0]
 8005b82:	e008      	b.n	8005b96 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8005b84:	f107 0308 	add.w	r3, r7, #8
 8005b88:	4a94      	ldr	r2, [pc, #592]	; (8005ddc <printRadioSettings+0x2f4>)
 8005b8a:	461c      	mov	r4, r3
 8005b8c:	4615      	mov	r5, r2
 8005b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b92:	682b      	ldr	r3, [r5, #0]
 8005b94:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fa fb18 	bl	80001d0 <strlen>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f107 0108 	add.w	r1, r7, #8
 8005ba8:	230a      	movs	r3, #10
 8005baa:	4889      	ldr	r0, [pc, #548]	; (8005dd0 <printRadioSettings+0x2e8>)
 8005bac:	f7fd ff66 	bl	8003a7c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7ff fb19 	bl	80051e8 <NRF24_read_register>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005bbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bc0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfcc      	ite	gt
 8005bc8:	2301      	movgt	r3, #1
 8005bca:	2300      	movle	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005bd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bd4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	bfcc      	ite	gt
 8005bdc:	2301      	movgt	r3, #1
 8005bde:	2300      	movle	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005be4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005be8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bfcc      	ite	gt
 8005bf0:	2301      	movgt	r3, #1
 8005bf2:	2300      	movle	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005bf8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005bfc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfcc      	ite	gt
 8005c04:	2301      	movgt	r3, #1
 8005c06:	2300      	movle	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005c0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c10:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bfcc      	ite	gt
 8005c18:	2301      	movgt	r3, #1
 8005c1a:	2300      	movle	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005c20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c24:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfcc      	ite	gt
 8005c2c:	2301      	movgt	r3, #1
 8005c2e:	2300      	movle	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f107 0008 	add.w	r0, r7, #8
 8005c36:	9303      	str	r3, [sp, #12]
 8005c38:	9402      	str	r4, [sp, #8]
 8005c3a:	9101      	str	r1, [sp, #4]
 8005c3c:	9200      	str	r2, [sp, #0]
 8005c3e:	4633      	mov	r3, r6
 8005c40:	462a      	mov	r2, r5
 8005c42:	4967      	ldr	r1, [pc, #412]	; (8005de0 <printRadioSettings+0x2f8>)
 8005c44:	f001 f90a 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005c48:	f107 0308 	add.w	r3, r7, #8
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fabf 	bl	80001d0 <strlen>
 8005c52:	4603      	mov	r3, r0
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f107 0108 	add.w	r1, r7, #8
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	485c      	ldr	r0, [pc, #368]	; (8005dd0 <printRadioSettings+0x2e8>)
 8005c5e:	f7fd ff0d 	bl	8003a7c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8005c62:	2002      	movs	r0, #2
 8005c64:	f7ff fac0 	bl	80051e8 <NRF24_read_register>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005c6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c72:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bfcc      	ite	gt
 8005c7a:	2301      	movgt	r3, #1
 8005c7c:	2300      	movle	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005c82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c86:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bfcc      	ite	gt
 8005c8e:	2301      	movgt	r3, #1
 8005c90:	2300      	movle	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005c96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005c9a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfcc      	ite	gt
 8005ca2:	2301      	movgt	r3, #1
 8005ca4:	2300      	movle	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005caa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cae:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfcc      	ite	gt
 8005cb6:	2301      	movgt	r3, #1
 8005cb8:	2300      	movle	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005cbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cc2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfcc      	ite	gt
 8005cca:	2301      	movgt	r3, #1
 8005ccc:	2300      	movle	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005cd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cd6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	bfcc      	ite	gt
 8005cde:	2301      	movgt	r3, #1
 8005ce0:	2300      	movle	r3, #0
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f107 0008 	add.w	r0, r7, #8
 8005ce8:	9303      	str	r3, [sp, #12]
 8005cea:	9402      	str	r4, [sp, #8]
 8005cec:	9101      	str	r1, [sp, #4]
 8005cee:	9200      	str	r2, [sp, #0]
 8005cf0:	4633      	mov	r3, r6
 8005cf2:	462a      	mov	r2, r5
 8005cf4:	493b      	ldr	r1, [pc, #236]	; (8005de4 <printRadioSettings+0x2fc>)
 8005cf6:	f001 f8b1 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fa66 	bl	80001d0 <strlen>
 8005d04:	4603      	mov	r3, r0
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	f107 0108 	add.w	r1, r7, #8
 8005d0c:	230a      	movs	r3, #10
 8005d0e:	4830      	ldr	r0, [pc, #192]	; (8005dd0 <printRadioSettings+0x2e8>)
 8005d10:	f7fd feb4 	bl	8003a7c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8005d14:	2003      	movs	r0, #3
 8005d16:	f7ff fa67 	bl	80051e8 <NRF24_read_register>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f003 0303 	and.w	r3, r3, #3
 8005d20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8005d24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d28:	3302      	adds	r3, #2
 8005d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8005d2e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005d32:	f107 0308 	add.w	r3, r7, #8
 8005d36:	492c      	ldr	r1, [pc, #176]	; (8005de8 <printRadioSettings+0x300>)
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 f88f 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005d3e:	f107 0308 	add.w	r3, r7, #8
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fa fa44 	bl	80001d0 <strlen>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	230a      	movs	r3, #10
 8005d52:	481f      	ldr	r0, [pc, #124]	; (8005dd0 <printRadioSettings+0x2e8>)
 8005d54:	f7fd fe92 	bl	8003a7c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8005d58:	2005      	movs	r0, #5
 8005d5a:	f7ff fa45 	bl	80051e8 <NRF24_read_register>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8005d64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6c:	f107 0308 	add.w	r3, r7, #8
 8005d70:	491e      	ldr	r1, [pc, #120]	; (8005dec <printRadioSettings+0x304>)
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f872 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005d78:	f107 0308 	add.w	r3, r7, #8
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fa27 	bl	80001d0 <strlen>
 8005d82:	4603      	mov	r3, r0
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f107 0108 	add.w	r1, r7, #8
 8005d8a:	230a      	movs	r3, #10
 8005d8c:	4810      	ldr	r0, [pc, #64]	; (8005dd0 <printRadioSettings+0x2e8>)
 8005d8e:	f7fd fe75 	bl	8003a7c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8005d92:	2006      	movs	r0, #6
 8005d94:	f7ff fa28 	bl	80051e8 <NRF24_read_register>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8005d9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d024      	beq.n	8005df4 <printRadioSettings+0x30c>
 8005daa:	f107 0308 	add.w	r3, r7, #8
 8005dae:	4a10      	ldr	r2, [pc, #64]	; (8005df0 <printRadioSettings+0x308>)
 8005db0:	461c      	mov	r4, r3
 8005db2:	4615      	mov	r5, r2
 8005db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005db8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005dbc:	6020      	str	r0, [r4, #0]
 8005dbe:	3404      	adds	r4, #4
 8005dc0:	8021      	strh	r1, [r4, #0]
 8005dc2:	3402      	adds	r4, #2
 8005dc4:	0c0b      	lsrs	r3, r1, #16
 8005dc6:	7023      	strb	r3, [r4, #0]
 8005dc8:	e023      	b.n	8005e12 <printRadioSettings+0x32a>
 8005dca:	bf00      	nop
 8005dcc:	08007690 	.word	0x08007690
 8005dd0:	20000108 	.word	0x20000108
 8005dd4:	080076c4 	.word	0x080076c4
 8005dd8:	080076e0 	.word	0x080076e0
 8005ddc:	080076fc 	.word	0x080076fc
 8005de0:	08007710 	.word	0x08007710
 8005de4:	08007754 	.word	0x08007754
 8005de8:	080077a0 	.word	0x080077a0
 8005dec:	080077bc 	.word	0x080077bc
 8005df0:	080077d0 	.word	0x080077d0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	4a29      	ldr	r2, [pc, #164]	; (8005ea0 <printRadioSettings+0x3b8>)
 8005dfa:	461c      	mov	r4, r3
 8005dfc:	4615      	mov	r5, r2
 8005dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005e06:	6020      	str	r0, [r4, #0]
 8005e08:	3404      	adds	r4, #4
 8005e0a:	8021      	strh	r1, [r4, #0]
 8005e0c:	3402      	adds	r4, #2
 8005e0e:	0c0b      	lsrs	r3, r1, #16
 8005e10:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fa f9da 	bl	80001d0 <strlen>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	f107 0108 	add.w	r1, r7, #8
 8005e24:	230a      	movs	r3, #10
 8005e26:	481f      	ldr	r0, [pc, #124]	; (8005ea4 <printRadioSettings+0x3bc>)
 8005e28:	f7fd fe28 	bl	8003a7c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8005e2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e30:	f003 0306 	and.w	r3, r3, #6
 8005e34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8005e38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e3c:	085b      	lsrs	r3, r3, #1
 8005e3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8005e42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <printRadioSettings+0x376>
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <printRadioSettings+0x3c0>)
 8005e50:	461c      	mov	r4, r3
 8005e52:	4615      	mov	r5, r2
 8005e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	6023      	str	r3, [r4, #0]
 8005e5c:	e037      	b.n	8005ece <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8005e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d109      	bne.n	8005e7a <printRadioSettings+0x392>
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	4a10      	ldr	r2, [pc, #64]	; (8005eac <printRadioSettings+0x3c4>)
 8005e6c:	461c      	mov	r4, r3
 8005e6e:	4615      	mov	r5, r2
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	e029      	b.n	8005ece <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8005e7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d118      	bne.n	8005eb4 <printRadioSettings+0x3cc>
 8005e82:	f107 0308 	add.w	r3, r7, #8
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <printRadioSettings+0x3c8>)
 8005e88:	461c      	mov	r4, r3
 8005e8a:	4615      	mov	r5, r2
 8005e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	8022      	strh	r2, [r4, #0]
 8005e96:	3402      	adds	r4, #2
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	7023      	strb	r3, [r4, #0]
 8005e9c:	e017      	b.n	8005ece <printRadioSettings+0x3e6>
 8005e9e:	bf00      	nop
 8005ea0:	080077e8 	.word	0x080077e8
 8005ea4:	20000108 	.word	0x20000108
 8005ea8:	08007800 	.word	0x08007800
 8005eac:	08007814 	.word	0x08007814
 8005eb0:	08007828 	.word	0x08007828
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8005eb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005eb8:	2b03      	cmp	r3, #3
 8005eba:	d108      	bne.n	8005ece <printRadioSettings+0x3e6>
 8005ebc:	f107 0308 	add.w	r3, r7, #8
 8005ec0:	4ad7      	ldr	r2, [pc, #860]	; (8006220 <printRadioSettings+0x738>)
 8005ec2:	461c      	mov	r4, r3
 8005ec4:	4615      	mov	r5, r2
 8005ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fa f97c 	bl	80001d0 <strlen>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	230a      	movs	r3, #10
 8005ee2:	48d0      	ldr	r0, [pc, #832]	; (8006224 <printRadioSettings+0x73c>)
 8005ee4:	f7fd fdca 	bl	8003a7c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8005ee8:	463b      	mov	r3, r7
 8005eea:	2205      	movs	r2, #5
 8005eec:	4619      	mov	r1, r3
 8005eee:	200a      	movs	r0, #10
 8005ef0:	f7ff f9a2 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8005ef4:	793b      	ldrb	r3, [r7, #4]
 8005ef6:	461c      	mov	r4, r3
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	461d      	mov	r5, r3
 8005efc:	78bb      	ldrb	r3, [r7, #2]
 8005efe:	787a      	ldrb	r2, [r7, #1]
 8005f00:	7839      	ldrb	r1, [r7, #0]
 8005f02:	f107 0008 	add.w	r0, r7, #8
 8005f06:	9102      	str	r1, [sp, #8]
 8005f08:	9201      	str	r2, [sp, #4]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	4622      	mov	r2, r4
 8005f10:	49c5      	ldr	r1, [pc, #788]	; (8006228 <printRadioSettings+0x740>)
 8005f12:	f000 ffa3 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005f16:	f107 0308 	add.w	r3, r7, #8
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fa f958 	bl	80001d0 <strlen>
 8005f20:	4603      	mov	r3, r0
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f107 0108 	add.w	r1, r7, #8
 8005f28:	230a      	movs	r3, #10
 8005f2a:	48be      	ldr	r0, [pc, #760]	; (8006224 <printRadioSettings+0x73c>)
 8005f2c:	f7fd fda6 	bl	8003a7c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8005f30:	463b      	mov	r3, r7
 8005f32:	2205      	movs	r2, #5
 8005f34:	4619      	mov	r1, r3
 8005f36:	200b      	movs	r0, #11
 8005f38:	f7ff f97e 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8005f3c:	793b      	ldrb	r3, [r7, #4]
 8005f3e:	461c      	mov	r4, r3
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	461d      	mov	r5, r3
 8005f44:	78bb      	ldrb	r3, [r7, #2]
 8005f46:	787a      	ldrb	r2, [r7, #1]
 8005f48:	7839      	ldrb	r1, [r7, #0]
 8005f4a:	f107 0008 	add.w	r0, r7, #8
 8005f4e:	9102      	str	r1, [sp, #8]
 8005f50:	9201      	str	r2, [sp, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	462b      	mov	r3, r5
 8005f56:	4622      	mov	r2, r4
 8005f58:	49b4      	ldr	r1, [pc, #720]	; (800622c <printRadioSettings+0x744>)
 8005f5a:	f000 ff7f 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa f934 	bl	80001d0 <strlen>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f107 0108 	add.w	r1, r7, #8
 8005f70:	230a      	movs	r3, #10
 8005f72:	48ac      	ldr	r0, [pc, #688]	; (8006224 <printRadioSettings+0x73c>)
 8005f74:	f7fd fd82 	bl	8003a7c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8005f78:	463b      	mov	r3, r7
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	200c      	movs	r0, #12
 8005f80:	f7ff f95a 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005f84:	783b      	ldrb	r3, [r7, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f107 0308 	add.w	r3, r7, #8
 8005f8c:	49a8      	ldr	r1, [pc, #672]	; (8006230 <printRadioSettings+0x748>)
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 ff64 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fa f919 	bl	80001d0 <strlen>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f107 0108 	add.w	r1, r7, #8
 8005fa6:	230a      	movs	r3, #10
 8005fa8:	489e      	ldr	r0, [pc, #632]	; (8006224 <printRadioSettings+0x73c>)
 8005faa:	f7fd fd67 	bl	8003a7c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8005fae:	463b      	mov	r3, r7
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	200d      	movs	r0, #13
 8005fb6:	f7ff f93f 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005fba:	783b      	ldrb	r3, [r7, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	499c      	ldr	r1, [pc, #624]	; (8006234 <printRadioSettings+0x74c>)
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ff49 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005fca:	f107 0308 	add.w	r3, r7, #8
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fa f8fe 	bl	80001d0 <strlen>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f107 0108 	add.w	r1, r7, #8
 8005fdc:	230a      	movs	r3, #10
 8005fde:	4891      	ldr	r0, [pc, #580]	; (8006224 <printRadioSettings+0x73c>)
 8005fe0:	f7fd fd4c 	bl	8003a7c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	4619      	mov	r1, r3
 8005fea:	200e      	movs	r0, #14
 8005fec:	f7ff f924 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005ff0:	783b      	ldrb	r3, [r7, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f107 0308 	add.w	r3, r7, #8
 8005ff8:	498f      	ldr	r1, [pc, #572]	; (8006238 <printRadioSettings+0x750>)
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 ff2e 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006000:	f107 0308 	add.w	r3, r7, #8
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa f8e3 	bl	80001d0 <strlen>
 800600a:	4603      	mov	r3, r0
 800600c:	b29a      	uxth	r2, r3
 800600e:	f107 0108 	add.w	r1, r7, #8
 8006012:	230a      	movs	r3, #10
 8006014:	4883      	ldr	r0, [pc, #524]	; (8006224 <printRadioSettings+0x73c>)
 8006016:	f7fd fd31 	bl	8003a7c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800601a:	463b      	mov	r3, r7
 800601c:	2201      	movs	r2, #1
 800601e:	4619      	mov	r1, r3
 8006020:	200f      	movs	r0, #15
 8006022:	f7ff f909 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8006026:	783b      	ldrb	r3, [r7, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	4983      	ldr	r1, [pc, #524]	; (800623c <printRadioSettings+0x754>)
 8006030:	4618      	mov	r0, r3
 8006032:	f000 ff13 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006036:	f107 0308 	add.w	r3, r7, #8
 800603a:	4618      	mov	r0, r3
 800603c:	f7fa f8c8 	bl	80001d0 <strlen>
 8006040:	4603      	mov	r3, r0
 8006042:	b29a      	uxth	r2, r3
 8006044:	f107 0108 	add.w	r1, r7, #8
 8006048:	230a      	movs	r3, #10
 800604a:	4876      	ldr	r0, [pc, #472]	; (8006224 <printRadioSettings+0x73c>)
 800604c:	f7fd fd16 	bl	8003a7c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8006050:	463b      	mov	r3, r7
 8006052:	2205      	movs	r2, #5
 8006054:	4619      	mov	r1, r3
 8006056:	2010      	movs	r0, #16
 8006058:	f7ff f8ee 	bl	8005238 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800605c:	793b      	ldrb	r3, [r7, #4]
 800605e:	461c      	mov	r4, r3
 8006060:	78fb      	ldrb	r3, [r7, #3]
 8006062:	461d      	mov	r5, r3
 8006064:	78bb      	ldrb	r3, [r7, #2]
 8006066:	787a      	ldrb	r2, [r7, #1]
 8006068:	7839      	ldrb	r1, [r7, #0]
 800606a:	f107 0008 	add.w	r0, r7, #8
 800606e:	9102      	str	r1, [sp, #8]
 8006070:	9201      	str	r2, [sp, #4]
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	462b      	mov	r3, r5
 8006076:	4622      	mov	r2, r4
 8006078:	4971      	ldr	r1, [pc, #452]	; (8006240 <printRadioSettings+0x758>)
 800607a:	f000 feef 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f7fa f8a4 	bl	80001d0 <strlen>
 8006088:	4603      	mov	r3, r0
 800608a:	b29a      	uxth	r2, r3
 800608c:	f107 0108 	add.w	r1, r7, #8
 8006090:	230a      	movs	r3, #10
 8006092:	4864      	ldr	r0, [pc, #400]	; (8006224 <printRadioSettings+0x73c>)
 8006094:	f7fd fcf2 	bl	8003a7c <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8006098:	2011      	movs	r0, #17
 800609a:	f7ff f8a5 	bl	80051e8 <NRF24_read_register>
 800609e:	4603      	mov	r3, r0
 80060a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80060a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ac:	f107 0308 	add.w	r3, r7, #8
 80060b0:	4964      	ldr	r1, [pc, #400]	; (8006244 <printRadioSettings+0x75c>)
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fed2 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80060b8:	f107 0308 	add.w	r3, r7, #8
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fa f887 	bl	80001d0 <strlen>
 80060c2:	4603      	mov	r3, r0
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	f107 0108 	add.w	r1, r7, #8
 80060ca:	230a      	movs	r3, #10
 80060cc:	4855      	ldr	r0, [pc, #340]	; (8006224 <printRadioSettings+0x73c>)
 80060ce:	f7fd fcd5 	bl	8003a7c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80060d2:	2012      	movs	r0, #18
 80060d4:	f7ff f888 	bl	80051e8 <NRF24_read_register>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80060de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060e6:	f107 0308 	add.w	r3, r7, #8
 80060ea:	4957      	ldr	r1, [pc, #348]	; (8006248 <printRadioSettings+0x760>)
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 feb5 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80060f2:	f107 0308 	add.w	r3, r7, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fa f86a 	bl	80001d0 <strlen>
 80060fc:	4603      	mov	r3, r0
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f107 0108 	add.w	r1, r7, #8
 8006104:	230a      	movs	r3, #10
 8006106:	4847      	ldr	r0, [pc, #284]	; (8006224 <printRadioSettings+0x73c>)
 8006108:	f7fd fcb8 	bl	8003a7c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 800610c:	2013      	movs	r0, #19
 800610e:	f7ff f86b 	bl	80051e8 <NRF24_read_register>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800611c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	4949      	ldr	r1, [pc, #292]	; (800624c <printRadioSettings+0x764>)
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fe98 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	4618      	mov	r0, r3
 8006132:	f7fa f84d 	bl	80001d0 <strlen>
 8006136:	4603      	mov	r3, r0
 8006138:	b29a      	uxth	r2, r3
 800613a:	f107 0108 	add.w	r1, r7, #8
 800613e:	230a      	movs	r3, #10
 8006140:	4838      	ldr	r0, [pc, #224]	; (8006224 <printRadioSettings+0x73c>)
 8006142:	f7fd fc9b 	bl	8003a7c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8006146:	2014      	movs	r0, #20
 8006148:	f7ff f84e 	bl	80051e8 <NRF24_read_register>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006152:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	493c      	ldr	r1, [pc, #240]	; (8006250 <printRadioSettings+0x768>)
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fe7b 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006166:	f107 0308 	add.w	r3, r7, #8
 800616a:	4618      	mov	r0, r3
 800616c:	f7fa f830 	bl	80001d0 <strlen>
 8006170:	4603      	mov	r3, r0
 8006172:	b29a      	uxth	r2, r3
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	230a      	movs	r3, #10
 800617a:	482a      	ldr	r0, [pc, #168]	; (8006224 <printRadioSettings+0x73c>)
 800617c:	f7fd fc7e 	bl	8003a7c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8006180:	2015      	movs	r0, #21
 8006182:	f7ff f831 	bl	80051e8 <NRF24_read_register>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800618c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006194:	f107 0308 	add.w	r3, r7, #8
 8006198:	492e      	ldr	r1, [pc, #184]	; (8006254 <printRadioSettings+0x76c>)
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fe5e 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80061a0:	f107 0308 	add.w	r3, r7, #8
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fa f813 	bl	80001d0 <strlen>
 80061aa:	4603      	mov	r3, r0
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	f107 0108 	add.w	r1, r7, #8
 80061b2:	230a      	movs	r3, #10
 80061b4:	481b      	ldr	r0, [pc, #108]	; (8006224 <printRadioSettings+0x73c>)
 80061b6:	f7fd fc61 	bl	8003a7c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80061ba:	2016      	movs	r0, #22
 80061bc:	f7ff f814 	bl	80051e8 <NRF24_read_register>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80061c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061ce:	f107 0308 	add.w	r3, r7, #8
 80061d2:	4921      	ldr	r1, [pc, #132]	; (8006258 <printRadioSettings+0x770>)
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fe41 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	4618      	mov	r0, r3
 80061e0:	f7f9 fff6 	bl	80001d0 <strlen>
 80061e4:	4603      	mov	r3, r0
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	f107 0108 	add.w	r1, r7, #8
 80061ec:	230a      	movs	r3, #10
 80061ee:	480d      	ldr	r0, [pc, #52]	; (8006224 <printRadioSettings+0x73c>)
 80061f0:	f7fd fc44 	bl	8003a7c <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80061f4:	201c      	movs	r0, #28
 80061f6:	f7fe fff7 	bl	80051e8 <NRF24_read_register>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006204:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006208:	2b00      	cmp	r3, #0
 800620a:	bfcc      	ite	gt
 800620c:	2301      	movgt	r3, #1
 800620e:	2300      	movle	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	e01e      	b.n	800625c <printRadioSettings+0x774>
 800621e:	bf00      	nop
 8006220:	0800783c 	.word	0x0800783c
 8006224:	20000108 	.word	0x20000108
 8006228:	08007850 	.word	0x08007850
 800622c:	08007880 	.word	0x08007880
 8006230:	080078b0 	.word	0x080078b0
 8006234:	080078d8 	.word	0x080078d8
 8006238:	08007900 	.word	0x08007900
 800623c:	08007928 	.word	0x08007928
 8006240:	08007950 	.word	0x08007950
 8006244:	0800797c 	.word	0x0800797c
 8006248:	08007998 	.word	0x08007998
 800624c:	080079b4 	.word	0x080079b4
 8006250:	080079d0 	.word	0x080079d0
 8006254:	080079ec 	.word	0x080079ec
 8006258:	08007a08 	.word	0x08007a08
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800625c:	2b00      	cmp	r3, #0
 800625e:	bfcc      	ite	gt
 8006260:	2301      	movgt	r3, #1
 8006262:	2300      	movle	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006268:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800626c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006270:	2b00      	cmp	r3, #0
 8006272:	bfcc      	ite	gt
 8006274:	2301      	movgt	r3, #1
 8006276:	2300      	movle	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800627c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006280:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006284:	2b00      	cmp	r3, #0
 8006286:	bfcc      	ite	gt
 8006288:	2301      	movgt	r3, #1
 800628a:	2300      	movle	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006290:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006294:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfcc      	ite	gt
 800629c:	2301      	movgt	r3, #1
 800629e:	2300      	movle	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80062a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062a8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfcc      	ite	gt
 80062b0:	2301      	movgt	r3, #1
 80062b2:	2300      	movle	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f107 0008 	add.w	r0, r7, #8
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	9402      	str	r4, [sp, #8]
 80062be:	9101      	str	r1, [sp, #4]
 80062c0:	9200      	str	r2, [sp, #0]
 80062c2:	4633      	mov	r3, r6
 80062c4:	462a      	mov	r2, r5
 80062c6:	494a      	ldr	r1, [pc, #296]	; (80063f0 <printRadioSettings+0x908>)
 80062c8:	f000 fdc8 	bl	8006e5c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80062cc:	f107 0308 	add.w	r3, r7, #8
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7f9 ff7d 	bl	80001d0 <strlen>
 80062d6:	4603      	mov	r3, r0
 80062d8:	b29a      	uxth	r2, r3
 80062da:	f107 0108 	add.w	r1, r7, #8
 80062de:	230a      	movs	r3, #10
 80062e0:	4844      	ldr	r0, [pc, #272]	; (80063f4 <printRadioSettings+0x90c>)
 80062e2:	f7fd fbcb 	bl	8003a7c <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80062e6:	201d      	movs	r0, #29
 80062e8:	f7fe ff7e 	bl	80051e8 <NRF24_read_register>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80062f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00c      	beq.n	8006318 <printRadioSettings+0x830>
 80062fe:	f107 0308 	add.w	r3, r7, #8
 8006302:	4a3d      	ldr	r2, [pc, #244]	; (80063f8 <printRadioSettings+0x910>)
 8006304:	461c      	mov	r4, r3
 8006306:	4615      	mov	r5, r2
 8006308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800630a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800630c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006310:	6020      	str	r0, [r4, #0]
 8006312:	3404      	adds	r4, #4
 8006314:	8021      	strh	r1, [r4, #0]
 8006316:	e00e      	b.n	8006336 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8006318:	f107 0308 	add.w	r3, r7, #8
 800631c:	4a37      	ldr	r2, [pc, #220]	; (80063fc <printRadioSettings+0x914>)
 800631e:	461c      	mov	r4, r3
 8006320:	4615      	mov	r5, r2
 8006322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006326:	e895 0003 	ldmia.w	r5, {r0, r1}
 800632a:	6020      	str	r0, [r4, #0]
 800632c:	3404      	adds	r4, #4
 800632e:	8021      	strh	r1, [r4, #0]
 8006330:	3402      	adds	r4, #2
 8006332:	0c0b      	lsrs	r3, r1, #16
 8006334:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f7f9 ff48 	bl	80001d0 <strlen>
 8006340:	4603      	mov	r3, r0
 8006342:	b29a      	uxth	r2, r3
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	230a      	movs	r3, #10
 800634a:	482a      	ldr	r0, [pc, #168]	; (80063f4 <printRadioSettings+0x90c>)
 800634c:	f7fd fb96 	bl	8003a7c <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8006350:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <printRadioSettings+0x88c>
 800635c:	f107 0308 	add.w	r3, r7, #8
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <printRadioSettings+0x918>)
 8006362:	461c      	mov	r4, r3
 8006364:	4615      	mov	r5, r2
 8006366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800636e:	c403      	stmia	r4!, {r0, r1}
 8006370:	8022      	strh	r2, [r4, #0]
 8006372:	e00d      	b.n	8006390 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8006374:	f107 0308 	add.w	r3, r7, #8
 8006378:	4a22      	ldr	r2, [pc, #136]	; (8006404 <printRadioSettings+0x91c>)
 800637a:	461c      	mov	r4, r3
 800637c:	4615      	mov	r5, r2
 800637e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006386:	c403      	stmia	r4!, {r0, r1}
 8006388:	8022      	strh	r2, [r4, #0]
 800638a:	3402      	adds	r4, #2
 800638c:	0c13      	lsrs	r3, r2, #16
 800638e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006390:	f107 0308 	add.w	r3, r7, #8
 8006394:	4618      	mov	r0, r3
 8006396:	f7f9 ff1b 	bl	80001d0 <strlen>
 800639a:	4603      	mov	r3, r0
 800639c:	b29a      	uxth	r2, r3
 800639e:	f107 0108 	add.w	r1, r7, #8
 80063a2:	230a      	movs	r3, #10
 80063a4:	4813      	ldr	r0, [pc, #76]	; (80063f4 <printRadioSettings+0x90c>)
 80063a6:	f7fd fb69 	bl	8003a7c <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	4a16      	ldr	r2, [pc, #88]	; (8006408 <printRadioSettings+0x920>)
 80063b0:	461c      	mov	r4, r3
 80063b2:	4615      	mov	r5, r2
 80063b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	8022      	strh	r2, [r4, #0]
 80063c6:	3402      	adds	r4, #2
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80063cc:	f107 0308 	add.w	r3, r7, #8
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7f9 fefd 	bl	80001d0 <strlen>
 80063d6:	4603      	mov	r3, r0
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f107 0108 	add.w	r1, r7, #8
 80063de:	230a      	movs	r3, #10
 80063e0:	4804      	ldr	r0, [pc, #16]	; (80063f4 <printRadioSettings+0x90c>)
 80063e2:	f7fd fb4b 	bl	8003a7c <HAL_UART_Transmit>
}
 80063e6:	bf00      	nop
 80063e8:	3774      	adds	r7, #116	; 0x74
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	08007a24 	.word	0x08007a24
 80063f4:	20000108 	.word	0x20000108
 80063f8:	08007a70 	.word	0x08007a70
 80063fc:	08007a88 	.word	0x08007a88
 8006400:	08007aa0 	.word	0x08007aa0
 8006404:	08007abc 	.word	0x08007abc
 8006408:	08007690 	.word	0x08007690

0800640c <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	af00      	add	r7, sp, #0
 8006412:	f107 0c08 	add.w	ip, r7, #8
 8006416:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <nrf24_DebugUART_Init+0x2c>)
 800641c:	4618      	mov	r0, r3
 800641e:	f107 0108 	add.w	r1, r7, #8
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	461a      	mov	r2, r3
 8006426:	f000 fd05 	bl	8006e34 <memcpy>
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006432:	b004      	add	sp, #16
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	20000108 	.word	0x20000108

0800643c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643e:	b0b5      	sub	sp, #212	; 0xd4
 8006440:	af1c      	add	r7, sp, #112	; 0x70
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006442:	f7fa f89d 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006446:	f000 f8ff 	bl	8006648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800644a:	f000 fa63 	bl	8006914 <MX_GPIO_Init>
  MX_SPI3_Init();
 800644e:	f000 f9f3 	bl	8006838 <MX_SPI3_Init>
  MX_SPI1_Init();
 8006452:	f000 f9b3 	bl	80067bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8006456:	f000 fa2d 	bl	80068b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800645a:	f000 f96f 	bl	800673c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_SET);
 800645e:	2201      	movs	r2, #1
 8006460:	2101      	movs	r1, #1
 8006462:	486b      	ldr	r0, [pc, #428]	; (8006610 <main+0x1d4>)
 8006464:	f7fa fc3c 	bl	8000ce0 <HAL_GPIO_WritePin>

   NRF24_begin(nRF_CS_GPIO_Port, nRF_CS_Pin, nRF_CE_Pin, hspi3);
 8006468:	4c6a      	ldr	r4, [pc, #424]	; (8006614 <main+0x1d8>)
 800646a:	4668      	mov	r0, sp
 800646c:	1d23      	adds	r3, r4, #4
 800646e:	2260      	movs	r2, #96	; 0x60
 8006470:	4619      	mov	r1, r3
 8006472:	f000 fcdf 	bl	8006e34 <memcpy>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006480:	4865      	ldr	r0, [pc, #404]	; (8006618 <main+0x1dc>)
 8006482:	f7fe ff8b 	bl	800539c <NRF24_begin>
   nrf24_DebugUART_Init(huart1);
 8006486:	4c65      	ldr	r4, [pc, #404]	; (800661c <main+0x1e0>)
 8006488:	4668      	mov	r0, sp
 800648a:	f104 0310 	add.w	r3, r4, #16
 800648e:	2270      	movs	r2, #112	; 0x70
 8006490:	4619      	mov	r1, r3
 8006492:	f000 fccf 	bl	8006e34 <memcpy>
 8006496:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800649a:	f7ff ffb7 	bl	800640c <nrf24_DebugUART_Init>

   NRF24_stopListening();
 800649e:	f7ff f85d 	bl	800555c <NRF24_stopListening>
   NRF24_openWritingPipe(TxpipeAddrs);
 80064a2:	4b5f      	ldr	r3, [pc, #380]	; (8006620 <main+0x1e4>)
 80064a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064a8:	4618      	mov	r0, r3
 80064aa:	4621      	mov	r1, r4
 80064ac:	f7ff f8b6 	bl	800561c <NRF24_openWritingPipe>
   NRF24_setAutoAck(true);
 80064b0:	2001      	movs	r0, #1
 80064b2:	f7ff f99f 	bl	80057f4 <NRF24_setAutoAck>
   NRF24_setChannel(52);
 80064b6:	2034      	movs	r0, #52	; 0x34
 80064b8:	f7ff f8ef 	bl	800569a <NRF24_setChannel>
   NRF24_setPayloadSize(32);
 80064bc:	2020      	movs	r0, #32
 80064be:	f7ff f901 	bl	80056c4 <NRF24_setPayloadSize>

   NRF24_enableDynamicPayloads();
 80064c2:	f7ff f94d 	bl	8005760 <NRF24_enableDynamicPayloads>
   NRF24_enableAckPayload();
 80064c6:	f7ff f91d 	bl	8005704 <NRF24_enableAckPayload>

   printRadioSettings();
 80064ca:	f7ff fb0d 	bl	8005ae8 <printRadioSettings>

   ICM_SelectBank(USER_BANK_0);
 80064ce:	2000      	movs	r0, #0
 80064d0:	f7fe fb94 	bl	8004bfc <ICM_SelectBank>
   ICM_PowerOn();
 80064d4:	f7fe fa5a 	bl	800498c <ICM_PowerOn>

   MAX86150_setup();
 80064d8:	f7fe fbf1 	bl	8004cbe <MAX86150_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Select User Bank 0
	  		ICM_SelectBank(USER_BANK_0);
 80064dc:	2000      	movs	r0, #0
 80064de:	f7fe fb8d 	bl	8004bfc <ICM_SelectBank>
	  		HAL_Delay(10);
 80064e2:	200a      	movs	r0, #10
 80064e4:	f7fa f8bc 	bl	8000660 <HAL_Delay>

	  		// Obtain accelerometer and gyro data
	  		ICM_ReadAccelGyro();
 80064e8:	f7fe fafc 	bl	8004ae4 <ICM_ReadAccelGyro>

	  		// Obtain magnetometer data
	  		int16_t mag_data[3];
	  		ICM_ReadMag(mag_data);
 80064ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe f9ff 	bl	80048f4 <ICM_ReadMag>

	  		ppgunsigned16 = 15;
 80064f6:	4b4b      	ldr	r3, [pc, #300]	; (8006624 <main+0x1e8>)
 80064f8:	220f      	movs	r2, #15
 80064fa:	801a      	strh	r2, [r3, #0]
	  		//Read PPG sensor data
			if(MAX86150_check() > 0) {
 80064fc:	f7fe fc62 	bl	8004dc4 <MAX86150_check>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <main+0xde>
					ppgunsigned16 = (uint16_t) (MAX86150_getFIFORed()>>2);
 8006506:	f7fe fd69 	bl	8004fdc <MAX86150_getFIFORed>
 800650a:	4603      	mov	r3, r0
 800650c:	089b      	lsrs	r3, r3, #2
 800650e:	b21a      	sxth	r2, r3
 8006510:	4b44      	ldr	r3, [pc, #272]	; (8006624 <main+0x1e8>)
 8006512:	801a      	strh	r2, [r3, #0]
					ppgunsigned16 = 0;
 8006514:	4b43      	ldr	r3, [pc, #268]	; (8006624 <main+0x1e8>)
 8006516:	2200      	movs	r2, #0
 8006518:	801a      	strh	r2, [r3, #0]
			}

	  		// Print raw, but joined, axis data values to screen

			memcpy(tx_buffer, accel_data, sizeof(accel_data));
 800651a:	4b43      	ldr	r3, [pc, #268]	; (8006628 <main+0x1ec>)
 800651c:	4a43      	ldr	r2, [pc, #268]	; (800662c <main+0x1f0>)
 800651e:	6811      	ldr	r1, [r2, #0]
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	8892      	ldrh	r2, [r2, #4]
 8006524:	809a      	strh	r2, [r3, #4]
			memcpy(&tx_buffer[3], gyro_data, sizeof(gyro_data));
 8006526:	4b40      	ldr	r3, [pc, #256]	; (8006628 <main+0x1ec>)
 8006528:	4a41      	ldr	r2, [pc, #260]	; (8006630 <main+0x1f4>)
 800652a:	3306      	adds	r3, #6
 800652c:	6811      	ldr	r1, [r2, #0]
 800652e:	6019      	str	r1, [r3, #0]
 8006530:	8892      	ldrh	r2, [r2, #4]
 8006532:	809a      	strh	r2, [r3, #4]
			memcpy(&tx_buffer[6], mag_data, sizeof(mag_data));
 8006534:	4b3c      	ldr	r3, [pc, #240]	; (8006628 <main+0x1ec>)
 8006536:	330c      	adds	r3, #12
 8006538:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800653c:	6810      	ldr	r0, [r2, #0]
 800653e:	6018      	str	r0, [r3, #0]
 8006540:	8892      	ldrh	r2, [r2, #4]
 8006542:	809a      	strh	r2, [r3, #4]
			//memcpy(&tx_buffer[9], ppgunsigned16, sizeof(ppgunsigned16));
			tx_buffer[9] = ppgunsigned16;
 8006544:	4b37      	ldr	r3, [pc, #220]	; (8006624 <main+0x1e8>)
 8006546:	f9b3 2000 	ldrsh.w	r2, [r3]
 800654a:	4b37      	ldr	r3, [pc, #220]	; (8006628 <main+0x1ec>)
 800654c:	825a      	strh	r2, [r3, #18]
			sprintf(uart_buffer,
					"(Ax: %i | Ay: %i | Az: %i)   "
					"(Gx: %i | Gy: %i | Gz: %i)   "
					"(Mx: %i | My: %i | Mz: %i)    (PPG: %i)"
					" \r\n",
					accel_data[0], accel_data[1], accel_data[2],
 800654e:	4b37      	ldr	r3, [pc, #220]	; (800662c <main+0x1f0>)
 8006550:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(uart_buffer,
 8006554:	469c      	mov	ip, r3
					accel_data[0], accel_data[1], accel_data[2],
 8006556:	4b35      	ldr	r3, [pc, #212]	; (800662c <main+0x1f0>)
 8006558:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf(uart_buffer,
 800655c:	469e      	mov	lr, r3
					accel_data[0], accel_data[1], accel_data[2],
 800655e:	4b33      	ldr	r3, [pc, #204]	; (800662c <main+0x1f0>)
 8006560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf(uart_buffer,
 8006564:	461a      	mov	r2, r3
					gyro_data[0], gyro_data[1], gyro_data[2],
 8006566:	4b32      	ldr	r3, [pc, #200]	; (8006630 <main+0x1f4>)
 8006568:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(uart_buffer,
 800656c:	4619      	mov	r1, r3
					gyro_data[0], gyro_data[1], gyro_data[2],
 800656e:	4b30      	ldr	r3, [pc, #192]	; (8006630 <main+0x1f4>)
 8006570:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf(uart_buffer,
 8006574:	4618      	mov	r0, r3
					gyro_data[0], gyro_data[1], gyro_data[2],
 8006576:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <main+0x1f4>)
 8006578:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf(uart_buffer,
 800657c:	461c      	mov	r4, r3
					mag_data[0], mag_data[1], mag_data[2], ppgunsigned16);
 800657e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
			sprintf(uart_buffer,
 8006582:	461d      	mov	r5, r3
					mag_data[0], mag_data[1], mag_data[2], ppgunsigned16);
 8006584:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
			sprintf(uart_buffer,
 8006588:	461e      	mov	r6, r3
					mag_data[0], mag_data[1], mag_data[2], ppgunsigned16);
 800658a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
			sprintf(uart_buffer,
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	4b24      	ldr	r3, [pc, #144]	; (8006624 <main+0x1e8>)
 8006592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	9306      	str	r3, [sp, #24]
 800659c:	9605      	str	r6, [sp, #20]
 800659e:	9504      	str	r5, [sp, #16]
 80065a0:	9403      	str	r4, [sp, #12]
 80065a2:	9002      	str	r0, [sp, #8]
 80065a4:	9101      	str	r1, [sp, #4]
 80065a6:	9200      	str	r2, [sp, #0]
 80065a8:	4673      	mov	r3, lr
 80065aa:	4662      	mov	r2, ip
 80065ac:	4921      	ldr	r1, [pc, #132]	; (8006634 <main+0x1f8>)
 80065ae:	4822      	ldr	r0, [pc, #136]	; (8006638 <main+0x1fc>)
 80065b0:	f000 fc54 	bl	8006e5c <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80065b4:	4820      	ldr	r0, [pc, #128]	; (8006638 <main+0x1fc>)
 80065b6:	f7f9 fe0b 	bl	80001d0 <strlen>
 80065ba:	4603      	mov	r3, r0
 80065bc:	b29a      	uxth	r2, r3
 80065be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065c2:	491d      	ldr	r1, [pc, #116]	; (8006638 <main+0x1fc>)
 80065c4:	4815      	ldr	r0, [pc, #84]	; (800661c <main+0x1e0>)
 80065c6:	f7fd fa59 	bl	8003a7c <HAL_UART_Transmit>

	  		if(NRF24_write(tx_buffer, sizeof(tx_buffer))) {
 80065ca:	2114      	movs	r1, #20
 80065cc:	4816      	ldr	r0, [pc, #88]	; (8006628 <main+0x1ec>)
 80065ce:	f7fe ffd1 	bl	8005574 <NRF24_write>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d081      	beq.n	80064dc <main+0xa0>
	  			HAL_UART_Transmit(&huart1, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 80065d8:	230a      	movs	r3, #10
 80065da:	221a      	movs	r2, #26
 80065dc:	4917      	ldr	r1, [pc, #92]	; (800663c <main+0x200>)
 80065de:	480f      	ldr	r0, [pc, #60]	; (800661c <main+0x1e0>)
 80065e0:	f7fd fa4c 	bl	8003a7c <HAL_UART_Transmit>
	  		  	char myDataack[80];
	  		  	sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 80065e4:	f107 0308 	add.w	r3, r7, #8
 80065e8:	4a15      	ldr	r2, [pc, #84]	; (8006640 <main+0x204>)
 80065ea:	4916      	ldr	r1, [pc, #88]	; (8006644 <main+0x208>)
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fc35 	bl	8006e5c <siprintf>
	  		  	HAL_UART_Transmit(&huart1, (uint8_t *)myDataack, strlen(myDataack), 10);
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 fdea 	bl	80001d0 <strlen>
 80065fc:	4603      	mov	r3, r0
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f107 0108 	add.w	r1, r7, #8
 8006604:	230a      	movs	r3, #10
 8006606:	4805      	ldr	r0, [pc, #20]	; (800661c <main+0x1e0>)
 8006608:	f7fd fa38 	bl	8003a7c <HAL_UART_Transmit>
  {
 800660c:	e766      	b.n	80064dc <main+0xa0>
 800660e:	bf00      	nop
 8006610:	48000400 	.word	0x48000400
 8006614:	2000041c 	.word	0x2000041c
 8006618:	48000800 	.word	0x48000800
 800661c:	20000318 	.word	0x20000318
 8006620:	20000008 	.word	0x20000008
 8006624:	20000188 	.word	0x20000188
 8006628:	20000480 	.word	0x20000480
 800662c:	2000019c 	.word	0x2000019c
 8006630:	200001a4 	.word	0x200001a4
 8006634:	08007bd4 	.word	0x08007bd4
 8006638:	20000494 	.word	0x20000494
 800663c:	08007c3c 	.word	0x08007c3c
 8006640:	200003fc 	.word	0x200003fc
 8006644:	08007c58 	.word	0x08007c58

08006648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b0b8      	sub	sp, #224	; 0xe0
 800664c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800664e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006652:	2244      	movs	r2, #68	; 0x44
 8006654:	2100      	movs	r1, #0
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fbf7 	bl	8006e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800665c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800666c:	463b      	mov	r3, r7
 800666e:	2288      	movs	r2, #136	; 0x88
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fbe9 	bl	8006e4a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006678:	2310      	movs	r3, #16
 800667a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800667e:	2301      	movs	r3, #1
 8006680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800668a:	2360      	movs	r3, #96	; 0x60
 800668c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006690:	2302      	movs	r3, #2
 8006692:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006696:	2301      	movs	r3, #1
 8006698:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800669c:	2301      	movs	r3, #1
 800669e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80066a2:	2328      	movs	r3, #40	; 0x28
 80066a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80066a8:	2307      	movs	r3, #7
 80066aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80066ae:	2302      	movs	r3, #2
 80066b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80066b4:	2302      	movs	r3, #2
 80066b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fb f87c 	bl	80017bc <HAL_RCC_OscConfig>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80066ca:	f000 f9a5 	bl	8006a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066ce:	230f      	movs	r3, #15
 80066d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066d4:	2303      	movs	r3, #3
 80066d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066da:	2300      	movs	r3, #0
 80066dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80066ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80066f0:	2104      	movs	r1, #4
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fb fc12 	bl	8001f1c <HAL_RCC_ClockConfig>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80066fe:	f000 f98b 	bl	8006a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8006702:	2341      	movs	r3, #65	; 0x41
 8006704:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006706:	2300      	movs	r3, #0
 8006708:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800670a:	2300      	movs	r3, #0
 800670c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800670e:	463b      	mov	r3, r7
 8006710:	4618      	mov	r0, r3
 8006712:	f7fb fe07 	bl	8002324 <HAL_RCCEx_PeriphCLKConfig>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800671c:	f000 f97c 	bl	8006a18 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006720:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006724:	f7fa fff4 	bl	8001710 <HAL_PWREx_ControlVoltageScaling>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800672e:	f000 f973 	bl	8006a18 <Error_Handler>
  }
}
 8006732:	bf00      	nop
 8006734:	37e0      	adds	r7, #224	; 0xe0
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006740:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006742:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <MX_I2C1_Init+0x78>)
 8006744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8006746:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006748:	4a1b      	ldr	r2, [pc, #108]	; (80067b8 <MX_I2C1_Init+0x7c>)
 800674a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800674c:	4b18      	ldr	r3, [pc, #96]	; (80067b0 <MX_I2C1_Init+0x74>)
 800674e:	2200      	movs	r2, #0
 8006750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006754:	2201      	movs	r2, #1
 8006756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <MX_I2C1_Init+0x74>)
 800675a:	2200      	movs	r2, #0
 800675c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800675e:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006760:	2200      	movs	r2, #0
 8006762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006764:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006766:	2200      	movs	r2, #0
 8006768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <MX_I2C1_Init+0x74>)
 800676c:	2200      	movs	r2, #0
 800676e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006772:	2200      	movs	r2, #0
 8006774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006776:	480e      	ldr	r0, [pc, #56]	; (80067b0 <MX_I2C1_Init+0x74>)
 8006778:	f7fa faca 	bl	8000d10 <HAL_I2C_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006782:	f000 f949 	bl	8006a18 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006786:	2100      	movs	r1, #0
 8006788:	4809      	ldr	r0, [pc, #36]	; (80067b0 <MX_I2C1_Init+0x74>)
 800678a:	f7fa ff1b 	bl	80015c4 <HAL_I2CEx_ConfigAnalogFilter>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006794:	f000 f940 	bl	8006a18 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006798:	2100      	movs	r1, #0
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <MX_I2C1_Init+0x74>)
 800679c:	f7fa ff5d 	bl	800165a <HAL_I2CEx_ConfigDigitalFilter>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80067a6:	f000 f937 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80067aa:	bf00      	nop
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000298 	.word	0x20000298
 80067b4:	40005400 	.word	0x40005400
 80067b8:	10909cec 	.word	0x10909cec

080067bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <MX_SPI1_Init+0x74>)
 80067c2:	4a1c      	ldr	r2, [pc, #112]	; (8006834 <MX_SPI1_Init+0x78>)
 80067c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80067c6:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <MX_SPI1_Init+0x74>)
 80067c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80067cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80067ce:	4b18      	ldr	r3, [pc, #96]	; (8006830 <MX_SPI1_Init+0x74>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80067d4:	4b16      	ldr	r3, [pc, #88]	; (8006830 <MX_SPI1_Init+0x74>)
 80067d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80067da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80067dc:	4b14      	ldr	r3, [pc, #80]	; (8006830 <MX_SPI1_Init+0x74>)
 80067de:	2202      	movs	r2, #2
 80067e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80067e2:	4b13      	ldr	r3, [pc, #76]	; (8006830 <MX_SPI1_Init+0x74>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80067e8:	4b11      	ldr	r3, [pc, #68]	; (8006830 <MX_SPI1_Init+0x74>)
 80067ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <MX_SPI1_Init+0x74>)
 80067f2:	2210      	movs	r2, #16
 80067f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <MX_SPI1_Init+0x74>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80067fc:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <MX_SPI1_Init+0x74>)
 80067fe:	2200      	movs	r2, #0
 8006800:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <MX_SPI1_Init+0x74>)
 8006804:	2200      	movs	r2, #0
 8006806:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006808:	4b09      	ldr	r3, [pc, #36]	; (8006830 <MX_SPI1_Init+0x74>)
 800680a:	2207      	movs	r2, #7
 800680c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <MX_SPI1_Init+0x74>)
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <MX_SPI1_Init+0x74>)
 8006816:	2200      	movs	r2, #0
 8006818:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800681a:	4805      	ldr	r0, [pc, #20]	; (8006830 <MX_SPI1_Init+0x74>)
 800681c:	f7fc fa32 	bl	8002c84 <HAL_SPI_Init>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006826:	f000 f8f7 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800682a:	bf00      	nop
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	200001ac 	.word	0x200001ac
 8006834:	40013000 	.word	0x40013000

08006838 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <MX_SPI3_Init+0x74>)
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <MX_SPI3_Init+0x78>)
 8006840:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006842:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <MX_SPI3_Init+0x74>)
 8006844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006848:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800684a:	4b18      	ldr	r3, [pc, #96]	; (80068ac <MX_SPI3_Init+0x74>)
 800684c:	2200      	movs	r2, #0
 800684e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006850:	4b16      	ldr	r3, [pc, #88]	; (80068ac <MX_SPI3_Init+0x74>)
 8006852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006856:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006858:	4b14      	ldr	r3, [pc, #80]	; (80068ac <MX_SPI3_Init+0x74>)
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <MX_SPI3_Init+0x74>)
 8006860:	2200      	movs	r2, #0
 8006862:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <MX_SPI3_Init+0x74>)
 8006866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800686a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <MX_SPI3_Init+0x74>)
 800686e:	2210      	movs	r2, #16
 8006870:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006872:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <MX_SPI3_Init+0x74>)
 8006874:	2200      	movs	r2, #0
 8006876:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <MX_SPI3_Init+0x74>)
 800687a:	2200      	movs	r2, #0
 800687c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <MX_SPI3_Init+0x74>)
 8006880:	2200      	movs	r2, #0
 8006882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006884:	4b09      	ldr	r3, [pc, #36]	; (80068ac <MX_SPI3_Init+0x74>)
 8006886:	2207      	movs	r2, #7
 8006888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800688a:	4b08      	ldr	r3, [pc, #32]	; (80068ac <MX_SPI3_Init+0x74>)
 800688c:	2200      	movs	r2, #0
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <MX_SPI3_Init+0x74>)
 8006892:	2208      	movs	r2, #8
 8006894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006896:	4805      	ldr	r0, [pc, #20]	; (80068ac <MX_SPI3_Init+0x74>)
 8006898:	f7fc f9f4 	bl	8002c84 <HAL_SPI_Init>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80068a2:	f000 f8b9 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80068a6:	bf00      	nop
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	2000041c 	.word	0x2000041c
 80068b0:	40003c00 	.word	0x40003c00

080068b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80068b8:	4b14      	ldr	r3, [pc, #80]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068ba:	4a15      	ldr	r2, [pc, #84]	; (8006910 <MX_USART1_UART_Init+0x5c>)
 80068bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80068c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80068c6:	4b11      	ldr	r3, [pc, #68]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80068d2:	4b0e      	ldr	r3, [pc, #56]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068da:	220c      	movs	r2, #12
 80068dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80068e4:	4b09      	ldr	r3, [pc, #36]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068ea:	4b08      	ldr	r3, [pc, #32]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80068f6:	4805      	ldr	r0, [pc, #20]	; (800690c <MX_USART1_UART_Init+0x58>)
 80068f8:	f7fd f872 	bl	80039e0 <HAL_UART_Init>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006902:	f000 f889 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000318 	.word	0x20000318
 8006910:	40013800 	.word	0x40013800

08006914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08a      	sub	sp, #40	; 0x28
 8006918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800691a:	f107 0314 	add.w	r3, r7, #20
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	605a      	str	r2, [r3, #4]
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	60da      	str	r2, [r3, #12]
 8006928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800692a:	4b38      	ldr	r3, [pc, #224]	; (8006a0c <MX_GPIO_Init+0xf8>)
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	4a37      	ldr	r2, [pc, #220]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006936:	4b35      	ldr	r3, [pc, #212]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006942:	4b32      	ldr	r3, [pc, #200]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006946:	4a31      	ldr	r2, [pc, #196]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800694e:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800695a:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <MX_GPIO_Init+0xf8>)
 800695c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695e:	4a2b      	ldr	r2, [pc, #172]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006960:	f043 0302 	orr.w	r3, r3, #2
 8006964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006966:	4b29      	ldr	r3, [pc, #164]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006972:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800697e:	4b23      	ldr	r3, [pc, #140]	; (8006a0c <MX_GPIO_Init+0xf8>)
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 800698a:	2200      	movs	r2, #0
 800698c:	2110      	movs	r1, #16
 800698e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006992:	f7fa f9a5 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_RESET);
 8006996:	2200      	movs	r2, #0
 8006998:	2101      	movs	r1, #1
 800699a:	481d      	ldr	r0, [pc, #116]	; (8006a10 <MX_GPIO_Init+0xfc>)
 800699c:	f7fa f9a0 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_CS_Pin|nRF_CE_Pin, GPIO_PIN_RESET);
 80069a0:	2200      	movs	r2, #0
 80069a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80069a6:	481b      	ldr	r0, [pc, #108]	; (8006a14 <MX_GPIO_Init+0x100>)
 80069a8:	f7fa f99a 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM_CS_Pin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 80069ac:	2310      	movs	r3, #16
 80069ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069b0:	2301      	movs	r3, #1
 80069b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b8:	2300      	movs	r3, #0
 80069ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 80069bc:	f107 0314 	add.w	r3, r7, #20
 80069c0:	4619      	mov	r1, r3
 80069c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069c6:	f7f9 ffe3 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_PWR_Pin */
  GPIO_InitStruct.Pin = nRF_PWR_Pin;
 80069ca:	2301      	movs	r3, #1
 80069cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ce:	2301      	movs	r3, #1
 80069d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d6:	2300      	movs	r3, #0
 80069d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_PWR_GPIO_Port, &GPIO_InitStruct);
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	4619      	mov	r1, r3
 80069e0:	480b      	ldr	r0, [pc, #44]	; (8006a10 <MX_GPIO_Init+0xfc>)
 80069e2:	f7f9 ffd5 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CS_Pin nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CS_Pin|nRF_CE_Pin;
 80069e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80069ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ec:	2301      	movs	r3, #1
 80069ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f4:	2300      	movs	r3, #0
 80069f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	4619      	mov	r1, r3
 80069fe:	4805      	ldr	r0, [pc, #20]	; (8006a14 <MX_GPIO_Init+0x100>)
 8006a00:	f7f9 ffc6 	bl	8000990 <HAL_GPIO_Init>

}
 8006a04:	bf00      	nop
 8006a06:	3728      	adds	r7, #40	; 0x28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	48000400 	.word	0x48000400
 8006a14:	48000800 	.word	0x48000800

08006a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a1c:	bf00      	nop
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <HAL_MspInit+0x44>)
 8006a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a32:	4a0e      	ldr	r2, [pc, #56]	; (8006a6c <HAL_MspInit+0x44>)
 8006a34:	f043 0301 	orr.w	r3, r3, #1
 8006a38:	6613      	str	r3, [r2, #96]	; 0x60
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <HAL_MspInit+0x44>)
 8006a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_MspInit+0x44>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <HAL_MspInit+0x44>)
 8006a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a50:	6593      	str	r3, [r2, #88]	; 0x58
 8006a52:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_MspInit+0x44>)
 8006a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40021000 	.word	0x40021000

08006a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a78:	f107 0314 	add.w	r3, r7, #20
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a17      	ldr	r2, [pc, #92]	; (8006aec <HAL_I2C_MspInit+0x7c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d127      	bne.n	8006ae2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a92:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <HAL_I2C_MspInit+0x80>)
 8006a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a96:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <HAL_I2C_MspInit+0x80>)
 8006a98:	f043 0302 	orr.w	r3, r3, #2
 8006a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a9e:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <HAL_I2C_MspInit+0x80>)
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	613b      	str	r3, [r7, #16]
 8006aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006aaa:	23c0      	movs	r3, #192	; 0xc0
 8006aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006aae:	2312      	movs	r3, #18
 8006ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006aba:	2304      	movs	r3, #4
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006abe:	f107 0314 	add.w	r3, r7, #20
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	480b      	ldr	r0, [pc, #44]	; (8006af4 <HAL_I2C_MspInit+0x84>)
 8006ac6:	f7f9 ff63 	bl	8000990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006aca:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_I2C_MspInit+0x80>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <HAL_I2C_MspInit+0x80>)
 8006ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8006ad6:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <HAL_I2C_MspInit+0x80>)
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006ae2:	bf00      	nop
 8006ae4:	3728      	adds	r7, #40	; 0x28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40005400 	.word	0x40005400
 8006af0:	40021000 	.word	0x40021000
 8006af4:	48000400 	.word	0x48000400

08006af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	; 0x30
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	609a      	str	r2, [r3, #8]
 8006b0c:	60da      	str	r2, [r3, #12]
 8006b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a2f      	ldr	r2, [pc, #188]	; (8006bd4 <HAL_SPI_MspInit+0xdc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d129      	bne.n	8006b6e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006b1a:	4b2f      	ldr	r3, [pc, #188]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	4a2e      	ldr	r2, [pc, #184]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b24:	6613      	str	r3, [r2, #96]	; 0x60
 8006b26:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b32:	4b29      	ldr	r3, [pc, #164]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	4a28      	ldr	r2, [pc, #160]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b3e:	4b26      	ldr	r3, [pc, #152]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006b4a:	23e0      	movs	r3, #224	; 0xe0
 8006b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b56:	2303      	movs	r3, #3
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006b5a:	2305      	movs	r3, #5
 8006b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b5e:	f107 031c 	add.w	r3, r7, #28
 8006b62:	4619      	mov	r1, r3
 8006b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b68:	f7f9 ff12 	bl	8000990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006b6c:	e02d      	b.n	8006bca <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <HAL_SPI_MspInit+0xe4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d128      	bne.n	8006bca <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006b78:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7c:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b82:	6593      	str	r3, [r2, #88]	; 0x58
 8006b84:	4b14      	ldr	r3, [pc, #80]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b90:	4b11      	ldr	r3, [pc, #68]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b94:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b96:	f043 0304 	orr.w	r3, r3, #4
 8006b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b9c:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <HAL_SPI_MspInit+0xe0>)
 8006b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	60fb      	str	r3, [r7, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006ba8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006bba:	2306      	movs	r3, #6
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bbe:	f107 031c 	add.w	r3, r7, #28
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4806      	ldr	r0, [pc, #24]	; (8006be0 <HAL_SPI_MspInit+0xe8>)
 8006bc6:	f7f9 fee3 	bl	8000990 <HAL_GPIO_Init>
}
 8006bca:	bf00      	nop
 8006bcc:	3730      	adds	r7, #48	; 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40013000 	.word	0x40013000
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40003c00 	.word	0x40003c00
 8006be0:	48000800 	.word	0x48000800

08006be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a18      	ldr	r2, [pc, #96]	; (8006c64 <HAL_UART_MspInit+0x80>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d129      	bne.n	8006c5a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c06:	4b18      	ldr	r3, [pc, #96]	; (8006c68 <HAL_UART_MspInit+0x84>)
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <HAL_UART_MspInit+0x84>)
 8006c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c10:	6613      	str	r3, [r2, #96]	; 0x60
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <HAL_UART_MspInit+0x84>)
 8006c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1a:	613b      	str	r3, [r7, #16]
 8006c1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_UART_MspInit+0x84>)
 8006c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c22:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <HAL_UART_MspInit+0x84>)
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <HAL_UART_MspInit+0x84>)
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006c36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c44:	2303      	movs	r3, #3
 8006c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c48:	2307      	movs	r3, #7
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c4c:	f107 0314 	add.w	r3, r7, #20
 8006c50:	4619      	mov	r1, r3
 8006c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c56:	f7f9 fe9b 	bl	8000990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006c5a:	bf00      	nop
 8006c5c:	3728      	adds	r7, #40	; 0x28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40013800 	.word	0x40013800
 8006c68:	40021000 	.word	0x40021000

08006c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006c70:	bf00      	nop
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c7e:	e7fe      	b.n	8006c7e <HardFault_Handler+0x4>

08006c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c84:	e7fe      	b.n	8006c84 <MemManage_Handler+0x4>

08006c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c86:	b480      	push	{r7}
 8006c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c8a:	e7fe      	b.n	8006c8a <BusFault_Handler+0x4>

08006c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c90:	e7fe      	b.n	8006c90 <UsageFault_Handler+0x4>

08006c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c92:	b480      	push	{r7}
 8006c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c96:	bf00      	nop
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006cb2:	bf00      	nop
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006cc0:	f7f9 fcb0 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cc4:	bf00      	nop
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <_sbrk+0x50>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <_sbrk+0x16>
		heap_end = &end;
 8006cd8:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <_sbrk+0x50>)
 8006cda:	4a10      	ldr	r2, [pc, #64]	; (8006d1c <_sbrk+0x54>)
 8006cdc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006cde:	4b0e      	ldr	r3, [pc, #56]	; (8006d18 <_sbrk+0x50>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <_sbrk+0x50>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	466a      	mov	r2, sp
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d907      	bls.n	8006d02 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006cf2:	f000 f875 	bl	8006de0 <__errno>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	230c      	movs	r3, #12
 8006cfa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006d00:	e006      	b.n	8006d10 <_sbrk+0x48>
	}

	heap_end += incr;
 8006d02:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <_sbrk+0x50>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	4a03      	ldr	r2, [pc, #12]	; (8006d18 <_sbrk+0x50>)
 8006d0c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	2000018c 	.word	0x2000018c
 8006d1c:	20000500 	.word	0x20000500

08006d20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d24:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <SystemInit+0x64>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2a:	4a16      	ldr	r2, [pc, #88]	; (8006d84 <SystemInit+0x64>)
 8006d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <SystemInit+0x68>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <SystemInit+0x68>)
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <SystemInit+0x68>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <SystemInit+0x68>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a0f      	ldr	r2, [pc, #60]	; (8006d88 <SystemInit+0x68>)
 8006d4c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006d50:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006d54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <SystemInit+0x68>)
 8006d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d5c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <SystemInit+0x68>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a09      	ldr	r2, [pc, #36]	; (8006d88 <SystemInit+0x68>)
 8006d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <SystemInit+0x68>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <SystemInit+0x64>)
 8006d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d76:	609a      	str	r2, [r3, #8]
#endif
}
 8006d78:	bf00      	nop
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	e000ed00 	.word	0xe000ed00
 8006d88:	40021000 	.word	0x40021000

08006d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006d92:	e003      	b.n	8006d9c <LoopCopyDataInit>

08006d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006d9a:	3104      	adds	r1, #4

08006d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006d9c:	480b      	ldr	r0, [pc, #44]	; (8006dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006da4:	d3f6      	bcc.n	8006d94 <CopyDataInit>
	ldr	r2, =_sbss
 8006da6:	4a0b      	ldr	r2, [pc, #44]	; (8006dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006da8:	e002      	b.n	8006db0 <LoopFillZerobss>

08006daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006dac:	f842 3b04 	str.w	r3, [r2], #4

08006db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8006db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006db4:	d3f9      	bcc.n	8006daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006db6:	f7ff ffb3 	bl	8006d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006dba:	f000 f817 	bl	8006dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006dbe:	f7ff fb3d 	bl	800643c <main>

08006dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8006dc2:	e7fe      	b.n	8006dc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006dc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006dc8:	08007cf8 	.word	0x08007cf8
	ldr	r0, =_sdata
 8006dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006dd0:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8006dd4:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8006dd8:	200004fc 	.word	0x200004fc

08006ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006ddc:	e7fe      	b.n	8006ddc <ADC1_2_IRQHandler>
	...

08006de0 <__errno>:
 8006de0:	4b01      	ldr	r3, [pc, #4]	; (8006de8 <__errno+0x8>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	20000014 	.word	0x20000014

08006dec <__libc_init_array>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4e0d      	ldr	r6, [pc, #52]	; (8006e24 <__libc_init_array+0x38>)
 8006df0:	4c0d      	ldr	r4, [pc, #52]	; (8006e28 <__libc_init_array+0x3c>)
 8006df2:	1ba4      	subs	r4, r4, r6
 8006df4:	10a4      	asrs	r4, r4, #2
 8006df6:	2500      	movs	r5, #0
 8006df8:	42a5      	cmp	r5, r4
 8006dfa:	d109      	bne.n	8006e10 <__libc_init_array+0x24>
 8006dfc:	4e0b      	ldr	r6, [pc, #44]	; (8006e2c <__libc_init_array+0x40>)
 8006dfe:	4c0c      	ldr	r4, [pc, #48]	; (8006e30 <__libc_init_array+0x44>)
 8006e00:	f000 fc28 	bl	8007654 <_init>
 8006e04:	1ba4      	subs	r4, r4, r6
 8006e06:	10a4      	asrs	r4, r4, #2
 8006e08:	2500      	movs	r5, #0
 8006e0a:	42a5      	cmp	r5, r4
 8006e0c:	d105      	bne.n	8006e1a <__libc_init_array+0x2e>
 8006e0e:	bd70      	pop	{r4, r5, r6, pc}
 8006e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e14:	4798      	blx	r3
 8006e16:	3501      	adds	r5, #1
 8006e18:	e7ee      	b.n	8006df8 <__libc_init_array+0xc>
 8006e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e1e:	4798      	blx	r3
 8006e20:	3501      	adds	r5, #1
 8006e22:	e7f2      	b.n	8006e0a <__libc_init_array+0x1e>
 8006e24:	08007cf0 	.word	0x08007cf0
 8006e28:	08007cf0 	.word	0x08007cf0
 8006e2c:	08007cf0 	.word	0x08007cf0
 8006e30:	08007cf4 	.word	0x08007cf4

08006e34 <memcpy>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	1e43      	subs	r3, r0, #1
 8006e38:	440a      	add	r2, r1
 8006e3a:	4291      	cmp	r1, r2
 8006e3c:	d100      	bne.n	8006e40 <memcpy+0xc>
 8006e3e:	bd10      	pop	{r4, pc}
 8006e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e48:	e7f7      	b.n	8006e3a <memcpy+0x6>

08006e4a <memset>:
 8006e4a:	4402      	add	r2, r0
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d100      	bne.n	8006e54 <memset+0xa>
 8006e52:	4770      	bx	lr
 8006e54:	f803 1b01 	strb.w	r1, [r3], #1
 8006e58:	e7f9      	b.n	8006e4e <memset+0x4>
	...

08006e5c <siprintf>:
 8006e5c:	b40e      	push	{r1, r2, r3}
 8006e5e:	b500      	push	{lr}
 8006e60:	b09c      	sub	sp, #112	; 0x70
 8006e62:	ab1d      	add	r3, sp, #116	; 0x74
 8006e64:	9002      	str	r0, [sp, #8]
 8006e66:	9006      	str	r0, [sp, #24]
 8006e68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e6c:	4809      	ldr	r0, [pc, #36]	; (8006e94 <siprintf+0x38>)
 8006e6e:	9107      	str	r1, [sp, #28]
 8006e70:	9104      	str	r1, [sp, #16]
 8006e72:	4909      	ldr	r1, [pc, #36]	; (8006e98 <siprintf+0x3c>)
 8006e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e78:	9105      	str	r1, [sp, #20]
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	a902      	add	r1, sp, #8
 8006e80:	f000 f866 	bl	8006f50 <_svfiprintf_r>
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	b01c      	add	sp, #112	; 0x70
 8006e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e90:	b003      	add	sp, #12
 8006e92:	4770      	bx	lr
 8006e94:	20000014 	.word	0x20000014
 8006e98:	ffff0208 	.word	0xffff0208

08006e9c <__ssputs_r>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	688e      	ldr	r6, [r1, #8]
 8006ea2:	429e      	cmp	r6, r3
 8006ea4:	4682      	mov	sl, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4690      	mov	r8, r2
 8006eaa:	4699      	mov	r9, r3
 8006eac:	d837      	bhi.n	8006f1e <__ssputs_r+0x82>
 8006eae:	898a      	ldrh	r2, [r1, #12]
 8006eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006eb4:	d031      	beq.n	8006f1a <__ssputs_r+0x7e>
 8006eb6:	6825      	ldr	r5, [r4, #0]
 8006eb8:	6909      	ldr	r1, [r1, #16]
 8006eba:	1a6f      	subs	r7, r5, r1
 8006ebc:	6965      	ldr	r5, [r4, #20]
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ec4:	fb95 f5f3 	sdiv	r5, r5, r3
 8006ec8:	f109 0301 	add.w	r3, r9, #1
 8006ecc:	443b      	add	r3, r7
 8006ece:	429d      	cmp	r5, r3
 8006ed0:	bf38      	it	cc
 8006ed2:	461d      	movcc	r5, r3
 8006ed4:	0553      	lsls	r3, r2, #21
 8006ed6:	d530      	bpl.n	8006f3a <__ssputs_r+0x9e>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f000 fb21 	bl	8007520 <_malloc_r>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	b950      	cbnz	r0, 8006ef8 <__ssputs_r+0x5c>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	f8ca 3000 	str.w	r3, [sl]
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef8:	463a      	mov	r2, r7
 8006efa:	6921      	ldr	r1, [r4, #16]
 8006efc:	f7ff ff9a 	bl	8006e34 <memcpy>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f0a:	81a3      	strh	r3, [r4, #12]
 8006f0c:	6126      	str	r6, [r4, #16]
 8006f0e:	6165      	str	r5, [r4, #20]
 8006f10:	443e      	add	r6, r7
 8006f12:	1bed      	subs	r5, r5, r7
 8006f14:	6026      	str	r6, [r4, #0]
 8006f16:	60a5      	str	r5, [r4, #8]
 8006f18:	464e      	mov	r6, r9
 8006f1a:	454e      	cmp	r6, r9
 8006f1c:	d900      	bls.n	8006f20 <__ssputs_r+0x84>
 8006f1e:	464e      	mov	r6, r9
 8006f20:	4632      	mov	r2, r6
 8006f22:	4641      	mov	r1, r8
 8006f24:	6820      	ldr	r0, [r4, #0]
 8006f26:	f000 fa93 	bl	8007450 <memmove>
 8006f2a:	68a3      	ldr	r3, [r4, #8]
 8006f2c:	1b9b      	subs	r3, r3, r6
 8006f2e:	60a3      	str	r3, [r4, #8]
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	441e      	add	r6, r3
 8006f34:	6026      	str	r6, [r4, #0]
 8006f36:	2000      	movs	r0, #0
 8006f38:	e7dc      	b.n	8006ef4 <__ssputs_r+0x58>
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	f000 fb4a 	bl	80075d4 <_realloc_r>
 8006f40:	4606      	mov	r6, r0
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d1e2      	bne.n	8006f0c <__ssputs_r+0x70>
 8006f46:	6921      	ldr	r1, [r4, #16]
 8006f48:	4650      	mov	r0, sl
 8006f4a:	f000 fa9b 	bl	8007484 <_free_r>
 8006f4e:	e7c8      	b.n	8006ee2 <__ssputs_r+0x46>

08006f50 <_svfiprintf_r>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	461d      	mov	r5, r3
 8006f56:	898b      	ldrh	r3, [r1, #12]
 8006f58:	061f      	lsls	r7, r3, #24
 8006f5a:	b09d      	sub	sp, #116	; 0x74
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4616      	mov	r6, r2
 8006f62:	d50f      	bpl.n	8006f84 <_svfiprintf_r+0x34>
 8006f64:	690b      	ldr	r3, [r1, #16]
 8006f66:	b96b      	cbnz	r3, 8006f84 <_svfiprintf_r+0x34>
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	f000 fad9 	bl	8007520 <_malloc_r>
 8006f6e:	6020      	str	r0, [r4, #0]
 8006f70:	6120      	str	r0, [r4, #16]
 8006f72:	b928      	cbnz	r0, 8006f80 <_svfiprintf_r+0x30>
 8006f74:	230c      	movs	r3, #12
 8006f76:	f8c8 3000 	str.w	r3, [r8]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7e:	e0c8      	b.n	8007112 <_svfiprintf_r+0x1c2>
 8006f80:	2340      	movs	r3, #64	; 0x40
 8006f82:	6163      	str	r3, [r4, #20]
 8006f84:	2300      	movs	r3, #0
 8006f86:	9309      	str	r3, [sp, #36]	; 0x24
 8006f88:	2320      	movs	r3, #32
 8006f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f8e:	2330      	movs	r3, #48	; 0x30
 8006f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f94:	9503      	str	r5, [sp, #12]
 8006f96:	f04f 0b01 	mov.w	fp, #1
 8006f9a:	4637      	mov	r7, r6
 8006f9c:	463d      	mov	r5, r7
 8006f9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006fa2:	b10b      	cbz	r3, 8006fa8 <_svfiprintf_r+0x58>
 8006fa4:	2b25      	cmp	r3, #37	; 0x25
 8006fa6:	d13e      	bne.n	8007026 <_svfiprintf_r+0xd6>
 8006fa8:	ebb7 0a06 	subs.w	sl, r7, r6
 8006fac:	d00b      	beq.n	8006fc6 <_svfiprintf_r+0x76>
 8006fae:	4653      	mov	r3, sl
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	f7ff ff71 	bl	8006e9c <__ssputs_r>
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f000 80a4 	beq.w	8007108 <_svfiprintf_r+0x1b8>
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	4453      	add	r3, sl
 8006fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc6:	783b      	ldrb	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 809d 	beq.w	8007108 <_svfiprintf_r+0x1b8>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fd8:	9304      	str	r3, [sp, #16]
 8006fda:	9307      	str	r3, [sp, #28]
 8006fdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fe0:	931a      	str	r3, [sp, #104]	; 0x68
 8006fe2:	462f      	mov	r7, r5
 8006fe4:	2205      	movs	r2, #5
 8006fe6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006fea:	4850      	ldr	r0, [pc, #320]	; (800712c <_svfiprintf_r+0x1dc>)
 8006fec:	f7f9 f8f8 	bl	80001e0 <memchr>
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	b9d0      	cbnz	r0, 800702a <_svfiprintf_r+0xda>
 8006ff4:	06d9      	lsls	r1, r3, #27
 8006ff6:	bf44      	itt	mi
 8006ff8:	2220      	movmi	r2, #32
 8006ffa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ffe:	071a      	lsls	r2, r3, #28
 8007000:	bf44      	itt	mi
 8007002:	222b      	movmi	r2, #43	; 0x2b
 8007004:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007008:	782a      	ldrb	r2, [r5, #0]
 800700a:	2a2a      	cmp	r2, #42	; 0x2a
 800700c:	d015      	beq.n	800703a <_svfiprintf_r+0xea>
 800700e:	9a07      	ldr	r2, [sp, #28]
 8007010:	462f      	mov	r7, r5
 8007012:	2000      	movs	r0, #0
 8007014:	250a      	movs	r5, #10
 8007016:	4639      	mov	r1, r7
 8007018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800701c:	3b30      	subs	r3, #48	; 0x30
 800701e:	2b09      	cmp	r3, #9
 8007020:	d94d      	bls.n	80070be <_svfiprintf_r+0x16e>
 8007022:	b1b8      	cbz	r0, 8007054 <_svfiprintf_r+0x104>
 8007024:	e00f      	b.n	8007046 <_svfiprintf_r+0xf6>
 8007026:	462f      	mov	r7, r5
 8007028:	e7b8      	b.n	8006f9c <_svfiprintf_r+0x4c>
 800702a:	4a40      	ldr	r2, [pc, #256]	; (800712c <_svfiprintf_r+0x1dc>)
 800702c:	1a80      	subs	r0, r0, r2
 800702e:	fa0b f000 	lsl.w	r0, fp, r0
 8007032:	4318      	orrs	r0, r3
 8007034:	9004      	str	r0, [sp, #16]
 8007036:	463d      	mov	r5, r7
 8007038:	e7d3      	b.n	8006fe2 <_svfiprintf_r+0x92>
 800703a:	9a03      	ldr	r2, [sp, #12]
 800703c:	1d11      	adds	r1, r2, #4
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	9103      	str	r1, [sp, #12]
 8007042:	2a00      	cmp	r2, #0
 8007044:	db01      	blt.n	800704a <_svfiprintf_r+0xfa>
 8007046:	9207      	str	r2, [sp, #28]
 8007048:	e004      	b.n	8007054 <_svfiprintf_r+0x104>
 800704a:	4252      	negs	r2, r2
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	9207      	str	r2, [sp, #28]
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	783b      	ldrb	r3, [r7, #0]
 8007056:	2b2e      	cmp	r3, #46	; 0x2e
 8007058:	d10c      	bne.n	8007074 <_svfiprintf_r+0x124>
 800705a:	787b      	ldrb	r3, [r7, #1]
 800705c:	2b2a      	cmp	r3, #42	; 0x2a
 800705e:	d133      	bne.n	80070c8 <_svfiprintf_r+0x178>
 8007060:	9b03      	ldr	r3, [sp, #12]
 8007062:	1d1a      	adds	r2, r3, #4
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	9203      	str	r2, [sp, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bfb8      	it	lt
 800706c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007070:	3702      	adds	r7, #2
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	4d2e      	ldr	r5, [pc, #184]	; (8007130 <_svfiprintf_r+0x1e0>)
 8007076:	7839      	ldrb	r1, [r7, #0]
 8007078:	2203      	movs	r2, #3
 800707a:	4628      	mov	r0, r5
 800707c:	f7f9 f8b0 	bl	80001e0 <memchr>
 8007080:	b138      	cbz	r0, 8007092 <_svfiprintf_r+0x142>
 8007082:	2340      	movs	r3, #64	; 0x40
 8007084:	1b40      	subs	r0, r0, r5
 8007086:	fa03 f000 	lsl.w	r0, r3, r0
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	4303      	orrs	r3, r0
 800708e:	3701      	adds	r7, #1
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	7839      	ldrb	r1, [r7, #0]
 8007094:	4827      	ldr	r0, [pc, #156]	; (8007134 <_svfiprintf_r+0x1e4>)
 8007096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800709a:	2206      	movs	r2, #6
 800709c:	1c7e      	adds	r6, r7, #1
 800709e:	f7f9 f89f 	bl	80001e0 <memchr>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d038      	beq.n	8007118 <_svfiprintf_r+0x1c8>
 80070a6:	4b24      	ldr	r3, [pc, #144]	; (8007138 <_svfiprintf_r+0x1e8>)
 80070a8:	bb13      	cbnz	r3, 80070f0 <_svfiprintf_r+0x1a0>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	3307      	adds	r3, #7
 80070ae:	f023 0307 	bic.w	r3, r3, #7
 80070b2:	3308      	adds	r3, #8
 80070b4:	9303      	str	r3, [sp, #12]
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	444b      	add	r3, r9
 80070ba:	9309      	str	r3, [sp, #36]	; 0x24
 80070bc:	e76d      	b.n	8006f9a <_svfiprintf_r+0x4a>
 80070be:	fb05 3202 	mla	r2, r5, r2, r3
 80070c2:	2001      	movs	r0, #1
 80070c4:	460f      	mov	r7, r1
 80070c6:	e7a6      	b.n	8007016 <_svfiprintf_r+0xc6>
 80070c8:	2300      	movs	r3, #0
 80070ca:	3701      	adds	r7, #1
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	4619      	mov	r1, r3
 80070d0:	250a      	movs	r5, #10
 80070d2:	4638      	mov	r0, r7
 80070d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d8:	3a30      	subs	r2, #48	; 0x30
 80070da:	2a09      	cmp	r2, #9
 80070dc:	d903      	bls.n	80070e6 <_svfiprintf_r+0x196>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c8      	beq.n	8007074 <_svfiprintf_r+0x124>
 80070e2:	9105      	str	r1, [sp, #20]
 80070e4:	e7c6      	b.n	8007074 <_svfiprintf_r+0x124>
 80070e6:	fb05 2101 	mla	r1, r5, r1, r2
 80070ea:	2301      	movs	r3, #1
 80070ec:	4607      	mov	r7, r0
 80070ee:	e7f0      	b.n	80070d2 <_svfiprintf_r+0x182>
 80070f0:	ab03      	add	r3, sp, #12
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4622      	mov	r2, r4
 80070f6:	4b11      	ldr	r3, [pc, #68]	; (800713c <_svfiprintf_r+0x1ec>)
 80070f8:	a904      	add	r1, sp, #16
 80070fa:	4640      	mov	r0, r8
 80070fc:	f3af 8000 	nop.w
 8007100:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007104:	4681      	mov	r9, r0
 8007106:	d1d6      	bne.n	80070b6 <_svfiprintf_r+0x166>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	065b      	lsls	r3, r3, #25
 800710c:	f53f af35 	bmi.w	8006f7a <_svfiprintf_r+0x2a>
 8007110:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007112:	b01d      	add	sp, #116	; 0x74
 8007114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007118:	ab03      	add	r3, sp, #12
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4622      	mov	r2, r4
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <_svfiprintf_r+0x1ec>)
 8007120:	a904      	add	r1, sp, #16
 8007122:	4640      	mov	r0, r8
 8007124:	f000 f882 	bl	800722c <_printf_i>
 8007128:	e7ea      	b.n	8007100 <_svfiprintf_r+0x1b0>
 800712a:	bf00      	nop
 800712c:	08007cb4 	.word	0x08007cb4
 8007130:	08007cba 	.word	0x08007cba
 8007134:	08007cbe 	.word	0x08007cbe
 8007138:	00000000 	.word	0x00000000
 800713c:	08006e9d 	.word	0x08006e9d

08007140 <_printf_common>:
 8007140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	4691      	mov	r9, r2
 8007146:	461f      	mov	r7, r3
 8007148:	688a      	ldr	r2, [r1, #8]
 800714a:	690b      	ldr	r3, [r1, #16]
 800714c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007150:	4293      	cmp	r3, r2
 8007152:	bfb8      	it	lt
 8007154:	4613      	movlt	r3, r2
 8007156:	f8c9 3000 	str.w	r3, [r9]
 800715a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800715e:	4606      	mov	r6, r0
 8007160:	460c      	mov	r4, r1
 8007162:	b112      	cbz	r2, 800716a <_printf_common+0x2a>
 8007164:	3301      	adds	r3, #1
 8007166:	f8c9 3000 	str.w	r3, [r9]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	0699      	lsls	r1, r3, #26
 800716e:	bf42      	ittt	mi
 8007170:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007174:	3302      	addmi	r3, #2
 8007176:	f8c9 3000 	strmi.w	r3, [r9]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	f015 0506 	ands.w	r5, r5, #6
 8007180:	d107      	bne.n	8007192 <_printf_common+0x52>
 8007182:	f104 0a19 	add.w	sl, r4, #25
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	f8d9 2000 	ldr.w	r2, [r9]
 800718c:	1a9b      	subs	r3, r3, r2
 800718e:	42ab      	cmp	r3, r5
 8007190:	dc28      	bgt.n	80071e4 <_printf_common+0xa4>
 8007192:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	3300      	adds	r3, #0
 800719a:	bf18      	it	ne
 800719c:	2301      	movne	r3, #1
 800719e:	0692      	lsls	r2, r2, #26
 80071a0:	d42d      	bmi.n	80071fe <_printf_common+0xbe>
 80071a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a6:	4639      	mov	r1, r7
 80071a8:	4630      	mov	r0, r6
 80071aa:	47c0      	blx	r8
 80071ac:	3001      	adds	r0, #1
 80071ae:	d020      	beq.n	80071f2 <_printf_common+0xb2>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	68e5      	ldr	r5, [r4, #12]
 80071b4:	f8d9 2000 	ldr.w	r2, [r9]
 80071b8:	f003 0306 	and.w	r3, r3, #6
 80071bc:	2b04      	cmp	r3, #4
 80071be:	bf08      	it	eq
 80071c0:	1aad      	subeq	r5, r5, r2
 80071c2:	68a3      	ldr	r3, [r4, #8]
 80071c4:	6922      	ldr	r2, [r4, #16]
 80071c6:	bf0c      	ite	eq
 80071c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071cc:	2500      	movne	r5, #0
 80071ce:	4293      	cmp	r3, r2
 80071d0:	bfc4      	itt	gt
 80071d2:	1a9b      	subgt	r3, r3, r2
 80071d4:	18ed      	addgt	r5, r5, r3
 80071d6:	f04f 0900 	mov.w	r9, #0
 80071da:	341a      	adds	r4, #26
 80071dc:	454d      	cmp	r5, r9
 80071de:	d11a      	bne.n	8007216 <_printf_common+0xd6>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e008      	b.n	80071f6 <_printf_common+0xb6>
 80071e4:	2301      	movs	r3, #1
 80071e6:	4652      	mov	r2, sl
 80071e8:	4639      	mov	r1, r7
 80071ea:	4630      	mov	r0, r6
 80071ec:	47c0      	blx	r8
 80071ee:	3001      	adds	r0, #1
 80071f0:	d103      	bne.n	80071fa <_printf_common+0xba>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	3501      	adds	r5, #1
 80071fc:	e7c3      	b.n	8007186 <_printf_common+0x46>
 80071fe:	18e1      	adds	r1, r4, r3
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	2030      	movs	r0, #48	; 0x30
 8007204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007208:	4422      	add	r2, r4
 800720a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800720e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007212:	3302      	adds	r3, #2
 8007214:	e7c5      	b.n	80071a2 <_printf_common+0x62>
 8007216:	2301      	movs	r3, #1
 8007218:	4622      	mov	r2, r4
 800721a:	4639      	mov	r1, r7
 800721c:	4630      	mov	r0, r6
 800721e:	47c0      	blx	r8
 8007220:	3001      	adds	r0, #1
 8007222:	d0e6      	beq.n	80071f2 <_printf_common+0xb2>
 8007224:	f109 0901 	add.w	r9, r9, #1
 8007228:	e7d8      	b.n	80071dc <_printf_common+0x9c>
	...

0800722c <_printf_i>:
 800722c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007230:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007234:	460c      	mov	r4, r1
 8007236:	7e09      	ldrb	r1, [r1, #24]
 8007238:	b085      	sub	sp, #20
 800723a:	296e      	cmp	r1, #110	; 0x6e
 800723c:	4617      	mov	r7, r2
 800723e:	4606      	mov	r6, r0
 8007240:	4698      	mov	r8, r3
 8007242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007244:	f000 80b3 	beq.w	80073ae <_printf_i+0x182>
 8007248:	d822      	bhi.n	8007290 <_printf_i+0x64>
 800724a:	2963      	cmp	r1, #99	; 0x63
 800724c:	d036      	beq.n	80072bc <_printf_i+0x90>
 800724e:	d80a      	bhi.n	8007266 <_printf_i+0x3a>
 8007250:	2900      	cmp	r1, #0
 8007252:	f000 80b9 	beq.w	80073c8 <_printf_i+0x19c>
 8007256:	2958      	cmp	r1, #88	; 0x58
 8007258:	f000 8083 	beq.w	8007362 <_printf_i+0x136>
 800725c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007260:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007264:	e032      	b.n	80072cc <_printf_i+0xa0>
 8007266:	2964      	cmp	r1, #100	; 0x64
 8007268:	d001      	beq.n	800726e <_printf_i+0x42>
 800726a:	2969      	cmp	r1, #105	; 0x69
 800726c:	d1f6      	bne.n	800725c <_printf_i+0x30>
 800726e:	6820      	ldr	r0, [r4, #0]
 8007270:	6813      	ldr	r3, [r2, #0]
 8007272:	0605      	lsls	r5, r0, #24
 8007274:	f103 0104 	add.w	r1, r3, #4
 8007278:	d52a      	bpl.n	80072d0 <_printf_i+0xa4>
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6011      	str	r1, [r2, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	da03      	bge.n	800728a <_printf_i+0x5e>
 8007282:	222d      	movs	r2, #45	; 0x2d
 8007284:	425b      	negs	r3, r3
 8007286:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800728a:	486f      	ldr	r0, [pc, #444]	; (8007448 <_printf_i+0x21c>)
 800728c:	220a      	movs	r2, #10
 800728e:	e039      	b.n	8007304 <_printf_i+0xd8>
 8007290:	2973      	cmp	r1, #115	; 0x73
 8007292:	f000 809d 	beq.w	80073d0 <_printf_i+0x1a4>
 8007296:	d808      	bhi.n	80072aa <_printf_i+0x7e>
 8007298:	296f      	cmp	r1, #111	; 0x6f
 800729a:	d020      	beq.n	80072de <_printf_i+0xb2>
 800729c:	2970      	cmp	r1, #112	; 0x70
 800729e:	d1dd      	bne.n	800725c <_printf_i+0x30>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	f043 0320 	orr.w	r3, r3, #32
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	e003      	b.n	80072b2 <_printf_i+0x86>
 80072aa:	2975      	cmp	r1, #117	; 0x75
 80072ac:	d017      	beq.n	80072de <_printf_i+0xb2>
 80072ae:	2978      	cmp	r1, #120	; 0x78
 80072b0:	d1d4      	bne.n	800725c <_printf_i+0x30>
 80072b2:	2378      	movs	r3, #120	; 0x78
 80072b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072b8:	4864      	ldr	r0, [pc, #400]	; (800744c <_printf_i+0x220>)
 80072ba:	e055      	b.n	8007368 <_printf_i+0x13c>
 80072bc:	6813      	ldr	r3, [r2, #0]
 80072be:	1d19      	adds	r1, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6011      	str	r1, [r2, #0]
 80072c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072cc:	2301      	movs	r3, #1
 80072ce:	e08c      	b.n	80073ea <_printf_i+0x1be>
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6011      	str	r1, [r2, #0]
 80072d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072d8:	bf18      	it	ne
 80072da:	b21b      	sxthne	r3, r3
 80072dc:	e7cf      	b.n	800727e <_printf_i+0x52>
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	6825      	ldr	r5, [r4, #0]
 80072e2:	1d18      	adds	r0, r3, #4
 80072e4:	6010      	str	r0, [r2, #0]
 80072e6:	0628      	lsls	r0, r5, #24
 80072e8:	d501      	bpl.n	80072ee <_printf_i+0xc2>
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	e002      	b.n	80072f4 <_printf_i+0xc8>
 80072ee:	0668      	lsls	r0, r5, #25
 80072f0:	d5fb      	bpl.n	80072ea <_printf_i+0xbe>
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	4854      	ldr	r0, [pc, #336]	; (8007448 <_printf_i+0x21c>)
 80072f6:	296f      	cmp	r1, #111	; 0x6f
 80072f8:	bf14      	ite	ne
 80072fa:	220a      	movne	r2, #10
 80072fc:	2208      	moveq	r2, #8
 80072fe:	2100      	movs	r1, #0
 8007300:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007304:	6865      	ldr	r5, [r4, #4]
 8007306:	60a5      	str	r5, [r4, #8]
 8007308:	2d00      	cmp	r5, #0
 800730a:	f2c0 8095 	blt.w	8007438 <_printf_i+0x20c>
 800730e:	6821      	ldr	r1, [r4, #0]
 8007310:	f021 0104 	bic.w	r1, r1, #4
 8007314:	6021      	str	r1, [r4, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d13d      	bne.n	8007396 <_printf_i+0x16a>
 800731a:	2d00      	cmp	r5, #0
 800731c:	f040 808e 	bne.w	800743c <_printf_i+0x210>
 8007320:	4665      	mov	r5, ip
 8007322:	2a08      	cmp	r2, #8
 8007324:	d10b      	bne.n	800733e <_printf_i+0x112>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	07db      	lsls	r3, r3, #31
 800732a:	d508      	bpl.n	800733e <_printf_i+0x112>
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	6862      	ldr	r2, [r4, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	bfde      	ittt	le
 8007334:	2330      	movle	r3, #48	; 0x30
 8007336:	f805 3c01 	strble.w	r3, [r5, #-1]
 800733a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800733e:	ebac 0305 	sub.w	r3, ip, r5
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	f8cd 8000 	str.w	r8, [sp]
 8007348:	463b      	mov	r3, r7
 800734a:	aa03      	add	r2, sp, #12
 800734c:	4621      	mov	r1, r4
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff fef6 	bl	8007140 <_printf_common>
 8007354:	3001      	adds	r0, #1
 8007356:	d14d      	bne.n	80073f4 <_printf_i+0x1c8>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	b005      	add	sp, #20
 800735e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007362:	4839      	ldr	r0, [pc, #228]	; (8007448 <_printf_i+0x21c>)
 8007364:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007368:	6813      	ldr	r3, [r2, #0]
 800736a:	6821      	ldr	r1, [r4, #0]
 800736c:	1d1d      	adds	r5, r3, #4
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6015      	str	r5, [r2, #0]
 8007372:	060a      	lsls	r2, r1, #24
 8007374:	d50b      	bpl.n	800738e <_printf_i+0x162>
 8007376:	07ca      	lsls	r2, r1, #31
 8007378:	bf44      	itt	mi
 800737a:	f041 0120 	orrmi.w	r1, r1, #32
 800737e:	6021      	strmi	r1, [r4, #0]
 8007380:	b91b      	cbnz	r3, 800738a <_printf_i+0x15e>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	f022 0220 	bic.w	r2, r2, #32
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	2210      	movs	r2, #16
 800738c:	e7b7      	b.n	80072fe <_printf_i+0xd2>
 800738e:	064d      	lsls	r5, r1, #25
 8007390:	bf48      	it	mi
 8007392:	b29b      	uxthmi	r3, r3
 8007394:	e7ef      	b.n	8007376 <_printf_i+0x14a>
 8007396:	4665      	mov	r5, ip
 8007398:	fbb3 f1f2 	udiv	r1, r3, r2
 800739c:	fb02 3311 	mls	r3, r2, r1, r3
 80073a0:	5cc3      	ldrb	r3, [r0, r3]
 80073a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80073a6:	460b      	mov	r3, r1
 80073a8:	2900      	cmp	r1, #0
 80073aa:	d1f5      	bne.n	8007398 <_printf_i+0x16c>
 80073ac:	e7b9      	b.n	8007322 <_printf_i+0xf6>
 80073ae:	6813      	ldr	r3, [r2, #0]
 80073b0:	6825      	ldr	r5, [r4, #0]
 80073b2:	6961      	ldr	r1, [r4, #20]
 80073b4:	1d18      	adds	r0, r3, #4
 80073b6:	6010      	str	r0, [r2, #0]
 80073b8:	0628      	lsls	r0, r5, #24
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	d501      	bpl.n	80073c2 <_printf_i+0x196>
 80073be:	6019      	str	r1, [r3, #0]
 80073c0:	e002      	b.n	80073c8 <_printf_i+0x19c>
 80073c2:	066a      	lsls	r2, r5, #25
 80073c4:	d5fb      	bpl.n	80073be <_printf_i+0x192>
 80073c6:	8019      	strh	r1, [r3, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	6123      	str	r3, [r4, #16]
 80073cc:	4665      	mov	r5, ip
 80073ce:	e7b9      	b.n	8007344 <_printf_i+0x118>
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	1d19      	adds	r1, r3, #4
 80073d4:	6011      	str	r1, [r2, #0]
 80073d6:	681d      	ldr	r5, [r3, #0]
 80073d8:	6862      	ldr	r2, [r4, #4]
 80073da:	2100      	movs	r1, #0
 80073dc:	4628      	mov	r0, r5
 80073de:	f7f8 feff 	bl	80001e0 <memchr>
 80073e2:	b108      	cbz	r0, 80073e8 <_printf_i+0x1bc>
 80073e4:	1b40      	subs	r0, r0, r5
 80073e6:	6060      	str	r0, [r4, #4]
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	6123      	str	r3, [r4, #16]
 80073ec:	2300      	movs	r3, #0
 80073ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f2:	e7a7      	b.n	8007344 <_printf_i+0x118>
 80073f4:	6923      	ldr	r3, [r4, #16]
 80073f6:	462a      	mov	r2, r5
 80073f8:	4639      	mov	r1, r7
 80073fa:	4630      	mov	r0, r6
 80073fc:	47c0      	blx	r8
 80073fe:	3001      	adds	r0, #1
 8007400:	d0aa      	beq.n	8007358 <_printf_i+0x12c>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	079b      	lsls	r3, r3, #30
 8007406:	d413      	bmi.n	8007430 <_printf_i+0x204>
 8007408:	68e0      	ldr	r0, [r4, #12]
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	4298      	cmp	r0, r3
 800740e:	bfb8      	it	lt
 8007410:	4618      	movlt	r0, r3
 8007412:	e7a3      	b.n	800735c <_printf_i+0x130>
 8007414:	2301      	movs	r3, #1
 8007416:	464a      	mov	r2, r9
 8007418:	4639      	mov	r1, r7
 800741a:	4630      	mov	r0, r6
 800741c:	47c0      	blx	r8
 800741e:	3001      	adds	r0, #1
 8007420:	d09a      	beq.n	8007358 <_printf_i+0x12c>
 8007422:	3501      	adds	r5, #1
 8007424:	68e3      	ldr	r3, [r4, #12]
 8007426:	9a03      	ldr	r2, [sp, #12]
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	42ab      	cmp	r3, r5
 800742c:	dcf2      	bgt.n	8007414 <_printf_i+0x1e8>
 800742e:	e7eb      	b.n	8007408 <_printf_i+0x1dc>
 8007430:	2500      	movs	r5, #0
 8007432:	f104 0919 	add.w	r9, r4, #25
 8007436:	e7f5      	b.n	8007424 <_printf_i+0x1f8>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1ac      	bne.n	8007396 <_printf_i+0x16a>
 800743c:	7803      	ldrb	r3, [r0, #0]
 800743e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007442:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007446:	e76c      	b.n	8007322 <_printf_i+0xf6>
 8007448:	08007cc5 	.word	0x08007cc5
 800744c:	08007cd6 	.word	0x08007cd6

08007450 <memmove>:
 8007450:	4288      	cmp	r0, r1
 8007452:	b510      	push	{r4, lr}
 8007454:	eb01 0302 	add.w	r3, r1, r2
 8007458:	d807      	bhi.n	800746a <memmove+0x1a>
 800745a:	1e42      	subs	r2, r0, #1
 800745c:	4299      	cmp	r1, r3
 800745e:	d00a      	beq.n	8007476 <memmove+0x26>
 8007460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007464:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007468:	e7f8      	b.n	800745c <memmove+0xc>
 800746a:	4283      	cmp	r3, r0
 800746c:	d9f5      	bls.n	800745a <memmove+0xa>
 800746e:	1881      	adds	r1, r0, r2
 8007470:	1ad2      	subs	r2, r2, r3
 8007472:	42d3      	cmn	r3, r2
 8007474:	d100      	bne.n	8007478 <memmove+0x28>
 8007476:	bd10      	pop	{r4, pc}
 8007478:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800747c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007480:	e7f7      	b.n	8007472 <memmove+0x22>
	...

08007484 <_free_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4605      	mov	r5, r0
 8007488:	2900      	cmp	r1, #0
 800748a:	d045      	beq.n	8007518 <_free_r+0x94>
 800748c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007490:	1f0c      	subs	r4, r1, #4
 8007492:	2b00      	cmp	r3, #0
 8007494:	bfb8      	it	lt
 8007496:	18e4      	addlt	r4, r4, r3
 8007498:	f000 f8d2 	bl	8007640 <__malloc_lock>
 800749c:	4a1f      	ldr	r2, [pc, #124]	; (800751c <_free_r+0x98>)
 800749e:	6813      	ldr	r3, [r2, #0]
 80074a0:	4610      	mov	r0, r2
 80074a2:	b933      	cbnz	r3, 80074b2 <_free_r+0x2e>
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	6014      	str	r4, [r2, #0]
 80074a8:	4628      	mov	r0, r5
 80074aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ae:	f000 b8c8 	b.w	8007642 <__malloc_unlock>
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	d90c      	bls.n	80074d0 <_free_r+0x4c>
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	1862      	adds	r2, r4, r1
 80074ba:	4293      	cmp	r3, r2
 80074bc:	bf04      	itt	eq
 80074be:	681a      	ldreq	r2, [r3, #0]
 80074c0:	685b      	ldreq	r3, [r3, #4]
 80074c2:	6063      	str	r3, [r4, #4]
 80074c4:	bf04      	itt	eq
 80074c6:	1852      	addeq	r2, r2, r1
 80074c8:	6022      	streq	r2, [r4, #0]
 80074ca:	6004      	str	r4, [r0, #0]
 80074cc:	e7ec      	b.n	80074a8 <_free_r+0x24>
 80074ce:	4613      	mov	r3, r2
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	b10a      	cbz	r2, 80074d8 <_free_r+0x54>
 80074d4:	42a2      	cmp	r2, r4
 80074d6:	d9fa      	bls.n	80074ce <_free_r+0x4a>
 80074d8:	6819      	ldr	r1, [r3, #0]
 80074da:	1858      	adds	r0, r3, r1
 80074dc:	42a0      	cmp	r0, r4
 80074de:	d10b      	bne.n	80074f8 <_free_r+0x74>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	4401      	add	r1, r0
 80074e4:	1858      	adds	r0, r3, r1
 80074e6:	4282      	cmp	r2, r0
 80074e8:	6019      	str	r1, [r3, #0]
 80074ea:	d1dd      	bne.n	80074a8 <_free_r+0x24>
 80074ec:	6810      	ldr	r0, [r2, #0]
 80074ee:	6852      	ldr	r2, [r2, #4]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	4401      	add	r1, r0
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	e7d7      	b.n	80074a8 <_free_r+0x24>
 80074f8:	d902      	bls.n	8007500 <_free_r+0x7c>
 80074fa:	230c      	movs	r3, #12
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	e7d3      	b.n	80074a8 <_free_r+0x24>
 8007500:	6820      	ldr	r0, [r4, #0]
 8007502:	1821      	adds	r1, r4, r0
 8007504:	428a      	cmp	r2, r1
 8007506:	bf04      	itt	eq
 8007508:	6811      	ldreq	r1, [r2, #0]
 800750a:	6852      	ldreq	r2, [r2, #4]
 800750c:	6062      	str	r2, [r4, #4]
 800750e:	bf04      	itt	eq
 8007510:	1809      	addeq	r1, r1, r0
 8007512:	6021      	streq	r1, [r4, #0]
 8007514:	605c      	str	r4, [r3, #4]
 8007516:	e7c7      	b.n	80074a8 <_free_r+0x24>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	bf00      	nop
 800751c:	20000190 	.word	0x20000190

08007520 <_malloc_r>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	1ccd      	adds	r5, r1, #3
 8007524:	f025 0503 	bic.w	r5, r5, #3
 8007528:	3508      	adds	r5, #8
 800752a:	2d0c      	cmp	r5, #12
 800752c:	bf38      	it	cc
 800752e:	250c      	movcc	r5, #12
 8007530:	2d00      	cmp	r5, #0
 8007532:	4606      	mov	r6, r0
 8007534:	db01      	blt.n	800753a <_malloc_r+0x1a>
 8007536:	42a9      	cmp	r1, r5
 8007538:	d903      	bls.n	8007542 <_malloc_r+0x22>
 800753a:	230c      	movs	r3, #12
 800753c:	6033      	str	r3, [r6, #0]
 800753e:	2000      	movs	r0, #0
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	f000 f87d 	bl	8007640 <__malloc_lock>
 8007546:	4a21      	ldr	r2, [pc, #132]	; (80075cc <_malloc_r+0xac>)
 8007548:	6814      	ldr	r4, [r2, #0]
 800754a:	4621      	mov	r1, r4
 800754c:	b991      	cbnz	r1, 8007574 <_malloc_r+0x54>
 800754e:	4c20      	ldr	r4, [pc, #128]	; (80075d0 <_malloc_r+0xb0>)
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	b91b      	cbnz	r3, 800755c <_malloc_r+0x3c>
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f863 	bl	8007620 <_sbrk_r>
 800755a:	6020      	str	r0, [r4, #0]
 800755c:	4629      	mov	r1, r5
 800755e:	4630      	mov	r0, r6
 8007560:	f000 f85e 	bl	8007620 <_sbrk_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d124      	bne.n	80075b2 <_malloc_r+0x92>
 8007568:	230c      	movs	r3, #12
 800756a:	6033      	str	r3, [r6, #0]
 800756c:	4630      	mov	r0, r6
 800756e:	f000 f868 	bl	8007642 <__malloc_unlock>
 8007572:	e7e4      	b.n	800753e <_malloc_r+0x1e>
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	1b5b      	subs	r3, r3, r5
 8007578:	d418      	bmi.n	80075ac <_malloc_r+0x8c>
 800757a:	2b0b      	cmp	r3, #11
 800757c:	d90f      	bls.n	800759e <_malloc_r+0x7e>
 800757e:	600b      	str	r3, [r1, #0]
 8007580:	50cd      	str	r5, [r1, r3]
 8007582:	18cc      	adds	r4, r1, r3
 8007584:	4630      	mov	r0, r6
 8007586:	f000 f85c 	bl	8007642 <__malloc_unlock>
 800758a:	f104 000b 	add.w	r0, r4, #11
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	f020 0007 	bic.w	r0, r0, #7
 8007594:	1ac3      	subs	r3, r0, r3
 8007596:	d0d3      	beq.n	8007540 <_malloc_r+0x20>
 8007598:	425a      	negs	r2, r3
 800759a:	50e2      	str	r2, [r4, r3]
 800759c:	e7d0      	b.n	8007540 <_malloc_r+0x20>
 800759e:	428c      	cmp	r4, r1
 80075a0:	684b      	ldr	r3, [r1, #4]
 80075a2:	bf16      	itet	ne
 80075a4:	6063      	strne	r3, [r4, #4]
 80075a6:	6013      	streq	r3, [r2, #0]
 80075a8:	460c      	movne	r4, r1
 80075aa:	e7eb      	b.n	8007584 <_malloc_r+0x64>
 80075ac:	460c      	mov	r4, r1
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x2c>
 80075b2:	1cc4      	adds	r4, r0, #3
 80075b4:	f024 0403 	bic.w	r4, r4, #3
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d005      	beq.n	80075c8 <_malloc_r+0xa8>
 80075bc:	1a21      	subs	r1, r4, r0
 80075be:	4630      	mov	r0, r6
 80075c0:	f000 f82e 	bl	8007620 <_sbrk_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d0cf      	beq.n	8007568 <_malloc_r+0x48>
 80075c8:	6025      	str	r5, [r4, #0]
 80075ca:	e7db      	b.n	8007584 <_malloc_r+0x64>
 80075cc:	20000190 	.word	0x20000190
 80075d0:	20000194 	.word	0x20000194

080075d4 <_realloc_r>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	4607      	mov	r7, r0
 80075d8:	4614      	mov	r4, r2
 80075da:	460e      	mov	r6, r1
 80075dc:	b921      	cbnz	r1, 80075e8 <_realloc_r+0x14>
 80075de:	4611      	mov	r1, r2
 80075e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075e4:	f7ff bf9c 	b.w	8007520 <_malloc_r>
 80075e8:	b922      	cbnz	r2, 80075f4 <_realloc_r+0x20>
 80075ea:	f7ff ff4b 	bl	8007484 <_free_r>
 80075ee:	4625      	mov	r5, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f4:	f000 f826 	bl	8007644 <_malloc_usable_size_r>
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	d20f      	bcs.n	800761c <_realloc_r+0x48>
 80075fc:	4621      	mov	r1, r4
 80075fe:	4638      	mov	r0, r7
 8007600:	f7ff ff8e 	bl	8007520 <_malloc_r>
 8007604:	4605      	mov	r5, r0
 8007606:	2800      	cmp	r0, #0
 8007608:	d0f2      	beq.n	80075f0 <_realloc_r+0x1c>
 800760a:	4631      	mov	r1, r6
 800760c:	4622      	mov	r2, r4
 800760e:	f7ff fc11 	bl	8006e34 <memcpy>
 8007612:	4631      	mov	r1, r6
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ff35 	bl	8007484 <_free_r>
 800761a:	e7e9      	b.n	80075f0 <_realloc_r+0x1c>
 800761c:	4635      	mov	r5, r6
 800761e:	e7e7      	b.n	80075f0 <_realloc_r+0x1c>

08007620 <_sbrk_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4c06      	ldr	r4, [pc, #24]	; (800763c <_sbrk_r+0x1c>)
 8007624:	2300      	movs	r3, #0
 8007626:	4605      	mov	r5, r0
 8007628:	4608      	mov	r0, r1
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	f7ff fb4c 	bl	8006cc8 <_sbrk>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d102      	bne.n	800763a <_sbrk_r+0x1a>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	b103      	cbz	r3, 800763a <_sbrk_r+0x1a>
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	bd38      	pop	{r3, r4, r5, pc}
 800763c:	200004f8 	.word	0x200004f8

08007640 <__malloc_lock>:
 8007640:	4770      	bx	lr

08007642 <__malloc_unlock>:
 8007642:	4770      	bx	lr

08007644 <_malloc_usable_size_r>:
 8007644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007648:	1f18      	subs	r0, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	bfbc      	itt	lt
 800764e:	580b      	ldrlt	r3, [r1, r0]
 8007650:	18c0      	addlt	r0, r0, r3
 8007652:	4770      	bx	lr

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
