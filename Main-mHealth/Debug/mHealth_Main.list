
mHealth_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e8  080085e8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f0  080085f0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080085f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000088  08008680  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08008680  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148c1  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f2  00000000  00000000  00034979  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00037170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  000382c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000276c8  00000000  00000000  000392e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8a3  00000000  00000000  000609b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eda8d  00000000  00000000  0006e253  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bce0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  0015bd5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f9c 	.word	0x08007f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007f9c 	.word	0x08007f9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b972 	b.w	8000f18 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	4688      	mov	r8, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14b      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4615      	mov	r5, r2
 8000c5e:	d967      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0720 	rsb	r7, r2, #32
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c72:	4095      	lsls	r5, r2
 8000c74:	ea47 0803 	orr.w	r8, r7, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c84:	fa1f fc85 	uxth.w	ip, r5
 8000c88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	fb07 f10c 	mul.w	r1, r7, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c9e:	f080 811b 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8118 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca8:	3f02      	subs	r7, #2
 8000caa:	442b      	add	r3, r5
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x290>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	442c      	add	r4, r5
 8000cd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cdc:	eba4 040c 	sub.w	r4, r4, ip
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	4639      	mov	r1, r7
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xbe>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80eb 	beq.w	8000ed2 <__udivmoddi4+0x286>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000d02:	4638      	mov	r0, r7
 8000d04:	4639      	mov	r1, r7
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f783 	clz	r7, r3
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d147      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd0>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80fa 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	4698      	mov	r8, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa0>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xe8>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 808f 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3e:	1b49      	subs	r1, r1, r5
 8000d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d44:	fa1f f885 	uxth.w	r8, r5
 8000d48:	2701      	movs	r7, #1
 8000d4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb08 f10c 	mul.w	r1, r8, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1a59      	subs	r1, r3, r1
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x14c>
 8000d88:	192c      	adds	r4, r5, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x14a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80b6 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e79f      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000da2:	f1c7 0c20 	rsb	ip, r7, #32
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db0:	fa01 f407 	lsl.w	r4, r1, r7
 8000db4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc6:	0c2c      	lsrs	r4, r5, #16
 8000dc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dcc:	fa1f fa8e 	uxth.w	sl, lr
 8000dd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	fa02 f207 	lsl.w	r2, r2, r7
 8000dde:	fa00 f107 	lsl.w	r1, r0, r7
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1e 0303 	adds.w	r3, lr, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	f080 8087 	bcs.w	8000efe <__udivmoddi4+0x2b2>
 8000df0:	429c      	cmp	r4, r3
 8000df2:	f240 8084 	bls.w	8000efe <__udivmoddi4+0x2b2>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4473      	add	r3, lr
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1e 0404 	adds.w	r4, lr, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1c:	d26b      	bcs.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e1e:	45a2      	cmp	sl, r4
 8000e20:	d969      	bls.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4474      	add	r4, lr
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	454c      	cmp	r4, r9
 8000e34:	46c2      	mov	sl, r8
 8000e36:	464b      	mov	r3, r9
 8000e38:	d354      	bcc.n	8000ee4 <__udivmoddi4+0x298>
 8000e3a:	d051      	beq.n	8000ee0 <__udivmoddi4+0x294>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2c8>
 8000e40:	ebb1 050a 	subs.w	r5, r1, sl
 8000e44:	eb64 0403 	sbc.w	r4, r4, r3
 8000e48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	40fc      	lsrs	r4, r7
 8000e50:	ea4c 0505 	orr.w	r5, ip, r5
 8000e54:	e9c6 5400 	strd	r5, r4, [r6]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f703 	lsr.w	r7, r0, r3
 8000e64:	4095      	lsls	r5, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e72:	4338      	orrs	r0, r7
 8000e74:	0c01      	lsrs	r1, r0, #16
 8000e76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7a:	fa1f f885 	uxth.w	r8, r5
 8000e7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb07 f308 	mul.w	r3, r7, r8
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x256>
 8000e92:	1869      	adds	r1, r5, r1
 8000e94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e98:	d22f      	bcs.n	8000efa <__udivmoddi4+0x2ae>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d92d      	bls.n	8000efa <__udivmoddi4+0x2ae>
 8000e9e:	3f02      	subs	r7, #2
 8000ea0:	4429      	add	r1, r5
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	b281      	uxth	r1, r0
 8000ea6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eaa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb00 f308 	mul.w	r3, r0, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x27e>
 8000eba:	1869      	adds	r1, r5, r1
 8000ebc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec0:	d217      	bcs.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d915      	bls.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4429      	add	r1, r5
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed0:	e73b      	b.n	8000d4a <__udivmoddi4+0xfe>
 8000ed2:	4637      	mov	r7, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e709      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed8:	4607      	mov	r7, r0
 8000eda:	e6e7      	b.n	8000cac <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000ee0:	4541      	cmp	r1, r8
 8000ee2:	d2ab      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eec:	3801      	subs	r0, #1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	e7a4      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	e7e9      	b.n	8000eca <__udivmoddi4+0x27e>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	e795      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efa:	4667      	mov	r7, ip
 8000efc:	e7d1      	b.n	8000ea2 <__udivmoddi4+0x256>
 8000efe:	4681      	mov	r9, r0
 8000f00:	e77c      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0x14c>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	442b      	add	r3, r5
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	4638      	mov	r0, r7
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xda>
 8000f14:	4637      	mov	r7, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa0>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f000 f93c 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f80d 	bl	8000f4c <HAL_InitTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e001      	b.n	8000f42 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3e:	f006 fa19 	bl	8007374 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_InitTick+0x68>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d022      	beq.n	8000fa6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_InitTick+0x6c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_InitTick+0x68>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f93c 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10f      	bne.n	8000fa0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b0f      	cmp	r3, #15
 8000f84:	d809      	bhi.n	8000f9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	2200      	movs	r2, #0
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8e:	f000 f914 	bl	80011ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0x70>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e007      	b.n	8000faa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e004      	b.n	8000faa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e001      	b.n	8000faa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	20000020 	.word	0x20000020
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <HAL_IncTick+0x1c>)
 8000fd0:	6013      	str	r3, [r2, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	200001ac 	.word	0x200001ac
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200001ac 	.word	0x200001ac

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d004      	beq.n	8001020 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001020:	bf00      	nop
 8001022:	f7ff ffdf 	bl	8000fe4 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	429a      	cmp	r2, r3
 8001030:	d8f7      	bhi.n	8001022 <HAL_Delay+0x26>
  {
  }
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000004 	.word	0x20000004

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff8e 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff47 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff5c 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff8e 	bl	80010f8 <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5d 	bl	80010a4 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffb0 	bl	8001160 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_DMA_Start_IT+0x20>
 8001226:	2302      	movs	r3, #2
 8001228:	e04b      	b.n	80012c2 <HAL_DMA_Start_IT+0xb8>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d13a      	bne.n	80012b4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2200      	movs	r2, #0
 800124a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f831 	bl	80012ca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 020e 	orr.w	r2, r2, #14
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e00f      	b.n	80012a2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0204 	bic.w	r2, r2, #4
 8001290:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 020a 	orr.w	r2, r2, #10
 80012a0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0201 	orr.w	r2, r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e005      	b.n	80012c0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80012bc:	2302      	movs	r3, #2
 80012be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b085      	sub	sp, #20
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f003 021c 	and.w	r2, r3, #28
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	2101      	movs	r1, #1
 80012e6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b10      	cmp	r3, #16
 80012fa:	d108      	bne.n	800130e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800130c:	e007      	b.n	800131e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	60da      	str	r2, [r3, #12]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e17f      	b.n	800163c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8171 	beq.w	8001636 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x38>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b12      	cmp	r3, #18
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	6939      	ldr	r1, [r7, #16]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d00b      	beq.n	8001400 <HAL_GPIO_Init+0xd4>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d007      	beq.n	8001400 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f4:	2b11      	cmp	r3, #17
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b12      	cmp	r3, #18
 80013fe:	d130      	bne.n	8001462 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001436:	2201      	movs	r2, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 0201 	and.w	r2, r3, #1
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b03      	cmp	r3, #3
 800146c:	d118      	bne.n	80014a0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001474:	2201      	movs	r2, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	f003 0201 	and.w	r2, r3, #1
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80ac 	beq.w	8001636 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <HAL_GPIO_Init+0x32c>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_GPIO_Init+0x32c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <HAL_GPIO_Init+0x32c>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f6:	4a59      	ldr	r2, [pc, #356]	; (800165c <HAL_GPIO_Init+0x330>)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x242>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <HAL_GPIO_Init+0x334>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4d      	ldr	r2, [pc, #308]	; (8001664 <HAL_GPIO_Init+0x338>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <HAL_GPIO_Init+0x33c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4b      	ldr	r2, [pc, #300]	; (800166c <HAL_GPIO_Init+0x340>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <HAL_GPIO_Init+0x344>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a49      	ldr	r2, [pc, #292]	; (8001674 <HAL_GPIO_Init+0x348>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x22a>
 8001552:	2306      	movs	r3, #6
 8001554:	e00c      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001556:	2307      	movs	r3, #7
 8001558:	e00a      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800155a:	2305      	movs	r3, #5
 800155c:	e008      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800155e:	2304      	movs	r3, #4
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001562:	2303      	movs	r3, #3
 8001564:	e004      	b.n	8001570 <HAL_GPIO_Init+0x244>
 8001566:	2302      	movs	r3, #2
 8001568:	e002      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x244>
 800156e:	2300      	movs	r3, #0
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	f002 0203 	and.w	r2, r2, #3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	4093      	lsls	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001580:	4936      	ldr	r1, [pc, #216]	; (800165c <HAL_GPIO_Init+0x330>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <HAL_GPIO_Init+0x34c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015b2:	4a31      	ldr	r2, [pc, #196]	; (8001678 <HAL_GPIO_Init+0x34c>)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_GPIO_Init+0x34c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <HAL_GPIO_Init+0x34c>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_GPIO_Init+0x34c>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <HAL_GPIO_Init+0x34c>)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_GPIO_Init+0x34c>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_GPIO_Init+0x34c>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f ae78 	bne.w	800133c <HAL_GPIO_Init+0x10>
  }
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000800 	.word	0x48000800
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48001000 	.word	0x48001000
 8001670:	48001400 	.word	0x48001400
 8001674:	48001800 	.word	0x48001800
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e081      	b.n	80017c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f005 fe72 	bl	80073bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800170c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e006      	b.n	8001734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d104      	bne.n	8001746 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	ea42 0103 	orr.w	r1, r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	021a      	lsls	r2, r3, #8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69d9      	ldr	r1, [r3, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a1a      	ldr	r2, [r3, #32]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	461a      	mov	r2, r3
 80017d8:	460b      	mov	r3, r1
 80017da:	817b      	strh	r3, [r7, #10]
 80017dc:	4613      	mov	r3, r2
 80017de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	f040 80da 	bne.w	80019a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_I2C_Master_Transmit+0x30>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e0d3      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1d8>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001804:	f7ff fbee 	bl	8000fe4 <HAL_GetTick>
 8001808:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2319      	movs	r3, #25
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f9e6 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0be      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2221      	movs	r2, #33	; 0x21
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2210      	movs	r2, #16
 8001832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	893a      	ldrh	r2, [r7, #8]
 8001846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001852:	b29b      	uxth	r3, r3
 8001854:	2bff      	cmp	r3, #255	; 0xff
 8001856:	d90e      	bls.n	8001876 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	22ff      	movs	r2, #255	; 0xff
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	b2da      	uxtb	r2, r3
 8001864:	8979      	ldrh	r1, [r7, #10]
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <HAL_I2C_Master_Transmit+0x1e0>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 fb48 	bl	8001f04 <I2C_TransferConfig>
 8001874:	e06c      	b.n	8001950 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	b2da      	uxtb	r2, r3
 8001886:	8979      	ldrh	r1, [r7, #10]
 8001888:	4b48      	ldr	r3, [pc, #288]	; (80019ac <HAL_I2C_Master_Transmit+0x1e0>)
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 fb37 	bl	8001f04 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001896:	e05b      	b.n	8001950 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	6a39      	ldr	r1, [r7, #32]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 f9e3 	bl	8001c68 <I2C_WaitOnTXISFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e07b      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d034      	beq.n	8001950 <HAL_I2C_Master_Transmit+0x184>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d130      	bne.n	8001950 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2200      	movs	r2, #0
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f975 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e04d      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29b      	uxth	r3, r3
 800190e:	2bff      	cmp	r3, #255	; 0xff
 8001910:	d90e      	bls.n	8001930 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	22ff      	movs	r2, #255	; 0xff
 8001916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191c:	b2da      	uxtb	r2, r3
 800191e:	8979      	ldrh	r1, [r7, #10]
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 faeb 	bl	8001f04 <I2C_TransferConfig>
 800192e:	e00f      	b.n	8001950 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	b2da      	uxtb	r2, r3
 8001940:	8979      	ldrh	r1, [r7, #10]
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 fada 	bl	8001f04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d19e      	bne.n	8001898 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f9c2 	bl	8001ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e01a      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2220      	movs	r2, #32
 8001974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001982:	400b      	ands	r3, r1
 8001984:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2220      	movs	r2, #32
 800198a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	80002000 	.word	0x80002000
 80019b0:	fe00e800 	.word	0xfe00e800

080019b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	817b      	strh	r3, [r7, #10]
 80019c4:	4613      	mov	r3, r2
 80019c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	f040 80db 	bne.w	8001b8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_I2C_Master_Receive+0x30>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e0d4      	b.n	8001b8e <HAL_I2C_Master_Receive+0x1da>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ec:	f7ff fafa 	bl	8000fe4 <HAL_GetTick>
 80019f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2319      	movs	r3, #25
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f8f2 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0bf      	b.n	8001b8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2222      	movs	r2, #34	; 0x22
 8001a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2210      	movs	r2, #16
 8001a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	893a      	ldrh	r2, [r7, #8]
 8001a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2bff      	cmp	r3, #255	; 0xff
 8001a3e:	d90e      	bls.n	8001a5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	8979      	ldrh	r1, [r7, #10]
 8001a4e:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_I2C_Master_Receive+0x1e4>)
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fa54 	bl	8001f04 <I2C_TransferConfig>
 8001a5c:	e06d      	b.n	8001b3a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	8979      	ldrh	r1, [r7, #10]
 8001a70:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_I2C_Master_Receive+0x1e4>)
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fa43 	bl	8001f04 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001a7e:	e05c      	b.n	8001b3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	6a39      	ldr	r1, [r7, #32]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f96b 	bl	8001d60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e07c      	b.n	8001b8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d034      	beq.n	8001b3a <HAL_I2C_Master_Receive+0x186>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d130      	bne.n	8001b3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2180      	movs	r1, #128	; 0x80
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 f880 	bl	8001be8 <I2C_WaitOnFlagUntilTimeout>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e04d      	b.n	8001b8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2bff      	cmp	r3, #255	; 0xff
 8001afa:	d90e      	bls.n	8001b1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	22ff      	movs	r2, #255	; 0xff
 8001b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f9f6 	bl	8001f04 <I2C_TransferConfig>
 8001b18:	e00f      	b.n	8001b3a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f9e5 	bl	8001f04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d19d      	bne.n	8001a80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	6a39      	ldr	r1, [r7, #32]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f8cd 	bl	8001ce8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e01a      	b.n	8001b8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_I2C_Master_Receive+0x1e8>)
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e000      	b.n	8001b8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001b8c:	2302      	movs	r3, #2
  }
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	80002400 	.word	0x80002400
 8001b9c:	fe00e800 	.word	0xfe00e800

08001ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d007      	beq.n	8001bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	619a      	str	r2, [r3, #24]
  }
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bf8:	e022      	b.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c00:	d01e      	beq.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c02:	f7ff f9ef 	bl	8000fe4 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d113      	bne.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f043 0220 	orr.w	r2, r3, #32
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e00f      	b.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d0cd      	beq.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c74:	e02c      	b.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f8dc 	bl	8001e38 <I2C_IsAcknowledgeFailed>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e02a      	b.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d01e      	beq.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c92:	f7ff f9a7 	bl	8000fe4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d302      	bcc.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d113      	bne.n	8001cd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	f043 0220 	orr.w	r2, r3, #32
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e007      	b.n	8001ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d1cb      	bne.n	8001c76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cf4:	e028      	b.n	8001d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f89c 	bl	8001e38 <I2C_IsAcknowledgeFailed>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e026      	b.n	8001d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0a:	f7ff f96b 	bl	8000fe4 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d113      	bne.n	8001d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f043 0220 	orr.w	r2, r3, #32
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2220      	movs	r2, #32
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e007      	b.n	8001d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d1cf      	bne.n	8001cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d6c:	e055      	b.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f860 	bl	8001e38 <I2C_IsAcknowledgeFailed>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e053      	b.n	8001e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d129      	bne.n	8001de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d105      	bne.n	8001daa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e03f      	b.n	8001e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2220      	movs	r2, #32
 8001db0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001dbe:	400b      	ands	r3, r1
 8001dc0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e022      	b.n	8001e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff f8fe 	bl	8000fe4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f043 0220 	orr.w	r2, r3, #32
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e007      	b.n	8001e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d1a2      	bne.n	8001d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	fe00e800 	.word	0xfe00e800

08001e38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b10      	cmp	r3, #16
 8001e50:	d151      	bne.n	8001ef6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e52:	e022      	b.n	8001e9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d01e      	beq.n	8001e9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5c:	f7ff f8c2 	bl	8000fe4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d302      	bcc.n	8001e72 <I2C_IsAcknowledgeFailed+0x3a>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f043 0220 	orr.w	r2, r3, #32
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e02e      	b.n	8001ef8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d1d5      	bne.n	8001e54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fe71 	bl	8001ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <I2C_IsAcknowledgeFailed+0xc8>)
 8001eca:	400b      	ands	r3, r1
 8001ecc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f043 0204 	orr.w	r2, r3, #4
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	fe00e800 	.word	0xfe00e800

08001f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	817b      	strh	r3, [r7, #10]
 8001f12:	4613      	mov	r3, r2
 8001f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	0d5b      	lsrs	r3, r3, #21
 8001f20:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <I2C_TransferConfig+0x58>)
 8001f26:	430b      	orrs	r3, r1
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	ea02 0103 	and.w	r1, r2, r3
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f34:	7a7b      	ldrb	r3, [r7, #9]
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	03ff63ff 	.word	0x03ff63ff

08001f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d138      	bne.n	8001fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e032      	b.n	8001fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b20      	cmp	r3, #32
 800200a:	d139      	bne.n	8002080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002016:	2302      	movs	r3, #2
 8002018:	e033      	b.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2224      	movs	r2, #36	; 0x24
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40007000 	.word	0x40007000

080020ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ba:	d130      	bne.n	800211e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c8:	d038      	beq.n	800213c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020da:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2232      	movs	r2, #50	; 0x32
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f0:	e002      	b.n	80020f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002104:	d102      	bne.n	800210c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f2      	bne.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002118:	d110      	bne.n	800213c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e00f      	b.n	800213e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212a:	d007      	beq.n	800213c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000
 8002150:	20000020 	.word	0x20000020
 8002154:	431bde83 	.word	0x431bde83

08002158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e39d      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216a:	4ba4      	ldr	r3, [pc, #656]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002174:	4ba1      	ldr	r3, [pc, #644]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80e1 	beq.w	800234e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_RCC_OscConfig+0x4a>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	f040 8088 	bne.w	80022aa <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 8084 	bne.w	80022aa <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a2:	4b96      	ldr	r3, [pc, #600]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x62>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e375      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4b8f      	ldr	r3, [pc, #572]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_RCC_OscConfig+0x7c>
 80021ca:	4b8c      	ldr	r3, [pc, #560]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d2:	e005      	b.n	80021e0 <HAL_RCC_OscConfig+0x88>
 80021d4:	4b89      	ldr	r3, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d223      	bcs.n	800222c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fd09 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e356      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f8:	4b80      	ldr	r3, [pc, #512]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7f      	ldr	r2, [pc, #508]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b7d      	ldr	r3, [pc, #500]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	497a      	ldr	r1, [pc, #488]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002216:	4b79      	ldr	r3, [pc, #484]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	4975      	ldr	r1, [pc, #468]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
 800222a:	e022      	b.n	8002272 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222c:	4b73      	ldr	r3, [pc, #460]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a72      	ldr	r2, [pc, #456]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b70      	ldr	r3, [pc, #448]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	496d      	ldr	r1, [pc, #436]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	4b6c      	ldr	r3, [pc, #432]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	4968      	ldr	r1, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fccc 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e319      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002272:	f000 fc03 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002276:	4601      	mov	r1, r0
 8002278:	4b60      	ldr	r3, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a5f      	ldr	r2, [pc, #380]	; (8002400 <HAL_RCC_OscConfig+0x2a8>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	fa21 f303 	lsr.w	r3, r1, r3
 800228e:	4a5d      	ldr	r2, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002292:	4b5d      	ldr	r3, [pc, #372]	; (8002408 <HAL_RCC_OscConfig+0x2b0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fe58 	bl	8000f4c <HAL_InitTick>
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d052      	beq.n	800234c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	e2fd      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d032      	beq.n	8002318 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022b2:	4b52      	ldr	r3, [pc, #328]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022be:	f7fe fe91 	bl	8000fe4 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c6:	f7fe fe8d 	bl	8000fe4 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e2e6      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e4:	4b45      	ldr	r3, [pc, #276]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a44      	ldr	r2, [pc, #272]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b42      	ldr	r3, [pc, #264]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	493f      	ldr	r1, [pc, #252]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002302:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	493a      	ldr	r1, [pc, #232]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
 8002316:	e01a      	b.n	800234e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002318:	4b38      	ldr	r3, [pc, #224]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a37      	ldr	r2, [pc, #220]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002324:	f7fe fe5e 	bl	8000fe4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232c:	f7fe fe5a 	bl	8000fe4 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e2b3      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800233e:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x1d4>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d074      	beq.n	8002444 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x214>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d10e      	bne.n	8002384 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d10b      	bne.n	8002384 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d064      	beq.n	8002442 <HAL_RCC_OscConfig+0x2ea>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d160      	bne.n	8002442 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e290      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x244>
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0x280>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x268>
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a14      	ldr	r2, [pc, #80]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0x280>
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_RCC_OscConfig+0x2a4>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01c      	beq.n	800241a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe00 	bl	8000fe4 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e6:	e011      	b.n	800240c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fdfc 	bl	8000fe4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d90a      	bls.n	800240c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e255      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	0800856c 	.word	0x0800856c
 8002404:	20000020 	.word	0x20000020
 8002408:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240c:	4bae      	ldr	r3, [pc, #696]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0e7      	beq.n	80023e8 <HAL_RCC_OscConfig+0x290>
 8002418:	e014      	b.n	8002444 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fde3 	bl	8000fe4 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002422:	f7fe fddf 	bl	8000fe4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e238      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002434:	4ba4      	ldr	r3, [pc, #656]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x2ca>
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002442:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d060      	beq.n	8002512 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x30a>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d119      	bne.n	8002490 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002462:	4b99      	ldr	r3, [pc, #612]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x322>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e215      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b93      	ldr	r3, [pc, #588]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	498f      	ldr	r1, [pc, #572]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248e:	e040      	b.n	8002512 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b8b      	ldr	r3, [pc, #556]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a8a      	ldr	r2, [pc, #552]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd9e 	bl	8000fe4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fd9a 	bl	8000fe4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1f3      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024be:	4b82      	ldr	r3, [pc, #520]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b7f      	ldr	r3, [pc, #508]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	497b      	ldr	r1, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
 80024de:	e018      	b.n	8002512 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e0:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a78      	ldr	r2, [pc, #480]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80024e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe fd7a 	bl	8000fe4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe fd76 	bl	8000fe4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1cf      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002506:	4b70      	ldr	r3, [pc, #448]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03c      	beq.n	8002598 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01c      	beq.n	8002560 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b68      	ldr	r3, [pc, #416]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252c:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe fd55 	bl	8000fe4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fd51 	bl	8000fe4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1aa      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002550:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ef      	beq.n	800253e <HAL_RCC_OscConfig+0x3e6>
 800255e:	e01b      	b.n	8002598 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fd38 	bl	8000fe4 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fd34 	bl	8000fe4 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e18d      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800258a:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800258c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ef      	bne.n	8002578 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a5 	beq.w	80026f0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	4a43      	ldr	r2, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80025bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	; 0x58
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ce:	2301      	movs	r3, #1
 80025d0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <HAL_RCC_OscConfig+0x574>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_OscConfig+0x574>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <HAL_RCC_OscConfig+0x574>)
 80025e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fcfb 	bl	8000fe4 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f2:	f7fe fcf7 	bl	8000fe4 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e150      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002604:	4b31      	ldr	r3, [pc, #196]	; (80026cc <HAL_RCC_OscConfig+0x574>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d108      	bne.n	800262a <HAL_RCC_OscConfig+0x4d2>
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	4a2a      	ldr	r2, [pc, #168]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002628:	e024      	b.n	8002674 <HAL_RCC_OscConfig+0x51c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d110      	bne.n	8002654 <HAL_RCC_OscConfig+0x4fc>
 8002632:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800263a:	f043 0304 	orr.w	r3, r3, #4
 800263e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002642:	4b21      	ldr	r3, [pc, #132]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002652:	e00f      	b.n	8002674 <HAL_RCC_OscConfig+0x51c>
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d016      	beq.n	80026aa <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fcb2 	bl	8000fe4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe fcae 	bl	8000fe4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e105      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_OscConfig+0x570>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ed      	beq.n	8002684 <HAL_RCC_OscConfig+0x52c>
 80026a8:	e019      	b.n	80026de <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe fc9b 	bl	8000fe4 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b0:	e00e      	b.n	80026d0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe fc97 	bl	8000fe4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d905      	bls.n	80026d0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0ee      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d0:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1e9      	bne.n	80026b2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b72      	ldr	r3, [pc, #456]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80d5 	beq.w	80028a4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	f000 808e 	beq.w	800281e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	2b02      	cmp	r3, #2
 8002708:	d15b      	bne.n	80027c2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fc65 	bl	8000fe4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fc61 	bl	8000fe4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e0ba      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002730:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800273c:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	4b5c      	ldr	r3, [pc, #368]	; (80028b4 <HAL_RCC_OscConfig+0x75c>)
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800274c:	3a01      	subs	r2, #1
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002756:	0212      	lsls	r2, r2, #8
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	0552      	lsls	r2, r2, #21
 8002764:	4311      	orrs	r1, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276a:	0852      	lsrs	r2, r2, #1
 800276c:	3a01      	subs	r2, #1
 800276e:	0652      	lsls	r2, r2, #25
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002776:	0912      	lsrs	r2, r2, #4
 8002778:	0452      	lsls	r2, r2, #17
 800277a:	430a      	orrs	r2, r1
 800277c:	494c      	ldr	r1, [pc, #304]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 800277e:	4313      	orrs	r3, r2
 8002780:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002782:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	4a47      	ldr	r2, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002794:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002798:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fc23 	bl	8000fe4 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe fc1f 	bl	8000fe4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e078      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b4:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x64a>
 80027c0:	e070      	b.n	80028a4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80027ce:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027da:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027e0:	f023 0303 	bic.w	r3, r3, #3
 80027e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027e6:	4b32      	ldr	r3, [pc, #200]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 80027ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fbf5 	bl	8000fe4 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fbf1 	bl	8000fe4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e04a      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCC_OscConfig+0x6a6>
 800281c:	e042      	b.n	80028a4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e03d      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x758>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	429a      	cmp	r2, r3
 800283c:	d130      	bne.n	80028a0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	3b01      	subs	r3, #1
 800284a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d127      	bne.n	80028a0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d11f      	bne.n	80028a0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286a:	2a07      	cmp	r2, #7
 800286c:	bf14      	ite	ne
 800286e:	2201      	movne	r2, #1
 8002870:	2200      	moveq	r2, #0
 8002872:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002874:	4293      	cmp	r3, r2
 8002876:	d113      	bne.n	80028a0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	3b01      	subs	r3, #1
 8002886:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	f99d808c 	.word	0xf99d808c

080028b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0c8      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028cc:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 0207 	bic.w	r2, r3, #7
 80028e2:	4961      	ldr	r1, [pc, #388]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b0      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d04c      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d107      	bne.n	8002920 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002910:	4b56      	ldr	r3, [pc, #344]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d121      	bne.n	8002960 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e09e      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d107      	bne.n	8002938 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002928:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d115      	bne.n	8002960 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e092      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002940:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d109      	bne.n	8002960 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e086      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002950:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e07e      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002960:	4b42      	ldr	r3, [pc, #264]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 0203 	bic.w	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	493f      	ldr	r1, [pc, #252]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002972:	f7fe fb37 	bl	8000fe4 <HAL_GetTick>
 8002976:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002978:	e00a      	b.n	8002990 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297a:	f7fe fb33 	bl	8000fe4 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e066      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 020c 	and.w	r2, r3, #12
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	429a      	cmp	r2, r3
 80029a0:	d1eb      	bne.n	800297a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	492c      	ldr	r1, [pc, #176]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d210      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4924      	ldr	r1, [pc, #144]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <HAL_RCC_ClockConfig+0x1b0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e036      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4918      	ldr	r1, [pc, #96]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4910      	ldr	r1, [pc, #64]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2e:	f000 f825 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8002a32:	4601      	mov	r1, r0
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa21 f303 	lsr.w	r3, r1, r3
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fa7a 	bl	8000f4c <HAL_InitTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40022000 	.word	0x40022000
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	0800856c 	.word	0x0800856c
 8002a74:	20000020 	.word	0x20000020
 8002a78:	20000000 	.word	0x20000000

08002a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b089      	sub	sp, #36	; 0x24
 8002a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a94:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d11e      	bne.n	8002aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	e005      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002acc:	4b2c      	ldr	r3, [pc, #176]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d102      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002af4:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e004      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d133      	bne.n	8002b72 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d002      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b1e:	e005      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b22:	617b      	str	r3, [r7, #20]
      break;
 8002b24:	e005      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b28:	617b      	str	r3, [r7, #20]
      break;
 8002b2a:	e002      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	617b      	str	r3, [r7, #20]
      break;
 8002b30:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	fb02 f203 	mul.w	r2, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b58:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0e5b      	lsrs	r3, r3, #25
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	3301      	adds	r3, #1
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b72:	69bb      	ldr	r3, [r7, #24]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3724      	adds	r7, #36	; 0x24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08008584 	.word	0x08008584
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	007a1200 	.word	0x007a1200

08002b90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000020 	.word	0x20000020

08002ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bac:	f7ff fff0 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4601      	mov	r1, r0
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	0800857c 	.word	0x0800857c

08002bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bd8:	f7ff ffda 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4601      	mov	r1, r0
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0adb      	lsrs	r3, r3, #11
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	0800857c 	.word	0x0800857c

08002c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff fa3a 	bl	8002090 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
 8002c1e:	e014      	b.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a24      	ldr	r2, [pc, #144]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff fa2a 	bl	8002090 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c50:	d10b      	bne.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d919      	bls.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c5c:	d902      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e013      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e010      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d902      	bls.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c70:	2303      	movs	r3, #3
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e00a      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d102      	bne.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e004      	b.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b70      	cmp	r3, #112	; 0x70
 8002c86:	d101      	bne.n	8002c8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c88:	2301      	movs	r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 0207 	bic.w	r2, r3, #7
 8002c94:	4909      	ldr	r1, [pc, #36]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d03f      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce4:	d01c      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d802      	bhi.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00e      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002cf0:	e01f      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002cf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cf6:	d003      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002cf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cfc:	d01c      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d00:	4b85      	ldr	r3, [pc, #532]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a84      	ldr	r2, [pc, #528]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fab9 	bl	800328c <RCCEx_PLLSAI1_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3320      	adds	r3, #32
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fba0 	bl	800346c <RCCEx_PLLSAI2_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	74fb      	strb	r3, [r7, #19]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d40:	4b75      	ldr	r3, [pc, #468]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d4e:	4972      	ldr	r1, [pc, #456]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03f      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d70:	d01c      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d76:	d802      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002d7c:	e01f      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d82:	d003      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d88:	d01c      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002d8a:	e018      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d8c:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4a61      	ldr	r2, [pc, #388]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d98:	e015      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fa73 	bl	800328c <RCCEx_PLLSAI1_Config>
 8002da6:	4603      	mov	r3, r0
 8002da8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002daa:	e00c      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3320      	adds	r3, #32
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fb5a 	bl	800346c <RCCEx_PLLSAI2_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbc:	e003      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dcc:	4b52      	ldr	r3, [pc, #328]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dda:	494f      	ldr	r1, [pc, #316]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002de2:	e001      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a0 	beq.w	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1c:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3a      	ldr	r2, [pc, #232]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e38:	f7fe f8d4 	bl	8000fe4 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e3e:	e009      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f8d0 	bl	8000fe4 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d902      	bls.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	74fb      	strb	r3, [r7, #19]
        break;
 8002e52:	e005      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ef      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d15c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e66:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01f      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d019      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe f88f 	bl	8000fe4 <HAL_GetTick>
 8002ec6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec8:	e00b      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe f88b 	bl	8000fe4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d902      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	74fb      	strb	r3, [r7, #19]
            break;
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ec      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	4904      	ldr	r1, [pc, #16]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f0e:	e009      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
 8002f14:	e006      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f24:	7c7b      	ldrb	r3, [r7, #17]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4b9e      	ldr	r3, [pc, #632]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	4a9d      	ldr	r2, [pc, #628]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f42:	4b98      	ldr	r3, [pc, #608]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 0203 	bic.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	4994      	ldr	r1, [pc, #592]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f64:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 020c 	bic.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	498c      	ldr	r1, [pc, #560]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f86:	4b87      	ldr	r3, [pc, #540]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4983      	ldr	r1, [pc, #524]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	497b      	ldr	r1, [pc, #492]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	4972      	ldr	r1, [pc, #456]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fec:	4b6d      	ldr	r3, [pc, #436]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	496a      	ldr	r1, [pc, #424]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300e:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	4961      	ldr	r1, [pc, #388]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003030:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	4959      	ldr	r1, [pc, #356]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003052:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003060:	4950      	ldr	r1, [pc, #320]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003074:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003082:	4948      	ldr	r1, [pc, #288]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003096:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a4:	493f      	ldr	r1, [pc, #252]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d028      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b8:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c6:	4937      	ldr	r1, [pc, #220]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d6:	d106      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e2:	60d3      	str	r3, [r2, #12]
 80030e4:	e011      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ee:	d10c      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8c8 	bl	800328c <RCCEx_PLLSAI1_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d028      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	491f      	ldr	r1, [pc, #124]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003134:	d106      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800313c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003140:	60d3      	str	r3, [r2, #12]
 8003142:	e011      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314c:	d10c      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3304      	adds	r3, #4
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f000 f899 	bl	800328c <RCCEx_PLLSAI1_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003192:	d109      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800319a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800319e:	60d3      	str	r3, [r2, #12]
 80031a0:	e014      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b0:	d10c      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f867 	bl	800328c <RCCEx_PLLSAI1_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c2:	7cfb      	ldrb	r3, [r7, #19]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031d8:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e6:	4928      	ldr	r1, [pc, #160]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f6:	d10d      	bne.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	2102      	movs	r1, #2
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f844 	bl	800328c <RCCEx_PLLSAI1_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003208:	7cfb      	ldrb	r3, [r7, #19]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d014      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800320e:	7cfb      	ldrb	r3, [r7, #19]
 8003210:	74bb      	strb	r3, [r7, #18]
 8003212:	e011      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321c:	d10c      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3320      	adds	r3, #32
 8003222:	2102      	movs	r1, #2
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f921 	bl	800346c <RCCEx_PLLSAI2_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003244:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003252:	490d      	ldr	r1, [pc, #52]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003276:	4904      	ldr	r1, [pc, #16]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800327e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000

0800328c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800329a:	4b73      	ldr	r3, [pc, #460]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d018      	beq.n	80032d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032a6:	4b70      	ldr	r3, [pc, #448]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0203 	and.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d10d      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
       ||
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032be:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
       ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d044      	beq.n	800335c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
 80032d6:	e041      	b.n	800335c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d00c      	beq.n	80032fa <RCCEx_PLLSAI1_Config+0x6e>
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d013      	beq.n	800330c <RCCEx_PLLSAI1_Config+0x80>
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d120      	bne.n	800332a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032e8:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11d      	bne.n	8003330 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f8:	e01a      	b.n	8003330 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032fa:	4b5b      	ldr	r3, [pc, #364]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800330a:	e013      	b.n	8003334 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800330c:	4b56      	ldr	r3, [pc, #344]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003328:	e006      	b.n	8003338 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	73fb      	strb	r3, [r7, #15]
      break;
 800332e:	e004      	b.n	800333a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003330:	bf00      	nop
 8003332:	e002      	b.n	800333a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003338:	bf00      	nop
    }

    if(status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10d      	bne.n	800335c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	3b01      	subs	r3, #1
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	430b      	orrs	r3, r1
 8003356:	4944      	ldr	r1, [pc, #272]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d17d      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003362:	4b41      	ldr	r3, [pc, #260]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a40      	ldr	r2, [pc, #256]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800336c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336e:	f7fd fe39 	bl	8000fe4 <HAL_GetTick>
 8003372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003374:	e009      	b.n	800338a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003376:	f7fd fe35 	bl	8000fe4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d902      	bls.n	800338a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	73fb      	strb	r3, [r7, #15]
        break;
 8003388:	e005      	b.n	8003396 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1ef      	bne.n	8003376 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d160      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d111      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033a2:	4b31      	ldr	r3, [pc, #196]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6892      	ldr	r2, [r2, #8]
 80033b2:	0211      	lsls	r1, r2, #8
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	68d2      	ldr	r2, [r2, #12]
 80033b8:	0912      	lsrs	r2, r2, #4
 80033ba:	0452      	lsls	r2, r2, #17
 80033bc:	430a      	orrs	r2, r1
 80033be:	492a      	ldr	r1, [pc, #168]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	610b      	str	r3, [r1, #16]
 80033c4:	e027      	b.n	8003416 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d112      	bne.n	80033f2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033cc:	4b26      	ldr	r3, [pc, #152]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6892      	ldr	r2, [r2, #8]
 80033dc:	0211      	lsls	r1, r2, #8
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6912      	ldr	r2, [r2, #16]
 80033e2:	0852      	lsrs	r2, r2, #1
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0552      	lsls	r2, r2, #21
 80033e8:	430a      	orrs	r2, r1
 80033ea:	491f      	ldr	r1, [pc, #124]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	610b      	str	r3, [r1, #16]
 80033f0:	e011      	b.n	8003416 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f2:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	0211      	lsls	r1, r2, #8
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6952      	ldr	r2, [r2, #20]
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	3a01      	subs	r2, #1
 800340c:	0652      	lsls	r2, r2, #25
 800340e:	430a      	orrs	r2, r1
 8003410:	4915      	ldr	r1, [pc, #84]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a13      	ldr	r2, [pc, #76]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 800341c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003420:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fd fddf 	bl	8000fe4 <HAL_GetTick>
 8003426:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003428:	e009      	b.n	800343e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800342a:	f7fd fddb 	bl	8000fe4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d902      	bls.n	800343e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	73fb      	strb	r3, [r7, #15]
          break;
 800343c:	e005      	b.n	800344a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ef      	beq.n	800342a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <RCCEx_PLLSAI1_Config+0x1dc>)
 800345a:	4313      	orrs	r3, r2
 800345c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800347a:	4b68      	ldr	r3, [pc, #416]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003486:	4b65      	ldr	r3, [pc, #404]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d10d      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
       ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800349e:	4b5f      	ldr	r3, [pc, #380]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
       ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d044      	beq.n	800353c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	e041      	b.n	800353c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d00c      	beq.n	80034da <RCCEx_PLLSAI2_Config+0x6e>
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d013      	beq.n	80034ec <RCCEx_PLLSAI2_Config+0x80>
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d120      	bne.n	800350a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034c8:	4b54      	ldr	r3, [pc, #336]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11d      	bne.n	8003510 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e01a      	b.n	8003510 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034da:	4b50      	ldr	r3, [pc, #320]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ea:	e013      	b.n	8003514 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034f8:	4b48      	ldr	r3, [pc, #288]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003508:	e006      	b.n	8003518 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      break;
 800350e:	e004      	b.n	800351a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003510:	bf00      	nop
 8003512:	e002      	b.n	800351a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003518:	bf00      	nop
    }

    if(status == HAL_OK)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6819      	ldr	r1, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	3b01      	subs	r3, #1
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	430b      	orrs	r3, r1
 8003536:	4939      	ldr	r1, [pc, #228]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d167      	bne.n	8003612 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003542:	4b36      	ldr	r3, [pc, #216]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a35      	ldr	r2, [pc, #212]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354e:	f7fd fd49 	bl	8000fe4 <HAL_GetTick>
 8003552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003554:	e009      	b.n	800356a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003556:	f7fd fd45 	bl	8000fe4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d902      	bls.n	800356a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	73fb      	strb	r3, [r7, #15]
        break;
 8003568:	e005      	b.n	8003576 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800356a:	4b2c      	ldr	r3, [pc, #176]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1ef      	bne.n	8003556 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d14a      	bne.n	8003612 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d111      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	0211      	lsls	r1, r2, #8
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68d2      	ldr	r2, [r2, #12]
 8003598:	0912      	lsrs	r2, r2, #4
 800359a:	0452      	lsls	r2, r2, #17
 800359c:	430a      	orrs	r2, r1
 800359e:	491f      	ldr	r1, [pc, #124]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	614b      	str	r3, [r1, #20]
 80035a4:	e011      	b.n	80035ca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6892      	ldr	r2, [r2, #8]
 80035b6:	0211      	lsls	r1, r2, #8
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6912      	ldr	r2, [r2, #16]
 80035bc:	0852      	lsrs	r2, r2, #1
 80035be:	3a01      	subs	r2, #1
 80035c0:	0652      	lsls	r2, r2, #25
 80035c2:	430a      	orrs	r2, r1
 80035c4:	4915      	ldr	r1, [pc, #84]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035ca:	4b14      	ldr	r3, [pc, #80]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a13      	ldr	r2, [pc, #76]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d6:	f7fd fd05 	bl	8000fe4 <HAL_GetTick>
 80035da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035dc:	e009      	b.n	80035f2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035de:	f7fd fd01 	bl	8000fe4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d902      	bls.n	80035f2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	73fb      	strb	r3, [r7, #15]
          break;
 80035f0:	e005      	b.n	80035fe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0ef      	beq.n	80035de <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <RCCEx_PLLSAI2_Config+0x1b0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000

08003620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07c      	b.n	800372c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d106      	bne.n	8003652 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f003 fef9 	bl	8007444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003668:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003672:	d902      	bls.n	800367a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e002      	b.n	8003680 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003688:	d007      	beq.n	800369a <HAL_SPI_Init+0x7a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003692:	d002      	beq.n	800369a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036aa:	d903      	bls.n	80036b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
 80036b2:	e002      	b.n	80036ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	ea42 0103 	orr.w	r1, r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	f003 0204 	and.w	r2, r3, #4
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	ea42 0103 	orr.w	r1, r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_SPI_Transmit+0x22>
 8003752:	2302      	movs	r3, #2
 8003754:	e150      	b.n	80039f8 <HAL_SPI_Transmit+0x2c4>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800375e:	f7fd fc41 	bl	8000fe4 <HAL_GetTick>
 8003762:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b01      	cmp	r3, #1
 8003772:	d002      	beq.n	800377a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003774:	2302      	movs	r3, #2
 8003776:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003778:	e135      	b.n	80039e6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_SPI_Transmit+0x52>
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	77fb      	strb	r3, [r7, #31]
    goto error;
 800378a:	e12c      	b.n	80039e6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2203      	movs	r2, #3
 8003790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	88fa      	ldrh	r2, [r7, #6]
 80037aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d6:	d107      	bne.n	80037e8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d007      	beq.n	8003806 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800380e:	d94b      	bls.n	80038a8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_Transmit+0xea>
 8003818:	8afb      	ldrh	r3, [r7, #22]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d13e      	bne.n	800389c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003842:	e02b      	b.n	800389c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d112      	bne.n	8003878 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003876:	e011      	b.n	800389c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003878:	f7fd fbb4 	bl	8000fe4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d803      	bhi.n	8003890 <HAL_SPI_Transmit+0x15c>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Transmit+0x162>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	77fb      	strb	r3, [r7, #31]
          goto error;
 800389a:	e0a4      	b.n	80039e6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1ce      	bne.n	8003844 <HAL_SPI_Transmit+0x110>
 80038a6:	e07c      	b.n	80039a2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_SPI_Transmit+0x182>
 80038b0:	8afb      	ldrh	r3, [r7, #22]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d170      	bne.n	8003998 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d912      	bls.n	80038e6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	881a      	ldrh	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b02      	subs	r3, #2
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038e4:	e058      	b.n	8003998 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800390c:	e044      	b.n	8003998 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d12b      	bne.n	8003974 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b01      	cmp	r3, #1
 8003924:	d912      	bls.n	800394c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b02      	subs	r3, #2
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800394a:	e025      	b.n	8003998 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003972:	e011      	b.n	8003998 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003974:	f7fd fb36 	bl	8000fe4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d803      	bhi.n	800398c <HAL_SPI_Transmit+0x258>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d102      	bne.n	8003992 <HAL_SPI_Transmit+0x25e>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003996:	e026      	b.n	80039e6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1b5      	bne.n	800390e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fca2 	bl	80042f0 <SPI_EndRxTxTransaction>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e000      	b.n	80039e6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80039e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1c:	d112      	bne.n	8003a44 <HAL_SPI_Receive+0x44>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10e      	bne.n	8003a44 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f908 	bl	8003c50 <HAL_SPI_TransmitReceive>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e101      	b.n	8003c48 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_Receive+0x52>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e0fa      	b.n	8003c48 <HAL_SPI_Receive+0x248>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a5a:	f7fd fac3 	bl	8000fe4 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a70:	e0e1      	b.n	8003c36 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SPI_Receive+0x7e>
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a82:	e0d8      	b.n	8003c36 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2204      	movs	r2, #4
 8003a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ace:	d908      	bls.n	8003ae2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	e007      	b.n	8003af2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afa:	d107      	bne.n	8003b0c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d007      	beq.n	8003b2a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b32:	d867      	bhi.n	8003c04 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b34:	e030      	b.n	8003b98 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d117      	bne.n	8003b74 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f103 020c 	add.w	r2, r3, #12
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	7812      	ldrb	r2, [r2, #0]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003b72:	e011      	b.n	8003b98 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b74:	f7fd fa36 	bl	8000fe4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d803      	bhi.n	8003b8c <HAL_SPI_Receive+0x18c>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Receive+0x192>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b96:	e04e      	b.n	8003c36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1c8      	bne.n	8003b36 <HAL_SPI_Receive+0x136>
 8003ba4:	e034      	b.n	8003c10 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d115      	bne.n	8003be0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	1c9a      	adds	r2, r3, #2
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003bde:	e011      	b.n	8003c04 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be0:	f7fd fa00 	bl	8000fe4 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d803      	bhi.n	8003bf8 <HAL_SPI_Receive+0x1f8>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf6:	d102      	bne.n	8003bfe <HAL_SPI_Receive+0x1fe>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c02:	e018      	b.n	8003c36 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ca      	bne.n	8003ba6 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	6839      	ldr	r1, [r7, #0]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fb13 	bl	8004240 <SPI_EndRxTransaction>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
 8003c32:	e000      	b.n	8003c36 <HAL_SPI_Receive+0x236>
  }

error :
 8003c34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x26>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e1fb      	b.n	800406e <HAL_SPI_TransmitReceive+0x41e>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c7e:	f7fd f9b1 	bl	8000fe4 <HAL_GetTick>
 8003c82:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c8a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c9a:	7efb      	ldrb	r3, [r7, #27]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d00e      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x6e>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca6:	d106      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d102      	bne.n	8003cb6 <HAL_SPI_TransmitReceive+0x66>
 8003cb0:	7efb      	ldrb	r3, [r7, #27]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d003      	beq.n	8003cbe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cbc:	e1cd      	b.n	800405a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x80>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x80>
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cd6:	e1c0      	b.n	800405a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d003      	beq.n	8003cec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2205      	movs	r2, #5
 8003ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	887a      	ldrh	r2, [r7, #2]
 8003cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d2e:	d802      	bhi.n	8003d36 <HAL_SPI_TransmitReceive+0xe6>
 8003d30:	8a3b      	ldrh	r3, [r7, #16]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d908      	bls.n	8003d48 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e007      	b.n	8003d58 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d007      	beq.n	8003d76 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d7e:	d97c      	bls.n	8003e7a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_SPI_TransmitReceive+0x13e>
 8003d88:	8a7b      	ldrh	r3, [r7, #18]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d169      	bne.n	8003e62 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	881a      	ldrh	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	1c9a      	adds	r2, r3, #2
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db2:	e056      	b.n	8003e62 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d11b      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x1aa>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d016      	beq.n	8003dfa <HAL_SPI_TransmitReceive+0x1aa>
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d113      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d11c      	bne.n	8003e42 <HAL_SPI_TransmitReceive+0x1f2>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e42:	f7fd f8cf 	bl	8000fe4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d807      	bhi.n	8003e62 <HAL_SPI_TransmitReceive+0x212>
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d003      	beq.n	8003e62 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e60:	e0fb      	b.n	800405a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1a3      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x164>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d19d      	bne.n	8003db4 <HAL_SPI_TransmitReceive+0x164>
 8003e78:	e0df      	b.n	800403a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_SPI_TransmitReceive+0x23a>
 8003e82:	8a7b      	ldrh	r3, [r7, #18]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	f040 80cb 	bne.w	8004020 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d912      	bls.n	8003eba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b02      	subs	r3, #2
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb8:	e0b2      	b.n	8004020 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee0:	e09e      	b.n	8004020 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d134      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x30a>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d02f      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0x30a>
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d12c      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d912      	bls.n	8003f30 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	881a      	ldrh	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b02      	subs	r3, #2
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f2e:	e012      	b.n	8003f56 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d148      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x3aa>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d042      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d923      	bls.n	8003fc8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	b292      	uxth	r2, r2
 8003f8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	1c9a      	adds	r2, r3, #2
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b02      	subs	r3, #2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d81f      	bhi.n	8003ff6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e016      	b.n	8003ff6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f103 020c 	add.w	r2, r3, #12
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ffa:	f7fc fff3 	bl	8000fe4 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004006:	429a      	cmp	r2, r3
 8004008:	d803      	bhi.n	8004012 <HAL_SPI_TransmitReceive+0x3c2>
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d102      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x3c8>
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800401e:	e01c      	b.n	800405a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	f47f af5b 	bne.w	8003ee2 <HAL_SPI_TransmitReceive+0x292>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f af54 	bne.w	8003ee2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f956 	bl	80042f0 <SPI_EndRxTxTransaction>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d006      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	661a      	str	r2, [r3, #96]	; 0x60
 8004056:	e000      	b.n	800405a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004058:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800406a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800406e:	4618      	mov	r0, r3
 8004070:	3728      	adds	r7, #40	; 0x28
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004084:	b2db      	uxtb	r3, r3
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a2:	e04c      	b.n	800413e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d048      	beq.n	800413e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80040ac:	f7fc ff9a 	bl	8000fe4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d902      	bls.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d13d      	bne.n	800413e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d111      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d004      	beq.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d107      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004108:	d10f      	bne.n	800412a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e00f      	b.n	800415e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	4013      	ands	r3, r2
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	bf0c      	ite	eq
 800414e:	2301      	moveq	r3, #1
 8004150:	2300      	movne	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	429a      	cmp	r2, r3
 800415a:	d1a3      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004174:	e057      	b.n	8004226 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800417c:	d106      	bne.n	800418c <SPI_WaitFifoStateUntilTimeout+0x26>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d048      	beq.n	8004226 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004194:	f7fc ff26 	bl	8000fe4 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d902      	bls.n	80041aa <SPI_WaitFifoStateUntilTimeout+0x44>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d13d      	bne.n	8004226 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c2:	d111      	bne.n	80041e8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041cc:	d004      	beq.n	80041d8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d107      	bne.n	80041e8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f0:	d10f      	bne.n	8004212 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e008      	b.n	8004238 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4013      	ands	r3, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d19f      	bne.n	8004176 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004254:	d111      	bne.n	800427a <SPI_EndRxTransaction+0x3a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425e:	d004      	beq.n	800426a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004268:	d107      	bne.n	800427a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004278:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ff04 	bl	8004092 <SPI_WaitFlagStateUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e023      	b.n	80042e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a8:	d11d      	bne.n	80042e6 <SPI_EndRxTransaction+0xa6>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b2:	d004      	beq.n	80042be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d113      	bne.n	80042e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff ff4b 	bl	8004166 <SPI_WaitFifoStateUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e000      	b.n	80042e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff ff2c 	bl	8004166 <SPI_WaitFifoStateUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e027      	b.n	8004374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2200      	movs	r2, #0
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff feaf 	bl	8004092 <SPI_WaitFlagStateUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e014      	b.n	8004374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff ff05 	bl	8004166 <SPI_WaitFifoStateUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e000      	b.n	8004374 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e040      	b.n	8004410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f003 f8c6 	bl	8007530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	; 0x24
 80043a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0201 	bic.w	r2, r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f95a 	bl	8004674 <UART_SetConfig>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e022      	b.n	8004410 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fc96 	bl	8004d04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fd1d 	bl	8004e48 <UART_CheckIdleState>
 800440e:	4603      	mov	r3, r0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442c:	2b20      	cmp	r3, #32
 800442e:	f040 8081 	bne.w	8004534 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_UART_Transmit+0x26>
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e079      	b.n	8004536 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UART_Transmit+0x38>
 800444c:	2302      	movs	r3, #2
 800444e:	e072      	b.n	8004536 <HAL_UART_Transmit+0x11e>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2221      	movs	r2, #33	; 0x21
 8004462:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004464:	f7fc fdbe 	bl	8000fe4 <HAL_GetTick>
 8004468:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d108      	bne.n	8004496 <HAL_UART_Transmit+0x7e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e003      	b.n	800449e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800449e:	e02d      	b.n	80044fc <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fd11 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e03d      	b.n	8004536 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	881a      	ldrh	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044cc:	b292      	uxth	r2, r2
 80044ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	3302      	adds	r3, #2
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	e008      	b.n	80044ea <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	781a      	ldrb	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	b292      	uxth	r2, r2
 80044e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1cb      	bne.n	80044a0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	2140      	movs	r1, #64	; 0x40
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fcdd 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e009      	b.n	8004536 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	e000      	b.n	8004536 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004552:	2b20      	cmp	r3, #32
 8004554:	d164      	bne.n	8004620 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_UART_Transmit_DMA+0x22>
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e05d      	b.n	8004622 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_UART_Transmit_DMA+0x34>
 8004570:	2302      	movs	r3, #2
 8004572:	e056      	b.n	8004622 <HAL_UART_Transmit_DMA+0xe2>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2221      	movs	r2, #33	; 0x21
 800459c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d02a      	beq.n	80045fc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045aa:	4a20      	ldr	r2, [pc, #128]	; (800462c <HAL_UART_Transmit_DMA+0xec>)
 80045ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b2:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <HAL_UART_Transmit_DMA+0xf0>)
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ba:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <HAL_UART_Transmit_DMA+0xf4>)
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	2200      	movs	r2, #0
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	4619      	mov	r1, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3328      	adds	r3, #40	; 0x28
 80045d6:	461a      	mov	r2, r3
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	f7fc fe16 	bl	800120a <HAL_DMA_Start_IT>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2210      	movs	r2, #16
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e012      	b.n	8004622 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2240      	movs	r2, #64	; 0x40
 8004602:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800461a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	08004fcd 	.word	0x08004fcd
 8004630:	08005021 	.word	0x08005021
 8004634:	0800503d 	.word	0x0800503d

08004638 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004674:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4bac      	ldr	r3, [pc, #688]	; (800495c <UART_SetConfig+0x2e8>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6812      	ldr	r2, [r2, #0]
 80046b0:	69f9      	ldr	r1, [r7, #28]
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4aa2      	ldr	r2, [pc, #648]	; (8004960 <UART_SetConfig+0x2ec>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	69fa      	ldr	r2, [r7, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a99      	ldr	r2, [pc, #612]	; (8004964 <UART_SetConfig+0x2f0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d121      	bne.n	8004748 <UART_SetConfig+0xd4>
 8004704:	4b98      	ldr	r3, [pc, #608]	; (8004968 <UART_SetConfig+0x2f4>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d816      	bhi.n	8004740 <UART_SetConfig+0xcc>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0xa4>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004729 	.word	0x08004729
 800471c:	08004735 	.word	0x08004735
 8004720:	0800472f 	.word	0x0800472f
 8004724:	0800473b 	.word	0x0800473b
 8004728:	2301      	movs	r3, #1
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e0e8      	b.n	8004900 <UART_SetConfig+0x28c>
 800472e:	2302      	movs	r3, #2
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e0e5      	b.n	8004900 <UART_SetConfig+0x28c>
 8004734:	2304      	movs	r3, #4
 8004736:	76fb      	strb	r3, [r7, #27]
 8004738:	e0e2      	b.n	8004900 <UART_SetConfig+0x28c>
 800473a:	2308      	movs	r3, #8
 800473c:	76fb      	strb	r3, [r7, #27]
 800473e:	e0df      	b.n	8004900 <UART_SetConfig+0x28c>
 8004740:	2310      	movs	r3, #16
 8004742:	76fb      	strb	r3, [r7, #27]
 8004744:	bf00      	nop
 8004746:	e0db      	b.n	8004900 <UART_SetConfig+0x28c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a87      	ldr	r2, [pc, #540]	; (800496c <UART_SetConfig+0x2f8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d134      	bne.n	80047bc <UART_SetConfig+0x148>
 8004752:	4b85      	ldr	r3, [pc, #532]	; (8004968 <UART_SetConfig+0x2f4>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d829      	bhi.n	80047b4 <UART_SetConfig+0x140>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <UART_SetConfig+0xf4>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800479d 	.word	0x0800479d
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047b5 	.word	0x080047b5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047a9 	.word	0x080047a9
 800477c:	080047b5 	.word	0x080047b5
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047a3 	.word	0x080047a3
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047b5 	.word	0x080047b5
 8004798:	080047af 	.word	0x080047af
 800479c:	2300      	movs	r3, #0
 800479e:	76fb      	strb	r3, [r7, #27]
 80047a0:	e0ae      	b.n	8004900 <UART_SetConfig+0x28c>
 80047a2:	2302      	movs	r3, #2
 80047a4:	76fb      	strb	r3, [r7, #27]
 80047a6:	e0ab      	b.n	8004900 <UART_SetConfig+0x28c>
 80047a8:	2304      	movs	r3, #4
 80047aa:	76fb      	strb	r3, [r7, #27]
 80047ac:	e0a8      	b.n	8004900 <UART_SetConfig+0x28c>
 80047ae:	2308      	movs	r3, #8
 80047b0:	76fb      	strb	r3, [r7, #27]
 80047b2:	e0a5      	b.n	8004900 <UART_SetConfig+0x28c>
 80047b4:	2310      	movs	r3, #16
 80047b6:	76fb      	strb	r3, [r7, #27]
 80047b8:	bf00      	nop
 80047ba:	e0a1      	b.n	8004900 <UART_SetConfig+0x28c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a6b      	ldr	r2, [pc, #428]	; (8004970 <UART_SetConfig+0x2fc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d120      	bne.n	8004808 <UART_SetConfig+0x194>
 80047c6:	4b68      	ldr	r3, [pc, #416]	; (8004968 <UART_SetConfig+0x2f4>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d00f      	beq.n	80047f4 <UART_SetConfig+0x180>
 80047d4:	2b10      	cmp	r3, #16
 80047d6:	d802      	bhi.n	80047de <UART_SetConfig+0x16a>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0x174>
 80047dc:	e010      	b.n	8004800 <UART_SetConfig+0x18c>
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d005      	beq.n	80047ee <UART_SetConfig+0x17a>
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d009      	beq.n	80047fa <UART_SetConfig+0x186>
 80047e6:	e00b      	b.n	8004800 <UART_SetConfig+0x18c>
 80047e8:	2300      	movs	r3, #0
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	e088      	b.n	8004900 <UART_SetConfig+0x28c>
 80047ee:	2302      	movs	r3, #2
 80047f0:	76fb      	strb	r3, [r7, #27]
 80047f2:	e085      	b.n	8004900 <UART_SetConfig+0x28c>
 80047f4:	2304      	movs	r3, #4
 80047f6:	76fb      	strb	r3, [r7, #27]
 80047f8:	e082      	b.n	8004900 <UART_SetConfig+0x28c>
 80047fa:	2308      	movs	r3, #8
 80047fc:	76fb      	strb	r3, [r7, #27]
 80047fe:	e07f      	b.n	8004900 <UART_SetConfig+0x28c>
 8004800:	2310      	movs	r3, #16
 8004802:	76fb      	strb	r3, [r7, #27]
 8004804:	bf00      	nop
 8004806:	e07b      	b.n	8004900 <UART_SetConfig+0x28c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a59      	ldr	r2, [pc, #356]	; (8004974 <UART_SetConfig+0x300>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d120      	bne.n	8004854 <UART_SetConfig+0x1e0>
 8004812:	4b55      	ldr	r3, [pc, #340]	; (8004968 <UART_SetConfig+0x2f4>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d00f      	beq.n	8004840 <UART_SetConfig+0x1cc>
 8004820:	2b40      	cmp	r3, #64	; 0x40
 8004822:	d802      	bhi.n	800482a <UART_SetConfig+0x1b6>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <UART_SetConfig+0x1c0>
 8004828:	e010      	b.n	800484c <UART_SetConfig+0x1d8>
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d005      	beq.n	800483a <UART_SetConfig+0x1c6>
 800482e:	2bc0      	cmp	r3, #192	; 0xc0
 8004830:	d009      	beq.n	8004846 <UART_SetConfig+0x1d2>
 8004832:	e00b      	b.n	800484c <UART_SetConfig+0x1d8>
 8004834:	2300      	movs	r3, #0
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	e062      	b.n	8004900 <UART_SetConfig+0x28c>
 800483a:	2302      	movs	r3, #2
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e05f      	b.n	8004900 <UART_SetConfig+0x28c>
 8004840:	2304      	movs	r3, #4
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e05c      	b.n	8004900 <UART_SetConfig+0x28c>
 8004846:	2308      	movs	r3, #8
 8004848:	76fb      	strb	r3, [r7, #27]
 800484a:	e059      	b.n	8004900 <UART_SetConfig+0x28c>
 800484c:	2310      	movs	r3, #16
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	bf00      	nop
 8004852:	e055      	b.n	8004900 <UART_SetConfig+0x28c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a47      	ldr	r2, [pc, #284]	; (8004978 <UART_SetConfig+0x304>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d124      	bne.n	80048a8 <UART_SetConfig+0x234>
 800485e:	4b42      	ldr	r3, [pc, #264]	; (8004968 <UART_SetConfig+0x2f4>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486c:	d012      	beq.n	8004894 <UART_SetConfig+0x220>
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d802      	bhi.n	800487a <UART_SetConfig+0x206>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <UART_SetConfig+0x214>
 8004878:	e012      	b.n	80048a0 <UART_SetConfig+0x22c>
 800487a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487e:	d006      	beq.n	800488e <UART_SetConfig+0x21a>
 8004880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004884:	d009      	beq.n	800489a <UART_SetConfig+0x226>
 8004886:	e00b      	b.n	80048a0 <UART_SetConfig+0x22c>
 8004888:	2300      	movs	r3, #0
 800488a:	76fb      	strb	r3, [r7, #27]
 800488c:	e038      	b.n	8004900 <UART_SetConfig+0x28c>
 800488e:	2302      	movs	r3, #2
 8004890:	76fb      	strb	r3, [r7, #27]
 8004892:	e035      	b.n	8004900 <UART_SetConfig+0x28c>
 8004894:	2304      	movs	r3, #4
 8004896:	76fb      	strb	r3, [r7, #27]
 8004898:	e032      	b.n	8004900 <UART_SetConfig+0x28c>
 800489a:	2308      	movs	r3, #8
 800489c:	76fb      	strb	r3, [r7, #27]
 800489e:	e02f      	b.n	8004900 <UART_SetConfig+0x28c>
 80048a0:	2310      	movs	r3, #16
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	bf00      	nop
 80048a6:	e02b      	b.n	8004900 <UART_SetConfig+0x28c>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <UART_SetConfig+0x2ec>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d124      	bne.n	80048fc <UART_SetConfig+0x288>
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <UART_SetConfig+0x2f4>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c0:	d012      	beq.n	80048e8 <UART_SetConfig+0x274>
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c6:	d802      	bhi.n	80048ce <UART_SetConfig+0x25a>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <UART_SetConfig+0x268>
 80048cc:	e012      	b.n	80048f4 <UART_SetConfig+0x280>
 80048ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d2:	d006      	beq.n	80048e2 <UART_SetConfig+0x26e>
 80048d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d8:	d009      	beq.n	80048ee <UART_SetConfig+0x27a>
 80048da:	e00b      	b.n	80048f4 <UART_SetConfig+0x280>
 80048dc:	2300      	movs	r3, #0
 80048de:	76fb      	strb	r3, [r7, #27]
 80048e0:	e00e      	b.n	8004900 <UART_SetConfig+0x28c>
 80048e2:	2302      	movs	r3, #2
 80048e4:	76fb      	strb	r3, [r7, #27]
 80048e6:	e00b      	b.n	8004900 <UART_SetConfig+0x28c>
 80048e8:	2304      	movs	r3, #4
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	e008      	b.n	8004900 <UART_SetConfig+0x28c>
 80048ee:	2308      	movs	r3, #8
 80048f0:	76fb      	strb	r3, [r7, #27]
 80048f2:	e005      	b.n	8004900 <UART_SetConfig+0x28c>
 80048f4:	2310      	movs	r3, #16
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	bf00      	nop
 80048fa:	e001      	b.n	8004900 <UART_SetConfig+0x28c>
 80048fc:	2310      	movs	r3, #16
 80048fe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a16      	ldr	r2, [pc, #88]	; (8004960 <UART_SetConfig+0x2ec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	f040 80fa 	bne.w	8004b00 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800490c:	7efb      	ldrb	r3, [r7, #27]
 800490e:	2b08      	cmp	r3, #8
 8004910:	d836      	bhi.n	8004980 <UART_SetConfig+0x30c>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <UART_SetConfig+0x2a4>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004981 	.word	0x08004981
 8004920:	08004945 	.word	0x08004945
 8004924:	08004981 	.word	0x08004981
 8004928:	0800494b 	.word	0x0800494b
 800492c:	08004981 	.word	0x08004981
 8004930:	08004981 	.word	0x08004981
 8004934:	08004981 	.word	0x08004981
 8004938:	08004953 	.word	0x08004953
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800493c:	f7fe f934 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004940:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004942:	e020      	b.n	8004986 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004944:	4b0d      	ldr	r3, [pc, #52]	; (800497c <UART_SetConfig+0x308>)
 8004946:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004948:	e01d      	b.n	8004986 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800494a:	f7fe f897 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 800494e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004950:	e019      	b.n	8004986 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004956:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004958:	e015      	b.n	8004986 <UART_SetConfig+0x312>
 800495a:	bf00      	nop
 800495c:	efff69f3 	.word	0xefff69f3
 8004960:	40008000 	.word	0x40008000
 8004964:	40013800 	.word	0x40013800
 8004968:	40021000 	.word	0x40021000
 800496c:	40004400 	.word	0x40004400
 8004970:	40004800 	.word	0x40004800
 8004974:	40004c00 	.word	0x40004c00
 8004978:	40005000 	.word	0x40005000
 800497c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	74fb      	strb	r3, [r7, #19]
        break;
 8004984:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 81ac 	beq.w	8004ce6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	429a      	cmp	r2, r3
 800499c:	d305      	bcc.n	80049aa <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d902      	bls.n	80049b0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	74fb      	strb	r3, [r7, #19]
 80049ae:	e19a      	b.n	8004ce6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80049b0:	7efb      	ldrb	r3, [r7, #27]
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	f200 8091 	bhi.w	8004ada <UART_SetConfig+0x466>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x34c>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	08004adb 	.word	0x08004adb
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	08004adb 	.word	0x08004adb
 80049d0:	08004a65 	.word	0x08004a65
 80049d4:	08004adb 	.word	0x08004adb
 80049d8:	08004adb 	.word	0x08004adb
 80049dc:	08004adb 	.word	0x08004adb
 80049e0:	08004ab1 	.word	0x08004ab1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80049e4:	f7fe f8e0 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4619      	mov	r1, r3
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	f04f 0400 	mov.w	r4, #0
 80049f8:	0214      	lsls	r4, r2, #8
 80049fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80049fe:	020b      	lsls	r3, r1, #8
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6852      	ldr	r2, [r2, #4]
 8004a04:	0852      	lsrs	r2, r2, #1
 8004a06:	4611      	mov	r1, r2
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	eb13 0b01 	adds.w	fp, r3, r1
 8004a10:	eb44 0c02 	adc.w	ip, r4, r2
 8004a14:	4658      	mov	r0, fp
 8004a16:	4661      	mov	r1, ip
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f04f 0400 	mov.w	r4, #0
 8004a20:	461a      	mov	r2, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	f7fc f8fa 	bl	8000c1c <__aeabi_uldivmod>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a2e:	e057      	b.n	8004ae0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	f04f 0400 	mov.w	r4, #0
 8004a3a:	49b1      	ldr	r1, [pc, #708]	; (8004d00 <UART_SetConfig+0x68c>)
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	eb13 0b01 	adds.w	fp, r3, r1
 8004a44:	eb44 0c02 	adc.w	ip, r4, r2
 8004a48:	4658      	mov	r0, fp
 8004a4a:	4661      	mov	r1, ip
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	461a      	mov	r2, r3
 8004a56:	4623      	mov	r3, r4
 8004a58:	f7fc f8e0 	bl	8000c1c <__aeabi_uldivmod>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004a62:	e03d      	b.n	8004ae0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a64:	f7fe f80a 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	f04f 0400 	mov.w	r4, #0
 8004a78:	0214      	lsls	r4, r2, #8
 8004a7a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a7e:	020b      	lsls	r3, r1, #8
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6852      	ldr	r2, [r2, #4]
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	4611      	mov	r1, r2
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	eb13 0b01 	adds.w	fp, r3, r1
 8004a90:	eb44 0c02 	adc.w	ip, r4, r2
 8004a94:	4658      	mov	r0, fp
 8004a96:	4661      	mov	r1, ip
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f04f 0400 	mov.w	r4, #0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	f7fc f8ba 	bl	8000c1c <__aeabi_uldivmod>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004aae:	e017      	b.n	8004ae0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	f04f 0400 	mov.w	r4, #0
 8004aba:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004abe:	f144 0100 	adc.w	r1, r4, #0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f04f 0400 	mov.w	r4, #0
 8004aca:	461a      	mov	r2, r3
 8004acc:	4623      	mov	r3, r4
 8004ace:	f7fc f8a5 	bl	8000c1c <__aeabi_uldivmod>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ad8:	e002      	b.n	8004ae0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	74fb      	strb	r3, [r7, #19]
            break;
 8004ade:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae6:	d308      	bcc.n	8004afa <UART_SetConfig+0x486>
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aee:	d204      	bcs.n	8004afa <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	60da      	str	r2, [r3, #12]
 8004af8:	e0f5      	b.n	8004ce6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	74fb      	strb	r3, [r7, #19]
 8004afe:	e0f2      	b.n	8004ce6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	d17f      	bne.n	8004c0a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8004b0a:	7efb      	ldrb	r3, [r7, #27]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d85c      	bhi.n	8004bca <UART_SetConfig+0x556>
 8004b10:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <UART_SetConfig+0x4a4>)
 8004b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b16:	bf00      	nop
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b5b 	.word	0x08004b5b
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004bcb 	.word	0x08004bcb
 8004b28:	08004b95 	.word	0x08004b95
 8004b2c:	08004bcb 	.word	0x08004bcb
 8004b30:	08004bcb 	.word	0x08004bcb
 8004b34:	08004bcb 	.word	0x08004bcb
 8004b38:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b3c:	f7fe f834 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004b40:	4603      	mov	r3, r0
 8004b42:	005a      	lsls	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	441a      	add	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b58:	e03a      	b.n	8004bd0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b5a:	f7fe f83b 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	005a      	lsls	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b76:	e02b      	b.n	8004bd0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	085b      	lsrs	r3, r3, #1
 8004b7e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004b82:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6852      	ldr	r2, [r2, #4]
 8004b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b92:	e01d      	b.n	8004bd0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b94:	f7fd ff72 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	005a      	lsls	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	441a      	add	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bb0:	e00e      	b.n	8004bd0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bc8:	e002      	b.n	8004bd0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	74fb      	strb	r3, [r7, #19]
        break;
 8004bce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d916      	bls.n	8004c04 <UART_SetConfig+0x590>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d212      	bcs.n	8004c04 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f023 030f 	bic.w	r3, r3, #15
 8004be6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	897b      	ldrh	r3, [r7, #10]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	897a      	ldrh	r2, [r7, #10]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	e070      	b.n	8004ce6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	74fb      	strb	r3, [r7, #19]
 8004c08:	e06d      	b.n	8004ce6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004c0a:	7efb      	ldrb	r3, [r7, #27]
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d859      	bhi.n	8004cc4 <UART_SetConfig+0x650>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x5a4>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c59 	.word	0x08004c59
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004cc5 	.word	0x08004cc5
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004cc5 	.word	0x08004cc5
 8004c30:	08004cc5 	.word	0x08004cc5
 8004c34:	08004cc5 	.word	0x08004cc5
 8004c38:	08004cad 	.word	0x08004cad
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004c3c:	f7fd ffb4 	bl	8002ba8 <HAL_RCC_GetPCLK1Freq>
 8004c40:	4602      	mov	r2, r0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	441a      	add	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c56:	e038      	b.n	8004cca <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004c58:	f7fd ffbc 	bl	8002bd4 <HAL_RCC_GetPCLK2Freq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	441a      	add	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c72:	e02a      	b.n	8004cca <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004c7e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6852      	ldr	r2, [r2, #4]
 8004c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c8e:	e01c      	b.n	8004cca <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004c90:	f7fd fef4 	bl	8002a7c <HAL_RCC_GetSysClockFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004caa:	e00e      	b.n	8004cca <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	085b      	lsrs	r3, r3, #1
 8004cb2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004cc2:	e002      	b.n	8004cca <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	74fb      	strb	r3, [r7, #19]
        break;
 8004cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b0f      	cmp	r3, #15
 8004cce:	d908      	bls.n	8004ce2 <UART_SetConfig+0x66e>
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d204      	bcs.n	8004ce2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e001      	b.n	8004ce6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	f4240000 	.word	0xf4240000

08004d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01a      	beq.n	8004e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e02:	d10a      	bne.n	8004e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e56:	f7fc f8c5 	bl	8000fe4 <HAL_GetTick>
 8004e5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	d10e      	bne.n	8004e88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f82a 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e020      	b.n	8004eca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d10e      	bne.n	8004eb4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f814 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e00a      	b.n	8004eca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee2:	e02a      	b.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d026      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eec:	f7fc f87a 	bl	8000fe4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <UART_WaitOnFlagUntilTimeout+0x30>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11b      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f10:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e00f      	b.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4013      	ands	r3, r2
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d0c5      	beq.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004f78:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fa2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d114      	bne.n	8005012 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ffe:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005010:	e002      	b.n	8005018 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fb10 	bl	8004638 <HAL_UART_TxCpltCallback>
}
 8005018:	bf00      	nop
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fb0c 	bl	800464c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005054:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d109      	bne.n	8005078 <UART_DMAError+0x3c>
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b21      	cmp	r3, #33	; 0x21
 8005068:	d106      	bne.n	8005078 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2200      	movs	r2, #0
 800506e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005072:	6978      	ldr	r0, [r7, #20]
 8005074:	f7ff ff75 	bl	8004f62 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d109      	bne.n	800509a <UART_DMAError+0x5e>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b22      	cmp	r3, #34	; 0x22
 800508a:	d106      	bne.n	800509a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2200      	movs	r2, #0
 8005090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005094:	6978      	ldr	r0, [r7, #20]
 8005096:	f7ff ff79 	bl	8004f8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509e:	f043 0210 	orr.w	r2, r3, #16
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff fada 	bl	8004660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ac:	bf00      	nop
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <ICM_readBytes>:
#include "main.h"
#include "ICM_20948.h"


void ICM_readBytes(uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	6039      	str	r1, [r7, #0]
 80050be:	71fb      	strb	r3, [r7, #7]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80bb      	strh	r3, [r7, #4]
	reg = reg | 0x80;
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80050ce:	2200      	movs	r2, #0
 80050d0:	2110      	movs	r1, #16
 80050d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d6:	f7fc fad1 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 80050da:	1df9      	adds	r1, r7, #7
 80050dc:	2332      	movs	r3, #50	; 0x32
 80050de:	2201      	movs	r2, #1
 80050e0:	4809      	ldr	r0, [pc, #36]	; (8005108 <ICM_readBytes+0x54>)
 80050e2:	f7fe fb27 	bl	8003734 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BUS, pData, Size, 50);
 80050e6:	88ba      	ldrh	r2, [r7, #4]
 80050e8:	2332      	movs	r3, #50	; 0x32
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	4806      	ldr	r0, [pc, #24]	; (8005108 <ICM_readBytes+0x54>)
 80050ee:	f7fe fc87 	bl	8003a00 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80050f2:	2201      	movs	r2, #1
 80050f4:	2110      	movs	r1, #16
 80050f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050fa:	f7fc fabf 	bl	800167c <HAL_GPIO_WritePin>
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200001c0 	.word	0x200001c0

0800510c <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(uint8_t reg, uint8_t* pData) // ***
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	71fb      	strb	r3, [r7, #7]
	reg = reg | 0x80;
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800511e:	b2db      	uxtb	r3, r3
 8005120:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8005122:	2200      	movs	r2, #0
 8005124:	2110      	movs	r1, #16
 8005126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800512a:	f7fc faa7 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 800512e:	1df9      	adds	r1, r7, #7
 8005130:	2332      	movs	r3, #50	; 0x32
 8005132:	2201      	movs	r2, #1
 8005134:	4810      	ldr	r0, [pc, #64]	; (8005178 <ICM_ReadOneByte+0x6c>)
 8005136:	f7fe fafd 	bl	8003734 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 800513a:	bf00      	nop
 800513c:	480e      	ldr	r0, [pc, #56]	; (8005178 <ICM_ReadOneByte+0x6c>)
 800513e:	f7fe ff9a 	bl	8004076 <HAL_SPI_GetState>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d1f9      	bne.n	800513c <ICM_ReadOneByte+0x30>
		;
	HAL_SPI_Receive(SPI_BUS, pData, 1, 50);
 8005148:	2332      	movs	r3, #50	; 0x32
 800514a:	2201      	movs	r2, #1
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	480a      	ldr	r0, [pc, #40]	; (8005178 <ICM_ReadOneByte+0x6c>)
 8005150:	f7fe fc56 	bl	8003a00 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8005154:	bf00      	nop
 8005156:	4808      	ldr	r0, [pc, #32]	; (8005178 <ICM_ReadOneByte+0x6c>)
 8005158:	f7fe ff8d 	bl	8004076 <HAL_SPI_GetState>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d1f9      	bne.n	8005156 <ICM_ReadOneByte+0x4a>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8005162:	2201      	movs	r2, #1
 8005164:	2110      	movs	r1, #16
 8005166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800516a:	f7fc fa87 	bl	800167c <HAL_GPIO_WritePin>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200001c0 	.word	0x200001c0

0800517c <ICM_WriteOneByte>:

void ICM_WriteOneByte(uint8_t reg, uint8_t Data) // ***
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	460a      	mov	r2, r1
 8005186:	71fb      	strb	r3, [r7, #7]
 8005188:	4613      	mov	r3, r2
 800518a:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005192:	b2db      	uxtb	r3, r3
 8005194:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8005196:	2200      	movs	r2, #0
 8005198:	2110      	movs	r1, #16
 800519a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800519e:	f7fc fa6d 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 80051a2:	1df9      	adds	r1, r7, #7
 80051a4:	2332      	movs	r3, #50	; 0x32
 80051a6:	2201      	movs	r2, #1
 80051a8:	4809      	ldr	r0, [pc, #36]	; (80051d0 <ICM_WriteOneByte+0x54>)
 80051aa:	f7fe fac3 	bl	8003734 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BUS, &Data, 1, 50);
 80051ae:	1db9      	adds	r1, r7, #6
 80051b0:	2332      	movs	r3, #50	; 0x32
 80051b2:	2201      	movs	r2, #1
 80051b4:	4806      	ldr	r0, [pc, #24]	; (80051d0 <ICM_WriteOneByte+0x54>)
 80051b6:	f7fe fabd 	bl	8003734 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80051ba:	2201      	movs	r2, #1
 80051bc:	2110      	movs	r1, #16
 80051be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051c2:	f7fc fa5b 	bl	800167c <HAL_GPIO_WritePin>
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	200001c0 	.word	0x200001c0

080051d4 <i2c_Mag_write>:

void i2c_Mag_write(uint8_t reg,uint8_t value)
  {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	460a      	mov	r2, r1
 80051de:	71fb      	strb	r3, [r7, #7]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71bb      	strb	r3, [r7, #6]
  	ICM_WriteOneByte(0x7F, 0x30);
 80051e4:	2130      	movs	r1, #48	; 0x30
 80051e6:	207f      	movs	r0, #127	; 0x7f
 80051e8:	f7ff ffc8 	bl	800517c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80051ec:	2001      	movs	r0, #1
 80051ee:	f7fb ff05 	bl	8000ffc <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C);//mode: write
 80051f2:	210c      	movs	r1, #12
 80051f4:	2003      	movs	r0, #3
 80051f6:	f7ff ffc1 	bl	800517c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f7fb fefe 	bl	8000ffc <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);//set reg addr
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4619      	mov	r1, r3
 8005204:	2004      	movs	r0, #4
 8005206:	f7ff ffb9 	bl	800517c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800520a:	2001      	movs	r0, #1
 800520c:	f7fb fef6 	bl	8000ffc <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,value);//send value
 8005210:	79bb      	ldrb	r3, [r7, #6]
 8005212:	4619      	mov	r1, r3
 8005214:	2006      	movs	r0, #6
 8005216:	f7ff ffb1 	bl	800517c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800521a:	2001      	movs	r0, #1
 800521c:	f7fb feee 	bl	8000ffc <HAL_Delay>
  }
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(void) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b0b4      	sub	sp, #208	; 0xd0
 800522c:	af00      	add	r7, sp, #0
	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 800522e:	23ea      	movs	r3, #234	; 0xea
 8005230:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint8_t test = ICM_WHOAMI();
 8005234:	f000 f96e 	bl	8005514 <ICM_WHOAMI>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if (test == whoami) {
 800523e:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8005242:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005246:	429a      	cmp	r2, r3
 8005248:	d122      	bne.n	8005290 <ICM_PowerOn+0x68>
		ICM_CSHigh();
 800524a:	f000 f93b 	bl	80054c4 <ICM_CSHigh>
		HAL_Delay(10);
 800524e:	200a      	movs	r0, #10
 8005250:	f7fb fed4 	bl	8000ffc <HAL_Delay>
		ICM_SelectBank(USER_BANK_0);
 8005254:	2000      	movs	r0, #0
 8005256:	f000 f91f 	bl	8005498 <ICM_SelectBank>
		HAL_Delay(10);
 800525a:	200a      	movs	r0, #10
 800525c:	f7fb fece 	bl	8000ffc <HAL_Delay>
		ICM_Disable_I2C();
 8005260:	f000 f928 	bl	80054b4 <ICM_Disable_I2C>
		HAL_Delay(10);
 8005264:	200a      	movs	r0, #10
 8005266:	f7fb fec9 	bl	8000ffc <HAL_Delay>
		ICM_SetClock((uint8_t)CLK_BEST_AVAIL);
 800526a:	2001      	movs	r0, #1
 800526c:	f000 f934 	bl	80054d8 <ICM_SetClock>
		HAL_Delay(10);
 8005270:	200a      	movs	r0, #10
 8005272:	f7fb fec3 	bl	8000ffc <HAL_Delay>
		ICM_AccelGyroOff();
 8005276:	f000 f93d 	bl	80054f4 <ICM_AccelGyroOff>
		HAL_Delay(20);
 800527a:	2014      	movs	r0, #20
 800527c:	f7fb febe 	bl	8000ffc <HAL_Delay>
		ICM_AccelGyroOn();
 8005280:	f000 f940 	bl	8005504 <ICM_AccelGyroOn>
		HAL_Delay(10);
 8005284:	200a      	movs	r0, #10
 8005286:	f7fb feb9 	bl	8000ffc <HAL_Delay>
		ICM_Initialize();
 800528a:	f000 f81f 	bl	80052cc <ICM_Initialize>
	} else {
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		HAL_Delay(100);
	}
}
 800528e:	e014      	b.n	80052ba <ICM_PowerOn+0x92>
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
 8005290:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8005294:	1d3b      	adds	r3, r7, #4
 8005296:	490b      	ldr	r1, [pc, #44]	; (80052c4 <ICM_PowerOn+0x9c>)
 8005298:	4618      	mov	r0, r3
 800529a:	f002 fa83 	bl	80077a4 <siprintf>
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
 800529e:	1d3b      	adds	r3, r7, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fa ff95 	bl	80001d0 <strlen>
 80052a6:	4603      	mov	r3, r0
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4806      	ldr	r0, [pc, #24]	; (80052c8 <ICM_PowerOn+0xa0>)
 80052b0:	f7ff f946 	bl	8004540 <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 80052b4:	2064      	movs	r0, #100	; 0x64
 80052b6:	f7fb fea1 	bl	8000ffc <HAL_Delay>
}
 80052ba:	bf00      	nop
 80052bc:	37d0      	adds	r7, #208	; 0xd0
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	08007fb4 	.word	0x08007fb4
 80052c8:	20000224 	.word	0x20000224

080052cc <ICM_Initialize>:
uint16_t ICM_Initialize(void) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
		ICM_SelectBank(USER_BANK_2);
 80052d0:	2020      	movs	r0, #32
 80052d2:	f000 f8e1 	bl	8005498 <ICM_SelectBank>
		HAL_Delay(20);
 80052d6:	2014      	movs	r0, #20
 80052d8:	f7fb fe90 	bl	8000ffc <HAL_Delay>
		ICM_SetGyroRateLPF(GYRO_RATE_500, GYRO_LPF_17HZ);
 80052dc:	2129      	movs	r1, #41	; 0x29
 80052de:	2001      	movs	r0, #1
 80052e0:	f000 f927 	bl	8005532 <ICM_SetGyroRateLPF>
		//ICM_SetGyroRateLPF(GYRO_RATE_500, 0x00);
		HAL_Delay(10);
 80052e4:	200a      	movs	r0, #10
 80052e6:	f7fb fe89 	bl	8000ffc <HAL_Delay>


		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A);
 80052ea:	210a      	movs	r1, #10
 80052ec:	2000      	movs	r0, #0
 80052ee:	f7ff ff45 	bl	800517c <ICM_WriteOneByte>
		HAL_Delay(10);
 80052f2:	200a      	movs	r0, #10
 80052f4:	f7fb fe82 	bl	8000ffc <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(0x14, (0x04 | 0x11));
 80052f8:	2115      	movs	r1, #21
 80052fa:	2014      	movs	r0, #20
 80052fc:	f7ff ff3e 	bl	800517c <ICM_WriteOneByte>
		//ICM_WriteOneByte(0x14, 0x04);

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00);
 8005300:	2100      	movs	r1, #0
 8005302:	2010      	movs	r0, #16
 8005304:	f7ff ff3a 	bl	800517c <ICM_WriteOneByte>
		HAL_Delay(10);
 8005308:	200a      	movs	r0, #10
 800530a:	f7fb fe77 	bl	8000ffc <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A);
 800530e:	210a      	movs	r1, #10
 8005310:	2011      	movs	r0, #17
 8005312:	f7ff ff33 	bl	800517c <ICM_WriteOneByte>
		HAL_Delay(10);
 8005316:	200a      	movs	r0, #10
 8005318:	f7fb fe70 	bl	8000ffc <HAL_Delay>

		ICM_SelectBank(USER_BANK_2);
 800531c:	2020      	movs	r0, #32
 800531e:	f000 f8bb 	bl	8005498 <ICM_SelectBank>
		HAL_Delay(20);
 8005322:	2014      	movs	r0, #20
 8005324:	f7fb fe6a 	bl	8000ffc <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00); // Select user bank 0
 8005328:	2100      	movs	r1, #0
 800532a:	207f      	movs	r0, #127	; 0x7f
 800532c:	f7ff ff26 	bl	800517c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8005330:	2130      	movs	r1, #48	; 0x30
 8005332:	200f      	movs	r0, #15
 8005334:	f7ff ff22 	bl	800517c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20); // I2C_MST_EN
 8005338:	2120      	movs	r1, #32
 800533a:	2003      	movs	r0, #3
 800533c:	f7ff ff1e 	bl	800517c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30); // Select user bank 3
 8005340:	2130      	movs	r1, #48	; 0x30
 8005342:	207f      	movs	r0, #127	; 0x7f
 8005344:	f7ff ff1a 	bl	800517c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8005348:	214d      	movs	r1, #77	; 0x4d
 800534a:	2001      	movs	r0, #1
 800534c:	f7ff ff16 	bl	800517c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8005350:	2101      	movs	r1, #1
 8005352:	2002      	movs	r0, #2
 8005354:	f7ff ff12 	bl	800517c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8005358:	2181      	movs	r1, #129	; 0x81
 800535a:	2005      	movs	r0, #5
 800535c:	f7ff ff0e 	bl	800517c <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01); // Reset AK8963
 8005360:	2101      	movs	r1, #1
 8005362:	2032      	movs	r0, #50	; 0x32
 8005364:	f7ff ff36 	bl	80051d4 <i2c_Mag_write>
		HAL_Delay(1000);
 8005368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800536c:	f7fb fe46 	bl	8000ffc <HAL_Delay>
		i2c_Mag_write(0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8005370:	2102      	movs	r1, #2
 8005372:	2031      	movs	r0, #49	; 0x31
 8005374:	f7ff ff2e 	bl	80051d4 <i2c_Mag_write>

		return 1337;
 8005378:	f240 5339 	movw	r3, #1337	; 0x539
	}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}

08005380 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
	uint8_t raw_data[12];
	ICM_readBytes(0x2D, raw_data, 12);
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	220c      	movs	r2, #12
 800538a:	4619      	mov	r1, r3
 800538c:	202d      	movs	r0, #45	; 0x2d
 800538e:	f7ff fe91 	bl	80050b4 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8005392:	793b      	ldrb	r3, [r7, #4]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	b21a      	sxth	r2, r3
 8005398:	797b      	ldrb	r3, [r7, #5]
 800539a:	b21b      	sxth	r3, r3
 800539c:	4313      	orrs	r3, r2
 800539e:	b21a      	sxth	r2, r3
 80053a0:	4b3a      	ldr	r3, [pc, #232]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 80053a2:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 80053a4:	79bb      	ldrb	r3, [r7, #6]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	b21a      	sxth	r2, r3
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	4313      	orrs	r3, r2
 80053b0:	b21a      	sxth	r2, r3
 80053b2:	4b36      	ldr	r3, [pc, #216]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 80053b4:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 80053b6:	7a3b      	ldrb	r3, [r7, #8]
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	b21a      	sxth	r2, r3
 80053bc:	7a7b      	ldrb	r3, [r7, #9]
 80053be:	b21b      	sxth	r3, r3
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b21a      	sxth	r2, r3
 80053c4:	4b31      	ldr	r3, [pc, #196]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 80053c6:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 80053c8:	7abb      	ldrb	r3, [r7, #10]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	b21a      	sxth	r2, r3
 80053ce:	7afb      	ldrb	r3, [r7, #11]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b21a      	sxth	r2, r3
 80053d6:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 80053d8:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 80053da:	7b3b      	ldrb	r3, [r7, #12]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	b21a      	sxth	r2, r3
 80053e0:	7b7b      	ldrb	r3, [r7, #13]
 80053e2:	b21b      	sxth	r3, r3
 80053e4:	4313      	orrs	r3, r2
 80053e6:	b21a      	sxth	r2, r3
 80053e8:	4b29      	ldr	r3, [pc, #164]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 80053ea:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 80053ec:	7bbb      	ldrb	r3, [r7, #14]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	b21a      	sxth	r2, r3
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b21a      	sxth	r2, r3
 80053fa:	4b25      	ldr	r3, [pc, #148]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 80053fc:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 80053fe:	4b23      	ldr	r3, [pc, #140]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 8005400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005404:	2b00      	cmp	r3, #0
 8005406:	da00      	bge.n	800540a <ICM_ReadAccelGyro+0x8a>
 8005408:	3307      	adds	r3, #7
 800540a:	10db      	asrs	r3, r3, #3
 800540c:	b21a      	sxth	r2, r3
 800540e:	4b1f      	ldr	r3, [pc, #124]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 8005410:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 8005414:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	da00      	bge.n	800541e <ICM_ReadAccelGyro+0x9e>
 800541c:	3307      	adds	r3, #7
 800541e:	10db      	asrs	r3, r3, #3
 8005420:	b21a      	sxth	r2, r3
 8005422:	4b1a      	ldr	r3, [pc, #104]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 8005424:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 8005426:	4b19      	ldr	r3, [pc, #100]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 8005428:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	da00      	bge.n	8005432 <ICM_ReadAccelGyro+0xb2>
 8005430:	3307      	adds	r3, #7
 8005432:	10db      	asrs	r3, r3, #3
 8005434:	b21a      	sxth	r2, r3
 8005436:	4b15      	ldr	r3, [pc, #84]	; (800548c <ICM_ReadAccelGyro+0x10c>)
 8005438:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 800543a:	4b15      	ldr	r3, [pc, #84]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 800543c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005440:	4a14      	ldr	r2, [pc, #80]	; (8005494 <ICM_ReadAccelGyro+0x114>)
 8005442:	fb82 1203 	smull	r1, r2, r2, r3
 8005446:	1112      	asrs	r2, r2, #4
 8005448:	17db      	asrs	r3, r3, #31
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	b21a      	sxth	r2, r3
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 8005450:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 8005452:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 8005454:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005458:	4a0e      	ldr	r2, [pc, #56]	; (8005494 <ICM_ReadAccelGyro+0x114>)
 800545a:	fb82 1203 	smull	r1, r2, r2, r3
 800545e:	1112      	asrs	r2, r2, #4
 8005460:	17db      	asrs	r3, r3, #31
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	b21a      	sxth	r2, r3
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 8005468:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 800546a:	4b09      	ldr	r3, [pc, #36]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 800546c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005470:	4a08      	ldr	r2, [pc, #32]	; (8005494 <ICM_ReadAccelGyro+0x114>)
 8005472:	fb82 1203 	smull	r1, r2, r2, r3
 8005476:	1112      	asrs	r2, r2, #4
 8005478:	17db      	asrs	r3, r3, #31
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	b21a      	sxth	r2, r3
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <ICM_ReadAccelGyro+0x110>)
 8005480:	809a      	strh	r2, [r3, #4]
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200001b0 	.word	0x200001b0
 8005490:	200001b8 	.word	0x200001b8
 8005494:	10624dd3 	.word	0x10624dd3

08005498 <ICM_SelectBank>:
void ICM_SelectBank(uint8_t bank) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4619      	mov	r1, r3
 80054a6:	207f      	movs	r0, #127	; 0x7f
 80054a8:	f7ff fe68 	bl	800517c <ICM_WriteOneByte>
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <ICM_Disable_I2C>:
void ICM_Disable_I2C(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x03, 0x78);
 80054b8:	2178      	movs	r1, #120	; 0x78
 80054ba:	2003      	movs	r0, #3
 80054bc:	f7ff fe5e 	bl	800517c <ICM_WriteOneByte>
}
 80054c0:	bf00      	nop
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 80054c8:	2201      	movs	r2, #1
 80054ca:	2110      	movs	r1, #16
 80054cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054d0:	f7fc f8d4 	bl	800167c <HAL_GPIO_WritePin>
}
 80054d4:	bf00      	nop
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(uint8_t clk) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk);
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	4619      	mov	r1, r3
 80054e6:	2006      	movs	r0, #6
 80054e8:	f7ff fe48 	bl	800517c <ICM_WriteOneByte>
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07));
 80054f8:	213f      	movs	r1, #63	; 0x3f
 80054fa:	2007      	movs	r0, #7
 80054fc:	f7ff fe3e 	bl	800517c <ICM_WriteOneByte>
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}

08005504 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x07, (0x00 | 0x00));
 8005508:	2100      	movs	r1, #0
 800550a:	2007      	movs	r0, #7
 800550c:	f7ff fe36 	bl	800517c <ICM_WriteOneByte>
}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}

08005514 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
	uint8_t spiData = 0x01;
 800551a:	2301      	movs	r3, #1
 800551c:	71fb      	strb	r3, [r7, #7]
	ICM_ReadOneByte(0x00, &spiData);
 800551e:	1dfb      	adds	r3, r7, #7
 8005520:	4619      	mov	r1, r3
 8005522:	2000      	movs	r0, #0
 8005524:	f7ff fdf2 	bl	800510c <ICM_ReadOneByte>
	return spiData;
 8005528:	79fb      	ldrb	r3, [r7, #7]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf) {
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	4603      	mov	r3, r0
 800553a:	460a      	mov	r2, r1
 800553c:	71fb      	strb	r3, [r7, #7]
 800553e:	4613      	mov	r3, r2
 8005540:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf));
 8005542:	79fa      	ldrb	r2, [r7, #7]
 8005544:	79bb      	ldrb	r3, [r7, #6]
 8005546:	4313      	orrs	r3, r2
 8005548:	b2db      	uxtb	r3, r3
 800554a:	4619      	mov	r1, r3
 800554c:	2001      	movs	r0, #1
 800554e:	f7ff fe15 	bl	800517c <ICM_WriteOneByte>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <MAX86150_setup>:

/**********************************************************************************
 * FUNCTION DEFINITIONS
 **********************************************************************************/

void MAX86150_setup() {
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
	// =====================================

	// Copying this setup code from github
	//sprintf(uartBuffer, "Before: %d\r\n", readRegister8(MAX86150_Address, MAX86150_SystemControl));
	//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 1000);
	writeRegister8(MAX86150_Address, MAX86150_SystemControl,0x01);
 8005560:	230d      	movs	r3, #13
 8005562:	2201      	movs	r2, #1
 8005564:	4619      	mov	r1, r3
 8005566:	20bc      	movs	r0, #188	; 0xbc
 8005568:	f000 f89a 	bl	80056a0 <writeRegister8>
	HAL_Delay(100);
 800556c:	2064      	movs	r0, #100	; 0x64
 800556e:	f7fb fd45 	bl	8000ffc <HAL_Delay>
	//sprintf(uartBuffer, "After: %d\r\n", readRegister8(MAX86150_Address, MAX86150_SystemControl));
	//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 1000);
	writeRegister8(MAX86150_Address, MAX86150_FIFOConfig,0x7F);
 8005572:	2308      	movs	r3, #8
 8005574:	227f      	movs	r2, #127	; 0x7f
 8005576:	4619      	mov	r1, r3
 8005578:	20bc      	movs	r0, #188	; 0xbc
 800557a:	f000 f891 	bl	80056a0 <writeRegister8>
	// Default to average 4 samples
//	setFIFOAverage(MAX86150_SMPAVG_4);
	setFIFOAverage(0x5F);
 800557e:	205f      	movs	r0, #95	; 0x5f
 8005580:	f000 f8ac 	bl	80056dc <setFIFOAverage>


	uint16_t FIFOCode = 0x00;
 8005584:	2300      	movs	r3, #0
 8005586:	80fb      	strh	r3, [r7, #6]

	FIFOCode = FIFOCode<<4 | 0x0009;// : FIFOCode;  //insert ECG front of ETI in FIFO
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	b21b      	sxth	r3, r3
 800558e:	f043 0309 	orr.w	r3, r3, #9
 8005592:	b21b      	sxth	r3, r3
 8005594:	80fb      	strh	r3, [r7, #6]
	FIFOCode = FIFOCode<<8 | 0x0021;//) : FIFOCode; //insert Red(2) and IR (1) in front of ECG in FIFO
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	021b      	lsls	r3, r3, #8
 800559a:	b21b      	sxth	r3, r3
 800559c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80055a0:	b21b      	sxth	r3, r3
 80055a2:	80fb      	strh	r3, [r7, #6]

	writeRegister8(MAX86150_Address, MAX86150_FIFODataControl1,(0b00100001));
 80055a4:	2309      	movs	r3, #9
 80055a6:	2221      	movs	r2, #33	; 0x21
 80055a8:	4619      	mov	r1, r3
 80055aa:	20bc      	movs	r0, #188	; 0xbc
 80055ac:	f000 f878 	bl	80056a0 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_FIFODataControl2,(0b00001001));
 80055b0:	230a      	movs	r3, #10
 80055b2:	2209      	movs	r2, #9
 80055b4:	4619      	mov	r1, r3
 80055b6:	20bc      	movs	r0, #188	; 0xbc
 80055b8:	f000 f872 	bl	80056a0 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_PPGConfig1,(0b11010001));
 80055bc:	230e      	movs	r3, #14
 80055be:	22d1      	movs	r2, #209	; 0xd1
 80055c0:	4619      	mov	r1, r3
 80055c2:	20bc      	movs	r0, #188	; 0xbc
 80055c4:	f000 f86c 	bl	80056a0 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_PPGConfig2,0x06);
 80055c8:	230f      	movs	r3, #15
 80055ca:	2206      	movs	r2, #6
 80055cc:	4619      	mov	r1, r3
 80055ce:	20bc      	movs	r0, #188	; 0xbc
 80055d0:	f000 f866 	bl	80056a0 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_LEDRange,0x00);
 80055d4:	2314      	movs	r3, #20
 80055d6:	2200      	movs	r2, #0
 80055d8:	4619      	mov	r1, r3
 80055da:	20bc      	movs	r0, #188	; 0xbc
 80055dc:	f000 f860 	bl	80056a0 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_SystemControl,0x04); // start FIFO
 80055e0:	230d      	movs	r3, #13
 80055e2:	2204      	movs	r2, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	20bc      	movs	r0, #188	; 0xbc
 80055e8:	f000 f85a 	bl	80056a0 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_ECGConfig1,0b00000011);
 80055ec:	233c      	movs	r3, #60	; 0x3c
 80055ee:	2203      	movs	r2, #3
 80055f0:	4619      	mov	r1, r3
 80055f2:	20bc      	movs	r0, #188	; 0xbc
 80055f4:	f000 f854 	bl	80056a0 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_ECGConfig2,0b00001101);
 80055f8:	233e      	movs	r3, #62	; 0x3e
 80055fa:	220d      	movs	r2, #13
 80055fc:	4619      	mov	r1, r3
 80055fe:	20bc      	movs	r0, #188	; 0xbc
 8005600:	f000 f84e 	bl	80056a0 <writeRegister8>

	setPulseAmplitudeRed(0xFF);
 8005604:	20ff      	movs	r0, #255	; 0xff
 8005606:	f000 f878 	bl	80056fa <setPulseAmplitudeRed>
	setPulseAmplitudeIR(0xFF);
 800560a:	20ff      	movs	r0, #255	; 0xff
 800560c:	f000 f884 	bl	8005718 <setPulseAmplitudeIR>

	clearFIFO();
 8005610:	f000 f891 	bl	8005736 <clearFIFO>
//	setPulseAmplitudeRed(0x3F);
//	setPulseAmplitudeIR(0x3F);
	// 0x7F = 25.4 mA
//	setPulseAmplitudeProximity(0x7F);

}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <bitMask>:

// Given a register, read from it, mask the bits, change it
void bitMask(uint8_t reg, uint8_t mask, uint8_t value) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	71fb      	strb	r3, [r7, #7]
 8005626:	460b      	mov	r3, r1
 8005628:	71bb      	strb	r3, [r7, #6]
 800562a:	4613      	mov	r3, r2
 800562c:	717b      	strb	r3, [r7, #5]

	// Read the contents of the register
	uint8_t originalContents = readRegister8(MAX86150_Address, reg);
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	4619      	mov	r1, r3
 8005632:	20bc      	movs	r0, #188	; 0xbc
 8005634:	f000 f814 	bl	8005660 <readRegister8>
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]

	// Zero-out portions of the register I'm interested in
	originalContents = (reg & mask);
 800563c:	79fa      	ldrb	r2, [r7, #7]
 800563e:	79bb      	ldrb	r3, [r7, #6]
 8005640:	4013      	ands	r3, r2
 8005642:	73fb      	strb	r3, [r7, #15]

	// Change contents
	writeRegister8(MAX86150_Address, reg, (originalContents | value));
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	797b      	ldrb	r3, [r7, #5]
 8005648:	4313      	orrs	r3, r2
 800564a:	b2da      	uxtb	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	4619      	mov	r1, r3
 8005650:	20bc      	movs	r0, #188	; 0xbc
 8005652:	f000 f825 	bl	80056a0 <writeRegister8>
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <readRegister8>:
}



// I2C Communication
uint8_t readRegister8(uint8_t address, uint8_t reg) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af02      	add	r7, sp, #8
 8005666:	4603      	mov	r3, r0
 8005668:	460a      	mov	r2, r1
 800566a:	71fb      	strb	r3, [r7, #7]
 800566c:	4613      	mov	r3, r2
 800566e:	71bb      	strb	r3, [r7, #6]

//	uint8_t data[2];
	uint8_t registerContents;
//	data[0] = reg;

	HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, &reg, 1, 100);
 8005670:	1dba      	adds	r2, r7, #6
 8005672:	2364      	movs	r3, #100	; 0x64
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	2301      	movs	r3, #1
 8005678:	21bc      	movs	r1, #188	; 0xbc
 800567a:	4808      	ldr	r0, [pc, #32]	; (800569c <readRegister8+0x3c>)
 800567c:	f7fc f8a6 	bl	80017cc <HAL_I2C_Master_Transmit>


	// Store the data from the I2C Communication in data[1]
	HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &registerContents, 1, 100);
 8005680:	f107 020f 	add.w	r2, r7, #15
 8005684:	2364      	movs	r3, #100	; 0x64
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2301      	movs	r3, #1
 800568a:	21bc      	movs	r1, #188	; 0xbc
 800568c:	4803      	ldr	r0, [pc, #12]	; (800569c <readRegister8+0x3c>)
 800568e:	f7fc f991 	bl	80019b4 <HAL_I2C_Master_Receive>

	return registerContents;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	200002ac 	.word	0x200002ac

080056a0 <writeRegister8>:

// The 7-bit address of device, the register you want to write to, the value you want to write
void writeRegister8(uint8_t SevenBitAddress, uint8_t reg, uint8_t value) {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	4603      	mov	r3, r0
 80056a8:	71fb      	strb	r3, [r7, #7]
 80056aa:	460b      	mov	r3, r1
 80056ac:	71bb      	strb	r3, [r7, #6]
 80056ae:	4613      	mov	r3, r2
 80056b0:	717b      	strb	r3, [r7, #5]

	uint8_t data[2];

	data[0] = reg;
 80056b2:	79bb      	ldrb	r3, [r7, #6]
 80056b4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80056b6:	797b      	ldrb	r3, [r7, #5]
 80056b8:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, data, 2, 100);
 80056ba:	f107 020c 	add.w	r2, r7, #12
 80056be:	2364      	movs	r3, #100	; 0x64
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	2302      	movs	r3, #2
 80056c4:	21bc      	movs	r1, #188	; 0xbc
 80056c6:	4804      	ldr	r0, [pc, #16]	; (80056d8 <writeRegister8+0x38>)
 80056c8:	f7fc f880 	bl	80017cc <HAL_I2C_Master_Transmit>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]

	return;
 80056d0:	bf00      	nop

}
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200002ac 	.word	0x200002ac

080056dc <setFIFOAverage>:

void setFIFOAverage(uint8_t numSamp) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]

	bitMask(MAX86150_FIFOConfig, MAX86150_SampleRate_MASK, numSamp);
 80056e6:	2008      	movs	r0, #8
 80056e8:	21c3      	movs	r1, #195	; 0xc3
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f7ff ff95 	bl	800561c <bitMask>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <setPulseAmplitudeRed>:

	// LEDPulseWidth_50, _100, _200, _400
	bitMask(MAX86150_PPGConfig1,MAX86150_LEDPulseWidth_MASK, pulseWidth);
}

void setPulseAmplitudeRed(uint8_t amplitude) {
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	4603      	mov	r3, r0
 8005702:	71fb      	strb	r3, [r7, #7]

	writeRegister8(MAX86150_Address, MAX86150_LED2_RED, amplitude);
 8005704:	2112      	movs	r1, #18
 8005706:	79fb      	ldrb	r3, [r7, #7]
 8005708:	461a      	mov	r2, r3
 800570a:	20bc      	movs	r0, #188	; 0xbc
 800570c:	f7ff ffc8 	bl	80056a0 <writeRegister8>
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <setPulseAmplitudeIR>:


void setPulseAmplitudeIR(uint8_t amplitude) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	71fb      	strb	r3, [r7, #7]

	writeRegister8(MAX86150_Address, MAX86150_LED1_IR, amplitude);
 8005722:	2111      	movs	r1, #17
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	461a      	mov	r2, r3
 8005728:	20bc      	movs	r0, #188	; 0xbc
 800572a:	f7ff ffb9 	bl	80056a0 <writeRegister8>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <clearFIFO>:
void disablePROX_INT(void) {

	bitMask(MAX86150_INT_EN1, MAX86150_INT_PROX_MASK, MAX86150_INT_PROX_DISABLE);
}

void clearFIFO(void) {
 8005736:	b580      	push	{r7, lr}
 8005738:	af00      	add	r7, sp, #0

	writeRegister8(MAX86150_Address, MAX86150_FIFOWritePointer, 0);
 800573a:	2304      	movs	r3, #4
 800573c:	2200      	movs	r2, #0
 800573e:	4619      	mov	r1, r3
 8005740:	20bc      	movs	r0, #188	; 0xbc
 8005742:	f7ff ffad 	bl	80056a0 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_OverflowCounter, 0);
 8005746:	2305      	movs	r3, #5
 8005748:	2200      	movs	r2, #0
 800574a:	4619      	mov	r1, r3
 800574c:	20bc      	movs	r0, #188	; 0xbc
 800574e:	f7ff ffa7 	bl	80056a0 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_FIFOReadPointer, 0);
 8005752:	2306      	movs	r3, #6
 8005754:	2200      	movs	r2, #0
 8005756:	4619      	mov	r1, r3
 8005758:	20bc      	movs	r0, #188	; 0xbc
 800575a:	f7ff ffa1 	bl	80056a0 <writeRegister8>
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8005770:	4b0a      	ldr	r3, [pc, #40]	; (800579c <NRF24_DelayMicroSeconds+0x38>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0a      	ldr	r2, [pc, #40]	; (80057a0 <NRF24_DelayMicroSeconds+0x3c>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	0c9a      	lsrs	r2, r3, #18
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8005784:	bf00      	nop
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1e5a      	subs	r2, r3, #1
 800578a:	60fa      	str	r2, [r7, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1fa      	bne.n	8005786 <NRF24_DelayMicroSeconds+0x22>
}
 8005790:	bf00      	nop
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	20000020 	.word	0x20000020
 80057a0:	165e9f81 	.word	0x165e9f81

080057a4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <NRF24_csn+0x20>
 80057b2:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <NRF24_csn+0x38>)
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <NRF24_csn+0x3c>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	4619      	mov	r1, r3
 80057be:	f7fb ff5d 	bl	800167c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80057c2:	e007      	b.n	80057d4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <NRF24_csn+0x38>)
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <NRF24_csn+0x3c>)
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	2200      	movs	r2, #0
 80057ce:	4619      	mov	r1, r3
 80057d0:	f7fb ff54 	bl	800167c <HAL_GPIO_WritePin>
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	200000ac 	.word	0x200000ac
 80057e0:	200000b0 	.word	0x200000b0

080057e4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <NRF24_ce+0x20>
 80057f2:	4b0a      	ldr	r3, [pc, #40]	; (800581c <NRF24_ce+0x38>)
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <NRF24_ce+0x3c>)
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	4619      	mov	r1, r3
 80057fe:	f7fb ff3d 	bl	800167c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8005802:	e007      	b.n	8005814 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <NRF24_ce+0x38>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <NRF24_ce+0x3c>)
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	2200      	movs	r2, #0
 800580e:	4619      	mov	r1, r3
 8005810:	f7fb ff34 	bl	800167c <HAL_GPIO_WritePin>
}
 8005814:	bf00      	nop
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200000ac 	.word	0x200000ac
 8005820:	200000b2 	.word	0x200000b2

08005824 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800582e:	2000      	movs	r0, #0
 8005830:	f7ff ffb8 	bl	80057a4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	b2db      	uxtb	r3, r3
 800583c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800583e:	f107 010c 	add.w	r1, r7, #12
 8005842:	2364      	movs	r3, #100	; 0x64
 8005844:	2201      	movs	r2, #1
 8005846:	480a      	ldr	r0, [pc, #40]	; (8005870 <NRF24_read_register+0x4c>)
 8005848:	f7fd ff74 	bl	8003734 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800584c:	f107 030c 	add.w	r3, r7, #12
 8005850:	1c59      	adds	r1, r3, #1
 8005852:	2364      	movs	r3, #100	; 0x64
 8005854:	2201      	movs	r2, #1
 8005856:	4806      	ldr	r0, [pc, #24]	; (8005870 <NRF24_read_register+0x4c>)
 8005858:	f7fe f8d2 	bl	8003a00 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800585c:	7b7b      	ldrb	r3, [r7, #13]
 800585e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8005860:	2001      	movs	r0, #1
 8005862:	f7ff ff9f 	bl	80057a4 <NRF24_csn>
	return retData;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	200000b4 	.word	0x200000b4

08005874 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	6039      	str	r1, [r7, #0]
 800587e:	71fb      	strb	r3, [r7, #7]
 8005880:	4613      	mov	r3, r2
 8005882:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005884:	2000      	movs	r0, #0
 8005886:	f7ff ff8d 	bl	80057a4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	f003 031f 	and.w	r3, r3, #31
 8005890:	b2db      	uxtb	r3, r3
 8005892:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8005894:	f107 010c 	add.w	r1, r7, #12
 8005898:	2364      	movs	r3, #100	; 0x64
 800589a:	2201      	movs	r2, #1
 800589c:	4808      	ldr	r0, [pc, #32]	; (80058c0 <NRF24_read_registerN+0x4c>)
 800589e:	f7fd ff49 	bl	8003734 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80058a2:	79bb      	ldrb	r3, [r7, #6]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	2364      	movs	r3, #100	; 0x64
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	4805      	ldr	r0, [pc, #20]	; (80058c0 <NRF24_read_registerN+0x4c>)
 80058ac:	f7fe f8a8 	bl	8003a00 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7ff ff77 	bl	80057a4 <NRF24_csn>
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200000b4 	.word	0x200000b4

080058c4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	460a      	mov	r2, r1
 80058ce:	71fb      	strb	r3, [r7, #7]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7ff ff65 	bl	80057a4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	f043 0320 	orr.w	r3, r3, #32
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80058e4:	79bb      	ldrb	r3, [r7, #6]
 80058e6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80058e8:	f107 010c 	add.w	r1, r7, #12
 80058ec:	2364      	movs	r3, #100	; 0x64
 80058ee:	2202      	movs	r2, #2
 80058f0:	4804      	ldr	r0, [pc, #16]	; (8005904 <NRF24_write_register+0x40>)
 80058f2:	f7fd ff1f 	bl	8003734 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80058f6:	2001      	movs	r0, #1
 80058f8:	f7ff ff54 	bl	80057a4 <NRF24_csn>
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	200000b4 	.word	0x200000b4

08005908 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	71fb      	strb	r3, [r7, #7]
 8005914:	4613      	mov	r3, r2
 8005916:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005918:	2000      	movs	r0, #0
 800591a:	f7ff ff43 	bl	80057a4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	f043 0320 	orr.w	r3, r3, #32
 8005924:	b2db      	uxtb	r3, r3
 8005926:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8005928:	f107 010c 	add.w	r1, r7, #12
 800592c:	2364      	movs	r3, #100	; 0x64
 800592e:	2201      	movs	r2, #1
 8005930:	4808      	ldr	r0, [pc, #32]	; (8005954 <NRF24_write_registerN+0x4c>)
 8005932:	f7fd feff 	bl	8003734 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8005936:	79bb      	ldrb	r3, [r7, #6]
 8005938:	b29a      	uxth	r2, r3
 800593a:	2364      	movs	r3, #100	; 0x64
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	4805      	ldr	r0, [pc, #20]	; (8005954 <NRF24_write_registerN+0x4c>)
 8005940:	f7fd fef8 	bl	8003734 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8005944:	2001      	movs	r0, #1
 8005946:	f7ff ff2d 	bl	80057a4 <NRF24_csn>
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	200000b4 	.word	0x200000b4

08005958 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8005964:	2000      	movs	r0, #0
 8005966:	f7ff ff1d 	bl	80057a4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800596a:	23a0      	movs	r3, #160	; 0xa0
 800596c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800596e:	f107 010f 	add.w	r1, r7, #15
 8005972:	2364      	movs	r3, #100	; 0x64
 8005974:	2201      	movs	r2, #1
 8005976:	4808      	ldr	r0, [pc, #32]	; (8005998 <NRF24_write_payload+0x40>)
 8005978:	f7fd fedc 	bl	8003734 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	b29a      	uxth	r2, r3
 8005980:	2364      	movs	r3, #100	; 0x64
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4804      	ldr	r0, [pc, #16]	; (8005998 <NRF24_write_payload+0x40>)
 8005986:	f7fd fed5 	bl	8003734 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800598a:	2001      	movs	r0, #1
 800598c:	f7ff ff0a 	bl	80057a4 <NRF24_csn>
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	200000b4 	.word	0x200000b4

0800599c <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80059a0:	21ff      	movs	r1, #255	; 0xff
 80059a2:	20e1      	movs	r0, #225	; 0xe1
 80059a4:	f7ff ff8e 	bl	80058c4 <NRF24_write_register>
}
 80059a8:	bf00      	nop
 80059aa:	bd80      	pop	{r7, pc}

080059ac <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80059b0:	21ff      	movs	r1, #255	; 0xff
 80059b2:	20e2      	movs	r0, #226	; 0xe2
 80059b4:	f7ff ff86 	bl	80058c4 <NRF24_write_register>
}
 80059b8:	bf00      	nop
 80059ba:	bd80      	pop	{r7, pc}

080059bc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80059c2:	2007      	movs	r0, #7
 80059c4:	f7ff ff2e 	bl	8005824 <NRF24_read_register>
 80059c8:	4603      	mov	r3, r0
 80059ca:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80059cc:	79fb      	ldrb	r3, [r7, #7]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80059d8:	b082      	sub	sp, #8
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	460b      	mov	r3, r1
 80059e6:	807b      	strh	r3, [r7, #2]
 80059e8:	4613      	mov	r3, r2
 80059ea:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80059ec:	4b66      	ldr	r3, [pc, #408]	; (8005b88 <NRF24_begin+0x1b0>)
 80059ee:	4618      	mov	r0, r3
 80059f0:	f107 031c 	add.w	r3, r7, #28
 80059f4:	2264      	movs	r2, #100	; 0x64
 80059f6:	4619      	mov	r1, r3
 80059f8:	f001 fec0 	bl	800777c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80059fc:	4a63      	ldr	r2, [pc, #396]	; (8005b8c <NRF24_begin+0x1b4>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8005a02:	4a63      	ldr	r2, [pc, #396]	; (8005b90 <NRF24_begin+0x1b8>)
 8005a04:	887b      	ldrh	r3, [r7, #2]
 8005a06:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8005a08:	4a62      	ldr	r2, [pc, #392]	; (8005b94 <NRF24_begin+0x1bc>)
 8005a0a:	883b      	ldrh	r3, [r7, #0]
 8005a0c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7ff fec8 	bl	80057a4 <NRF24_csn>
	NRF24_ce(0);
 8005a14:	2000      	movs	r0, #0
 8005a16:	f7ff fee5 	bl	80057e4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8005a1a:	2005      	movs	r0, #5
 8005a1c:	f7fb faee 	bl	8000ffc <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8005a20:	2108      	movs	r1, #8
 8005a22:	2000      	movs	r0, #0
 8005a24:	f7ff ff4e 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8005a28:	213f      	movs	r1, #63	; 0x3f
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f7ff ff4a 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8005a30:	2103      	movs	r1, #3
 8005a32:	2002      	movs	r0, #2
 8005a34:	f7ff ff46 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8005a38:	2103      	movs	r1, #3
 8005a3a:	2003      	movs	r0, #3
 8005a3c:	f7ff ff42 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8005a40:	2103      	movs	r1, #3
 8005a42:	2004      	movs	r0, #4
 8005a44:	f7ff ff3e 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8005a48:	2102      	movs	r1, #2
 8005a4a:	2005      	movs	r0, #5
 8005a4c:	f7ff ff3a 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8005a50:	210f      	movs	r1, #15
 8005a52:	2006      	movs	r0, #6
 8005a54:	f7ff ff36 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8005a58:	210e      	movs	r1, #14
 8005a5a:	2007      	movs	r0, #7
 8005a5c:	f7ff ff32 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8005a60:	2100      	movs	r1, #0
 8005a62:	2008      	movs	r0, #8
 8005a64:	f7ff ff2e 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	2009      	movs	r0, #9
 8005a6c:	f7ff ff2a 	bl	80058c4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8005a70:	23e7      	movs	r3, #231	; 0xe7
 8005a72:	733b      	strb	r3, [r7, #12]
 8005a74:	23e7      	movs	r3, #231	; 0xe7
 8005a76:	72fb      	strb	r3, [r7, #11]
 8005a78:	23e7      	movs	r3, #231	; 0xe7
 8005a7a:	72bb      	strb	r3, [r7, #10]
 8005a7c:	23e7      	movs	r3, #231	; 0xe7
 8005a7e:	727b      	strb	r3, [r7, #9]
 8005a80:	23e7      	movs	r3, #231	; 0xe7
 8005a82:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	2205      	movs	r2, #5
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	200a      	movs	r0, #10
 8005a8e:	f7ff ff3b 	bl	8005908 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8005a92:	23c2      	movs	r3, #194	; 0xc2
 8005a94:	733b      	strb	r3, [r7, #12]
 8005a96:	23c2      	movs	r3, #194	; 0xc2
 8005a98:	72fb      	strb	r3, [r7, #11]
 8005a9a:	23c2      	movs	r3, #194	; 0xc2
 8005a9c:	72bb      	strb	r3, [r7, #10]
 8005a9e:	23c2      	movs	r3, #194	; 0xc2
 8005aa0:	727b      	strb	r3, [r7, #9]
 8005aa2:	23c2      	movs	r3, #194	; 0xc2
 8005aa4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	2205      	movs	r2, #5
 8005aac:	4619      	mov	r1, r3
 8005aae:	200b      	movs	r0, #11
 8005ab0:	f7ff ff2a 	bl	8005908 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8005ab4:	21c3      	movs	r1, #195	; 0xc3
 8005ab6:	200c      	movs	r0, #12
 8005ab8:	f7ff ff04 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8005abc:	21c4      	movs	r1, #196	; 0xc4
 8005abe:	200d      	movs	r0, #13
 8005ac0:	f7ff ff00 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8005ac4:	21c5      	movs	r1, #197	; 0xc5
 8005ac6:	200e      	movs	r0, #14
 8005ac8:	f7ff fefc 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8005acc:	21c6      	movs	r1, #198	; 0xc6
 8005ace:	200f      	movs	r0, #15
 8005ad0:	f7ff fef8 	bl	80058c4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8005ad4:	23e7      	movs	r3, #231	; 0xe7
 8005ad6:	733b      	strb	r3, [r7, #12]
 8005ad8:	23e7      	movs	r3, #231	; 0xe7
 8005ada:	72fb      	strb	r3, [r7, #11]
 8005adc:	23e7      	movs	r3, #231	; 0xe7
 8005ade:	72bb      	strb	r3, [r7, #10]
 8005ae0:	23e7      	movs	r3, #231	; 0xe7
 8005ae2:	727b      	strb	r3, [r7, #9]
 8005ae4:	23e7      	movs	r3, #231	; 0xe7
 8005ae6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8005ae8:	f107 0308 	add.w	r3, r7, #8
 8005aec:	2205      	movs	r2, #5
 8005aee:	4619      	mov	r1, r3
 8005af0:	2010      	movs	r0, #16
 8005af2:	f7ff ff09 	bl	8005908 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8005af6:	2100      	movs	r1, #0
 8005af8:	2011      	movs	r0, #17
 8005afa:	f7ff fee3 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8005afe:	2100      	movs	r1, #0
 8005b00:	2012      	movs	r0, #18
 8005b02:	f7ff fedf 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8005b06:	2100      	movs	r1, #0
 8005b08:	2013      	movs	r0, #19
 8005b0a:	f7ff fedb 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8005b0e:	2100      	movs	r1, #0
 8005b10:	2014      	movs	r0, #20
 8005b12:	f7ff fed7 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8005b16:	2100      	movs	r1, #0
 8005b18:	2015      	movs	r0, #21
 8005b1a:	f7ff fed3 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8005b1e:	2100      	movs	r1, #0
 8005b20:	2016      	movs	r0, #22
 8005b22:	f7ff fecf 	bl	80058c4 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8005b26:	f000 fae3 	bl	80060f0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	201c      	movs	r0, #28
 8005b2e:	f7ff fec9 	bl	80058c4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8005b32:	2100      	movs	r1, #0
 8005b34:	201d      	movs	r0, #29
 8005b36:	f7ff fec5 	bl	80058c4 <NRF24_write_register>
	printRadioSettings();
 8005b3a:	f000 faf3 	bl	8006124 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8005b3e:	210f      	movs	r1, #15
 8005b40:	200f      	movs	r0, #15
 8005b42:	f000 f8ad 	bl	8005ca0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8005b46:	2003      	movs	r0, #3
 8005b48:	f000 f987 	bl	8005e5a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f000 f9bd 	bl	8005ecc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8005b52:	2002      	movs	r0, #2
 8005b54:	f000 fa00 	bl	8005f58 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8005b58:	f000 f952 	bl	8005e00 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8005b5c:	2020      	movs	r0, #32
 8005b5e:	f000 f8cf 	bl	8005d00 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8005b62:	f000 fabc 	bl	80060de <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8005b66:	204c      	movs	r0, #76	; 0x4c
 8005b68:	f000 f8b5 	bl	8005cd6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8005b6c:	f7ff ff16 	bl	800599c <NRF24_flush_tx>
	NRF24_flush_rx();
 8005b70:	f7ff ff1c 	bl	80059ac <NRF24_flush_rx>

	NRF24_powerDown();
 8005b74:	f000 fa18 	bl	8005fa8 <NRF24_powerDown>

}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b82:	b002      	add	sp, #8
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	200000b4 	.word	0x200000b4
 8005b8c:	200000ac 	.word	0x200000ac
 8005b90:	200000b0 	.word	0x200000b0
 8005b94:	200000b2 	.word	0x200000b2

08005b98 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	f7ff fe21 	bl	80057e4 <NRF24_ce>
	NRF24_flush_tx();
 8005ba2:	f7ff fefb 	bl	800599c <NRF24_flush_tx>
	NRF24_flush_rx();
 8005ba6:	f7ff ff01 	bl	80059ac <NRF24_flush_rx>
}
 8005baa:	bf00      	nop
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8005bbc:	f000 fa8f 	bl	80060de <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa2e 	bl	8006026 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8005bca:	f7fb fa0b 	bl	8000fe4 <HAL_GetTick>
 8005bce:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8005bd0:	230a      	movs	r3, #10
 8005bd2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8005bd4:	f107 030d 	add.w	r3, r7, #13
 8005bd8:	2201      	movs	r2, #1
 8005bda:	4619      	mov	r1, r3
 8005bdc:	2008      	movs	r0, #8
 8005bde:	f7ff fe49 	bl	8005874 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8005be2:	f7ff feeb 	bl	80059bc <NRF24_get_status>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d107      	bne.n	8005c04 <NRF24_write+0x54>
 8005bf4:	f7fb f9f6 	bl	8000fe4 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d8e7      	bhi.n	8005bd4 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8005c04:	f107 010b 	add.w	r1, r7, #11
 8005c08:	f107 030c 	add.w	r3, r7, #12
 8005c0c:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <NRF24_write+0x90>)
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fa32 	bl	8006078 <NRF24_whatHappened>
	retStatus = tx_ok;
 8005c14:	7b3b      	ldrb	r3, [r7, #12]
 8005c16:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8005c18:	4b09      	ldr	r3, [pc, #36]	; (8005c40 <NRF24_write+0x90>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8005c20:	f000 f886 	bl	8005d30 <NRF24_getDynamicPayloadSize>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <NRF24_write+0x94>)
 8005c2a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8005c2c:	f000 f80c 	bl	8005c48 <NRF24_available>
	NRF24_flush_tx();
 8005c30:	f7ff feb4 	bl	800599c <NRF24_flush_tx>
	return retStatus;
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	200000a4 	.word	0x200000a4
 8005c44:	200000a5 	.word	0x200000a5

08005c48 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f000 f9ba 	bl	8005fc6 <NRF24_availablePipe>
 8005c52:	4603      	mov	r3, r0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8005c62:	463b      	mov	r3, r7
 8005c64:	2205      	movs	r2, #5
 8005c66:	4619      	mov	r1, r3
 8005c68:	200a      	movs	r0, #10
 8005c6a:	f7ff fe4d 	bl	8005908 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8005c6e:	463b      	mov	r3, r7
 8005c70:	2205      	movs	r2, #5
 8005c72:	4619      	mov	r1, r3
 8005c74:	2010      	movs	r0, #16
 8005c76:	f7ff fe47 	bl	8005908 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <NRF24_openWritingPipe+0x44>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	7bfa      	ldrb	r2, [r7, #15]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bf28      	it	cs
 8005c88:	4613      	movcs	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	2011      	movs	r0, #17
 8005c90:	f7ff fe18 	bl	80058c4 <NRF24_write_register>
}
 8005c94:	bf00      	nop
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	200000a6 	.word	0x200000a6

08005ca0 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	460a      	mov	r2, r1
 8005caa:	71fb      	strb	r3, [r7, #7]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	b25a      	sxtb	r2, r3
 8005cb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	b25b      	sxtb	r3, r3
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	b25b      	sxtb	r3, r3
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	2004      	movs	r0, #4
 8005cca:	f7ff fdfb 	bl	80058c4 <NRF24_write_register>
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	4603      	mov	r3, r0
 8005cde:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8005ce0:	237f      	movs	r3, #127	; 0x7f
 8005ce2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8005ce4:	7bfa      	ldrb	r2, [r7, #15]
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	bf28      	it	cs
 8005cec:	4613      	movcs	r3, r2
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	2005      	movs	r0, #5
 8005cf4:	f7ff fde6 	bl	80058c4 <NRF24_write_register>
}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8005d0a:	2320      	movs	r3, #32
 8005d0c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8005d0e:	7bfa      	ldrb	r2, [r7, #15]
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bf28      	it	cs
 8005d16:	4613      	movcs	r3, r2
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <NRF24_setPayloadSize+0x2c>)
 8005d1c:	701a      	strb	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	200000a6 	.word	0x200000a6

08005d30 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8005d34:	2060      	movs	r0, #96	; 0x60
 8005d36:	f7ff fd75 	bl	8005824 <NRF24_read_register>
 8005d3a:	4603      	mov	r3, r0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005d44:	201d      	movs	r0, #29
 8005d46:	f7ff fd6d 	bl	8005824 <NRF24_read_register>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f043 0306 	orr.w	r3, r3, #6
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4619      	mov	r1, r3
 8005d54:	201d      	movs	r0, #29
 8005d56:	f7ff fdb5 	bl	80058c4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8005d5a:	201d      	movs	r0, #29
 8005d5c:	f7ff fd62 	bl	8005824 <NRF24_read_register>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005d66:	f000 f9c3 	bl	80060f0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005d6a:	201d      	movs	r0, #29
 8005d6c:	f7ff fd5a 	bl	8005824 <NRF24_read_register>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f043 0306 	orr.w	r3, r3, #6
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	201d      	movs	r0, #29
 8005d7c:	f7ff fda2 	bl	80058c4 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005d80:	201c      	movs	r0, #28
 8005d82:	f7ff fd4f 	bl	8005824 <NRF24_read_register>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f043 0303 	orr.w	r3, r3, #3
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	201c      	movs	r0, #28
 8005d92:	f7ff fd97 	bl	80058c4 <NRF24_write_register>
}
 8005d96:	bf00      	nop
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005da0:	201d      	movs	r0, #29
 8005da2:	f7ff fd3f 	bl	8005824 <NRF24_read_register>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f043 0304 	orr.w	r3, r3, #4
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	4619      	mov	r1, r3
 8005db0:	201d      	movs	r0, #29
 8005db2:	f7ff fd87 	bl	80058c4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8005db6:	201d      	movs	r0, #29
 8005db8:	f7ff fd34 	bl	8005824 <NRF24_read_register>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10c      	bne.n	8005ddc <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005dc2:	f000 f995 	bl	80060f0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005dc6:	201d      	movs	r0, #29
 8005dc8:	f7ff fd2c 	bl	8005824 <NRF24_read_register>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f043 0304 	orr.w	r3, r3, #4
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	201d      	movs	r0, #29
 8005dd8:	f7ff fd74 	bl	80058c4 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005ddc:	201c      	movs	r0, #28
 8005dde:	f7ff fd21 	bl	8005824 <NRF24_read_register>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	201c      	movs	r0, #28
 8005dee:	f7ff fd69 	bl	80058c4 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8005df2:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <NRF24_enableDynamicPayloads+0x60>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]

}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200000a7 	.word	0x200000a7

08005e00 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8005e04:	201d      	movs	r0, #29
 8005e06:	f7ff fd0d 	bl	8005824 <NRF24_read_register>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f023 0304 	bic.w	r3, r3, #4
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	4619      	mov	r1, r3
 8005e14:	201d      	movs	r0, #29
 8005e16:	f7ff fd55 	bl	80058c4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	201c      	movs	r0, #28
 8005e1e:	f7ff fd51 	bl	80058c4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8005e22:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <NRF24_disableDynamicPayloads+0x2c>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	701a      	strb	r2, [r3, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200000a7 	.word	0x200000a7

08005e30 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8005e40:	213f      	movs	r1, #63	; 0x3f
 8005e42:	2001      	movs	r0, #1
 8005e44:	f7ff fd3e 	bl	80058c4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8005e48:	e003      	b.n	8005e52 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7ff fd39 	bl	80058c4 <NRF24_write_register>
}
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	4603      	mov	r3, r0
 8005e62:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005e64:	2006      	movs	r0, #6
 8005e66:	f7ff fcdd 	bl	8005824 <NRF24_read_register>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	f023 0306 	bic.w	r3, r3, #6
 8005e74:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d104      	bne.n	8005e86 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
 8005e7e:	f043 0306 	orr.w	r3, r3, #6
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	e019      	b.n	8005eba <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d104      	bne.n	8005e96 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e011      	b.n	8005eba <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d104      	bne.n	8005ea6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	f043 0302 	orr.w	r3, r3, #2
 8005ea2:	73fb      	strb	r3, [r7, #15]
 8005ea4:	e009      	b.n	8005eba <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d006      	beq.n	8005eba <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d103      	bne.n	8005eba <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	f043 0306 	orr.w	r3, r3, #6
 8005eb8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	2006      	movs	r0, #6
 8005ec0:	f7ff fd00 	bl	80058c4 <NRF24_write_register>
}
 8005ec4:	bf00      	nop
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005eda:	2006      	movs	r0, #6
 8005edc:	f7ff fca2 	bl	8005824 <NRF24_read_register>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <NRF24_setDataRate+0x88>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005ef0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d107      	bne.n	8005f08 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8005ef8:	4b16      	ldr	r3, [pc, #88]	; (8005f54 <NRF24_setDataRate+0x88>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	f043 0320 	orr.w	r3, r3, #32
 8005f04:	73bb      	strb	r3, [r7, #14]
 8005f06:	e00d      	b.n	8005f24 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d107      	bne.n	8005f1e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <NRF24_setDataRate+0x88>)
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8005f14:	7bbb      	ldrb	r3, [r7, #14]
 8005f16:	f043 0308 	orr.w	r3, r3, #8
 8005f1a:	73bb      	strb	r3, [r7, #14]
 8005f1c:	e002      	b.n	8005f24 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <NRF24_setDataRate+0x88>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	2006      	movs	r0, #6
 8005f2a:	f7ff fccb 	bl	80058c4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8005f2e:	2006      	movs	r0, #6
 8005f30:	f7ff fc78 	bl	8005824 <NRF24_read_register>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d102      	bne.n	8005f44 <NRF24_setDataRate+0x78>
  {
    result = true;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	73fb      	strb	r3, [r7, #15]
 8005f42:	e002      	b.n	8005f4a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <NRF24_setDataRate+0x88>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200000a8 	.word	0x200000a8

08005f58 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8005f62:	2000      	movs	r0, #0
 8005f64:	f7ff fc5e 	bl	8005824 <NRF24_read_register>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f023 030c 	bic.w	r3, r3, #12
 8005f6e:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00f      	beq.n	8005f96 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d104      	bne.n	8005f86 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	f043 0308 	orr.w	r3, r3, #8
 8005f82:	73fb      	strb	r3, [r7, #15]
 8005f84:	e007      	b.n	8005f96 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	f043 0308 	orr.w	r3, r3, #8
 8005f8c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7ff fc92 	bl	80058c4 <NRF24_write_register>
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8005fac:	2000      	movs	r0, #0
 8005fae:	f7ff fc39 	bl	8005824 <NRF24_read_register>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f023 0302 	bic.w	r3, r3, #2
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	4619      	mov	r1, r3
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f7ff fc81 	bl	80058c4 <NRF24_write_register>
}
 8005fc2:	bf00      	nop
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8005fce:	f7ff fcf5 	bl	80059bc <NRF24_get_status>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bf14      	ite	ne
 8005fe0:	2301      	movne	r3, #1
 8005fe2:	2300      	moveq	r3, #0
 8005fe4:	73bb      	strb	r3, [r7, #14]

  if (result)
 8005fe6:	7bbb      	ldrb	r3, [r7, #14]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d017      	beq.n	800601c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	085b      	lsrs	r3, r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	2007      	movs	r0, #7
 8006006:	f7ff fc5d 	bl	80058c4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8006014:	2120      	movs	r1, #32
 8006016:	2007      	movs	r0, #7
 8006018:	f7ff fc54 	bl	80058c4 <NRF24_write_register>
    }
  }
  return result;
 800601c:	7bbb      	ldrb	r3, [r7, #14]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8006032:	2000      	movs	r0, #0
 8006034:	f7ff fbf6 	bl	8005824 <NRF24_read_register>
 8006038:	4603      	mov	r3, r0
 800603a:	f043 0302 	orr.w	r3, r3, #2
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	4619      	mov	r1, r3
 8006048:	2000      	movs	r0, #0
 800604a:	f7ff fc3b 	bl	80058c4 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 800604e:	2096      	movs	r0, #150	; 0x96
 8006050:	f7ff fb88 	bl	8005764 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fc7d 	bl	8005958 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800605e:	2001      	movs	r0, #1
 8006060:	f7ff fbc0 	bl	80057e4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8006064:	200f      	movs	r0, #15
 8006066:	f7ff fb7d 	bl	8005764 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800606a:	2000      	movs	r0, #0
 800606c:	f7ff fbba 	bl	80057e4 <NRF24_ce>
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8006084:	f7ff fc9a 	bl	80059bc <NRF24_get_status>
 8006088:	4603      	mov	r3, r0
 800608a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8006092:	2170      	movs	r1, #112	; 0x70
 8006094:	2007      	movs	r0, #7
 8006096:	f7ff fc15 	bl	80058c4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	f003 0320 	and.w	r3, r3, #32
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	701a      	strb	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80060e2:	2170      	movs	r1, #112	; 0x70
 80060e4:	2007      	movs	r0, #7
 80060e6:	f7ff fbed 	bl	80058c4 <NRF24_write_register>
}
 80060ea:	bf00      	nop
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7ff fb54 	bl	80057a4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80060fc:	2350      	movs	r3, #80	; 0x50
 80060fe:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8006100:	2373      	movs	r3, #115	; 0x73
 8006102:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8006104:	1d39      	adds	r1, r7, #4
 8006106:	2364      	movs	r3, #100	; 0x64
 8006108:	2202      	movs	r2, #2
 800610a:	4805      	ldr	r0, [pc, #20]	; (8006120 <NRF24_ACTIVATE_cmd+0x30>)
 800610c:	f7fd fb12 	bl	8003734 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8006110:	2001      	movs	r0, #1
 8006112:	f7ff fb47 	bl	80057a4 <NRF24_csn>
}
 8006116:	bf00      	nop
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200000b4 	.word	0x200000b4

08006124 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8006124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006126:	b0a1      	sub	sp, #132	; 0x84
 8006128:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	4ab6      	ldr	r2, [pc, #728]	; (8006408 <printRadioSettings+0x2e4>)
 8006130:	461c      	mov	r4, r3
 8006132:	4615      	mov	r5, r2
 8006134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800613a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800613e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	8022      	strh	r2, [r4, #0]
 8006146:	3402      	adds	r4, #2
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800614c:	f107 0308 	add.w	r3, r7, #8
 8006150:	4618      	mov	r0, r3
 8006152:	f7fa f83d 	bl	80001d0 <strlen>
 8006156:	4603      	mov	r3, r0
 8006158:	b29a      	uxth	r2, r3
 800615a:	f107 0108 	add.w	r1, r7, #8
 800615e:	230a      	movs	r3, #10
 8006160:	48aa      	ldr	r0, [pc, #680]	; (800640c <printRadioSettings+0x2e8>)
 8006162:	f7fe f959 	bl	8004418 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8006166:	2000      	movs	r0, #0
 8006168:	f7ff fb5c 	bl	8005824 <NRF24_read_register>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8006172:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d020      	beq.n	80061c0 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800617e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00b      	beq.n	80061a2 <printRadioSettings+0x7e>
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4aa0      	ldr	r2, [pc, #640]	; (8006410 <printRadioSettings+0x2ec>)
 8006190:	461c      	mov	r4, r3
 8006192:	4615      	mov	r5, r2
 8006194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006198:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800619c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061a0:	e017      	b.n	80061d2 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 80061a2:	f107 0308 	add.w	r3, r7, #8
 80061a6:	4a9b      	ldr	r2, [pc, #620]	; (8006414 <printRadioSettings+0x2f0>)
 80061a8:	461c      	mov	r4, r3
 80061aa:	4615      	mov	r5, r2
 80061ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061b4:	c403      	stmia	r4!, {r0, r1}
 80061b6:	8022      	strh	r2, [r4, #0]
 80061b8:	3402      	adds	r4, #2
 80061ba:	0c13      	lsrs	r3, r2, #16
 80061bc:	7023      	strb	r3, [r4, #0]
 80061be:	e008      	b.n	80061d2 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	4a94      	ldr	r2, [pc, #592]	; (8006418 <printRadioSettings+0x2f4>)
 80061c6:	461c      	mov	r4, r3
 80061c8:	4615      	mov	r5, r2
 80061ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80061d2:	f107 0308 	add.w	r3, r7, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7f9 fffa 	bl	80001d0 <strlen>
 80061dc:	4603      	mov	r3, r0
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f107 0108 	add.w	r1, r7, #8
 80061e4:	230a      	movs	r3, #10
 80061e6:	4889      	ldr	r0, [pc, #548]	; (800640c <printRadioSettings+0x2e8>)
 80061e8:	f7fe f916 	bl	8004418 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80061ec:	2001      	movs	r0, #1
 80061ee:	f7ff fb19 	bl	8005824 <NRF24_read_register>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80061f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061fc:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006200:	2b00      	cmp	r3, #0
 8006202:	bfcc      	ite	gt
 8006204:	2301      	movgt	r3, #1
 8006206:	2300      	movle	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800620c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006210:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfcc      	ite	gt
 8006218:	2301      	movgt	r3, #1
 800621a:	2300      	movle	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006220:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006224:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006228:	2b00      	cmp	r3, #0
 800622a:	bfcc      	ite	gt
 800622c:	2301      	movgt	r3, #1
 800622e:	2300      	movle	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006234:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006238:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800623c:	2b00      	cmp	r3, #0
 800623e:	bfcc      	ite	gt
 8006240:	2301      	movgt	r3, #1
 8006242:	2300      	movle	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800624c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006250:	2b00      	cmp	r3, #0
 8006252:	bfcc      	ite	gt
 8006254:	2301      	movgt	r3, #1
 8006256:	2300      	movle	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800625c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006260:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfcc      	ite	gt
 8006268:	2301      	movgt	r3, #1
 800626a:	2300      	movle	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	f107 0008 	add.w	r0, r7, #8
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	9402      	str	r4, [sp, #8]
 8006276:	9101      	str	r1, [sp, #4]
 8006278:	9200      	str	r2, [sp, #0]
 800627a:	4633      	mov	r3, r6
 800627c:	462a      	mov	r2, r5
 800627e:	4967      	ldr	r1, [pc, #412]	; (800641c <printRadioSettings+0x2f8>)
 8006280:	f001 fa90 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006284:	f107 0308 	add.w	r3, r7, #8
 8006288:	4618      	mov	r0, r3
 800628a:	f7f9 ffa1 	bl	80001d0 <strlen>
 800628e:	4603      	mov	r3, r0
 8006290:	b29a      	uxth	r2, r3
 8006292:	f107 0108 	add.w	r1, r7, #8
 8006296:	230a      	movs	r3, #10
 8006298:	485c      	ldr	r0, [pc, #368]	; (800640c <printRadioSettings+0x2e8>)
 800629a:	f7fe f8bd 	bl	8004418 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800629e:	2002      	movs	r0, #2
 80062a0:	f7ff fac0 	bl	8005824 <NRF24_read_register>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80062aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062ae:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfcc      	ite	gt
 80062b6:	2301      	movgt	r3, #1
 80062b8:	2300      	movle	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80062be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062c2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bfcc      	ite	gt
 80062ca:	2301      	movgt	r3, #1
 80062cc:	2300      	movle	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80062d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062d6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bfcc      	ite	gt
 80062de:	2301      	movgt	r3, #1
 80062e0:	2300      	movle	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80062e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062ea:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfcc      	ite	gt
 80062f2:	2301      	movgt	r3, #1
 80062f4:	2300      	movle	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80062fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80062fe:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfcc      	ite	gt
 8006306:	2301      	movgt	r3, #1
 8006308:	2300      	movle	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800630e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006312:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006316:	2b00      	cmp	r3, #0
 8006318:	bfcc      	ite	gt
 800631a:	2301      	movgt	r3, #1
 800631c:	2300      	movle	r3, #0
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f107 0008 	add.w	r0, r7, #8
 8006324:	9303      	str	r3, [sp, #12]
 8006326:	9402      	str	r4, [sp, #8]
 8006328:	9101      	str	r1, [sp, #4]
 800632a:	9200      	str	r2, [sp, #0]
 800632c:	4633      	mov	r3, r6
 800632e:	462a      	mov	r2, r5
 8006330:	493b      	ldr	r1, [pc, #236]	; (8006420 <printRadioSettings+0x2fc>)
 8006332:	f001 fa37 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f7f9 ff48 	bl	80001d0 <strlen>
 8006340:	4603      	mov	r3, r0
 8006342:	b29a      	uxth	r2, r3
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	230a      	movs	r3, #10
 800634a:	4830      	ldr	r0, [pc, #192]	; (800640c <printRadioSettings+0x2e8>)
 800634c:	f7fe f864 	bl	8004418 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8006350:	2003      	movs	r0, #3
 8006352:	f7ff fa67 	bl	8005824 <NRF24_read_register>
 8006356:	4603      	mov	r3, r0
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8006360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006364:	3302      	adds	r3, #2
 8006366:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800636a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800636e:	f107 0308 	add.w	r3, r7, #8
 8006372:	492c      	ldr	r1, [pc, #176]	; (8006424 <printRadioSettings+0x300>)
 8006374:	4618      	mov	r0, r3
 8006376:	f001 fa15 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4618      	mov	r0, r3
 8006380:	f7f9 ff26 	bl	80001d0 <strlen>
 8006384:	4603      	mov	r3, r0
 8006386:	b29a      	uxth	r2, r3
 8006388:	f107 0108 	add.w	r1, r7, #8
 800638c:	230a      	movs	r3, #10
 800638e:	481f      	ldr	r0, [pc, #124]	; (800640c <printRadioSettings+0x2e8>)
 8006390:	f7fe f842 	bl	8004418 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8006394:	2005      	movs	r0, #5
 8006396:	f7ff fa45 	bl	8005824 <NRF24_read_register>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80063a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80063a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	491e      	ldr	r1, [pc, #120]	; (8006428 <printRadioSettings+0x304>)
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 f9f8 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80063b4:	f107 0308 	add.w	r3, r7, #8
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7f9 ff09 	bl	80001d0 <strlen>
 80063be:	4603      	mov	r3, r0
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f107 0108 	add.w	r1, r7, #8
 80063c6:	230a      	movs	r3, #10
 80063c8:	4810      	ldr	r0, [pc, #64]	; (800640c <printRadioSettings+0x2e8>)
 80063ca:	f7fe f825 	bl	8004418 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80063ce:	2006      	movs	r0, #6
 80063d0:	f7ff fa28 	bl	8005824 <NRF24_read_register>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80063da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d024      	beq.n	8006430 <printRadioSettings+0x30c>
 80063e6:	f107 0308 	add.w	r3, r7, #8
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <printRadioSettings+0x308>)
 80063ec:	461c      	mov	r4, r3
 80063ee:	4615      	mov	r5, r2
 80063f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80063f8:	6020      	str	r0, [r4, #0]
 80063fa:	3404      	adds	r4, #4
 80063fc:	8021      	strh	r1, [r4, #0]
 80063fe:	3402      	adds	r4, #2
 8006400:	0c0b      	lsrs	r3, r1, #16
 8006402:	7023      	strb	r3, [r4, #0]
 8006404:	e023      	b.n	800644e <printRadioSettings+0x32a>
 8006406:	bf00      	nop
 8006408:	08007fd8 	.word	0x08007fd8
 800640c:	20000118 	.word	0x20000118
 8006410:	0800800c 	.word	0x0800800c
 8006414:	08008028 	.word	0x08008028
 8006418:	08008044 	.word	0x08008044
 800641c:	08008058 	.word	0x08008058
 8006420:	0800809c 	.word	0x0800809c
 8006424:	080080e8 	.word	0x080080e8
 8006428:	08008104 	.word	0x08008104
 800642c:	08008118 	.word	0x08008118
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8006430:	f107 0308 	add.w	r3, r7, #8
 8006434:	4a29      	ldr	r2, [pc, #164]	; (80064dc <printRadioSettings+0x3b8>)
 8006436:	461c      	mov	r4, r3
 8006438:	4615      	mov	r5, r2
 800643a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800643c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800643e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006442:	6020      	str	r0, [r4, #0]
 8006444:	3404      	adds	r4, #4
 8006446:	8021      	strh	r1, [r4, #0]
 8006448:	3402      	adds	r4, #2
 800644a:	0c0b      	lsrs	r3, r1, #16
 800644c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	4618      	mov	r0, r3
 8006454:	f7f9 febc 	bl	80001d0 <strlen>
 8006458:	4603      	mov	r3, r0
 800645a:	b29a      	uxth	r2, r3
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	230a      	movs	r3, #10
 8006462:	481f      	ldr	r0, [pc, #124]	; (80064e0 <printRadioSettings+0x3bc>)
 8006464:	f7fd ffd8 	bl	8004418 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8006468:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800646c:	f003 0306 	and.w	r3, r3, #6
 8006470:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8006474:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800647e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <printRadioSettings+0x376>
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <printRadioSettings+0x3c0>)
 800648c:	461c      	mov	r4, r3
 800648e:	4615      	mov	r5, r2
 8006490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	e037      	b.n	800650a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800649a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d109      	bne.n	80064b6 <printRadioSettings+0x392>
 80064a2:	f107 0308 	add.w	r3, r7, #8
 80064a6:	4a10      	ldr	r2, [pc, #64]	; (80064e8 <printRadioSettings+0x3c4>)
 80064a8:	461c      	mov	r4, r3
 80064aa:	4615      	mov	r5, r2
 80064ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b0:	682b      	ldr	r3, [r5, #0]
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	e029      	b.n	800650a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80064b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d118      	bne.n	80064f0 <printRadioSettings+0x3cc>
 80064be:	f107 0308 	add.w	r3, r7, #8
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <printRadioSettings+0x3c8>)
 80064c4:	461c      	mov	r4, r3
 80064c6:	4615      	mov	r5, r2
 80064c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	8022      	strh	r2, [r4, #0]
 80064d2:	3402      	adds	r4, #2
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	7023      	strb	r3, [r4, #0]
 80064d8:	e017      	b.n	800650a <printRadioSettings+0x3e6>
 80064da:	bf00      	nop
 80064dc:	08008130 	.word	0x08008130
 80064e0:	20000118 	.word	0x20000118
 80064e4:	08008148 	.word	0x08008148
 80064e8:	0800815c 	.word	0x0800815c
 80064ec:	08008170 	.word	0x08008170
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80064f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d108      	bne.n	800650a <printRadioSettings+0x3e6>
 80064f8:	f107 0308 	add.w	r3, r7, #8
 80064fc:	4ad7      	ldr	r2, [pc, #860]	; (800685c <printRadioSettings+0x738>)
 80064fe:	461c      	mov	r4, r3
 8006500:	4615      	mov	r5, r2
 8006502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800650a:	f107 0308 	add.w	r3, r7, #8
 800650e:	4618      	mov	r0, r3
 8006510:	f7f9 fe5e 	bl	80001d0 <strlen>
 8006514:	4603      	mov	r3, r0
 8006516:	b29a      	uxth	r2, r3
 8006518:	f107 0108 	add.w	r1, r7, #8
 800651c:	230a      	movs	r3, #10
 800651e:	48d0      	ldr	r0, [pc, #832]	; (8006860 <printRadioSettings+0x73c>)
 8006520:	f7fd ff7a 	bl	8004418 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8006524:	463b      	mov	r3, r7
 8006526:	2205      	movs	r2, #5
 8006528:	4619      	mov	r1, r3
 800652a:	200a      	movs	r0, #10
 800652c:	f7ff f9a2 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8006530:	793b      	ldrb	r3, [r7, #4]
 8006532:	461c      	mov	r4, r3
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	461d      	mov	r5, r3
 8006538:	78bb      	ldrb	r3, [r7, #2]
 800653a:	787a      	ldrb	r2, [r7, #1]
 800653c:	7839      	ldrb	r1, [r7, #0]
 800653e:	f107 0008 	add.w	r0, r7, #8
 8006542:	9102      	str	r1, [sp, #8]
 8006544:	9201      	str	r2, [sp, #4]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	462b      	mov	r3, r5
 800654a:	4622      	mov	r2, r4
 800654c:	49c5      	ldr	r1, [pc, #788]	; (8006864 <printRadioSettings+0x740>)
 800654e:	f001 f929 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006552:	f107 0308 	add.w	r3, r7, #8
 8006556:	4618      	mov	r0, r3
 8006558:	f7f9 fe3a 	bl	80001d0 <strlen>
 800655c:	4603      	mov	r3, r0
 800655e:	b29a      	uxth	r2, r3
 8006560:	f107 0108 	add.w	r1, r7, #8
 8006564:	230a      	movs	r3, #10
 8006566:	48be      	ldr	r0, [pc, #760]	; (8006860 <printRadioSettings+0x73c>)
 8006568:	f7fd ff56 	bl	8004418 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800656c:	463b      	mov	r3, r7
 800656e:	2205      	movs	r2, #5
 8006570:	4619      	mov	r1, r3
 8006572:	200b      	movs	r0, #11
 8006574:	f7ff f97e 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8006578:	793b      	ldrb	r3, [r7, #4]
 800657a:	461c      	mov	r4, r3
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	461d      	mov	r5, r3
 8006580:	78bb      	ldrb	r3, [r7, #2]
 8006582:	787a      	ldrb	r2, [r7, #1]
 8006584:	7839      	ldrb	r1, [r7, #0]
 8006586:	f107 0008 	add.w	r0, r7, #8
 800658a:	9102      	str	r1, [sp, #8]
 800658c:	9201      	str	r2, [sp, #4]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	462b      	mov	r3, r5
 8006592:	4622      	mov	r2, r4
 8006594:	49b4      	ldr	r1, [pc, #720]	; (8006868 <printRadioSettings+0x744>)
 8006596:	f001 f905 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f7f9 fe16 	bl	80001d0 <strlen>
 80065a4:	4603      	mov	r3, r0
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	230a      	movs	r3, #10
 80065ae:	48ac      	ldr	r0, [pc, #688]	; (8006860 <printRadioSettings+0x73c>)
 80065b0:	f7fd ff32 	bl	8004418 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80065b4:	463b      	mov	r3, r7
 80065b6:	2201      	movs	r2, #1
 80065b8:	4619      	mov	r1, r3
 80065ba:	200c      	movs	r0, #12
 80065bc:	f7ff f95a 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80065c0:	783b      	ldrb	r3, [r7, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	f107 0308 	add.w	r3, r7, #8
 80065c8:	49a8      	ldr	r1, [pc, #672]	; (800686c <printRadioSettings+0x748>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 f8ea 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80065d0:	f107 0308 	add.w	r3, r7, #8
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7f9 fdfb 	bl	80001d0 <strlen>
 80065da:	4603      	mov	r3, r0
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f107 0108 	add.w	r1, r7, #8
 80065e2:	230a      	movs	r3, #10
 80065e4:	489e      	ldr	r0, [pc, #632]	; (8006860 <printRadioSettings+0x73c>)
 80065e6:	f7fd ff17 	bl	8004418 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80065ea:	463b      	mov	r3, r7
 80065ec:	2201      	movs	r2, #1
 80065ee:	4619      	mov	r1, r3
 80065f0:	200d      	movs	r0, #13
 80065f2:	f7ff f93f 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80065f6:	783b      	ldrb	r3, [r7, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	f107 0308 	add.w	r3, r7, #8
 80065fe:	499c      	ldr	r1, [pc, #624]	; (8006870 <printRadioSettings+0x74c>)
 8006600:	4618      	mov	r0, r3
 8006602:	f001 f8cf 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	4618      	mov	r0, r3
 800660c:	f7f9 fde0 	bl	80001d0 <strlen>
 8006610:	4603      	mov	r3, r0
 8006612:	b29a      	uxth	r2, r3
 8006614:	f107 0108 	add.w	r1, r7, #8
 8006618:	230a      	movs	r3, #10
 800661a:	4891      	ldr	r0, [pc, #580]	; (8006860 <printRadioSettings+0x73c>)
 800661c:	f7fd fefc 	bl	8004418 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8006620:	463b      	mov	r3, r7
 8006622:	2201      	movs	r2, #1
 8006624:	4619      	mov	r1, r3
 8006626:	200e      	movs	r0, #14
 8006628:	f7ff f924 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800662c:	783b      	ldrb	r3, [r7, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	498f      	ldr	r1, [pc, #572]	; (8006874 <printRadioSettings+0x750>)
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f8b4 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800663c:	f107 0308 	add.w	r3, r7, #8
 8006640:	4618      	mov	r0, r3
 8006642:	f7f9 fdc5 	bl	80001d0 <strlen>
 8006646:	4603      	mov	r3, r0
 8006648:	b29a      	uxth	r2, r3
 800664a:	f107 0108 	add.w	r1, r7, #8
 800664e:	230a      	movs	r3, #10
 8006650:	4883      	ldr	r0, [pc, #524]	; (8006860 <printRadioSettings+0x73c>)
 8006652:	f7fd fee1 	bl	8004418 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8006656:	463b      	mov	r3, r7
 8006658:	2201      	movs	r2, #1
 800665a:	4619      	mov	r1, r3
 800665c:	200f      	movs	r0, #15
 800665e:	f7ff f909 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8006662:	783b      	ldrb	r3, [r7, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	f107 0308 	add.w	r3, r7, #8
 800666a:	4983      	ldr	r1, [pc, #524]	; (8006878 <printRadioSettings+0x754>)
 800666c:	4618      	mov	r0, r3
 800666e:	f001 f899 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006672:	f107 0308 	add.w	r3, r7, #8
 8006676:	4618      	mov	r0, r3
 8006678:	f7f9 fdaa 	bl	80001d0 <strlen>
 800667c:	4603      	mov	r3, r0
 800667e:	b29a      	uxth	r2, r3
 8006680:	f107 0108 	add.w	r1, r7, #8
 8006684:	230a      	movs	r3, #10
 8006686:	4876      	ldr	r0, [pc, #472]	; (8006860 <printRadioSettings+0x73c>)
 8006688:	f7fd fec6 	bl	8004418 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800668c:	463b      	mov	r3, r7
 800668e:	2205      	movs	r2, #5
 8006690:	4619      	mov	r1, r3
 8006692:	2010      	movs	r0, #16
 8006694:	f7ff f8ee 	bl	8005874 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8006698:	793b      	ldrb	r3, [r7, #4]
 800669a:	461c      	mov	r4, r3
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	461d      	mov	r5, r3
 80066a0:	78bb      	ldrb	r3, [r7, #2]
 80066a2:	787a      	ldrb	r2, [r7, #1]
 80066a4:	7839      	ldrb	r1, [r7, #0]
 80066a6:	f107 0008 	add.w	r0, r7, #8
 80066aa:	9102      	str	r1, [sp, #8]
 80066ac:	9201      	str	r2, [sp, #4]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	462b      	mov	r3, r5
 80066b2:	4622      	mov	r2, r4
 80066b4:	4971      	ldr	r1, [pc, #452]	; (800687c <printRadioSettings+0x758>)
 80066b6:	f001 f875 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80066ba:	f107 0308 	add.w	r3, r7, #8
 80066be:	4618      	mov	r0, r3
 80066c0:	f7f9 fd86 	bl	80001d0 <strlen>
 80066c4:	4603      	mov	r3, r0
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	f107 0108 	add.w	r1, r7, #8
 80066cc:	230a      	movs	r3, #10
 80066ce:	4864      	ldr	r0, [pc, #400]	; (8006860 <printRadioSettings+0x73c>)
 80066d0:	f7fd fea2 	bl	8004418 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80066d4:	2011      	movs	r0, #17
 80066d6:	f7ff f8a5 	bl	8005824 <NRF24_read_register>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80066e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80066e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066e8:	f107 0308 	add.w	r3, r7, #8
 80066ec:	4964      	ldr	r1, [pc, #400]	; (8006880 <printRadioSettings+0x75c>)
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f858 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80066f4:	f107 0308 	add.w	r3, r7, #8
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7f9 fd69 	bl	80001d0 <strlen>
 80066fe:	4603      	mov	r3, r0
 8006700:	b29a      	uxth	r2, r3
 8006702:	f107 0108 	add.w	r1, r7, #8
 8006706:	230a      	movs	r3, #10
 8006708:	4855      	ldr	r0, [pc, #340]	; (8006860 <printRadioSettings+0x73c>)
 800670a:	f7fd fe85 	bl	8004418 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800670e:	2012      	movs	r0, #18
 8006710:	f7ff f888 	bl	8005824 <NRF24_read_register>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800671a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800671e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	4957      	ldr	r1, [pc, #348]	; (8006884 <printRadioSettings+0x760>)
 8006728:	4618      	mov	r0, r3
 800672a:	f001 f83b 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800672e:	f107 0308 	add.w	r3, r7, #8
 8006732:	4618      	mov	r0, r3
 8006734:	f7f9 fd4c 	bl	80001d0 <strlen>
 8006738:	4603      	mov	r3, r0
 800673a:	b29a      	uxth	r2, r3
 800673c:	f107 0108 	add.w	r1, r7, #8
 8006740:	230a      	movs	r3, #10
 8006742:	4847      	ldr	r0, [pc, #284]	; (8006860 <printRadioSettings+0x73c>)
 8006744:	f7fd fe68 	bl	8004418 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8006748:	2013      	movs	r0, #19
 800674a:	f7ff f86b 	bl	8005824 <NRF24_read_register>
 800674e:	4603      	mov	r3, r0
 8006750:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006754:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	4949      	ldr	r1, [pc, #292]	; (8006888 <printRadioSettings+0x764>)
 8006762:	4618      	mov	r0, r3
 8006764:	f001 f81e 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006768:	f107 0308 	add.w	r3, r7, #8
 800676c:	4618      	mov	r0, r3
 800676e:	f7f9 fd2f 	bl	80001d0 <strlen>
 8006772:	4603      	mov	r3, r0
 8006774:	b29a      	uxth	r2, r3
 8006776:	f107 0108 	add.w	r1, r7, #8
 800677a:	230a      	movs	r3, #10
 800677c:	4838      	ldr	r0, [pc, #224]	; (8006860 <printRadioSettings+0x73c>)
 800677e:	f7fd fe4b 	bl	8004418 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8006782:	2014      	movs	r0, #20
 8006784:	f7ff f84e 	bl	8005824 <NRF24_read_register>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800678e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006796:	f107 0308 	add.w	r3, r7, #8
 800679a:	493c      	ldr	r1, [pc, #240]	; (800688c <printRadioSettings+0x768>)
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f801 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80067a2:	f107 0308 	add.w	r3, r7, #8
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7f9 fd12 	bl	80001d0 <strlen>
 80067ac:	4603      	mov	r3, r0
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	230a      	movs	r3, #10
 80067b6:	482a      	ldr	r0, [pc, #168]	; (8006860 <printRadioSettings+0x73c>)
 80067b8:	f7fd fe2e 	bl	8004418 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80067bc:	2015      	movs	r0, #21
 80067be:	f7ff f831 	bl	8005824 <NRF24_read_register>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80067c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80067cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067d0:	f107 0308 	add.w	r3, r7, #8
 80067d4:	492e      	ldr	r1, [pc, #184]	; (8006890 <printRadioSettings+0x76c>)
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 ffe4 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80067dc:	f107 0308 	add.w	r3, r7, #8
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7f9 fcf5 	bl	80001d0 <strlen>
 80067e6:	4603      	mov	r3, r0
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f107 0108 	add.w	r1, r7, #8
 80067ee:	230a      	movs	r3, #10
 80067f0:	481b      	ldr	r0, [pc, #108]	; (8006860 <printRadioSettings+0x73c>)
 80067f2:	f7fd fe11 	bl	8004418 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80067f6:	2016      	movs	r0, #22
 80067f8:	f7ff f814 	bl	8005824 <NRF24_read_register>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	4921      	ldr	r1, [pc, #132]	; (8006894 <printRadioSettings+0x770>)
 8006810:	4618      	mov	r0, r3
 8006812:	f000 ffc7 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4618      	mov	r0, r3
 800681c:	f7f9 fcd8 	bl	80001d0 <strlen>
 8006820:	4603      	mov	r3, r0
 8006822:	b29a      	uxth	r2, r3
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	230a      	movs	r3, #10
 800682a:	480d      	ldr	r0, [pc, #52]	; (8006860 <printRadioSettings+0x73c>)
 800682c:	f7fd fdf4 	bl	8004418 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8006830:	201c      	movs	r0, #28
 8006832:	f7fe fff7 	bl	8005824 <NRF24_read_register>
 8006836:	4603      	mov	r3, r0
 8006838:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800683c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006840:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfcc      	ite	gt
 8006848:	2301      	movgt	r3, #1
 800684a:	2300      	movle	r3, #0
 800684c:	b2db      	uxtb	r3, r3
 800684e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006850:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	e01e      	b.n	8006898 <printRadioSettings+0x774>
 800685a:	bf00      	nop
 800685c:	08008184 	.word	0x08008184
 8006860:	20000118 	.word	0x20000118
 8006864:	08008198 	.word	0x08008198
 8006868:	080081c8 	.word	0x080081c8
 800686c:	080081f8 	.word	0x080081f8
 8006870:	08008220 	.word	0x08008220
 8006874:	08008248 	.word	0x08008248
 8006878:	08008270 	.word	0x08008270
 800687c:	08008298 	.word	0x08008298
 8006880:	080082c4 	.word	0x080082c4
 8006884:	080082e0 	.word	0x080082e0
 8006888:	080082fc 	.word	0x080082fc
 800688c:	08008318 	.word	0x08008318
 8006890:	08008334 	.word	0x08008334
 8006894:	08008350 	.word	0x08008350
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006898:	2b00      	cmp	r3, #0
 800689a:	bfcc      	ite	gt
 800689c:	2301      	movgt	r3, #1
 800689e:	2300      	movle	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80068a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80068a8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bfcc      	ite	gt
 80068b0:	2301      	movgt	r3, #1
 80068b2:	2300      	movle	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80068b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80068bc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bfcc      	ite	gt
 80068c4:	2301      	movgt	r3, #1
 80068c6:	2300      	movle	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80068cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80068d0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bfcc      	ite	gt
 80068d8:	2301      	movgt	r3, #1
 80068da:	2300      	movle	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80068e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80068e4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bfcc      	ite	gt
 80068ec:	2301      	movgt	r3, #1
 80068ee:	2300      	movle	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f107 0008 	add.w	r0, r7, #8
 80068f6:	9303      	str	r3, [sp, #12]
 80068f8:	9402      	str	r4, [sp, #8]
 80068fa:	9101      	str	r1, [sp, #4]
 80068fc:	9200      	str	r2, [sp, #0]
 80068fe:	4633      	mov	r3, r6
 8006900:	462a      	mov	r2, r5
 8006902:	494a      	ldr	r1, [pc, #296]	; (8006a2c <printRadioSettings+0x908>)
 8006904:	f000 ff4e 	bl	80077a4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006908:	f107 0308 	add.w	r3, r7, #8
 800690c:	4618      	mov	r0, r3
 800690e:	f7f9 fc5f 	bl	80001d0 <strlen>
 8006912:	4603      	mov	r3, r0
 8006914:	b29a      	uxth	r2, r3
 8006916:	f107 0108 	add.w	r1, r7, #8
 800691a:	230a      	movs	r3, #10
 800691c:	4844      	ldr	r0, [pc, #272]	; (8006a30 <printRadioSettings+0x90c>)
 800691e:	f7fd fd7b 	bl	8004418 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8006922:	201d      	movs	r0, #29
 8006924:	f7fe ff7e 	bl	8005824 <NRF24_read_register>
 8006928:	4603      	mov	r3, r0
 800692a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800692e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <printRadioSettings+0x830>
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	4a3d      	ldr	r2, [pc, #244]	; (8006a34 <printRadioSettings+0x910>)
 8006940:	461c      	mov	r4, r3
 8006942:	4615      	mov	r5, r2
 8006944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006948:	e895 0003 	ldmia.w	r5, {r0, r1}
 800694c:	6020      	str	r0, [r4, #0]
 800694e:	3404      	adds	r4, #4
 8006950:	8021      	strh	r1, [r4, #0]
 8006952:	e00e      	b.n	8006972 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <printRadioSettings+0x914>)
 800695a:	461c      	mov	r4, r3
 800695c:	4615      	mov	r5, r2
 800695e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006962:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006966:	6020      	str	r0, [r4, #0]
 8006968:	3404      	adds	r4, #4
 800696a:	8021      	strh	r1, [r4, #0]
 800696c:	3402      	adds	r4, #2
 800696e:	0c0b      	lsrs	r3, r1, #16
 8006970:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006972:	f107 0308 	add.w	r3, r7, #8
 8006976:	4618      	mov	r0, r3
 8006978:	f7f9 fc2a 	bl	80001d0 <strlen>
 800697c:	4603      	mov	r3, r0
 800697e:	b29a      	uxth	r2, r3
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	230a      	movs	r3, #10
 8006986:	482a      	ldr	r0, [pc, #168]	; (8006a30 <printRadioSettings+0x90c>)
 8006988:	f7fd fd46 	bl	8004418 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800698c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <printRadioSettings+0x88c>
 8006998:	f107 0308 	add.w	r3, r7, #8
 800699c:	4a27      	ldr	r2, [pc, #156]	; (8006a3c <printRadioSettings+0x918>)
 800699e:	461c      	mov	r4, r3
 80069a0:	4615      	mov	r5, r2
 80069a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069aa:	c403      	stmia	r4!, {r0, r1}
 80069ac:	8022      	strh	r2, [r4, #0]
 80069ae:	e00d      	b.n	80069cc <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80069b0:	f107 0308 	add.w	r3, r7, #8
 80069b4:	4a22      	ldr	r2, [pc, #136]	; (8006a40 <printRadioSettings+0x91c>)
 80069b6:	461c      	mov	r4, r3
 80069b8:	4615      	mov	r5, r2
 80069ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069c2:	c403      	stmia	r4!, {r0, r1}
 80069c4:	8022      	strh	r2, [r4, #0]
 80069c6:	3402      	adds	r4, #2
 80069c8:	0c13      	lsrs	r3, r2, #16
 80069ca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7f9 fbfd 	bl	80001d0 <strlen>
 80069d6:	4603      	mov	r3, r0
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f107 0108 	add.w	r1, r7, #8
 80069de:	230a      	movs	r3, #10
 80069e0:	4813      	ldr	r0, [pc, #76]	; (8006a30 <printRadioSettings+0x90c>)
 80069e2:	f7fd fd19 	bl	8004418 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80069e6:	f107 0308 	add.w	r3, r7, #8
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <printRadioSettings+0x920>)
 80069ec:	461c      	mov	r4, r3
 80069ee:	4615      	mov	r5, r2
 80069f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	8022      	strh	r2, [r4, #0]
 8006a02:	3402      	adds	r4, #2
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006a08:	f107 0308 	add.w	r3, r7, #8
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7f9 fbdf 	bl	80001d0 <strlen>
 8006a12:	4603      	mov	r3, r0
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f107 0108 	add.w	r1, r7, #8
 8006a1a:	230a      	movs	r3, #10
 8006a1c:	4804      	ldr	r0, [pc, #16]	; (8006a30 <printRadioSettings+0x90c>)
 8006a1e:	f7fd fcfb 	bl	8004418 <HAL_UART_Transmit>
}
 8006a22:	bf00      	nop
 8006a24:	3774      	adds	r7, #116	; 0x74
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	0800836c 	.word	0x0800836c
 8006a30:	20000118 	.word	0x20000118
 8006a34:	080083b8 	.word	0x080083b8
 8006a38:	080083d0 	.word	0x080083d0
 8006a3c:	080083e8 	.word	0x080083e8
 8006a40:	08008404 	.word	0x08008404
 8006a44:	08007fd8 	.word	0x08007fd8

08006a48 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8006a48:	b084      	sub	sp, #16
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	f107 0c08 	add.w	ip, r7, #8
 8006a52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <nrf24_DebugUART_Init+0x2c>)
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f107 0108 	add.w	r1, r7, #8
 8006a5e:	2380      	movs	r3, #128	; 0x80
 8006a60:	461a      	mov	r2, r3
 8006a62:	f000 fe8b 	bl	800777c <memcpy>
}
 8006a66:	bf00      	nop
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a6e:	b004      	add	sp, #16
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000118 	.word	0x20000118

08006a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b09f      	sub	sp, #124	; 0x7c
 8006a7c:	af1c      	add	r7, sp, #112	; 0x70
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a7e:	f7fa fa4d 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a82:	f000 fa87 	bl	8006f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a86:	f000 fbeb 	bl	8007260 <MX_GPIO_Init>
  MX_SPI3_Init();
 8006a8a:	f000 fb7b 	bl	8007184 <MX_SPI3_Init>
  MX_SPI1_Init();
 8006a8e:	f000 fb3b 	bl	8007108 <MX_SPI1_Init>
  MX_I2C1_Init();
 8006a92:	f000 faf9 	bl	8007088 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8006a96:	f000 fbb3 	bl	8007200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_SET);
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	4826      	ldr	r0, [pc, #152]	; (8006b38 <main+0xc0>)
 8006aa0:	f7fa fdec 	bl	800167c <HAL_GPIO_WritePin>

   NRF24_begin(nRF_CS_GPIO_Port, nRF_CS_Pin, nRF_CE_Pin, hspi3);
 8006aa4:	4c25      	ldr	r4, [pc, #148]	; (8006b3c <main+0xc4>)
 8006aa6:	4668      	mov	r0, sp
 8006aa8:	1d23      	adds	r3, r4, #4
 8006aaa:	2260      	movs	r2, #96	; 0x60
 8006aac:	4619      	mov	r1, r3
 8006aae:	f000 fe65 	bl	800777c <memcpy>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006abc:	4820      	ldr	r0, [pc, #128]	; (8006b40 <main+0xc8>)
 8006abe:	f7fe ff8b 	bl	80059d8 <NRF24_begin>
   nrf24_DebugUART_Init(huart2);
 8006ac2:	4c20      	ldr	r4, [pc, #128]	; (8006b44 <main+0xcc>)
 8006ac4:	4668      	mov	r0, sp
 8006ac6:	f104 0310 	add.w	r3, r4, #16
 8006aca:	2270      	movs	r2, #112	; 0x70
 8006acc:	4619      	mov	r1, r3
 8006ace:	f000 fe55 	bl	800777c <memcpy>
 8006ad2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006ad6:	f7ff ffb7 	bl	8006a48 <nrf24_DebugUART_Init>

   NRF24_stopListening();
 8006ada:	f7ff f85d 	bl	8005b98 <NRF24_stopListening>
   NRF24_openWritingPipe(TxpipeAddrs);
 8006ade:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <main+0xd0>)
 8006ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	f7ff f8b6 	bl	8005c58 <NRF24_openWritingPipe>
   NRF24_setAutoAck(true);
 8006aec:	2001      	movs	r0, #1
 8006aee:	f7ff f99f 	bl	8005e30 <NRF24_setAutoAck>
   NRF24_setChannel(52);
 8006af2:	2034      	movs	r0, #52	; 0x34
 8006af4:	f7ff f8ef 	bl	8005cd6 <NRF24_setChannel>
   NRF24_setPayloadSize(32);
 8006af8:	2020      	movs	r0, #32
 8006afa:	f7ff f901 	bl	8005d00 <NRF24_setPayloadSize>

   NRF24_enableDynamicPayloads();
 8006afe:	f7ff f94d 	bl	8005d9c <NRF24_enableDynamicPayloads>
   NRF24_enableAckPayload();
 8006b02:	f7ff f91d 	bl	8005d40 <NRF24_enableAckPayload>

   printRadioSettings();
 8006b06:	f7ff fb0d 	bl	8006124 <printRadioSettings>

   ICM_SelectBank(USER_BANK_0);
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f7fe fcc4 	bl	8005498 <ICM_SelectBank>
   ICM_PowerOn();
 8006b10:	f7fe fb8a 	bl	8005228 <ICM_PowerOn>

   MAX86150_setup();
 8006b14:	f7fe fd21 	bl	800555a <MAX86150_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Select User Bank 0
	  		ICM_SelectBank(USER_BANK_0);
 8006b18:	2000      	movs	r0, #0
 8006b1a:	f7fe fcbd 	bl	8005498 <ICM_SelectBank>
	  		HAL_Delay(10);
 8006b1e:	200a      	movs	r0, #10
 8006b20:	f7fa fa6c 	bl	8000ffc <HAL_Delay>

	  		// Obtain accelerometer and gyro data
	  		ICM_ReadAccelGyro();
 8006b24:	f7fe fc2c 	bl	8005380 <ICM_ReadAccelGyro>

	  		// Obtain magnetometer data
	  		int16_t mag_data[3];
	  		moveArm(accel_data, gyro_data, mag_data);
 8006b28:	463b      	mov	r3, r7
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4907      	ldr	r1, [pc, #28]	; (8006b4c <main+0xd4>)
 8006b2e:	4808      	ldr	r0, [pc, #32]	; (8006b50 <main+0xd8>)
 8006b30:	f000 f812 	bl	8006b58 <moveArm>
  {
 8006b34:	e7f0      	b.n	8006b18 <main+0xa0>
 8006b36:	bf00      	nop
 8006b38:	48000400 	.word	0x48000400
 8006b3c:	20000430 	.word	0x20000430
 8006b40:	48000800 	.word	0x48000800
 8006b44:	20000224 	.word	0x20000224
 8006b48:	20000008 	.word	0x20000008
 8006b4c:	200001b8 	.word	0x200001b8
 8006b50:	200001b0 	.word	0x200001b0
 8006b54:	00000000 	.word	0x00000000

08006b58 <moveArm>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void moveArm(int16_t accel[3], int16_t gyro[3], int16_t mag[3]){
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b0a7      	sub	sp, #156	; 0x9c
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]

	//ICM_20948_AGMT_t agmt;
	float accx = accel[0];
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b72:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	float accy = accel[1];
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b86:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float accz = accel[2];
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b9a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	float gyrx = gyro[0];
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bac:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float gyry = gyro[1];
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bc0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float gyrz = gyro[2];
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bd4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	float magx = mag[0];
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006be6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float magy = mag[1];
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3302      	adds	r3, #2
 8006bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bfa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float magz = mag[2];
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3304      	adds	r3, #4
 8006c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c0e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	if (abs(gyrz*rate/1000) > 0.1){
 8006c12:	4bc9      	ldr	r3, [pc, #804]	; (8006f38 <moveArm+0x3e0>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c1e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c26:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8006f3c <moveArm+0x3e4>
 8006c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c32:	ee17 3a90 	vmov	r3, s15
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfb8      	it	lt
 8006c3a:	425b      	neglt	r3, r3
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7f9 fc71 	bl	8000524 <__aeabi_i2d>
 8006c42:	a3b3      	add	r3, pc, #716	; (adr r3, 8006f10 <moveArm+0x3b8>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 ff66 	bl	8000b18 <__aeabi_dcmpgt>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d015      	beq.n	8006c7e <moveArm+0x126>
		posR=posR+gyrz*rate/1000;
 8006c52:	4bb9      	ldr	r3, [pc, #740]	; (8006f38 <moveArm+0x3e0>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c5e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8006f3c <moveArm+0x3e4>
 8006c6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006c6e:	4bb4      	ldr	r3, [pc, #720]	; (8006f40 <moveArm+0x3e8>)
 8006c70:	edd3 7a00 	vldr	s15, [r3]
 8006c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c78:	4bb1      	ldr	r3, [pc, #708]	; (8006f40 <moveArm+0x3e8>)
 8006c7a:	edc3 7a00 	vstr	s15, [r3]
	}

	//int iposR = round(posR);
	if (posR>180){
 8006c7e:	4bb0      	ldr	r3, [pc, #704]	; (8006f40 <moveArm+0x3e8>)
 8006c80:	edd3 7a00 	vldr	s15, [r3]
 8006c84:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8006f44 <moveArm+0x3ec>
 8006c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c90:	dd03      	ble.n	8006c9a <moveArm+0x142>
	posR = 180;
 8006c92:	4bab      	ldr	r3, [pc, #684]	; (8006f40 <moveArm+0x3e8>)
 8006c94:	4aac      	ldr	r2, [pc, #688]	; (8006f48 <moveArm+0x3f0>)
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e00b      	b.n	8006cb2 <moveArm+0x15a>
	}else if (posR<0){
 8006c9a:	4ba9      	ldr	r3, [pc, #676]	; (8006f40 <moveArm+0x3e8>)
 8006c9c:	edd3 7a00 	vldr	s15, [r3]
 8006ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca8:	d503      	bpl.n	8006cb2 <moveArm+0x15a>
	posR = 0;
 8006caa:	4ba5      	ldr	r3, [pc, #660]	; (8006f40 <moveArm+0x3e8>)
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
	}

	posS=300+accx/3.3;
 8006cb2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006cb6:	f7f9 fc47 	bl	8000548 <__aeabi_f2d>
 8006cba:	a397      	add	r3, pc, #604	; (adr r3, 8006f18 <moveArm+0x3c0>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fdc4 	bl	800084c <__aeabi_ddiv>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	4618      	mov	r0, r3
 8006cca:	4621      	mov	r1, r4
 8006ccc:	a394      	add	r3, pc, #592	; (adr r3, 8006f20 <moveArm+0x3c8>)
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	f7f9 fadb 	bl	800028c <__adddf3>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	460c      	mov	r4, r1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	4621      	mov	r1, r4
 8006cde:	f7f9 ff4d 	bl	8000b7c <__aeabi_d2f>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4b99      	ldr	r3, [pc, #612]	; (8006f4c <moveArm+0x3f4>)
 8006ce6:	601a      	str	r2, [r3, #0]
	//int iposS = round(posS);

	if (posS>300){
 8006ce8:	4b98      	ldr	r3, [pc, #608]	; (8006f4c <moveArm+0x3f4>)
 8006cea:	edd3 7a00 	vldr	s15, [r3]
 8006cee:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8006f50 <moveArm+0x3f8>
 8006cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfa:	dd03      	ble.n	8006d04 <moveArm+0x1ac>
	posS = 300;
 8006cfc:	4b93      	ldr	r3, [pc, #588]	; (8006f4c <moveArm+0x3f4>)
 8006cfe:	4a95      	ldr	r2, [pc, #596]	; (8006f54 <moveArm+0x3fc>)
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e00c      	b.n	8006d1e <moveArm+0x1c6>
	}else if (posS<10){
 8006d04:	4b91      	ldr	r3, [pc, #580]	; (8006f4c <moveArm+0x3f4>)
 8006d06:	edd3 7a00 	vldr	s15, [r3]
 8006d0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d16:	d502      	bpl.n	8006d1e <moveArm+0x1c6>
	posS = 10;
 8006d18:	4b8c      	ldr	r3, [pc, #560]	; (8006f4c <moveArm+0x3f4>)
 8006d1a:	4a8f      	ldr	r2, [pc, #572]	; (8006f58 <moveArm+0x400>)
 8006d1c:	601a      	str	r2, [r3, #0]
	}

	posH=150-accy/6.6;
 8006d1e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8006d22:	f7f9 fc11 	bl	8000548 <__aeabi_f2d>
 8006d26:	a380      	add	r3, pc, #512	; (adr r3, 8006f28 <moveArm+0x3d0>)
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fd8e 	bl	800084c <__aeabi_ddiv>
 8006d30:	4603      	mov	r3, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	461a      	mov	r2, r3
 8006d36:	4623      	mov	r3, r4
 8006d38:	a17d      	add	r1, pc, #500	; (adr r1, 8006f30 <moveArm+0x3d8>)
 8006d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d3e:	f7f9 faa3 	bl	8000288 <__aeabi_dsub>
 8006d42:	4603      	mov	r3, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	4618      	mov	r0, r3
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7f9 ff17 	bl	8000b7c <__aeabi_d2f>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4b82      	ldr	r3, [pc, #520]	; (8006f5c <moveArm+0x404>)
 8006d52:	601a      	str	r2, [r3, #0]
	//int iposH = round(posH);
	if (posH>150){
 8006d54:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <moveArm+0x404>)
 8006d56:	edd3 7a00 	vldr	s15, [r3]
 8006d5a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8006f60 <moveArm+0x408>
 8006d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d66:	dd03      	ble.n	8006d70 <moveArm+0x218>
	posH = 150;
 8006d68:	4b7c      	ldr	r3, [pc, #496]	; (8006f5c <moveArm+0x404>)
 8006d6a:	4a7e      	ldr	r2, [pc, #504]	; (8006f64 <moveArm+0x40c>)
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e00c      	b.n	8006d8a <moveArm+0x232>
	}else if (posH<10){
 8006d70:	4b7a      	ldr	r3, [pc, #488]	; (8006f5c <moveArm+0x404>)
 8006d72:	edd3 7a00 	vldr	s15, [r3]
 8006d76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d82:	d502      	bpl.n	8006d8a <moveArm+0x232>
	posH = 10;
 8006d84:	4b75      	ldr	r3, [pc, #468]	; (8006f5c <moveArm+0x404>)
 8006d86:	4a74      	ldr	r2, [pc, #464]	; (8006f58 <moveArm+0x400>)
 8006d88:	601a      	str	r2, [r3, #0]
	}
	posR1=posR;
 8006d8a:	4b6d      	ldr	r3, [pc, #436]	; (8006f40 <moveArm+0x3e8>)
 8006d8c:	edd3 7a00 	vldr	s15, [r3]
 8006d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d94:	ee17 3a90 	vmov	r3, s15
 8006d98:	b21a      	sxth	r2, r3
 8006d9a:	4b73      	ldr	r3, [pc, #460]	; (8006f68 <moveArm+0x410>)
 8006d9c:	801a      	strh	r2, [r3, #0]
	posS1=posS1+posS;
 8006d9e:	4b73      	ldr	r3, [pc, #460]	; (8006f6c <moveArm+0x414>)
 8006da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dac:	4b67      	ldr	r3, [pc, #412]	; (8006f4c <moveArm+0x3f4>)
 8006dae:	edd3 7a00 	vldr	s15, [r3]
 8006db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dba:	ee17 3a90 	vmov	r3, s15
 8006dbe:	b21a      	sxth	r2, r3
 8006dc0:	4b6a      	ldr	r3, [pc, #424]	; (8006f6c <moveArm+0x414>)
 8006dc2:	801a      	strh	r2, [r3, #0]
	posH1=posH1+posH;
 8006dc4:	4b6a      	ldr	r3, [pc, #424]	; (8006f70 <moveArm+0x418>)
 8006dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dd2:	4b62      	ldr	r3, [pc, #392]	; (8006f5c <moveArm+0x404>)
 8006dd4:	edd3 7a00 	vldr	s15, [r3]
 8006dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006de0:	ee17 3a90 	vmov	r3, s15
 8006de4:	b21a      	sxth	r2, r3
 8006de6:	4b62      	ldr	r3, [pc, #392]	; (8006f70 <moveArm+0x418>)
 8006de8:	801a      	strh	r2, [r3, #0]
	n=n+1;
 8006dea:	4b62      	ldr	r3, [pc, #392]	; (8006f74 <moveArm+0x41c>)
 8006dec:	f993 3000 	ldrsb.w	r3, [r3]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	3301      	adds	r3, #1
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	b25a      	sxtb	r2, r3
 8006df8:	4b5e      	ldr	r3, [pc, #376]	; (8006f74 <moveArm+0x41c>)
 8006dfa:	701a      	strb	r2, [r3, #0]

	if (n==5){
 8006dfc:	4b5d      	ldr	r3, [pc, #372]	; (8006f74 <moveArm+0x41c>)
 8006dfe:	f993 3000 	ldrsb.w	r3, [r3]
 8006e02:	2b05      	cmp	r3, #5
 8006e04:	d17d      	bne.n	8006f02 <moveArm+0x3aa>

		posS1=posS1/6;
 8006e06:	4b59      	ldr	r3, [pc, #356]	; (8006f6c <moveArm+0x414>)
 8006e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e0c:	4a5a      	ldr	r2, [pc, #360]	; (8006f78 <moveArm+0x420>)
 8006e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8006e12:	17db      	asrs	r3, r3, #31
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	b21a      	sxth	r2, r3
 8006e18:	4b54      	ldr	r3, [pc, #336]	; (8006f6c <moveArm+0x414>)
 8006e1a:	801a      	strh	r2, [r3, #0]
		posH1=posH1/6;
 8006e1c:	4b54      	ldr	r3, [pc, #336]	; (8006f70 <moveArm+0x418>)
 8006e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e22:	4a55      	ldr	r2, [pc, #340]	; (8006f78 <moveArm+0x420>)
 8006e24:	fb82 1203 	smull	r1, r2, r2, r3
 8006e28:	17db      	asrs	r3, r3, #31
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	b21a      	sxth	r2, r3
 8006e2e:	4b50      	ldr	r3, [pc, #320]	; (8006f70 <moveArm+0x418>)
 8006e30:	801a      	strh	r2, [r3, #0]

		int16_t iposR = round(posR1);
 8006e32:	4b4d      	ldr	r3, [pc, #308]	; (8006f68 <moveArm+0x410>)
 8006e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7f9 fb73 	bl	8000524 <__aeabi_i2d>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	4618      	mov	r0, r3
 8006e44:	4621      	mov	r1, r4
 8006e46:	f7f9 fe71 	bl	8000b2c <__aeabi_d2iz>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		int16_t iposS = round(posS1);
 8006e50:	4b46      	ldr	r3, [pc, #280]	; (8006f6c <moveArm+0x414>)
 8006e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7f9 fb64 	bl	8000524 <__aeabi_i2d>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4618      	mov	r0, r3
 8006e62:	4621      	mov	r1, r4
 8006e64:	f7f9 fe62 	bl	8000b2c <__aeabi_d2iz>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		int16_t iposH = round(posH1);
 8006e6e:	4b40      	ldr	r3, [pc, #256]	; (8006f70 <moveArm+0x418>)
 8006e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7f9 fb55 	bl	8000524 <__aeabi_i2d>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	4618      	mov	r0, r3
 8006e80:	4621      	mov	r1, r4
 8006e82:	f7f9 fe53 	bl	8000b2c <__aeabi_d2iz>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

		sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8006e8c:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 8006e90:	f9b7 106a 	ldrsh.w	r1, [r7, #106]	; 0x6a
 8006e94:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4937      	ldr	r1, [pc, #220]	; (8006f7c <moveArm+0x424>)
 8006e9e:	4838      	ldr	r0, [pc, #224]	; (8006f80 <moveArm+0x428>)
 8006ea0:	f000 fc80 	bl	80077a4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006ea4:	4836      	ldr	r0, [pc, #216]	; (8006f80 <moveArm+0x428>)
 8006ea6:	f7f9 f993 	bl	80001d0 <strlen>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eb2:	4933      	ldr	r1, [pc, #204]	; (8006f80 <moveArm+0x428>)
 8006eb4:	4833      	ldr	r0, [pc, #204]	; (8006f84 <moveArm+0x42c>)
 8006eb6:	f7fd faaf 	bl	8004418 <HAL_UART_Transmit>

  		if(NRF24_write(uart_buffer, sizeof(uart_buffer))) {
 8006eba:	2164      	movs	r1, #100	; 0x64
 8006ebc:	4830      	ldr	r0, [pc, #192]	; (8006f80 <moveArm+0x428>)
 8006ebe:	f7fe fe77 	bl	8005bb0 <NRF24_write>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d019      	beq.n	8006efc <moveArm+0x3a4>
  			HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 8006ec8:	230a      	movs	r3, #10
 8006eca:	221a      	movs	r2, #26
 8006ecc:	492e      	ldr	r1, [pc, #184]	; (8006f88 <moveArm+0x430>)
 8006ece:	482d      	ldr	r0, [pc, #180]	; (8006f84 <moveArm+0x42c>)
 8006ed0:	f7fd faa2 	bl	8004418 <HAL_UART_Transmit>
  		  	char myDataack[80];
  		  	sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 8006ed4:	f107 0314 	add.w	r3, r7, #20
 8006ed8:	4a2c      	ldr	r2, [pc, #176]	; (8006f8c <moveArm+0x434>)
 8006eda:	492d      	ldr	r1, [pc, #180]	; (8006f90 <moveArm+0x438>)
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fc61 	bl	80077a4 <siprintf>
  		  	HAL_UART_Transmit(&huart2, (uint8_t *)myDataack, strlen(myDataack), 10);
 8006ee2:	f107 0314 	add.w	r3, r7, #20
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7f9 f972 	bl	80001d0 <strlen>
 8006eec:	4603      	mov	r3, r0
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f107 0114 	add.w	r1, r7, #20
 8006ef4:	230a      	movs	r3, #10
 8006ef6:	4823      	ldr	r0, [pc, #140]	; (8006f84 <moveArm+0x42c>)
 8006ef8:	f7fd fa8e 	bl	8004418 <HAL_UART_Transmit>
  		}

		//Serial.write(strCommand);
		//Serial.print(strCommand);
		//Serial.println();
		n=0;
 8006efc:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <moveArm+0x41c>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]

  }

}
 8006f02:	bf00      	nop
 8006f04:	3794      	adds	r7, #148	; 0x94
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd90      	pop	{r4, r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w
 8006f10:	9999999a 	.word	0x9999999a
 8006f14:	3fb99999 	.word	0x3fb99999
 8006f18:	66666666 	.word	0x66666666
 8006f1c:	400a6666 	.word	0x400a6666
 8006f20:	00000000 	.word	0x00000000
 8006f24:	4072c000 	.word	0x4072c000
 8006f28:	66666666 	.word	0x66666666
 8006f2c:	401a6666 	.word	0x401a6666
 8006f30:	00000000 	.word	0x00000000
 8006f34:	4062c000 	.word	0x4062c000
 8006f38:	2000001c 	.word	0x2000001c
 8006f3c:	447a0000 	.word	0x447a0000
 8006f40:	20000014 	.word	0x20000014
 8006f44:	43340000 	.word	0x43340000
 8006f48:	43340000 	.word	0x43340000
 8006f4c:	20000010 	.word	0x20000010
 8006f50:	43960000 	.word	0x43960000
 8006f54:	43960000 	.word	0x43960000
 8006f58:	41200000 	.word	0x41200000
 8006f5c:	20000018 	.word	0x20000018
 8006f60:	43160000 	.word	0x43160000
 8006f64:	43160000 	.word	0x43160000
 8006f68:	20000198 	.word	0x20000198
 8006f6c:	2000019a 	.word	0x2000019a
 8006f70:	2000019c 	.word	0x2000019c
 8006f74:	2000019e 	.word	0x2000019e
 8006f78:	2aaaaaab 	.word	0x2aaaaaab
 8006f7c:	0800851c 	.word	0x0800851c
 8006f80:	200004a8 	.word	0x200004a8
 8006f84:	20000224 	.word	0x20000224
 8006f88:	0800853c 	.word	0x0800853c
 8006f8c:	20000410 	.word	0x20000410
 8006f90:	08008558 	.word	0x08008558

08006f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b0b8      	sub	sp, #224	; 0xe0
 8006f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006f9e:	2244      	movs	r2, #68	; 0x44
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fbf5 	bl	8007792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fa8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	605a      	str	r2, [r3, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
 8006fb4:	60da      	str	r2, [r3, #12]
 8006fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006fb8:	463b      	mov	r3, r7
 8006fba:	2288      	movs	r2, #136	; 0x88
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fbe7 	bl	8007792 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006fd6:	2360      	movs	r3, #96	; 0x60
 8006fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006fee:	2328      	movs	r3, #40	; 0x28
 8006ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006ff4:	2307      	movs	r3, #7
 8006ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007000:	2302      	movs	r3, #2
 8007002:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007006:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800700a:	4618      	mov	r0, r3
 800700c:	f7fb f8a4 	bl	8002158 <HAL_RCC_OscConfig>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8007016:	f000 f9a5 	bl	8007364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800701a:	230f      	movs	r3, #15
 800701c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007020:	2303      	movs	r3, #3
 8007022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007026:	2300      	movs	r3, #0
 8007028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007032:	2300      	movs	r3, #0
 8007034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007038:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800703c:	2104      	movs	r1, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fb fc3a 	bl	80028b8 <HAL_RCC_ClockConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800704a:	f000 f98b 	bl	8007364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800704e:	2342      	movs	r3, #66	; 0x42
 8007050:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007052:	2300      	movs	r3, #0
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007056:	2300      	movs	r3, #0
 8007058:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800705a:	463b      	mov	r3, r7
 800705c:	4618      	mov	r0, r3
 800705e:	f7fb fe2f 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8007068:	f000 f97c 	bl	8007364 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800706c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007070:	f7fb f81c 	bl	80020ac <HAL_PWREx_ControlVoltageScaling>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800707a:	f000 f973 	bl	8007364 <Error_Handler>
  }
}
 800707e:	bf00      	nop
 8007080:	37e0      	adds	r7, #224	; 0xe0
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <MX_I2C1_Init+0x74>)
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <MX_I2C1_Init+0x78>)
 8007090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8007092:	4b1a      	ldr	r3, [pc, #104]	; (80070fc <MX_I2C1_Init+0x74>)
 8007094:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <MX_I2C1_Init+0x7c>)
 8007096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007098:	4b18      	ldr	r3, [pc, #96]	; (80070fc <MX_I2C1_Init+0x74>)
 800709a:	2200      	movs	r2, #0
 800709c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800709e:	4b17      	ldr	r3, [pc, #92]	; (80070fc <MX_I2C1_Init+0x74>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070a4:	4b15      	ldr	r3, [pc, #84]	; (80070fc <MX_I2C1_Init+0x74>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80070aa:	4b14      	ldr	r3, [pc, #80]	; (80070fc <MX_I2C1_Init+0x74>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <MX_I2C1_Init+0x74>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <MX_I2C1_Init+0x74>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <MX_I2C1_Init+0x74>)
 80070be:	2200      	movs	r2, #0
 80070c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80070c2:	480e      	ldr	r0, [pc, #56]	; (80070fc <MX_I2C1_Init+0x74>)
 80070c4:	f7fa faf2 	bl	80016ac <HAL_I2C_Init>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80070ce:	f000 f949 	bl	8007364 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80070d2:	2100      	movs	r1, #0
 80070d4:	4809      	ldr	r0, [pc, #36]	; (80070fc <MX_I2C1_Init+0x74>)
 80070d6:	f7fa ff43 	bl	8001f60 <HAL_I2CEx_ConfigAnalogFilter>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80070e0:	f000 f940 	bl	8007364 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80070e4:	2100      	movs	r1, #0
 80070e6:	4805      	ldr	r0, [pc, #20]	; (80070fc <MX_I2C1_Init+0x74>)
 80070e8:	f7fa ff85 	bl	8001ff6 <HAL_I2CEx_ConfigDigitalFilter>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80070f2:	f000 f937 	bl	8007364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	200002ac 	.word	0x200002ac
 8007100:	40005400 	.word	0x40005400
 8007104:	10909cec 	.word	0x10909cec

08007108 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <MX_SPI1_Init+0x74>)
 800710e:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <MX_SPI1_Init+0x78>)
 8007110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007112:	4b1a      	ldr	r3, [pc, #104]	; (800717c <MX_SPI1_Init+0x74>)
 8007114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800711a:	4b18      	ldr	r3, [pc, #96]	; (800717c <MX_SPI1_Init+0x74>)
 800711c:	2200      	movs	r2, #0
 800711e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007120:	4b16      	ldr	r3, [pc, #88]	; (800717c <MX_SPI1_Init+0x74>)
 8007122:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007126:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007128:	4b14      	ldr	r3, [pc, #80]	; (800717c <MX_SPI1_Init+0x74>)
 800712a:	2202      	movs	r2, #2
 800712c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <MX_SPI1_Init+0x74>)
 8007130:	2201      	movs	r2, #1
 8007132:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007134:	4b11      	ldr	r3, [pc, #68]	; (800717c <MX_SPI1_Init+0x74>)
 8007136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <MX_SPI1_Init+0x74>)
 800713e:	2210      	movs	r2, #16
 8007140:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <MX_SPI1_Init+0x74>)
 8007144:	2200      	movs	r2, #0
 8007146:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <MX_SPI1_Init+0x74>)
 800714a:	2200      	movs	r2, #0
 800714c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <MX_SPI1_Init+0x74>)
 8007150:	2200      	movs	r2, #0
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007154:	4b09      	ldr	r3, [pc, #36]	; (800717c <MX_SPI1_Init+0x74>)
 8007156:	2207      	movs	r2, #7
 8007158:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800715a:	4b08      	ldr	r3, [pc, #32]	; (800717c <MX_SPI1_Init+0x74>)
 800715c:	2200      	movs	r2, #0
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007160:	4b06      	ldr	r3, [pc, #24]	; (800717c <MX_SPI1_Init+0x74>)
 8007162:	2200      	movs	r2, #0
 8007164:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007166:	4805      	ldr	r0, [pc, #20]	; (800717c <MX_SPI1_Init+0x74>)
 8007168:	f7fc fa5a 	bl	8003620 <HAL_SPI_Init>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007172:	f000 f8f7 	bl	8007364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	200001c0 	.word	0x200001c0
 8007180:	40013000 	.word	0x40013000

08007184 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8007188:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <MX_SPI3_Init+0x74>)
 800718a:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <MX_SPI3_Init+0x78>)
 800718c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800718e:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <MX_SPI3_Init+0x74>)
 8007190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007194:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <MX_SPI3_Init+0x74>)
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800719c:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <MX_SPI3_Init+0x74>)
 800719e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80071a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80071a4:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80071b0:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80071b8:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071ba:	2210      	movs	r2, #16
 80071bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80071be:	4b0e      	ldr	r3, [pc, #56]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80071c4:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80071d0:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071d2:	2207      	movs	r2, #7
 80071d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80071d6:	4b08      	ldr	r3, [pc, #32]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071d8:	2200      	movs	r2, #0
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071de:	2208      	movs	r2, #8
 80071e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80071e2:	4805      	ldr	r0, [pc, #20]	; (80071f8 <MX_SPI3_Init+0x74>)
 80071e4:	f7fc fa1c 	bl	8003620 <HAL_SPI_Init>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80071ee:	f000 f8b9 	bl	8007364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80071f2:	bf00      	nop
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000430 	.word	0x20000430
 80071fc:	40003c00 	.word	0x40003c00

08007200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007204:	4b14      	ldr	r3, [pc, #80]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007206:	4a15      	ldr	r2, [pc, #84]	; (800725c <MX_USART2_UART_Init+0x5c>)
 8007208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800720a:	4b13      	ldr	r3, [pc, #76]	; (8007258 <MX_USART2_UART_Init+0x58>)
 800720c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007214:	2200      	movs	r2, #0
 8007216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007218:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <MX_USART2_UART_Init+0x58>)
 800721a:	2200      	movs	r2, #0
 800721c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007220:	2200      	movs	r2, #0
 8007222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007226:	220c      	movs	r2, #12
 8007228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800722a:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <MX_USART2_UART_Init+0x58>)
 800722c:	2200      	movs	r2, #0
 800722e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007232:	2200      	movs	r2, #0
 8007234:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007238:	2200      	movs	r2, #0
 800723a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <MX_USART2_UART_Init+0x58>)
 800723e:	2200      	movs	r2, #0
 8007240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007242:	4805      	ldr	r0, [pc, #20]	; (8007258 <MX_USART2_UART_Init+0x58>)
 8007244:	f7fd f89a 	bl	800437c <HAL_UART_Init>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800724e:	f000 f889 	bl	8007364 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000224 	.word	0x20000224
 800725c:	40004400 	.word	0x40004400

08007260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b08a      	sub	sp, #40	; 0x28
 8007264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007266:	f107 0314 	add.w	r3, r7, #20
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	605a      	str	r2, [r3, #4]
 8007270:	609a      	str	r2, [r3, #8]
 8007272:	60da      	str	r2, [r3, #12]
 8007274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007276:	4b38      	ldr	r3, [pc, #224]	; (8007358 <MX_GPIO_Init+0xf8>)
 8007278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727a:	4a37      	ldr	r2, [pc, #220]	; (8007358 <MX_GPIO_Init+0xf8>)
 800727c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007282:	4b35      	ldr	r3, [pc, #212]	; (8007358 <MX_GPIO_Init+0xf8>)
 8007284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800728e:	4b32      	ldr	r3, [pc, #200]	; (8007358 <MX_GPIO_Init+0xf8>)
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	4a31      	ldr	r2, [pc, #196]	; (8007358 <MX_GPIO_Init+0xf8>)
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800729a:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <MX_GPIO_Init+0xf8>)
 800729c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072a6:	4b2c      	ldr	r3, [pc, #176]	; (8007358 <MX_GPIO_Init+0xf8>)
 80072a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072aa:	4a2b      	ldr	r2, [pc, #172]	; (8007358 <MX_GPIO_Init+0xf8>)
 80072ac:	f043 0302 	orr.w	r3, r3, #2
 80072b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072b2:	4b29      	ldr	r3, [pc, #164]	; (8007358 <MX_GPIO_Init+0xf8>)
 80072b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	60bb      	str	r3, [r7, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80072be:	4b26      	ldr	r3, [pc, #152]	; (8007358 <MX_GPIO_Init+0xf8>)
 80072c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c2:	4a25      	ldr	r2, [pc, #148]	; (8007358 <MX_GPIO_Init+0xf8>)
 80072c4:	f043 0304 	orr.w	r3, r3, #4
 80072c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80072ca:	4b23      	ldr	r3, [pc, #140]	; (8007358 <MX_GPIO_Init+0xf8>)
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	607b      	str	r3, [r7, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80072d6:	2200      	movs	r2, #0
 80072d8:	2110      	movs	r1, #16
 80072da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072de:	f7fa f9cd 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_RESET);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2101      	movs	r1, #1
 80072e6:	481d      	ldr	r0, [pc, #116]	; (800735c <MX_GPIO_Init+0xfc>)
 80072e8:	f7fa f9c8 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_CS_Pin|nRF_CE_Pin, GPIO_PIN_RESET);
 80072ec:	2200      	movs	r2, #0
 80072ee:	f44f 7140 	mov.w	r1, #768	; 0x300
 80072f2:	481b      	ldr	r0, [pc, #108]	; (8007360 <MX_GPIO_Init+0x100>)
 80072f4:	f7fa f9c2 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM_CS_Pin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 80072f8:	2310      	movs	r3, #16
 80072fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072fc:	2301      	movs	r3, #1
 80072fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007304:	2300      	movs	r3, #0
 8007306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 8007308:	f107 0314 	add.w	r3, r7, #20
 800730c:	4619      	mov	r1, r3
 800730e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007312:	f7fa f80b 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_PWR_Pin */
  GPIO_InitStruct.Pin = nRF_PWR_Pin;
 8007316:	2301      	movs	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800731a:	2301      	movs	r3, #1
 800731c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007322:	2300      	movs	r3, #0
 8007324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_PWR_GPIO_Port, &GPIO_InitStruct);
 8007326:	f107 0314 	add.w	r3, r7, #20
 800732a:	4619      	mov	r1, r3
 800732c:	480b      	ldr	r0, [pc, #44]	; (800735c <MX_GPIO_Init+0xfc>)
 800732e:	f7f9 fffd 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CS_Pin nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CS_Pin|nRF_CE_Pin;
 8007332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007338:	2301      	movs	r3, #1
 800733a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007340:	2300      	movs	r3, #0
 8007342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	4619      	mov	r1, r3
 800734a:	4805      	ldr	r0, [pc, #20]	; (8007360 <MX_GPIO_Init+0x100>)
 800734c:	f7f9 ffee 	bl	800132c <HAL_GPIO_Init>

}
 8007350:	bf00      	nop
 8007352:	3728      	adds	r7, #40	; 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40021000 	.word	0x40021000
 800735c:	48000400 	.word	0x48000400
 8007360:	48000800 	.word	0x48000800

08007364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800737a:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <HAL_MspInit+0x44>)
 800737c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737e:	4a0e      	ldr	r2, [pc, #56]	; (80073b8 <HAL_MspInit+0x44>)
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	6613      	str	r3, [r2, #96]	; 0x60
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <HAL_MspInit+0x44>)
 8007388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	607b      	str	r3, [r7, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <HAL_MspInit+0x44>)
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <HAL_MspInit+0x44>)
 8007398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739c:	6593      	str	r3, [r2, #88]	; 0x58
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <HAL_MspInit+0x44>)
 80073a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40021000 	.word	0x40021000

080073bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a17      	ldr	r2, [pc, #92]	; (8007438 <HAL_I2C_MspInit+0x7c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d127      	bne.n	800742e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073de:	4b17      	ldr	r3, [pc, #92]	; (800743c <HAL_I2C_MspInit+0x80>)
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	4a16      	ldr	r2, [pc, #88]	; (800743c <HAL_I2C_MspInit+0x80>)
 80073e4:	f043 0302 	orr.w	r3, r3, #2
 80073e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073ea:	4b14      	ldr	r3, [pc, #80]	; (800743c <HAL_I2C_MspInit+0x80>)
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073f6:	23c0      	movs	r3, #192	; 0xc0
 80073f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073fa:	2312      	movs	r3, #18
 80073fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073fe:	2301      	movs	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007402:	2303      	movs	r3, #3
 8007404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007406:	2304      	movs	r3, #4
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800740a:	f107 0314 	add.w	r3, r7, #20
 800740e:	4619      	mov	r1, r3
 8007410:	480b      	ldr	r0, [pc, #44]	; (8007440 <HAL_I2C_MspInit+0x84>)
 8007412:	f7f9 ff8b 	bl	800132c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <HAL_I2C_MspInit+0x80>)
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741a:	4a08      	ldr	r2, [pc, #32]	; (800743c <HAL_I2C_MspInit+0x80>)
 800741c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007420:	6593      	str	r3, [r2, #88]	; 0x58
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <HAL_I2C_MspInit+0x80>)
 8007424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800742e:	bf00      	nop
 8007430:	3728      	adds	r7, #40	; 0x28
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40005400 	.word	0x40005400
 800743c:	40021000 	.word	0x40021000
 8007440:	48000400 	.word	0x48000400

08007444 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08c      	sub	sp, #48	; 0x30
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800744c:	f107 031c 	add.w	r3, r7, #28
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	605a      	str	r2, [r3, #4]
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2f      	ldr	r2, [pc, #188]	; (8007520 <HAL_SPI_MspInit+0xdc>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d129      	bne.n	80074ba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007466:	4b2f      	ldr	r3, [pc, #188]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 8007468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746a:	4a2e      	ldr	r2, [pc, #184]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 800746c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007470:	6613      	str	r3, [r2, #96]	; 0x60
 8007472:	4b2c      	ldr	r3, [pc, #176]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 8007474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800747e:	4b29      	ldr	r3, [pc, #164]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	4a28      	ldr	r2, [pc, #160]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007496:	23e0      	movs	r3, #224	; 0xe0
 8007498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800749a:	2302      	movs	r3, #2
 800749c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a2:	2303      	movs	r3, #3
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80074a6:	2305      	movs	r3, #5
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074aa:	f107 031c 	add.w	r3, r7, #28
 80074ae:	4619      	mov	r1, r3
 80074b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074b4:	f7f9 ff3a 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80074b8:	e02d      	b.n	8007516 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <HAL_SPI_MspInit+0xe4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d128      	bne.n	8007516 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80074c4:	4b17      	ldr	r3, [pc, #92]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 80074c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c8:	4a16      	ldr	r2, [pc, #88]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 80074ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ce:	6593      	str	r3, [r2, #88]	; 0x58
 80074d0:	4b14      	ldr	r3, [pc, #80]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 80074d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074dc:	4b11      	ldr	r3, [pc, #68]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 80074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e0:	4a10      	ldr	r2, [pc, #64]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 80074e2:	f043 0304 	orr.w	r3, r3, #4
 80074e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074e8:	4b0e      	ldr	r3, [pc, #56]	; (8007524 <HAL_SPI_MspInit+0xe0>)
 80074ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80074f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fa:	2302      	movs	r3, #2
 80074fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007502:	2303      	movs	r3, #3
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007506:	2306      	movs	r3, #6
 8007508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800750a:	f107 031c 	add.w	r3, r7, #28
 800750e:	4619      	mov	r1, r3
 8007510:	4806      	ldr	r0, [pc, #24]	; (800752c <HAL_SPI_MspInit+0xe8>)
 8007512:	f7f9 ff0b 	bl	800132c <HAL_GPIO_Init>
}
 8007516:	bf00      	nop
 8007518:	3730      	adds	r7, #48	; 0x30
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	40013000 	.word	0x40013000
 8007524:	40021000 	.word	0x40021000
 8007528:	40003c00 	.word	0x40003c00
 800752c:	48000800 	.word	0x48000800

08007530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a17      	ldr	r2, [pc, #92]	; (80075ac <HAL_UART_MspInit+0x7c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d128      	bne.n	80075a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007552:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <HAL_UART_MspInit+0x80>)
 8007554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007556:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <HAL_UART_MspInit+0x80>)
 8007558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800755c:	6593      	str	r3, [r2, #88]	; 0x58
 800755e:	4b14      	ldr	r3, [pc, #80]	; (80075b0 <HAL_UART_MspInit+0x80>)
 8007560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <HAL_UART_MspInit+0x80>)
 800756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756e:	4a10      	ldr	r2, [pc, #64]	; (80075b0 <HAL_UART_MspInit+0x80>)
 8007570:	f043 0301 	orr.w	r3, r3, #1
 8007574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007576:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <HAL_UART_MspInit+0x80>)
 8007578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007582:	230c      	movs	r3, #12
 8007584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007586:	2302      	movs	r3, #2
 8007588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758e:	2303      	movs	r3, #3
 8007590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007592:	2307      	movs	r3, #7
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007596:	f107 0314 	add.w	r3, r7, #20
 800759a:	4619      	mov	r1, r3
 800759c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075a0:	f7f9 fec4 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80075a4:	bf00      	nop
 80075a6:	3728      	adds	r7, #40	; 0x28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40004400 	.word	0x40004400
 80075b0:	40021000 	.word	0x40021000

080075b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075b8:	bf00      	nop
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075c6:	e7fe      	b.n	80075c6 <HardFault_Handler+0x4>

080075c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075cc:	e7fe      	b.n	80075cc <MemManage_Handler+0x4>

080075ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075d2:	e7fe      	b.n	80075d2 <BusFault_Handler+0x4>

080075d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075d8:	e7fe      	b.n	80075d8 <UsageFault_Handler+0x4>

080075da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075da:	b480      	push	{r7}
 80075dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075ec:	bf00      	nop
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80075f6:	b480      	push	{r7}
 80075f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007608:	f7f9 fcda 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800760c:	bf00      	nop
 800760e:	bd80      	pop	{r7, pc}

08007610 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007618:	4b11      	ldr	r3, [pc, #68]	; (8007660 <_sbrk+0x50>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <_sbrk+0x16>
		heap_end = &end;
 8007620:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <_sbrk+0x50>)
 8007622:	4a10      	ldr	r2, [pc, #64]	; (8007664 <_sbrk+0x54>)
 8007624:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007626:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <_sbrk+0x50>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800762c:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <_sbrk+0x50>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	466a      	mov	r2, sp
 8007636:	4293      	cmp	r3, r2
 8007638:	d907      	bls.n	800764a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800763a:	f000 f875 	bl	8007728 <__errno>
 800763e:	4602      	mov	r2, r0
 8007640:	230c      	movs	r3, #12
 8007642:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007644:	f04f 33ff 	mov.w	r3, #4294967295
 8007648:	e006      	b.n	8007658 <_sbrk+0x48>
	}

	heap_end += incr;
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <_sbrk+0x50>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	4a03      	ldr	r2, [pc, #12]	; (8007660 <_sbrk+0x50>)
 8007654:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007656:	68fb      	ldr	r3, [r7, #12]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	200001a0 	.word	0x200001a0
 8007664:	20000510 	.word	0x20000510

08007668 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800766c:	4b17      	ldr	r3, [pc, #92]	; (80076cc <SystemInit+0x64>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <SystemInit+0x64>)
 8007674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800767c:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <SystemInit+0x68>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a13      	ldr	r2, [pc, #76]	; (80076d0 <SystemInit+0x68>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007688:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <SystemInit+0x68>)
 800768a:	2200      	movs	r2, #0
 800768c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800768e:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <SystemInit+0x68>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <SystemInit+0x68>)
 8007694:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007698:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800769c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800769e:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <SystemInit+0x68>)
 80076a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80076a6:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <SystemInit+0x68>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <SystemInit+0x68>)
 80076ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80076b2:	4b07      	ldr	r3, [pc, #28]	; (80076d0 <SystemInit+0x68>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <SystemInit+0x64>)
 80076ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076be:	609a      	str	r2, [r3, #8]
#endif
}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	e000ed00 	.word	0xe000ed00
 80076d0:	40021000 	.word	0x40021000

080076d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80076d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800770c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80076d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80076da:	e003      	b.n	80076e4 <LoopCopyDataInit>

080076dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80076de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80076e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80076e2:	3104      	adds	r1, #4

080076e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80076e4:	480b      	ldr	r0, [pc, #44]	; (8007714 <LoopForever+0xa>)
	ldr	r3, =_edata
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <LoopForever+0xe>)
	adds	r2, r0, r1
 80076e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80076ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80076ec:	d3f6      	bcc.n	80076dc <CopyDataInit>
	ldr	r2, =_sbss
 80076ee:	4a0b      	ldr	r2, [pc, #44]	; (800771c <LoopForever+0x12>)
	b	LoopFillZerobss
 80076f0:	e002      	b.n	80076f8 <LoopFillZerobss>

080076f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80076f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80076f4:	f842 3b04 	str.w	r3, [r2], #4

080076f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80076f8:	4b09      	ldr	r3, [pc, #36]	; (8007720 <LoopForever+0x16>)
	cmp	r2, r3
 80076fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80076fc:	d3f9      	bcc.n	80076f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80076fe:	f7ff ffb3 	bl	8007668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007702:	f000 f817 	bl	8007734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007706:	f7ff f9b7 	bl	8006a78 <main>

0800770a <LoopForever>:

LoopForever:
    b LoopForever
 800770a:	e7fe      	b.n	800770a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800770c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007710:	080085f8 	.word	0x080085f8
	ldr	r0, =_sdata
 8007714:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007718:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 800771c:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8007720:	20000510 	.word	0x20000510

08007724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007724:	e7fe      	b.n	8007724 <ADC1_2_IRQHandler>
	...

08007728 <__errno>:
 8007728:	4b01      	ldr	r3, [pc, #4]	; (8007730 <__errno+0x8>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000024 	.word	0x20000024

08007734 <__libc_init_array>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4e0d      	ldr	r6, [pc, #52]	; (800776c <__libc_init_array+0x38>)
 8007738:	4c0d      	ldr	r4, [pc, #52]	; (8007770 <__libc_init_array+0x3c>)
 800773a:	1ba4      	subs	r4, r4, r6
 800773c:	10a4      	asrs	r4, r4, #2
 800773e:	2500      	movs	r5, #0
 8007740:	42a5      	cmp	r5, r4
 8007742:	d109      	bne.n	8007758 <__libc_init_array+0x24>
 8007744:	4e0b      	ldr	r6, [pc, #44]	; (8007774 <__libc_init_array+0x40>)
 8007746:	4c0c      	ldr	r4, [pc, #48]	; (8007778 <__libc_init_array+0x44>)
 8007748:	f000 fc28 	bl	8007f9c <_init>
 800774c:	1ba4      	subs	r4, r4, r6
 800774e:	10a4      	asrs	r4, r4, #2
 8007750:	2500      	movs	r5, #0
 8007752:	42a5      	cmp	r5, r4
 8007754:	d105      	bne.n	8007762 <__libc_init_array+0x2e>
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800775c:	4798      	blx	r3
 800775e:	3501      	adds	r5, #1
 8007760:	e7ee      	b.n	8007740 <__libc_init_array+0xc>
 8007762:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007766:	4798      	blx	r3
 8007768:	3501      	adds	r5, #1
 800776a:	e7f2      	b.n	8007752 <__libc_init_array+0x1e>
 800776c:	080085f0 	.word	0x080085f0
 8007770:	080085f0 	.word	0x080085f0
 8007774:	080085f0 	.word	0x080085f0
 8007778:	080085f4 	.word	0x080085f4

0800777c <memcpy>:
 800777c:	b510      	push	{r4, lr}
 800777e:	1e43      	subs	r3, r0, #1
 8007780:	440a      	add	r2, r1
 8007782:	4291      	cmp	r1, r2
 8007784:	d100      	bne.n	8007788 <memcpy+0xc>
 8007786:	bd10      	pop	{r4, pc}
 8007788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800778c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007790:	e7f7      	b.n	8007782 <memcpy+0x6>

08007792 <memset>:
 8007792:	4402      	add	r2, r0
 8007794:	4603      	mov	r3, r0
 8007796:	4293      	cmp	r3, r2
 8007798:	d100      	bne.n	800779c <memset+0xa>
 800779a:	4770      	bx	lr
 800779c:	f803 1b01 	strb.w	r1, [r3], #1
 80077a0:	e7f9      	b.n	8007796 <memset+0x4>
	...

080077a4 <siprintf>:
 80077a4:	b40e      	push	{r1, r2, r3}
 80077a6:	b500      	push	{lr}
 80077a8:	b09c      	sub	sp, #112	; 0x70
 80077aa:	ab1d      	add	r3, sp, #116	; 0x74
 80077ac:	9002      	str	r0, [sp, #8]
 80077ae:	9006      	str	r0, [sp, #24]
 80077b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077b4:	4809      	ldr	r0, [pc, #36]	; (80077dc <siprintf+0x38>)
 80077b6:	9107      	str	r1, [sp, #28]
 80077b8:	9104      	str	r1, [sp, #16]
 80077ba:	4909      	ldr	r1, [pc, #36]	; (80077e0 <siprintf+0x3c>)
 80077bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	a902      	add	r1, sp, #8
 80077c8:	f000 f866 	bl	8007898 <_svfiprintf_r>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	b01c      	add	sp, #112	; 0x70
 80077d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077d8:	b003      	add	sp, #12
 80077da:	4770      	bx	lr
 80077dc:	20000024 	.word	0x20000024
 80077e0:	ffff0208 	.word	0xffff0208

080077e4 <__ssputs_r>:
 80077e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	688e      	ldr	r6, [r1, #8]
 80077ea:	429e      	cmp	r6, r3
 80077ec:	4682      	mov	sl, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	4690      	mov	r8, r2
 80077f2:	4699      	mov	r9, r3
 80077f4:	d837      	bhi.n	8007866 <__ssputs_r+0x82>
 80077f6:	898a      	ldrh	r2, [r1, #12]
 80077f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077fc:	d031      	beq.n	8007862 <__ssputs_r+0x7e>
 80077fe:	6825      	ldr	r5, [r4, #0]
 8007800:	6909      	ldr	r1, [r1, #16]
 8007802:	1a6f      	subs	r7, r5, r1
 8007804:	6965      	ldr	r5, [r4, #20]
 8007806:	2302      	movs	r3, #2
 8007808:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800780c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007810:	f109 0301 	add.w	r3, r9, #1
 8007814:	443b      	add	r3, r7
 8007816:	429d      	cmp	r5, r3
 8007818:	bf38      	it	cc
 800781a:	461d      	movcc	r5, r3
 800781c:	0553      	lsls	r3, r2, #21
 800781e:	d530      	bpl.n	8007882 <__ssputs_r+0x9e>
 8007820:	4629      	mov	r1, r5
 8007822:	f000 fb21 	bl	8007e68 <_malloc_r>
 8007826:	4606      	mov	r6, r0
 8007828:	b950      	cbnz	r0, 8007840 <__ssputs_r+0x5c>
 800782a:	230c      	movs	r3, #12
 800782c:	f8ca 3000 	str.w	r3, [sl]
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007840:	463a      	mov	r2, r7
 8007842:	6921      	ldr	r1, [r4, #16]
 8007844:	f7ff ff9a 	bl	800777c <memcpy>
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	81a3      	strh	r3, [r4, #12]
 8007854:	6126      	str	r6, [r4, #16]
 8007856:	6165      	str	r5, [r4, #20]
 8007858:	443e      	add	r6, r7
 800785a:	1bed      	subs	r5, r5, r7
 800785c:	6026      	str	r6, [r4, #0]
 800785e:	60a5      	str	r5, [r4, #8]
 8007860:	464e      	mov	r6, r9
 8007862:	454e      	cmp	r6, r9
 8007864:	d900      	bls.n	8007868 <__ssputs_r+0x84>
 8007866:	464e      	mov	r6, r9
 8007868:	4632      	mov	r2, r6
 800786a:	4641      	mov	r1, r8
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	f000 fa93 	bl	8007d98 <memmove>
 8007872:	68a3      	ldr	r3, [r4, #8]
 8007874:	1b9b      	subs	r3, r3, r6
 8007876:	60a3      	str	r3, [r4, #8]
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	441e      	add	r6, r3
 800787c:	6026      	str	r6, [r4, #0]
 800787e:	2000      	movs	r0, #0
 8007880:	e7dc      	b.n	800783c <__ssputs_r+0x58>
 8007882:	462a      	mov	r2, r5
 8007884:	f000 fb4a 	bl	8007f1c <_realloc_r>
 8007888:	4606      	mov	r6, r0
 800788a:	2800      	cmp	r0, #0
 800788c:	d1e2      	bne.n	8007854 <__ssputs_r+0x70>
 800788e:	6921      	ldr	r1, [r4, #16]
 8007890:	4650      	mov	r0, sl
 8007892:	f000 fa9b 	bl	8007dcc <_free_r>
 8007896:	e7c8      	b.n	800782a <__ssputs_r+0x46>

08007898 <_svfiprintf_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	461d      	mov	r5, r3
 800789e:	898b      	ldrh	r3, [r1, #12]
 80078a0:	061f      	lsls	r7, r3, #24
 80078a2:	b09d      	sub	sp, #116	; 0x74
 80078a4:	4680      	mov	r8, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	4616      	mov	r6, r2
 80078aa:	d50f      	bpl.n	80078cc <_svfiprintf_r+0x34>
 80078ac:	690b      	ldr	r3, [r1, #16]
 80078ae:	b96b      	cbnz	r3, 80078cc <_svfiprintf_r+0x34>
 80078b0:	2140      	movs	r1, #64	; 0x40
 80078b2:	f000 fad9 	bl	8007e68 <_malloc_r>
 80078b6:	6020      	str	r0, [r4, #0]
 80078b8:	6120      	str	r0, [r4, #16]
 80078ba:	b928      	cbnz	r0, 80078c8 <_svfiprintf_r+0x30>
 80078bc:	230c      	movs	r3, #12
 80078be:	f8c8 3000 	str.w	r3, [r8]
 80078c2:	f04f 30ff 	mov.w	r0, #4294967295
 80078c6:	e0c8      	b.n	8007a5a <_svfiprintf_r+0x1c2>
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	6163      	str	r3, [r4, #20]
 80078cc:	2300      	movs	r3, #0
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	2320      	movs	r3, #32
 80078d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d6:	2330      	movs	r3, #48	; 0x30
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078dc:	9503      	str	r5, [sp, #12]
 80078de:	f04f 0b01 	mov.w	fp, #1
 80078e2:	4637      	mov	r7, r6
 80078e4:	463d      	mov	r5, r7
 80078e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078ea:	b10b      	cbz	r3, 80078f0 <_svfiprintf_r+0x58>
 80078ec:	2b25      	cmp	r3, #37	; 0x25
 80078ee:	d13e      	bne.n	800796e <_svfiprintf_r+0xd6>
 80078f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80078f4:	d00b      	beq.n	800790e <_svfiprintf_r+0x76>
 80078f6:	4653      	mov	r3, sl
 80078f8:	4632      	mov	r2, r6
 80078fa:	4621      	mov	r1, r4
 80078fc:	4640      	mov	r0, r8
 80078fe:	f7ff ff71 	bl	80077e4 <__ssputs_r>
 8007902:	3001      	adds	r0, #1
 8007904:	f000 80a4 	beq.w	8007a50 <_svfiprintf_r+0x1b8>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	4453      	add	r3, sl
 800790c:	9309      	str	r3, [sp, #36]	; 0x24
 800790e:	783b      	ldrb	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 809d 	beq.w	8007a50 <_svfiprintf_r+0x1b8>
 8007916:	2300      	movs	r3, #0
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007920:	9304      	str	r3, [sp, #16]
 8007922:	9307      	str	r3, [sp, #28]
 8007924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007928:	931a      	str	r3, [sp, #104]	; 0x68
 800792a:	462f      	mov	r7, r5
 800792c:	2205      	movs	r2, #5
 800792e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007932:	4850      	ldr	r0, [pc, #320]	; (8007a74 <_svfiprintf_r+0x1dc>)
 8007934:	f7f8 fc54 	bl	80001e0 <memchr>
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	b9d0      	cbnz	r0, 8007972 <_svfiprintf_r+0xda>
 800793c:	06d9      	lsls	r1, r3, #27
 800793e:	bf44      	itt	mi
 8007940:	2220      	movmi	r2, #32
 8007942:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007946:	071a      	lsls	r2, r3, #28
 8007948:	bf44      	itt	mi
 800794a:	222b      	movmi	r2, #43	; 0x2b
 800794c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007950:	782a      	ldrb	r2, [r5, #0]
 8007952:	2a2a      	cmp	r2, #42	; 0x2a
 8007954:	d015      	beq.n	8007982 <_svfiprintf_r+0xea>
 8007956:	9a07      	ldr	r2, [sp, #28]
 8007958:	462f      	mov	r7, r5
 800795a:	2000      	movs	r0, #0
 800795c:	250a      	movs	r5, #10
 800795e:	4639      	mov	r1, r7
 8007960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007964:	3b30      	subs	r3, #48	; 0x30
 8007966:	2b09      	cmp	r3, #9
 8007968:	d94d      	bls.n	8007a06 <_svfiprintf_r+0x16e>
 800796a:	b1b8      	cbz	r0, 800799c <_svfiprintf_r+0x104>
 800796c:	e00f      	b.n	800798e <_svfiprintf_r+0xf6>
 800796e:	462f      	mov	r7, r5
 8007970:	e7b8      	b.n	80078e4 <_svfiprintf_r+0x4c>
 8007972:	4a40      	ldr	r2, [pc, #256]	; (8007a74 <_svfiprintf_r+0x1dc>)
 8007974:	1a80      	subs	r0, r0, r2
 8007976:	fa0b f000 	lsl.w	r0, fp, r0
 800797a:	4318      	orrs	r0, r3
 800797c:	9004      	str	r0, [sp, #16]
 800797e:	463d      	mov	r5, r7
 8007980:	e7d3      	b.n	800792a <_svfiprintf_r+0x92>
 8007982:	9a03      	ldr	r2, [sp, #12]
 8007984:	1d11      	adds	r1, r2, #4
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	9103      	str	r1, [sp, #12]
 800798a:	2a00      	cmp	r2, #0
 800798c:	db01      	blt.n	8007992 <_svfiprintf_r+0xfa>
 800798e:	9207      	str	r2, [sp, #28]
 8007990:	e004      	b.n	800799c <_svfiprintf_r+0x104>
 8007992:	4252      	negs	r2, r2
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	9207      	str	r2, [sp, #28]
 800799a:	9304      	str	r3, [sp, #16]
 800799c:	783b      	ldrb	r3, [r7, #0]
 800799e:	2b2e      	cmp	r3, #46	; 0x2e
 80079a0:	d10c      	bne.n	80079bc <_svfiprintf_r+0x124>
 80079a2:	787b      	ldrb	r3, [r7, #1]
 80079a4:	2b2a      	cmp	r3, #42	; 0x2a
 80079a6:	d133      	bne.n	8007a10 <_svfiprintf_r+0x178>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d1a      	adds	r2, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9203      	str	r2, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfb8      	it	lt
 80079b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079b8:	3702      	adds	r7, #2
 80079ba:	9305      	str	r3, [sp, #20]
 80079bc:	4d2e      	ldr	r5, [pc, #184]	; (8007a78 <_svfiprintf_r+0x1e0>)
 80079be:	7839      	ldrb	r1, [r7, #0]
 80079c0:	2203      	movs	r2, #3
 80079c2:	4628      	mov	r0, r5
 80079c4:	f7f8 fc0c 	bl	80001e0 <memchr>
 80079c8:	b138      	cbz	r0, 80079da <_svfiprintf_r+0x142>
 80079ca:	2340      	movs	r3, #64	; 0x40
 80079cc:	1b40      	subs	r0, r0, r5
 80079ce:	fa03 f000 	lsl.w	r0, r3, r0
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	4303      	orrs	r3, r0
 80079d6:	3701      	adds	r7, #1
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	7839      	ldrb	r1, [r7, #0]
 80079dc:	4827      	ldr	r0, [pc, #156]	; (8007a7c <_svfiprintf_r+0x1e4>)
 80079de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079e2:	2206      	movs	r2, #6
 80079e4:	1c7e      	adds	r6, r7, #1
 80079e6:	f7f8 fbfb 	bl	80001e0 <memchr>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d038      	beq.n	8007a60 <_svfiprintf_r+0x1c8>
 80079ee:	4b24      	ldr	r3, [pc, #144]	; (8007a80 <_svfiprintf_r+0x1e8>)
 80079f0:	bb13      	cbnz	r3, 8007a38 <_svfiprintf_r+0x1a0>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	3307      	adds	r3, #7
 80079f6:	f023 0307 	bic.w	r3, r3, #7
 80079fa:	3308      	adds	r3, #8
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a00:	444b      	add	r3, r9
 8007a02:	9309      	str	r3, [sp, #36]	; 0x24
 8007a04:	e76d      	b.n	80078e2 <_svfiprintf_r+0x4a>
 8007a06:	fb05 3202 	mla	r2, r5, r2, r3
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	460f      	mov	r7, r1
 8007a0e:	e7a6      	b.n	800795e <_svfiprintf_r+0xc6>
 8007a10:	2300      	movs	r3, #0
 8007a12:	3701      	adds	r7, #1
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	4619      	mov	r1, r3
 8007a18:	250a      	movs	r5, #10
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a20:	3a30      	subs	r2, #48	; 0x30
 8007a22:	2a09      	cmp	r2, #9
 8007a24:	d903      	bls.n	8007a2e <_svfiprintf_r+0x196>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0c8      	beq.n	80079bc <_svfiprintf_r+0x124>
 8007a2a:	9105      	str	r1, [sp, #20]
 8007a2c:	e7c6      	b.n	80079bc <_svfiprintf_r+0x124>
 8007a2e:	fb05 2101 	mla	r1, r5, r1, r2
 8007a32:	2301      	movs	r3, #1
 8007a34:	4607      	mov	r7, r0
 8007a36:	e7f0      	b.n	8007a1a <_svfiprintf_r+0x182>
 8007a38:	ab03      	add	r3, sp, #12
 8007a3a:	9300      	str	r3, [sp, #0]
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <_svfiprintf_r+0x1ec>)
 8007a40:	a904      	add	r1, sp, #16
 8007a42:	4640      	mov	r0, r8
 8007a44:	f3af 8000 	nop.w
 8007a48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a4c:	4681      	mov	r9, r0
 8007a4e:	d1d6      	bne.n	80079fe <_svfiprintf_r+0x166>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	065b      	lsls	r3, r3, #25
 8007a54:	f53f af35 	bmi.w	80078c2 <_svfiprintf_r+0x2a>
 8007a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a5a:	b01d      	add	sp, #116	; 0x74
 8007a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a60:	ab03      	add	r3, sp, #12
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	4622      	mov	r2, r4
 8007a66:	4b07      	ldr	r3, [pc, #28]	; (8007a84 <_svfiprintf_r+0x1ec>)
 8007a68:	a904      	add	r1, sp, #16
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	f000 f882 	bl	8007b74 <_printf_i>
 8007a70:	e7ea      	b.n	8007a48 <_svfiprintf_r+0x1b0>
 8007a72:	bf00      	nop
 8007a74:	080085b4 	.word	0x080085b4
 8007a78:	080085ba 	.word	0x080085ba
 8007a7c:	080085be 	.word	0x080085be
 8007a80:	00000000 	.word	0x00000000
 8007a84:	080077e5 	.word	0x080077e5

08007a88 <_printf_common>:
 8007a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a8c:	4691      	mov	r9, r2
 8007a8e:	461f      	mov	r7, r3
 8007a90:	688a      	ldr	r2, [r1, #8]
 8007a92:	690b      	ldr	r3, [r1, #16]
 8007a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bfb8      	it	lt
 8007a9c:	4613      	movlt	r3, r2
 8007a9e:	f8c9 3000 	str.w	r3, [r9]
 8007aa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007aa6:	4606      	mov	r6, r0
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b112      	cbz	r2, 8007ab2 <_printf_common+0x2a>
 8007aac:	3301      	adds	r3, #1
 8007aae:	f8c9 3000 	str.w	r3, [r9]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0699      	lsls	r1, r3, #26
 8007ab6:	bf42      	ittt	mi
 8007ab8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007abc:	3302      	addmi	r3, #2
 8007abe:	f8c9 3000 	strmi.w	r3, [r9]
 8007ac2:	6825      	ldr	r5, [r4, #0]
 8007ac4:	f015 0506 	ands.w	r5, r5, #6
 8007ac8:	d107      	bne.n	8007ada <_printf_common+0x52>
 8007aca:	f104 0a19 	add.w	sl, r4, #25
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	f8d9 2000 	ldr.w	r2, [r9]
 8007ad4:	1a9b      	subs	r3, r3, r2
 8007ad6:	42ab      	cmp	r3, r5
 8007ad8:	dc28      	bgt.n	8007b2c <_printf_common+0xa4>
 8007ada:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	3300      	adds	r3, #0
 8007ae2:	bf18      	it	ne
 8007ae4:	2301      	movne	r3, #1
 8007ae6:	0692      	lsls	r2, r2, #26
 8007ae8:	d42d      	bmi.n	8007b46 <_printf_common+0xbe>
 8007aea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aee:	4639      	mov	r1, r7
 8007af0:	4630      	mov	r0, r6
 8007af2:	47c0      	blx	r8
 8007af4:	3001      	adds	r0, #1
 8007af6:	d020      	beq.n	8007b3a <_printf_common+0xb2>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	68e5      	ldr	r5, [r4, #12]
 8007afc:	f8d9 2000 	ldr.w	r2, [r9]
 8007b00:	f003 0306 	and.w	r3, r3, #6
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	bf08      	it	eq
 8007b08:	1aad      	subeq	r5, r5, r2
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	6922      	ldr	r2, [r4, #16]
 8007b0e:	bf0c      	ite	eq
 8007b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b14:	2500      	movne	r5, #0
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bfc4      	itt	gt
 8007b1a:	1a9b      	subgt	r3, r3, r2
 8007b1c:	18ed      	addgt	r5, r5, r3
 8007b1e:	f04f 0900 	mov.w	r9, #0
 8007b22:	341a      	adds	r4, #26
 8007b24:	454d      	cmp	r5, r9
 8007b26:	d11a      	bne.n	8007b5e <_printf_common+0xd6>
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e008      	b.n	8007b3e <_printf_common+0xb6>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4652      	mov	r2, sl
 8007b30:	4639      	mov	r1, r7
 8007b32:	4630      	mov	r0, r6
 8007b34:	47c0      	blx	r8
 8007b36:	3001      	adds	r0, #1
 8007b38:	d103      	bne.n	8007b42 <_printf_common+0xba>
 8007b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b42:	3501      	adds	r5, #1
 8007b44:	e7c3      	b.n	8007ace <_printf_common+0x46>
 8007b46:	18e1      	adds	r1, r4, r3
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	2030      	movs	r0, #48	; 0x30
 8007b4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b50:	4422      	add	r2, r4
 8007b52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	e7c5      	b.n	8007aea <_printf_common+0x62>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4622      	mov	r2, r4
 8007b62:	4639      	mov	r1, r7
 8007b64:	4630      	mov	r0, r6
 8007b66:	47c0      	blx	r8
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d0e6      	beq.n	8007b3a <_printf_common+0xb2>
 8007b6c:	f109 0901 	add.w	r9, r9, #1
 8007b70:	e7d8      	b.n	8007b24 <_printf_common+0x9c>
	...

08007b74 <_printf_i>:
 8007b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	7e09      	ldrb	r1, [r1, #24]
 8007b80:	b085      	sub	sp, #20
 8007b82:	296e      	cmp	r1, #110	; 0x6e
 8007b84:	4617      	mov	r7, r2
 8007b86:	4606      	mov	r6, r0
 8007b88:	4698      	mov	r8, r3
 8007b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b8c:	f000 80b3 	beq.w	8007cf6 <_printf_i+0x182>
 8007b90:	d822      	bhi.n	8007bd8 <_printf_i+0x64>
 8007b92:	2963      	cmp	r1, #99	; 0x63
 8007b94:	d036      	beq.n	8007c04 <_printf_i+0x90>
 8007b96:	d80a      	bhi.n	8007bae <_printf_i+0x3a>
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	f000 80b9 	beq.w	8007d10 <_printf_i+0x19c>
 8007b9e:	2958      	cmp	r1, #88	; 0x58
 8007ba0:	f000 8083 	beq.w	8007caa <_printf_i+0x136>
 8007ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007bac:	e032      	b.n	8007c14 <_printf_i+0xa0>
 8007bae:	2964      	cmp	r1, #100	; 0x64
 8007bb0:	d001      	beq.n	8007bb6 <_printf_i+0x42>
 8007bb2:	2969      	cmp	r1, #105	; 0x69
 8007bb4:	d1f6      	bne.n	8007ba4 <_printf_i+0x30>
 8007bb6:	6820      	ldr	r0, [r4, #0]
 8007bb8:	6813      	ldr	r3, [r2, #0]
 8007bba:	0605      	lsls	r5, r0, #24
 8007bbc:	f103 0104 	add.w	r1, r3, #4
 8007bc0:	d52a      	bpl.n	8007c18 <_printf_i+0xa4>
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6011      	str	r1, [r2, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	da03      	bge.n	8007bd2 <_printf_i+0x5e>
 8007bca:	222d      	movs	r2, #45	; 0x2d
 8007bcc:	425b      	negs	r3, r3
 8007bce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007bd2:	486f      	ldr	r0, [pc, #444]	; (8007d90 <_printf_i+0x21c>)
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	e039      	b.n	8007c4c <_printf_i+0xd8>
 8007bd8:	2973      	cmp	r1, #115	; 0x73
 8007bda:	f000 809d 	beq.w	8007d18 <_printf_i+0x1a4>
 8007bde:	d808      	bhi.n	8007bf2 <_printf_i+0x7e>
 8007be0:	296f      	cmp	r1, #111	; 0x6f
 8007be2:	d020      	beq.n	8007c26 <_printf_i+0xb2>
 8007be4:	2970      	cmp	r1, #112	; 0x70
 8007be6:	d1dd      	bne.n	8007ba4 <_printf_i+0x30>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	f043 0320 	orr.w	r3, r3, #32
 8007bee:	6023      	str	r3, [r4, #0]
 8007bf0:	e003      	b.n	8007bfa <_printf_i+0x86>
 8007bf2:	2975      	cmp	r1, #117	; 0x75
 8007bf4:	d017      	beq.n	8007c26 <_printf_i+0xb2>
 8007bf6:	2978      	cmp	r1, #120	; 0x78
 8007bf8:	d1d4      	bne.n	8007ba4 <_printf_i+0x30>
 8007bfa:	2378      	movs	r3, #120	; 0x78
 8007bfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c00:	4864      	ldr	r0, [pc, #400]	; (8007d94 <_printf_i+0x220>)
 8007c02:	e055      	b.n	8007cb0 <_printf_i+0x13c>
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	1d19      	adds	r1, r3, #4
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6011      	str	r1, [r2, #0]
 8007c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c14:	2301      	movs	r3, #1
 8007c16:	e08c      	b.n	8007d32 <_printf_i+0x1be>
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6011      	str	r1, [r2, #0]
 8007c1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c20:	bf18      	it	ne
 8007c22:	b21b      	sxthne	r3, r3
 8007c24:	e7cf      	b.n	8007bc6 <_printf_i+0x52>
 8007c26:	6813      	ldr	r3, [r2, #0]
 8007c28:	6825      	ldr	r5, [r4, #0]
 8007c2a:	1d18      	adds	r0, r3, #4
 8007c2c:	6010      	str	r0, [r2, #0]
 8007c2e:	0628      	lsls	r0, r5, #24
 8007c30:	d501      	bpl.n	8007c36 <_printf_i+0xc2>
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	e002      	b.n	8007c3c <_printf_i+0xc8>
 8007c36:	0668      	lsls	r0, r5, #25
 8007c38:	d5fb      	bpl.n	8007c32 <_printf_i+0xbe>
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	4854      	ldr	r0, [pc, #336]	; (8007d90 <_printf_i+0x21c>)
 8007c3e:	296f      	cmp	r1, #111	; 0x6f
 8007c40:	bf14      	ite	ne
 8007c42:	220a      	movne	r2, #10
 8007c44:	2208      	moveq	r2, #8
 8007c46:	2100      	movs	r1, #0
 8007c48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c4c:	6865      	ldr	r5, [r4, #4]
 8007c4e:	60a5      	str	r5, [r4, #8]
 8007c50:	2d00      	cmp	r5, #0
 8007c52:	f2c0 8095 	blt.w	8007d80 <_printf_i+0x20c>
 8007c56:	6821      	ldr	r1, [r4, #0]
 8007c58:	f021 0104 	bic.w	r1, r1, #4
 8007c5c:	6021      	str	r1, [r4, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d13d      	bne.n	8007cde <_printf_i+0x16a>
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	f040 808e 	bne.w	8007d84 <_printf_i+0x210>
 8007c68:	4665      	mov	r5, ip
 8007c6a:	2a08      	cmp	r2, #8
 8007c6c:	d10b      	bne.n	8007c86 <_printf_i+0x112>
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	07db      	lsls	r3, r3, #31
 8007c72:	d508      	bpl.n	8007c86 <_printf_i+0x112>
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	6862      	ldr	r2, [r4, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	bfde      	ittt	le
 8007c7c:	2330      	movle	r3, #48	; 0x30
 8007c7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c86:	ebac 0305 	sub.w	r3, ip, r5
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	f8cd 8000 	str.w	r8, [sp]
 8007c90:	463b      	mov	r3, r7
 8007c92:	aa03      	add	r2, sp, #12
 8007c94:	4621      	mov	r1, r4
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7ff fef6 	bl	8007a88 <_printf_common>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d14d      	bne.n	8007d3c <_printf_i+0x1c8>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	b005      	add	sp, #20
 8007ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007caa:	4839      	ldr	r0, [pc, #228]	; (8007d90 <_printf_i+0x21c>)
 8007cac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	6821      	ldr	r1, [r4, #0]
 8007cb4:	1d1d      	adds	r5, r3, #4
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6015      	str	r5, [r2, #0]
 8007cba:	060a      	lsls	r2, r1, #24
 8007cbc:	d50b      	bpl.n	8007cd6 <_printf_i+0x162>
 8007cbe:	07ca      	lsls	r2, r1, #31
 8007cc0:	bf44      	itt	mi
 8007cc2:	f041 0120 	orrmi.w	r1, r1, #32
 8007cc6:	6021      	strmi	r1, [r4, #0]
 8007cc8:	b91b      	cbnz	r3, 8007cd2 <_printf_i+0x15e>
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	f022 0220 	bic.w	r2, r2, #32
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	2210      	movs	r2, #16
 8007cd4:	e7b7      	b.n	8007c46 <_printf_i+0xd2>
 8007cd6:	064d      	lsls	r5, r1, #25
 8007cd8:	bf48      	it	mi
 8007cda:	b29b      	uxthmi	r3, r3
 8007cdc:	e7ef      	b.n	8007cbe <_printf_i+0x14a>
 8007cde:	4665      	mov	r5, ip
 8007ce0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ce4:	fb02 3311 	mls	r3, r2, r1, r3
 8007ce8:	5cc3      	ldrb	r3, [r0, r3]
 8007cea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007cee:	460b      	mov	r3, r1
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d1f5      	bne.n	8007ce0 <_printf_i+0x16c>
 8007cf4:	e7b9      	b.n	8007c6a <_printf_i+0xf6>
 8007cf6:	6813      	ldr	r3, [r2, #0]
 8007cf8:	6825      	ldr	r5, [r4, #0]
 8007cfa:	6961      	ldr	r1, [r4, #20]
 8007cfc:	1d18      	adds	r0, r3, #4
 8007cfe:	6010      	str	r0, [r2, #0]
 8007d00:	0628      	lsls	r0, r5, #24
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	d501      	bpl.n	8007d0a <_printf_i+0x196>
 8007d06:	6019      	str	r1, [r3, #0]
 8007d08:	e002      	b.n	8007d10 <_printf_i+0x19c>
 8007d0a:	066a      	lsls	r2, r5, #25
 8007d0c:	d5fb      	bpl.n	8007d06 <_printf_i+0x192>
 8007d0e:	8019      	strh	r1, [r3, #0]
 8007d10:	2300      	movs	r3, #0
 8007d12:	6123      	str	r3, [r4, #16]
 8007d14:	4665      	mov	r5, ip
 8007d16:	e7b9      	b.n	8007c8c <_printf_i+0x118>
 8007d18:	6813      	ldr	r3, [r2, #0]
 8007d1a:	1d19      	adds	r1, r3, #4
 8007d1c:	6011      	str	r1, [r2, #0]
 8007d1e:	681d      	ldr	r5, [r3, #0]
 8007d20:	6862      	ldr	r2, [r4, #4]
 8007d22:	2100      	movs	r1, #0
 8007d24:	4628      	mov	r0, r5
 8007d26:	f7f8 fa5b 	bl	80001e0 <memchr>
 8007d2a:	b108      	cbz	r0, 8007d30 <_printf_i+0x1bc>
 8007d2c:	1b40      	subs	r0, r0, r5
 8007d2e:	6060      	str	r0, [r4, #4]
 8007d30:	6863      	ldr	r3, [r4, #4]
 8007d32:	6123      	str	r3, [r4, #16]
 8007d34:	2300      	movs	r3, #0
 8007d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d3a:	e7a7      	b.n	8007c8c <_printf_i+0x118>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	47c0      	blx	r8
 8007d46:	3001      	adds	r0, #1
 8007d48:	d0aa      	beq.n	8007ca0 <_printf_i+0x12c>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	079b      	lsls	r3, r3, #30
 8007d4e:	d413      	bmi.n	8007d78 <_printf_i+0x204>
 8007d50:	68e0      	ldr	r0, [r4, #12]
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	4298      	cmp	r0, r3
 8007d56:	bfb8      	it	lt
 8007d58:	4618      	movlt	r0, r3
 8007d5a:	e7a3      	b.n	8007ca4 <_printf_i+0x130>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	464a      	mov	r2, r9
 8007d60:	4639      	mov	r1, r7
 8007d62:	4630      	mov	r0, r6
 8007d64:	47c0      	blx	r8
 8007d66:	3001      	adds	r0, #1
 8007d68:	d09a      	beq.n	8007ca0 <_printf_i+0x12c>
 8007d6a:	3501      	adds	r5, #1
 8007d6c:	68e3      	ldr	r3, [r4, #12]
 8007d6e:	9a03      	ldr	r2, [sp, #12]
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	42ab      	cmp	r3, r5
 8007d74:	dcf2      	bgt.n	8007d5c <_printf_i+0x1e8>
 8007d76:	e7eb      	b.n	8007d50 <_printf_i+0x1dc>
 8007d78:	2500      	movs	r5, #0
 8007d7a:	f104 0919 	add.w	r9, r4, #25
 8007d7e:	e7f5      	b.n	8007d6c <_printf_i+0x1f8>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1ac      	bne.n	8007cde <_printf_i+0x16a>
 8007d84:	7803      	ldrb	r3, [r0, #0]
 8007d86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d8e:	e76c      	b.n	8007c6a <_printf_i+0xf6>
 8007d90:	080085c5 	.word	0x080085c5
 8007d94:	080085d6 	.word	0x080085d6

08007d98 <memmove>:
 8007d98:	4288      	cmp	r0, r1
 8007d9a:	b510      	push	{r4, lr}
 8007d9c:	eb01 0302 	add.w	r3, r1, r2
 8007da0:	d807      	bhi.n	8007db2 <memmove+0x1a>
 8007da2:	1e42      	subs	r2, r0, #1
 8007da4:	4299      	cmp	r1, r3
 8007da6:	d00a      	beq.n	8007dbe <memmove+0x26>
 8007da8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007db0:	e7f8      	b.n	8007da4 <memmove+0xc>
 8007db2:	4283      	cmp	r3, r0
 8007db4:	d9f5      	bls.n	8007da2 <memmove+0xa>
 8007db6:	1881      	adds	r1, r0, r2
 8007db8:	1ad2      	subs	r2, r2, r3
 8007dba:	42d3      	cmn	r3, r2
 8007dbc:	d100      	bne.n	8007dc0 <memmove+0x28>
 8007dbe:	bd10      	pop	{r4, pc}
 8007dc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007dc8:	e7f7      	b.n	8007dba <memmove+0x22>
	...

08007dcc <_free_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4605      	mov	r5, r0
 8007dd0:	2900      	cmp	r1, #0
 8007dd2:	d045      	beq.n	8007e60 <_free_r+0x94>
 8007dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd8:	1f0c      	subs	r4, r1, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfb8      	it	lt
 8007dde:	18e4      	addlt	r4, r4, r3
 8007de0:	f000 f8d2 	bl	8007f88 <__malloc_lock>
 8007de4:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <_free_r+0x98>)
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	4610      	mov	r0, r2
 8007dea:	b933      	cbnz	r3, 8007dfa <_free_r+0x2e>
 8007dec:	6063      	str	r3, [r4, #4]
 8007dee:	6014      	str	r4, [r2, #0]
 8007df0:	4628      	mov	r0, r5
 8007df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007df6:	f000 b8c8 	b.w	8007f8a <__malloc_unlock>
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	d90c      	bls.n	8007e18 <_free_r+0x4c>
 8007dfe:	6821      	ldr	r1, [r4, #0]
 8007e00:	1862      	adds	r2, r4, r1
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bf04      	itt	eq
 8007e06:	681a      	ldreq	r2, [r3, #0]
 8007e08:	685b      	ldreq	r3, [r3, #4]
 8007e0a:	6063      	str	r3, [r4, #4]
 8007e0c:	bf04      	itt	eq
 8007e0e:	1852      	addeq	r2, r2, r1
 8007e10:	6022      	streq	r2, [r4, #0]
 8007e12:	6004      	str	r4, [r0, #0]
 8007e14:	e7ec      	b.n	8007df0 <_free_r+0x24>
 8007e16:	4613      	mov	r3, r2
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	b10a      	cbz	r2, 8007e20 <_free_r+0x54>
 8007e1c:	42a2      	cmp	r2, r4
 8007e1e:	d9fa      	bls.n	8007e16 <_free_r+0x4a>
 8007e20:	6819      	ldr	r1, [r3, #0]
 8007e22:	1858      	adds	r0, r3, r1
 8007e24:	42a0      	cmp	r0, r4
 8007e26:	d10b      	bne.n	8007e40 <_free_r+0x74>
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	4401      	add	r1, r0
 8007e2c:	1858      	adds	r0, r3, r1
 8007e2e:	4282      	cmp	r2, r0
 8007e30:	6019      	str	r1, [r3, #0]
 8007e32:	d1dd      	bne.n	8007df0 <_free_r+0x24>
 8007e34:	6810      	ldr	r0, [r2, #0]
 8007e36:	6852      	ldr	r2, [r2, #4]
 8007e38:	605a      	str	r2, [r3, #4]
 8007e3a:	4401      	add	r1, r0
 8007e3c:	6019      	str	r1, [r3, #0]
 8007e3e:	e7d7      	b.n	8007df0 <_free_r+0x24>
 8007e40:	d902      	bls.n	8007e48 <_free_r+0x7c>
 8007e42:	230c      	movs	r3, #12
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	e7d3      	b.n	8007df0 <_free_r+0x24>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428a      	cmp	r2, r1
 8007e4e:	bf04      	itt	eq
 8007e50:	6811      	ldreq	r1, [r2, #0]
 8007e52:	6852      	ldreq	r2, [r2, #4]
 8007e54:	6062      	str	r2, [r4, #4]
 8007e56:	bf04      	itt	eq
 8007e58:	1809      	addeq	r1, r1, r0
 8007e5a:	6021      	streq	r1, [r4, #0]
 8007e5c:	605c      	str	r4, [r3, #4]
 8007e5e:	e7c7      	b.n	8007df0 <_free_r+0x24>
 8007e60:	bd38      	pop	{r3, r4, r5, pc}
 8007e62:	bf00      	nop
 8007e64:	200001a4 	.word	0x200001a4

08007e68 <_malloc_r>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	1ccd      	adds	r5, r1, #3
 8007e6c:	f025 0503 	bic.w	r5, r5, #3
 8007e70:	3508      	adds	r5, #8
 8007e72:	2d0c      	cmp	r5, #12
 8007e74:	bf38      	it	cc
 8007e76:	250c      	movcc	r5, #12
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	db01      	blt.n	8007e82 <_malloc_r+0x1a>
 8007e7e:	42a9      	cmp	r1, r5
 8007e80:	d903      	bls.n	8007e8a <_malloc_r+0x22>
 8007e82:	230c      	movs	r3, #12
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	2000      	movs	r0, #0
 8007e88:	bd70      	pop	{r4, r5, r6, pc}
 8007e8a:	f000 f87d 	bl	8007f88 <__malloc_lock>
 8007e8e:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <_malloc_r+0xac>)
 8007e90:	6814      	ldr	r4, [r2, #0]
 8007e92:	4621      	mov	r1, r4
 8007e94:	b991      	cbnz	r1, 8007ebc <_malloc_r+0x54>
 8007e96:	4c20      	ldr	r4, [pc, #128]	; (8007f18 <_malloc_r+0xb0>)
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	b91b      	cbnz	r3, 8007ea4 <_malloc_r+0x3c>
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 f863 	bl	8007f68 <_sbrk_r>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	4629      	mov	r1, r5
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f000 f85e 	bl	8007f68 <_sbrk_r>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d124      	bne.n	8007efa <_malloc_r+0x92>
 8007eb0:	230c      	movs	r3, #12
 8007eb2:	6033      	str	r3, [r6, #0]
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 f868 	bl	8007f8a <__malloc_unlock>
 8007eba:	e7e4      	b.n	8007e86 <_malloc_r+0x1e>
 8007ebc:	680b      	ldr	r3, [r1, #0]
 8007ebe:	1b5b      	subs	r3, r3, r5
 8007ec0:	d418      	bmi.n	8007ef4 <_malloc_r+0x8c>
 8007ec2:	2b0b      	cmp	r3, #11
 8007ec4:	d90f      	bls.n	8007ee6 <_malloc_r+0x7e>
 8007ec6:	600b      	str	r3, [r1, #0]
 8007ec8:	50cd      	str	r5, [r1, r3]
 8007eca:	18cc      	adds	r4, r1, r3
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f85c 	bl	8007f8a <__malloc_unlock>
 8007ed2:	f104 000b 	add.w	r0, r4, #11
 8007ed6:	1d23      	adds	r3, r4, #4
 8007ed8:	f020 0007 	bic.w	r0, r0, #7
 8007edc:	1ac3      	subs	r3, r0, r3
 8007ede:	d0d3      	beq.n	8007e88 <_malloc_r+0x20>
 8007ee0:	425a      	negs	r2, r3
 8007ee2:	50e2      	str	r2, [r4, r3]
 8007ee4:	e7d0      	b.n	8007e88 <_malloc_r+0x20>
 8007ee6:	428c      	cmp	r4, r1
 8007ee8:	684b      	ldr	r3, [r1, #4]
 8007eea:	bf16      	itet	ne
 8007eec:	6063      	strne	r3, [r4, #4]
 8007eee:	6013      	streq	r3, [r2, #0]
 8007ef0:	460c      	movne	r4, r1
 8007ef2:	e7eb      	b.n	8007ecc <_malloc_r+0x64>
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	6849      	ldr	r1, [r1, #4]
 8007ef8:	e7cc      	b.n	8007e94 <_malloc_r+0x2c>
 8007efa:	1cc4      	adds	r4, r0, #3
 8007efc:	f024 0403 	bic.w	r4, r4, #3
 8007f00:	42a0      	cmp	r0, r4
 8007f02:	d005      	beq.n	8007f10 <_malloc_r+0xa8>
 8007f04:	1a21      	subs	r1, r4, r0
 8007f06:	4630      	mov	r0, r6
 8007f08:	f000 f82e 	bl	8007f68 <_sbrk_r>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d0cf      	beq.n	8007eb0 <_malloc_r+0x48>
 8007f10:	6025      	str	r5, [r4, #0]
 8007f12:	e7db      	b.n	8007ecc <_malloc_r+0x64>
 8007f14:	200001a4 	.word	0x200001a4
 8007f18:	200001a8 	.word	0x200001a8

08007f1c <_realloc_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	4607      	mov	r7, r0
 8007f20:	4614      	mov	r4, r2
 8007f22:	460e      	mov	r6, r1
 8007f24:	b921      	cbnz	r1, 8007f30 <_realloc_r+0x14>
 8007f26:	4611      	mov	r1, r2
 8007f28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f2c:	f7ff bf9c 	b.w	8007e68 <_malloc_r>
 8007f30:	b922      	cbnz	r2, 8007f3c <_realloc_r+0x20>
 8007f32:	f7ff ff4b 	bl	8007dcc <_free_r>
 8007f36:	4625      	mov	r5, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3c:	f000 f826 	bl	8007f8c <_malloc_usable_size_r>
 8007f40:	42a0      	cmp	r0, r4
 8007f42:	d20f      	bcs.n	8007f64 <_realloc_r+0x48>
 8007f44:	4621      	mov	r1, r4
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7ff ff8e 	bl	8007e68 <_malloc_r>
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d0f2      	beq.n	8007f38 <_realloc_r+0x1c>
 8007f52:	4631      	mov	r1, r6
 8007f54:	4622      	mov	r2, r4
 8007f56:	f7ff fc11 	bl	800777c <memcpy>
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	f7ff ff35 	bl	8007dcc <_free_r>
 8007f62:	e7e9      	b.n	8007f38 <_realloc_r+0x1c>
 8007f64:	4635      	mov	r5, r6
 8007f66:	e7e7      	b.n	8007f38 <_realloc_r+0x1c>

08007f68 <_sbrk_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4c06      	ldr	r4, [pc, #24]	; (8007f84 <_sbrk_r+0x1c>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4605      	mov	r5, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	f7ff fb4c 	bl	8007610 <_sbrk>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_sbrk_r+0x1a>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_sbrk_r+0x1a>
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	2000050c 	.word	0x2000050c

08007f88 <__malloc_lock>:
 8007f88:	4770      	bx	lr

08007f8a <__malloc_unlock>:
 8007f8a:	4770      	bx	lr

08007f8c <_malloc_usable_size_r>:
 8007f8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f90:	1f18      	subs	r0, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	bfbc      	itt	lt
 8007f96:	580b      	ldrlt	r3, [r1, r0]
 8007f98:	18c0      	addlt	r0, r0, r3
 8007f9a:	4770      	bx	lr

08007f9c <_init>:
 8007f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9e:	bf00      	nop
 8007fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa2:	bc08      	pop	{r3}
 8007fa4:	469e      	mov	lr, r3
 8007fa6:	4770      	bx	lr

08007fa8 <_fini>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	bf00      	nop
 8007fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fae:	bc08      	pop	{r3}
 8007fb0:	469e      	mov	lr, r3
 8007fb2:	4770      	bx	lr
