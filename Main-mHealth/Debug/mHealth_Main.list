
mHealth_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d78  08006d78  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d80  08006d80  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d80  08006d80  00016d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d84  08006d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006d88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000078  08006e00  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08006e00  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6a6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ab  00000000  00000000  0002f74e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  00031800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00032568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f4f  00000000  00000000  000331c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa95  00000000  00000000  0005a117  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebe8e  00000000  00000000  00064bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150a3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  00150ab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066d8 	.word	0x080066d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080066d8 	.word	0x080066d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058a:	2003      	movs	r0, #3
 800058c:	f000 f93c 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f80d 	bl	80005b0 <HAL_InitTick>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800059c:	2301      	movs	r3, #1
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e001      	b.n	80005a6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005a2:	f005 fac7 	bl	8005b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005bc:	4b16      	ldr	r3, [pc, #88]	; (8000618 <HAL_InitTick+0x68>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d022      	beq.n	800060a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <HAL_InitTick+0x6c>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_InitTick+0x68>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f93c 	bl	8000856 <HAL_SYSTICK_Config>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d809      	bhi.n	80005fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ea:	2200      	movs	r2, #0
 80005ec:	6879      	ldr	r1, [r7, #4]
 80005ee:	f04f 30ff 	mov.w	r0, #4294967295
 80005f2:	f000 f914 	bl	800081e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <HAL_InitTick+0x70>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	e007      	b.n	800060e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	e004      	b.n	800060e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e001      	b.n	800060e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000004 	.word	0x20000004
 800061c:	20000010 	.word	0x20000010
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <HAL_IncTick+0x1c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x20>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4413      	add	r3, r2
 8000632:	4a03      	ldr	r2, [pc, #12]	; (8000640 <HAL_IncTick+0x1c>)
 8000634:	6013      	str	r3, [r2, #0]
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000194 	.word	0x20000194
 8000644:	20000004 	.word	0x20000004

08000648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return uwTick;
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <HAL_GetTick+0x14>)
 800064e:	681b      	ldr	r3, [r3, #0]
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000194 	.word	0x20000194

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff ffee 	bl	8000648 <HAL_GetTick>
 800066c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000678:	d004      	beq.n	8000684 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_Delay+0x40>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000684:	bf00      	nop
 8000686:	f7ff ffdf 	bl	8000648 <HAL_GetTick>
 800068a:	4602      	mov	r2, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	d8f7      	bhi.n	8000686 <HAL_Delay+0x26>
  {
  }
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000004 	.word	0x20000004

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800087c:	2300      	movs	r3, #0
 800087e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000886:	2b01      	cmp	r3, #1
 8000888:	d101      	bne.n	800088e <HAL_DMA_Start_IT+0x20>
 800088a:	2302      	movs	r3, #2
 800088c:	e04b      	b.n	8000926 <HAL_DMA_Start_IT+0xb8>
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d13a      	bne.n	8000918 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2202      	movs	r2, #2
 80008a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2200      	movs	r2, #0
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f022 0201 	bic.w	r2, r2, #1
 80008be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f831 	bl	800092e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d008      	beq.n	80008e6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 020e 	orr.w	r2, r2, #14
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	e00f      	b.n	8000906 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 0204 	bic.w	r2, r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f042 020a 	orr.w	r2, r2, #10
 8000904:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0201 	orr.w	r2, r2, #1
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e005      	b.n	8000924 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000920:	2302      	movs	r3, #2
 8000922:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000924:	7dfb      	ldrb	r3, [r7, #23]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800092e:	b480      	push	{r7}
 8000930:	b085      	sub	sp, #20
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	f003 021c 	and.w	r2, r3, #28
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b10      	cmp	r3, #16
 800095e:	d108      	bne.n	8000972 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000970:	e007      	b.n	8000982 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	60da      	str	r2, [r3, #12]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800099e:	e17f      	b.n	8000ca0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 8171 	beq.w	8000c9a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x38>
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b12      	cmp	r3, #18
 80009c6:	d123      	bne.n	8000a10 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	08da      	lsrs	r2, r3, #3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3208      	adds	r2, #8
 80009d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	691a      	ldr	r2, [r3, #16]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	08da      	lsrs	r2, r3, #3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3208      	adds	r2, #8
 8000a0a:	6939      	ldr	r1, [r7, #16]
 8000a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0203 	and.w	r2, r3, #3
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d00b      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d007      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b12      	cmp	r3, #18
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d118      	bne.n	8000b04 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	f003 0201 	and.w	r2, r3, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 80ac 	beq.w	8000c9a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b5e      	ldr	r3, [pc, #376]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	4a5d      	ldr	r2, [pc, #372]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4e:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <HAL_GPIO_Init+0x32c>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b5a:	4a59      	ldr	r2, [pc, #356]	; (8000cc0 <HAL_GPIO_Init+0x330>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	089b      	lsrs	r3, r3, #2
 8000b60:	3302      	adds	r3, #2
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	220f      	movs	r2, #15
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43db      	mvns	r3, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b84:	d025      	beq.n	8000bd2 <HAL_GPIO_Init+0x242>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4e      	ldr	r2, [pc, #312]	; (8000cc4 <HAL_GPIO_Init+0x334>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d01f      	beq.n	8000bce <HAL_GPIO_Init+0x23e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4d      	ldr	r2, [pc, #308]	; (8000cc8 <HAL_GPIO_Init+0x338>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d019      	beq.n	8000bca <HAL_GPIO_Init+0x23a>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a4c      	ldr	r2, [pc, #304]	; (8000ccc <HAL_GPIO_Init+0x33c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d013      	beq.n	8000bc6 <HAL_GPIO_Init+0x236>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4b      	ldr	r2, [pc, #300]	; (8000cd0 <HAL_GPIO_Init+0x340>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d00d      	beq.n	8000bc2 <HAL_GPIO_Init+0x232>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a4a      	ldr	r2, [pc, #296]	; (8000cd4 <HAL_GPIO_Init+0x344>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d007      	beq.n	8000bbe <HAL_GPIO_Init+0x22e>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <HAL_GPIO_Init+0x348>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_GPIO_Init+0x22a>
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	e00c      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bba:	2307      	movs	r3, #7
 8000bbc:	e00a      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	e008      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e004      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bca:	2302      	movs	r3, #2
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e000      	b.n	8000bd4 <HAL_GPIO_Init+0x244>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	f002 0203 	and.w	r2, r2, #3
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	4093      	lsls	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000be4:	4936      	ldr	r1, [pc, #216]	; (8000cc0 <HAL_GPIO_Init+0x330>)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	3302      	adds	r3, #2
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000bf2:	4b3a      	ldr	r3, [pc, #232]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c16:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000c1c:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c40:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4013      	ands	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <HAL_GPIO_Init+0x34c>)
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f47f ae78 	bne.w	80009a0 <HAL_GPIO_Init+0x10>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	48001000 	.word	0x48001000
 8000cd4:	48001400 	.word	0x48001400
 8000cd8:	48001800 	.word	0x48001800
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40007000 	.word	0x40007000

08000d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d3a:	d130      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d48:	d038      	beq.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2232      	movs	r2, #50	; 0x32
 8000d60:	fb02 f303 	mul.w	r3, r2, r3
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d66:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6a:	0c9b      	lsrs	r3, r3, #18
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d70:	e002      	b.n	8000d78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d84:	d102      	bne.n	8000d8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f2      	bne.n	8000d72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d98:	d110      	bne.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e00f      	b.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000daa:	d007      	beq.n	8000dbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db4:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	431bde83 	.word	0x431bde83

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e39d      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dea:	4ba4      	ldr	r3, [pc, #656]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df4:	4ba1      	ldr	r3, [pc, #644]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0310 	and.w	r3, r3, #16
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 80e1 	beq.w	8000fce <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d007      	beq.n	8000e22 <HAL_RCC_OscConfig+0x4a>
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2b0c      	cmp	r3, #12
 8000e16:	f040 8088 	bne.w	8000f2a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	f040 8084 	bne.w	8000f2a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e22:	4b96      	ldr	r3, [pc, #600]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d005      	beq.n	8000e3a <HAL_RCC_OscConfig+0x62>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e375      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a1a      	ldr	r2, [r3, #32]
 8000e3e:	4b8f      	ldr	r3, [pc, #572]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <HAL_RCC_OscConfig+0x7c>
 8000e4a:	4b8c      	ldr	r3, [pc, #560]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e52:	e005      	b.n	8000e60 <HAL_RCC_OscConfig+0x88>
 8000e54:	4b89      	ldr	r3, [pc, #548]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d223      	bcs.n	8000eac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a1b      	ldr	r3, [r3, #32]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fd09 	bl	8001880 <RCC_SetFlashLatencyFromMSIRange>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e356      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e78:	4b80      	ldr	r3, [pc, #512]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a7f      	ldr	r2, [pc, #508]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b7d      	ldr	r3, [pc, #500]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	497a      	ldr	r1, [pc, #488]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e96:	4b79      	ldr	r3, [pc, #484]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	4975      	ldr	r1, [pc, #468]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	604b      	str	r3, [r1, #4]
 8000eaa:	e022      	b.n	8000ef2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eac:	4b73      	ldr	r3, [pc, #460]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a72      	ldr	r2, [pc, #456]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b70      	ldr	r3, [pc, #448]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	496d      	ldr	r1, [pc, #436]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eca:	4b6c      	ldr	r3, [pc, #432]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	4968      	ldr	r1, [pc, #416]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fccc 	bl	8001880 <RCC_SetFlashLatencyFromMSIRange>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e319      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000ef2:	f000 fc03 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	4b60      	ldr	r3, [pc, #384]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <HAL_RCC_OscConfig+0x2a8>)
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0e:	4a5d      	ldr	r2, [pc, #372]	; (8001084 <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_RCC_OscConfig+0x2b0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb4a 	bl	80005b0 <HAL_InitTick>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d052      	beq.n	8000fcc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e2fd      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d032      	beq.n	8000f98 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f32:	4b52      	ldr	r3, [pc, #328]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a51      	ldr	r2, [pc, #324]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fb83 	bl	8000648 <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f46:	f7ff fb7f 	bl	8000648 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e2e6      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f58:	4b48      	ldr	r3, [pc, #288]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f64:	4b45      	ldr	r3, [pc, #276]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a44      	ldr	r2, [pc, #272]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b42      	ldr	r3, [pc, #264]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	493f      	ldr	r1, [pc, #252]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	493a      	ldr	r1, [pc, #232]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
 8000f96:	e01a      	b.n	8000fce <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f98:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a37      	ldr	r2, [pc, #220]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fb50 	bl	8000648 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fac:	f7ff fb4c 	bl	8000648 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e2b3      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f0      	bne.n	8000fac <HAL_RCC_OscConfig+0x1d4>
 8000fca:	e000      	b.n	8000fce <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d074      	beq.n	80010c4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_OscConfig+0x214>
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d10e      	bne.n	8001004 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d10b      	bne.n	8001004 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d064      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2ea>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d160      	bne.n	80010c2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e290      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d106      	bne.n	800101c <HAL_RCC_OscConfig+0x244>
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e01d      	b.n	8001058 <HAL_RCC_OscConfig+0x280>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x268>
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 800102c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0x280>
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_RCC_OscConfig+0x2a4>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d01c      	beq.n	800109a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff faf2 	bl	8000648 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001066:	e011      	b.n	800108c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff faee 	bl	8000648 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d90a      	bls.n	800108c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e255      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	08006cfc 	.word	0x08006cfc
 8001084:	20000010 	.word	0x20000010
 8001088:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800108c:	4bae      	ldr	r3, [pc, #696]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0e7      	beq.n	8001068 <HAL_RCC_OscConfig+0x290>
 8001098:	e014      	b.n	80010c4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109a:	f7ff fad5 	bl	8000648 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a2:	f7ff fad1 	bl	8000648 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b64      	cmp	r3, #100	; 0x64
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e238      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010b4:	4ba4      	ldr	r3, [pc, #656]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f0      	bne.n	80010a2 <HAL_RCC_OscConfig+0x2ca>
 80010c0:	e000      	b.n	80010c4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d060      	beq.n	8001192 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x30a>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d119      	bne.n	8001110 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d116      	bne.n	8001110 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80010e2:	4b99      	ldr	r3, [pc, #612]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_RCC_OscConfig+0x322>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e215      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b93      	ldr	r3, [pc, #588]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	061b      	lsls	r3, r3, #24
 8001108:	498f      	ldr	r1, [pc, #572]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800110e:	e040      	b.n	8001192 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001118:	4b8b      	ldr	r3, [pc, #556]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a8a      	ldr	r2, [pc, #552]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fa90 	bl	8000648 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fa8c 	bl	8000648 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1f3      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800113e:	4b82      	ldr	r3, [pc, #520]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	061b      	lsls	r3, r3, #24
 8001158:	497b      	ldr	r1, [pc, #492]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
 800115e:	e018      	b.n	8001192 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001160:	4b79      	ldr	r3, [pc, #484]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a78      	ldr	r2, [pc, #480]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 8001166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116c:	f7ff fa6c 	bl	8000648 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fa68 	bl	8000648 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1cf      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001186:	4b70      	ldr	r3, [pc, #448]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03c      	beq.n	8001218 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01c      	beq.n	80011e0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80011a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ac:	4a66      	ldr	r2, [pc, #408]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b6:	f7ff fa47 	bl	8000648 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fa43 	bl	8000648 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e1aa      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011d0:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80011d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0ef      	beq.n	80011be <HAL_RCC_OscConfig+0x3e6>
 80011de:	e01b      	b.n	8001218 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e0:	4b59      	ldr	r3, [pc, #356]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80011e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e6:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fa2a 	bl	8000648 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fa26 	bl	8000648 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e18d      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800120a:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800120c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1ef      	bne.n	80011f8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80a5 	beq.w	8001370 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10d      	bne.n	8001252 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a43      	ldr	r2, [pc, #268]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124e:	2301      	movs	r3, #1
 8001250:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <HAL_RCC_OscConfig+0x574>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d118      	bne.n	8001290 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <HAL_RCC_OscConfig+0x574>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a3a      	ldr	r2, [pc, #232]	; (800134c <HAL_RCC_OscConfig+0x574>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126a:	f7ff f9ed 	bl	8000648 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001272:	f7ff f9e9 	bl	8000648 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e150      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <HAL_RCC_OscConfig+0x574>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d108      	bne.n	80012aa <HAL_RCC_OscConfig+0x4d2>
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	4a2a      	ldr	r2, [pc, #168]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012a8:	e024      	b.n	80012f4 <HAL_RCC_OscConfig+0x51c>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d110      	bne.n	80012d4 <HAL_RCC_OscConfig+0x4fc>
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c8:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d2:	e00f      	b.n	80012f4 <HAL_RCC_OscConfig+0x51c>
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012da:	4a1b      	ldr	r2, [pc, #108]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012dc:	f023 0301 	bic.w	r3, r3, #1
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d016      	beq.n	800132a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff f9a4 	bl	8000648 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001302:	e00a      	b.n	800131a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff f9a0 	bl	8000648 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e105      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_RCC_OscConfig+0x570>)
 800131c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0ed      	beq.n	8001304 <HAL_RCC_OscConfig+0x52c>
 8001328:	e019      	b.n	800135e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff f98d 	bl	8000648 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001330:	e00e      	b.n	8001350 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001332:	f7ff f989 	bl	8000648 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001340:	4293      	cmp	r3, r2
 8001342:	d905      	bls.n	8001350 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e0ee      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
 8001348:	40021000 	.word	0x40021000
 800134c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001350:	4b77      	ldr	r3, [pc, #476]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1e9      	bne.n	8001332 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001364:	4b72      	ldr	r3, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	4a71      	ldr	r2, [pc, #452]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 800136a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80d5 	beq.w	8001524 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	f000 808e 	beq.w	800149e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001386:	2b02      	cmp	r3, #2
 8001388:	d15b      	bne.n	8001442 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a68      	ldr	r2, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff f957 	bl	8000648 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff f953 	bl	8000648 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0ba      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b0:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_RCC_OscConfig+0x75c>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013cc:	3a01      	subs	r2, #1
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	4311      	orrs	r1, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013d6:	0212      	lsls	r2, r2, #8
 80013d8:	4311      	orrs	r1, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013de:	0852      	lsrs	r2, r2, #1
 80013e0:	3a01      	subs	r2, #1
 80013e2:	0552      	lsls	r2, r2, #21
 80013e4:	4311      	orrs	r1, r2
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013ea:	0852      	lsrs	r2, r2, #1
 80013ec:	3a01      	subs	r2, #1
 80013ee:	0652      	lsls	r2, r2, #25
 80013f0:	4311      	orrs	r1, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013f6:	0912      	lsrs	r2, r2, #4
 80013f8:	0452      	lsls	r2, r2, #17
 80013fa:	430a      	orrs	r2, r1
 80013fc:	494c      	ldr	r1, [pc, #304]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001402:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a47      	ldr	r2, [pc, #284]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001418:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff f915 	bl	8000648 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff f911 	bl	8000648 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e078      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x64a>
 8001440:	e070      	b.n	8001524 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800144c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001460:	f023 0303 	bic.w	r3, r3, #3
 8001464:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 800146c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001474:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001476:	f7ff f8e7 	bl	8000648 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff f8e3 	bl	8000648 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e04a      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x6a6>
 800149c:	e042      	b.n	8001524 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e03d      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_RCC_OscConfig+0x758>)
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f003 0203 	and.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d130      	bne.n	8001520 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	3b01      	subs	r3, #1
 80014ca:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d127      	bne.n	8001520 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014da:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	d11f      	bne.n	8001520 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80014ea:	2a07      	cmp	r2, #7
 80014ec:	bf14      	ite	ne
 80014ee:	2201      	movne	r2, #1
 80014f0:	2200      	moveq	r2, #0
 80014f2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d113      	bne.n	8001520 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	3b01      	subs	r3, #1
 8001506:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d109      	bne.n	8001520 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	3b01      	subs	r3, #1
 800151a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	f99d808c 	.word	0xf99d808c

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0c8      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d910      	bls.n	800157c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 0207 	bic.w	r2, r3, #7
 8001562:	4961      	ldr	r1, [pc, #388]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0b0      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d04c      	beq.n	8001622 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e09e      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d107      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a8:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e092      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015c0:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e086      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e07e      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 0203 	bic.w	r2, r3, #3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	493f      	ldr	r1, [pc, #252]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015f2:	f7ff f829 	bl	8000648 <HAL_GetTick>
 80015f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	f7ff f825 	bl	8000648 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e066      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 020c 	and.w	r2, r3, #12
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	429a      	cmp	r2, r3
 8001620:	d1eb      	bne.n	80015fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	492c      	ldr	r1, [pc, #176]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d210      	bcs.n	8001670 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4924      	ldr	r1, [pc, #144]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e036      	b.n	80016de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	4918      	ldr	r1, [pc, #96]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800168a:	4313      	orrs	r3, r2
 800168c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	d009      	beq.n	80016ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4910      	ldr	r1, [pc, #64]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ae:	f000 f825 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80016b2:	4601      	mov	r1, r0
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <HAL_RCC_ClockConfig+0x1b4>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff6c 	bl	80005b0 <HAL_InitTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	72fb      	strb	r3, [r7, #11]

  return status;
 80016dc:	7afb      	ldrb	r3, [r7, #11]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40022000 	.word	0x40022000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	08006cfc 	.word	0x08006cfc
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000000 	.word	0x20000000

080016fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x34>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d121      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d11e      	bne.n	800176e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001730:	4b33      	ldr	r3, [pc, #204]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800173c:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800173e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e005      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001758:	4a2a      	ldr	r2, [pc, #168]	; (8001804 <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b04      	cmp	r3, #4
 8001772:	d102      	bne.n	800177a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	e004      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b08      	cmp	r3, #8
 800177e:	d101      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_GetSysClockFreq+0x110>)
 8001782:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d133      	bne.n	80017f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d002      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800179a:	2b03      	cmp	r3, #3
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800179e:	e005      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017a2:	617b      	str	r3, [r7, #20]
      break;
 80017a4:	e005      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_GetSysClockFreq+0x110>)
 80017a8:	617b      	str	r3, [r7, #20]
      break;
 80017aa:	e002      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	617b      	str	r3, [r7, #20]
      break;
 80017b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	3301      	adds	r3, #1
 80017be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	fb02 f203 	mul.w	r2, r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_GetSysClockFreq+0x104>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0e5b      	lsrs	r3, r3, #25
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017f2:	69bb      	ldr	r3, [r7, #24]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3724      	adds	r7, #36	; 0x24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000
 8001804:	08006d14 	.word	0x08006d14
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_GetHCLKFreq+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000010 	.word	0x20000010

08001828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800182c:	f7ff fff0 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001830:	4601      	mov	r1, r0
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	08006d0c 	.word	0x08006d0c

08001854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001858:	f7ff ffda 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 800185c:	4601      	mov	r1, r0
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0adb      	lsrs	r3, r3, #11
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_RCC_GetPCLK2Freq+0x28>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	08006d0c 	.word	0x08006d0c

08001880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001898:	f7ff fa3a 	bl	8000d10 <HAL_PWREx_GetVoltageRange>
 800189c:	6178      	str	r0, [r7, #20]
 800189e:	e014      	b.n	80018ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a0:	4b25      	ldr	r3, [pc, #148]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	4a24      	ldr	r2, [pc, #144]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6593      	str	r3, [r2, #88]	; 0x58
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018b8:	f7ff fa2a 	bl	8000d10 <HAL_PWREx_GetVoltageRange>
 80018bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a1d      	ldr	r2, [pc, #116]	; (8001938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d0:	d10b      	bne.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b80      	cmp	r3, #128	; 0x80
 80018d6:	d919      	bls.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2ba0      	cmp	r3, #160	; 0xa0
 80018dc:	d902      	bls.n	80018e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018de:	2302      	movs	r3, #2
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	e013      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	e010      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b80      	cmp	r3, #128	; 0x80
 80018ee:	d902      	bls.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018f0:	2303      	movs	r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	e00a      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b80      	cmp	r3, #128	; 0x80
 80018fa:	d102      	bne.n	8001902 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	e004      	b.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b70      	cmp	r3, #112	; 0x70
 8001906:	d101      	bne.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001908:	2301      	movs	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 0207 	bic.w	r2, r3, #7
 8001914:	4909      	ldr	r1, [pc, #36]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001948:	2300      	movs	r3, #0
 800194a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800194c:	2300      	movs	r3, #0
 800194e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03f      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001964:	d01c      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800196a:	d802      	bhi.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00e      	beq.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001970:	e01f      	b.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001972:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001976:	d003      	beq.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001978:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800197c:	d01c      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800197e:	e018      	b.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001980:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a84      	ldr	r2, [pc, #528]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800198c:	e015      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3304      	adds	r3, #4
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fab9 	bl	8001f0c <RCCEx_PLLSAI1_Config>
 800199a:	4603      	mov	r3, r0
 800199c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800199e:	e00c      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3320      	adds	r3, #32
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fba0 	bl	80020ec <RCCEx_PLLSAI2_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019b0:	e003      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	74fb      	strb	r3, [r7, #19]
      break;
 80019b6:	e000      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80019b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019ba:	7cfb      	ldrb	r3, [r7, #19]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10b      	bne.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019ce:	4972      	ldr	r1, [pc, #456]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80019d6:	e001      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80019d8:	7cfb      	ldrb	r3, [r7, #19]
 80019da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03f      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d01c      	beq.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80019f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f6:	d802      	bhi.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00e      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80019fc:	e01f      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80019fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a02:	d003      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001a04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a08:	d01c      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001a0a:	e018      	b.n	8001a3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a0c:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a61      	ldr	r2, [pc, #388]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a18:	e015      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 fa73 	bl	8001f0c <RCCEx_PLLSAI1_Config>
 8001a26:	4603      	mov	r3, r0
 8001a28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a2a:	e00c      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3320      	adds	r3, #32
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fb5a 	bl	80020ec <RCCEx_PLLSAI2_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a3c:	e003      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	74fb      	strb	r3, [r7, #19]
      break;
 8001a42:	e000      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a46:	7cfb      	ldrb	r3, [r7, #19]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a4c:	4b52      	ldr	r3, [pc, #328]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a5a:	494f      	ldr	r1, [pc, #316]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a62:	e001      	b.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a64:	7cfb      	ldrb	r3, [r7, #19]
 8001a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80a0 	beq.w	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00d      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a90:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	4a40      	ldr	r2, [pc, #256]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aac:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe fdc6 	bl	8000648 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac0:	f7fe fdc2 	bl	8000648 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d902      	bls.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ad2:	e005      	b.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ad4:	4b31      	ldr	r3, [pc, #196]	; (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0ef      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001ae0:	7cfb      	ldrb	r3, [r7, #19]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d15c      	bne.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01f      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d019      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b16:	4a20      	ldr	r2, [pc, #128]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b26:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe fd81 	bl	8000648 <HAL_GetTick>
 8001b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b48:	e00b      	b.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7fe fd7d 	bl	8000648 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d902      	bls.n	8001b62 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001b60:	e006      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b62:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0ec      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001b70:	7cfb      	ldrb	r3, [r7, #19]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b86:	4904      	ldr	r1, [pc, #16]	; (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	74bb      	strb	r3, [r7, #18]
 8001b94:	e006      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba4:	7c7b      	ldrb	r3, [r7, #17]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d105      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001baa:	4b9e      	ldr	r3, [pc, #632]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	4a9d      	ldr	r2, [pc, #628]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bc2:	4b98      	ldr	r3, [pc, #608]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc8:	f023 0203 	bic.w	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	4994      	ldr	r1, [pc, #592]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00a      	beq.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be4:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	f023 020c 	bic.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	498c      	ldr	r1, [pc, #560]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c06:	4b87      	ldr	r3, [pc, #540]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4983      	ldr	r1, [pc, #524]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00a      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c28:	4b7e      	ldr	r3, [pc, #504]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	497b      	ldr	r1, [pc, #492]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c58:	4972      	ldr	r1, [pc, #456]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00a      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	496a      	ldr	r1, [pc, #424]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	4961      	ldr	r1, [pc, #388]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cb0:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	4959      	ldr	r1, [pc, #356]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce0:	4950      	ldr	r1, [pc, #320]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	4948      	ldr	r1, [pc, #288]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d24:	493f      	ldr	r1, [pc, #252]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d028      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d46:	4937      	ldr	r1, [pc, #220]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d56:	d106      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d62:	60d3      	str	r3, [r2, #12]
 8001d64:	e011      	b.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d6e:	d10c      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	2101      	movs	r1, #1
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f8c8 	bl	8001f0c <RCCEx_PLLSAI1_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d80:	7cfb      	ldrb	r3, [r7, #19]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001d86:	7cfb      	ldrb	r3, [r7, #19]
 8001d88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d028      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d96:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	491f      	ldr	r1, [pc, #124]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a1a      	ldr	r2, [pc, #104]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc0:	60d3      	str	r3, [r2, #12]
 8001dc2:	e011      	b.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f000 f899 	bl	8001f0c <RCCEx_PLLSAI1_Config>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dde:	7cfb      	ldrb	r3, [r7, #19]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d02b      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e12:	d109      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a02      	ldr	r2, [pc, #8]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e1e:	60d3      	str	r3, [r2, #12]
 8001e20:	e014      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f867 	bl	8001f0c <RCCEx_PLLSAI1_Config>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e42:	7cfb      	ldrb	r3, [r7, #19]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d02f      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e66:	4928      	ldr	r1, [pc, #160]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e76:	d10d      	bne.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f844 	bl	8001f0c <RCCEx_PLLSAI1_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d014      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	74bb      	strb	r3, [r7, #18]
 8001e92:	e011      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3320      	adds	r3, #32
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f921 	bl	80020ec <RCCEx_PLLSAI2_Config>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00a      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ed2:	490d      	ldr	r1, [pc, #52]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ef6:	4904      	ldr	r1, [pc, #16]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001efe:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d018      	beq.n	8001f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d10d      	bne.n	8001f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
       ||
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d044      	beq.n	8001fdc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e041      	b.n	8001fdc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d00c      	beq.n	8001f7a <RCCEx_PLLSAI1_Config+0x6e>
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d013      	beq.n	8001f8c <RCCEx_PLLSAI1_Config+0x80>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d120      	bne.n	8001faa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f68:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11d      	bne.n	8001fb0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f78:	e01a      	b.n	8001fb0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d116      	bne.n	8001fb4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e013      	b.n	8001fb4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f8c:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10f      	bne.n	8001fb8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d109      	bne.n	8001fb8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001fa8:	e006      	b.n	8001fb8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e004      	b.n	8001fba <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e002      	b.n	8001fba <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fb4:	bf00      	nop
 8001fb6:	e000      	b.n	8001fba <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fb8:	bf00      	nop
    }

    if(status == HAL_OK)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fc0:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	4944      	ldr	r1, [pc, #272]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d17d      	bne.n	80020de <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fe8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fee:	f7fe fb2b 	bl	8000648 <HAL_GetTick>
 8001ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ff4:	e009      	b.n	800200a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001ff6:	f7fe fb27 	bl	8000648 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d902      	bls.n	800200a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	73fb      	strb	r3, [r7, #15]
        break;
 8002008:	e005      	b.n	8002016 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ef      	bne.n	8001ff6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d160      	bne.n	80020de <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800202a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	0211      	lsls	r1, r2, #8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68d2      	ldr	r2, [r2, #12]
 8002038:	0912      	lsrs	r2, r2, #4
 800203a:	0452      	lsls	r2, r2, #17
 800203c:	430a      	orrs	r2, r1
 800203e:	492a      	ldr	r1, [pc, #168]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	610b      	str	r3, [r1, #16]
 8002044:	e027      	b.n	8002096 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d112      	bne.n	8002072 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002054:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6892      	ldr	r2, [r2, #8]
 800205c:	0211      	lsls	r1, r2, #8
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6912      	ldr	r2, [r2, #16]
 8002062:	0852      	lsrs	r2, r2, #1
 8002064:	3a01      	subs	r2, #1
 8002066:	0552      	lsls	r2, r2, #21
 8002068:	430a      	orrs	r2, r1
 800206a:	491f      	ldr	r1, [pc, #124]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	610b      	str	r3, [r1, #16]
 8002070:	e011      	b.n	8002096 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800207a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6892      	ldr	r2, [r2, #8]
 8002082:	0211      	lsls	r1, r2, #8
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6952      	ldr	r2, [r2, #20]
 8002088:	0852      	lsrs	r2, r2, #1
 800208a:	3a01      	subs	r2, #1
 800208c:	0652      	lsls	r2, r2, #25
 800208e:	430a      	orrs	r2, r1
 8002090:	4915      	ldr	r1, [pc, #84]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800209c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe fad1 	bl	8000648 <HAL_GetTick>
 80020a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020a8:	e009      	b.n	80020be <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020aa:	f7fe facd 	bl	8000648 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d902      	bls.n	80020be <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	73fb      	strb	r3, [r7, #15]
          break;
 80020bc:	e005      	b.n	80020ca <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ef      	beq.n	80020aa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d106      	bne.n	80020de <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4903      	ldr	r1, [pc, #12]	; (80020e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020fa:	4b68      	ldr	r3, [pc, #416]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d018      	beq.n	8002138 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0203 	and.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d10d      	bne.n	8002132 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
       ||
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
       ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d044      	beq.n	80021bc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e041      	b.n	80021bc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d00c      	beq.n	800215a <RCCEx_PLLSAI2_Config+0x6e>
 8002140:	2b03      	cmp	r3, #3
 8002142:	d013      	beq.n	800216c <RCCEx_PLLSAI2_Config+0x80>
 8002144:	2b01      	cmp	r3, #1
 8002146:	d120      	bne.n	800218a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002148:	4b54      	ldr	r3, [pc, #336]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11d      	bne.n	8002190 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002158:	e01a      	b.n	8002190 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216a:	e013      	b.n	8002194 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800216c:	4b4b      	ldr	r3, [pc, #300]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10f      	bne.n	8002198 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002188:	e006      	b.n	8002198 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
      break;
 800218e:	e004      	b.n	800219a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002190:	bf00      	nop
 8002192:	e002      	b.n	800219a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002194:	bf00      	nop
 8002196:	e000      	b.n	800219a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002198:	bf00      	nop
    }

    if(status == HAL_OK)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021a0:	4b3e      	ldr	r3, [pc, #248]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	430b      	orrs	r3, r1
 80021b6:	4939      	ldr	r1, [pc, #228]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d167      	bne.n	8002292 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a35      	ldr	r2, [pc, #212]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ce:	f7fe fa3b 	bl	8000648 <HAL_GetTick>
 80021d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021d4:	e009      	b.n	80021ea <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021d6:	f7fe fa37 	bl	8000648 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d902      	bls.n	80021ea <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	73fb      	strb	r3, [r7, #15]
        break;
 80021e8:	e005      	b.n	80021f6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ef      	bne.n	80021d6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d14a      	bne.n	8002292 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d111      	bne.n	8002226 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800220a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6892      	ldr	r2, [r2, #8]
 8002212:	0211      	lsls	r1, r2, #8
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68d2      	ldr	r2, [r2, #12]
 8002218:	0912      	lsrs	r2, r2, #4
 800221a:	0452      	lsls	r2, r2, #17
 800221c:	430a      	orrs	r2, r1
 800221e:	491f      	ldr	r1, [pc, #124]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	614b      	str	r3, [r1, #20]
 8002224:	e011      	b.n	800224a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800222e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6892      	ldr	r2, [r2, #8]
 8002236:	0211      	lsls	r1, r2, #8
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6912      	ldr	r2, [r2, #16]
 800223c:	0852      	lsrs	r2, r2, #1
 800223e:	3a01      	subs	r2, #1
 8002240:	0652      	lsls	r2, r2, #25
 8002242:	430a      	orrs	r2, r1
 8002244:	4915      	ldr	r1, [pc, #84]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002246:	4313      	orrs	r3, r2
 8002248:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe f9f7 	bl	8000648 <HAL_GetTick>
 800225a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800225c:	e009      	b.n	8002272 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800225e:	f7fe f9f3 	bl	8000648 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d902      	bls.n	8002272 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	73fb      	strb	r3, [r7, #15]
          break;
 8002270:	e005      	b.n	800227e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ef      	beq.n	800225e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d106      	bne.n	8002292 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	4903      	ldr	r1, [pc, #12]	; (800229c <RCCEx_PLLSAI2_Config+0x1b0>)
 800228e:	4313      	orrs	r3, r2
 8002290:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07c      	b.n	80023ac <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f003 fc55 	bl	8005b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022f2:	d902      	bls.n	80022fa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e002      	b.n	8002300 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002308:	d007      	beq.n	800231a <HAL_SPI_Init+0x7a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002312:	d002      	beq.n	800231a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800232a:	d903      	bls.n	8002334 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
 8002332:	e002      	b.n	800233a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	ea42 0103 	orr.w	r1, r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f003 0204 	and.w	r2, r3, #4
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	ea42 0103 	orr.w	r1, r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_SPI_Transmit+0x22>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e150      	b.n	8002678 <HAL_SPI_Transmit+0x2c4>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023de:	f7fe f933 	bl	8000648 <HAL_GetTick>
 80023e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
 80023f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023f8:	e135      	b.n	8002666 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Transmit+0x52>
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	77fb      	strb	r3, [r7, #31]
    goto error;
 800240a:	e12c      	b.n	8002666 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2203      	movs	r2, #3
 8002410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002456:	d107      	bne.n	8002468 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002466:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d007      	beq.n	8002486 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800248e:	d94b      	bls.n	8002528 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_SPI_Transmit+0xea>
 8002498:	8afb      	ldrh	r3, [r7, #22]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d13e      	bne.n	800251c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	881a      	ldrh	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	1c9a      	adds	r2, r3, #2
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024c2:	e02b      	b.n	800251c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d112      	bne.n	80024f8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e2:	1c9a      	adds	r2, r3, #2
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024f6:	e011      	b.n	800251c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024f8:	f7fe f8a6 	bl	8000648 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d803      	bhi.n	8002510 <HAL_SPI_Transmit+0x15c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d102      	bne.n	8002516 <HAL_SPI_Transmit+0x162>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	77fb      	strb	r3, [r7, #31]
          goto error;
 800251a:	e0a4      	b.n	8002666 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ce      	bne.n	80024c4 <HAL_SPI_Transmit+0x110>
 8002526:	e07c      	b.n	8002622 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_Transmit+0x182>
 8002530:	8afb      	ldrh	r3, [r7, #22]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d170      	bne.n	8002618 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d912      	bls.n	8002566 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002550:	1c9a      	adds	r2, r3, #2
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b02      	subs	r3, #2
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002564:	e058      	b.n	8002618 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800258c:	e044      	b.n	8002618 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b02      	cmp	r3, #2
 800259a:	d12b      	bne.n	80025f4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d912      	bls.n	80025cc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	1c9a      	adds	r2, r3, #2
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b02      	subs	r3, #2
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025ca:	e025      	b.n	8002618 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025f2:	e011      	b.n	8002618 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f4:	f7fe f828 	bl	8000648 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d803      	bhi.n	800260c <HAL_SPI_Transmit+0x258>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d102      	bne.n	8002612 <HAL_SPI_Transmit+0x25e>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d102      	bne.n	8002618 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002616:	e026      	b.n	8002666 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1b5      	bne.n	800258e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fca2 	bl	8002f70 <SPI_EndRxTxTransaction>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e000      	b.n	8002666 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8002664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002676:	7ffb      	ldrb	r3, [r7, #31]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269c:	d112      	bne.n	80026c4 <HAL_SPI_Receive+0x44>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10e      	bne.n	80026c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2204      	movs	r2, #4
 80026aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f908 	bl	80028d0 <HAL_SPI_TransmitReceive>
 80026c0:	4603      	mov	r3, r0
 80026c2:	e101      	b.n	80028c8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_SPI_Receive+0x52>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e0fa      	b.n	80028c8 <HAL_SPI_Receive+0x248>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026da:	f7fd ffb5 	bl	8000648 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d002      	beq.n	80026f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
 80026ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026f0:	e0e1      	b.n	80028b6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_SPI_Receive+0x7e>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002702:	e0d8      	b.n	80028b6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2204      	movs	r2, #4
 8002708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	88fa      	ldrh	r2, [r7, #6]
 800271c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800274e:	d908      	bls.n	8002762 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	e007      	b.n	8002772 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002770:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800277a:	d107      	bne.n	800278c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800278a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d007      	beq.n	80027aa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b2:	d867      	bhi.n	8002884 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80027b4:	e030      	b.n	8002818 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d117      	bne.n	80027f4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f103 020c 	add.w	r2, r3, #12
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80027f2:	e011      	b.n	8002818 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027f4:	f7fd ff28 	bl	8000648 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d803      	bhi.n	800280c <HAL_SPI_Receive+0x18c>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d102      	bne.n	8002812 <HAL_SPI_Receive+0x192>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002816:	e04e      	b.n	80028b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1c8      	bne.n	80027b6 <HAL_SPI_Receive+0x136>
 8002824:	e034      	b.n	8002890 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d115      	bne.n	8002860 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	b292      	uxth	r2, r2
 8002840:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	1c9a      	adds	r2, r3, #2
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800285e:	e011      	b.n	8002884 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002860:	f7fd fef2 	bl	8000648 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d803      	bhi.n	8002878 <HAL_SPI_Receive+0x1f8>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d102      	bne.n	800287e <HAL_SPI_Receive+0x1fe>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002882:	e018      	b.n	80028b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ca      	bne.n	8002826 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fb13 	bl	8002ec0 <SPI_EndRxTransaction>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
 80028b2:	e000      	b.n	80028b6 <HAL_SPI_Receive+0x236>
  }

error :
 80028b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028de:	2301      	movs	r3, #1
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_TransmitReceive+0x26>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e1fb      	b.n	8002cee <HAL_SPI_TransmitReceive+0x41e>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028fe:	f7fd fea3 	bl	8000648 <HAL_GetTick>
 8002902:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800290a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800291a:	7efb      	ldrb	r3, [r7, #27]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00e      	beq.n	800293e <HAL_SPI_TransmitReceive+0x6e>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002926:	d106      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x66>
 8002930:	7efb      	ldrb	r3, [r7, #27]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d003      	beq.n	800293e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002936:	2302      	movs	r3, #2
 8002938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800293c:	e1cd      	b.n	8002cda <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x80>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_TransmitReceive+0x80>
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002956:	e1c0      	b.n	8002cda <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b04      	cmp	r3, #4
 8002962:	d003      	beq.n	800296c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2205      	movs	r2, #5
 8002968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ae:	d802      	bhi.n	80029b6 <HAL_SPI_TransmitReceive+0xe6>
 80029b0:	8a3b      	ldrh	r3, [r7, #16]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d908      	bls.n	80029c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e007      	b.n	80029d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d007      	beq.n	80029f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029fe:	d97c      	bls.n	8002afa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x13e>
 8002a08:	8a7b      	ldrh	r3, [r7, #18]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d169      	bne.n	8002ae2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	1c9a      	adds	r2, r3, #2
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a32:	e056      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d11b      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x1aa>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x1aa>
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d113      	bne.n	8002a7a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	1c9a      	adds	r2, r3, #2
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d11c      	bne.n	8002ac2 <HAL_SPI_TransmitReceive+0x1f2>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	1c9a      	adds	r2, r3, #2
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ac2:	f7fd fdc1 	bl	8000648 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d807      	bhi.n	8002ae2 <HAL_SPI_TransmitReceive+0x212>
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d003      	beq.n	8002ae2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ae0:	e0fb      	b.n	8002cda <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1a3      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x164>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d19d      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x164>
 8002af8:	e0df      	b.n	8002cba <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_SPI_TransmitReceive+0x23a>
 8002b02:	8a7b      	ldrh	r3, [r7, #18]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 80cb 	bne.w	8002ca0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d912      	bls.n	8002b3a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	1c9a      	adds	r2, r3, #2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b02      	subs	r3, #2
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b38:	e0b2      	b.n	8002ca0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b60:	e09e      	b.n	8002ca0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d134      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x30a>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02f      	beq.n	8002bda <HAL_SPI_TransmitReceive+0x30a>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d12c      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d912      	bls.n	8002bb0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	881a      	ldrh	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	1c9a      	adds	r2, r3, #2
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b02      	subs	r3, #2
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bae:	e012      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	7812      	ldrb	r2, [r2, #0]
 8002bbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d148      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x3aa>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d042      	beq.n	8002c7a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d923      	bls.n	8002c48 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	1c9a      	adds	r2, r3, #2
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b02      	subs	r3, #2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d81f      	bhi.n	8002c76 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	e016      	b.n	8002c76 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f103 020c 	add.w	r2, r3, #12
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c76:	2301      	movs	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c7a:	f7fd fce5 	bl	8000648 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d803      	bhi.n	8002c92 <HAL_SPI_TransmitReceive+0x3c2>
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d102      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x3c8>
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d103      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c9e:	e01c      	b.n	8002cda <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f47f af5b 	bne.w	8002b62 <HAL_SPI_TransmitReceive+0x292>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f af54 	bne.w	8002b62 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f956 	bl	8002f70 <SPI_EndRxTxTransaction>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60
 8002cd6:	e000      	b.n	8002cda <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d04:	b2db      	uxtb	r3, r3
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d22:	e04c      	b.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d048      	beq.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d2c:	f7fd fc8c 	bl	8000648 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d902      	bls.n	8002d42 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d13d      	bne.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d5a:	d111      	bne.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d64:	d004      	beq.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d107      	bne.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d10f      	bne.n	8002daa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e00f      	b.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d1a3      	bne.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002df4:	e057      	b.n	8002ea6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dfc:	d106      	bne.n	8002e0c <SPI_WaitFifoStateUntilTimeout+0x26>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d103      	bne.n	8002e0c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	330c      	adds	r3, #12
 8002e0a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e12:	d048      	beq.n	8002ea6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002e14:	f7fd fc18 	bl	8000648 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d902      	bls.n	8002e2a <SPI_WaitFifoStateUntilTimeout+0x44>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d13d      	bne.n	8002ea6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e42:	d111      	bne.n	8002e68 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4c:	d004      	beq.n	8002e58 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d107      	bne.n	8002e68 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e70:	d10f      	bne.n	8002e92 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e008      	b.n	8002eb8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d19f      	bne.n	8002df6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed4:	d111      	bne.n	8002efa <SPI_EndRxTransaction+0x3a>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ede:	d004      	beq.n	8002eea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee8:	d107      	bne.n	8002efa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff ff04 	bl	8002d12 <SPI_WaitFlagStateUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e023      	b.n	8002f68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f28:	d11d      	bne.n	8002f66 <SPI_EndRxTransaction+0xa6>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f32:	d004      	beq.n	8002f3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d113      	bne.n	8002f66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff ff4b 	bl	8002de6 <SPI_WaitFifoStateUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e000      	b.n	8002f68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af02      	add	r7, sp, #8
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ff2c 	bl	8002de6 <SPI_WaitFifoStateUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e027      	b.n	8002ff4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f7ff feaf 	bl	8002d12 <SPI_WaitFlagStateUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	f043 0220 	orr.w	r2, r3, #32
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e014      	b.n	8002ff4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff ff05 	bl	8002de6 <SPI_WaitFifoStateUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e000      	b.n	8002ff4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e040      	b.n	8003090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f002 fe22 	bl	8005c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f95a 	bl	80032f4 <UART_SetConfig>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fc96 	bl	8003984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fd1d 	bl	8003ac8 <UART_CheckIdleState>
 800308e:	4603      	mov	r3, r0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 8081 	bne.w	80031b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Transmit+0x26>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e079      	b.n	80031b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Transmit+0x38>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e072      	b.n	80031b6 <HAL_UART_Transmit+0x11e>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80030e4:	f7fd fab0 	bl	8000648 <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	d108      	bne.n	8003116 <HAL_UART_Transmit+0x7e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e003      	b.n	800311e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800311e:	e02d      	b.n	800317c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2200      	movs	r2, #0
 8003128:	2180      	movs	r1, #128	; 0x80
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fd11 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e03d      	b.n	80031b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	881a      	ldrh	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800314c:	b292      	uxth	r2, r2
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	3302      	adds	r3, #2
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e008      	b.n	800316a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b292      	uxth	r2, r2
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1cb      	bne.n	8003120 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	2140      	movs	r1, #64	; 0x40
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fcdd 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e009      	b.n	80031b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d164      	bne.n	80032a0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_Transmit_DMA+0x22>
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e05d      	b.n	80032a2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit_DMA+0x34>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e056      	b.n	80032a2 <HAL_UART_Transmit_DMA+0xe2>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	88fa      	ldrh	r2, [r7, #6]
 8003206:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2221      	movs	r2, #33	; 0x21
 800321c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003222:	2b00      	cmp	r3, #0
 8003224:	d02a      	beq.n	800327c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322a:	4a20      	ldr	r2, [pc, #128]	; (80032ac <HAL_UART_Transmit_DMA+0xec>)
 800322c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003232:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <HAL_UART_Transmit_DMA+0xf0>)
 8003234:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800323a:	4a1e      	ldr	r2, [pc, #120]	; (80032b4 <HAL_UART_Transmit_DMA+0xf4>)
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003242:	2200      	movs	r2, #0
 8003244:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4619      	mov	r1, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3328      	adds	r3, #40	; 0x28
 8003256:	461a      	mov	r2, r3
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	f7fd fb08 	bl	800086e <HAL_DMA_Start_IT>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2210      	movs	r2, #16
 8003268:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e012      	b.n	80032a2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800329a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	08003c4d 	.word	0x08003c4d
 80032b0:	08003ca1 	.word	0x08003ca1
 80032b4:	08003cbd 	.word	0x08003cbd

080032b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032f8:	b088      	sub	sp, #32
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4313      	orrs	r3, r2
 8003320:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4bac      	ldr	r3, [pc, #688]	; (80035dc <UART_SetConfig+0x2e8>)
 800332a:	4013      	ands	r3, r2
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	69f9      	ldr	r1, [r7, #28]
 8003332:	430b      	orrs	r3, r1
 8003334:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4aa2      	ldr	r2, [pc, #648]	; (80035e0 <UART_SetConfig+0x2ec>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	4313      	orrs	r3, r2
 8003364:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a99      	ldr	r2, [pc, #612]	; (80035e4 <UART_SetConfig+0x2f0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d121      	bne.n	80033c8 <UART_SetConfig+0xd4>
 8003384:	4b98      	ldr	r3, [pc, #608]	; (80035e8 <UART_SetConfig+0x2f4>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b03      	cmp	r3, #3
 8003390:	d816      	bhi.n	80033c0 <UART_SetConfig+0xcc>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <UART_SetConfig+0xa4>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033b5 	.word	0x080033b5
 80033a0:	080033af 	.word	0x080033af
 80033a4:	080033bb 	.word	0x080033bb
 80033a8:	2301      	movs	r3, #1
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e0e8      	b.n	8003580 <UART_SetConfig+0x28c>
 80033ae:	2302      	movs	r3, #2
 80033b0:	76fb      	strb	r3, [r7, #27]
 80033b2:	e0e5      	b.n	8003580 <UART_SetConfig+0x28c>
 80033b4:	2304      	movs	r3, #4
 80033b6:	76fb      	strb	r3, [r7, #27]
 80033b8:	e0e2      	b.n	8003580 <UART_SetConfig+0x28c>
 80033ba:	2308      	movs	r3, #8
 80033bc:	76fb      	strb	r3, [r7, #27]
 80033be:	e0df      	b.n	8003580 <UART_SetConfig+0x28c>
 80033c0:	2310      	movs	r3, #16
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	bf00      	nop
 80033c6:	e0db      	b.n	8003580 <UART_SetConfig+0x28c>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a87      	ldr	r2, [pc, #540]	; (80035ec <UART_SetConfig+0x2f8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d134      	bne.n	800343c <UART_SetConfig+0x148>
 80033d2:	4b85      	ldr	r3, [pc, #532]	; (80035e8 <UART_SetConfig+0x2f4>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f003 030c 	and.w	r3, r3, #12
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d829      	bhi.n	8003434 <UART_SetConfig+0x140>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0xf4>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	08003435 	.word	0x08003435
 80033f0:	08003435 	.word	0x08003435
 80033f4:	08003435 	.word	0x08003435
 80033f8:	08003429 	.word	0x08003429
 80033fc:	08003435 	.word	0x08003435
 8003400:	08003435 	.word	0x08003435
 8003404:	08003435 	.word	0x08003435
 8003408:	08003423 	.word	0x08003423
 800340c:	08003435 	.word	0x08003435
 8003410:	08003435 	.word	0x08003435
 8003414:	08003435 	.word	0x08003435
 8003418:	0800342f 	.word	0x0800342f
 800341c:	2300      	movs	r3, #0
 800341e:	76fb      	strb	r3, [r7, #27]
 8003420:	e0ae      	b.n	8003580 <UART_SetConfig+0x28c>
 8003422:	2302      	movs	r3, #2
 8003424:	76fb      	strb	r3, [r7, #27]
 8003426:	e0ab      	b.n	8003580 <UART_SetConfig+0x28c>
 8003428:	2304      	movs	r3, #4
 800342a:	76fb      	strb	r3, [r7, #27]
 800342c:	e0a8      	b.n	8003580 <UART_SetConfig+0x28c>
 800342e:	2308      	movs	r3, #8
 8003430:	76fb      	strb	r3, [r7, #27]
 8003432:	e0a5      	b.n	8003580 <UART_SetConfig+0x28c>
 8003434:	2310      	movs	r3, #16
 8003436:	76fb      	strb	r3, [r7, #27]
 8003438:	bf00      	nop
 800343a:	e0a1      	b.n	8003580 <UART_SetConfig+0x28c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a6b      	ldr	r2, [pc, #428]	; (80035f0 <UART_SetConfig+0x2fc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d120      	bne.n	8003488 <UART_SetConfig+0x194>
 8003446:	4b68      	ldr	r3, [pc, #416]	; (80035e8 <UART_SetConfig+0x2f4>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003450:	2b10      	cmp	r3, #16
 8003452:	d00f      	beq.n	8003474 <UART_SetConfig+0x180>
 8003454:	2b10      	cmp	r3, #16
 8003456:	d802      	bhi.n	800345e <UART_SetConfig+0x16a>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0x174>
 800345c:	e010      	b.n	8003480 <UART_SetConfig+0x18c>
 800345e:	2b20      	cmp	r3, #32
 8003460:	d005      	beq.n	800346e <UART_SetConfig+0x17a>
 8003462:	2b30      	cmp	r3, #48	; 0x30
 8003464:	d009      	beq.n	800347a <UART_SetConfig+0x186>
 8003466:	e00b      	b.n	8003480 <UART_SetConfig+0x18c>
 8003468:	2300      	movs	r3, #0
 800346a:	76fb      	strb	r3, [r7, #27]
 800346c:	e088      	b.n	8003580 <UART_SetConfig+0x28c>
 800346e:	2302      	movs	r3, #2
 8003470:	76fb      	strb	r3, [r7, #27]
 8003472:	e085      	b.n	8003580 <UART_SetConfig+0x28c>
 8003474:	2304      	movs	r3, #4
 8003476:	76fb      	strb	r3, [r7, #27]
 8003478:	e082      	b.n	8003580 <UART_SetConfig+0x28c>
 800347a:	2308      	movs	r3, #8
 800347c:	76fb      	strb	r3, [r7, #27]
 800347e:	e07f      	b.n	8003580 <UART_SetConfig+0x28c>
 8003480:	2310      	movs	r3, #16
 8003482:	76fb      	strb	r3, [r7, #27]
 8003484:	bf00      	nop
 8003486:	e07b      	b.n	8003580 <UART_SetConfig+0x28c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a59      	ldr	r2, [pc, #356]	; (80035f4 <UART_SetConfig+0x300>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d120      	bne.n	80034d4 <UART_SetConfig+0x1e0>
 8003492:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <UART_SetConfig+0x2f4>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d00f      	beq.n	80034c0 <UART_SetConfig+0x1cc>
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d802      	bhi.n	80034aa <UART_SetConfig+0x1b6>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <UART_SetConfig+0x1c0>
 80034a8:	e010      	b.n	80034cc <UART_SetConfig+0x1d8>
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d005      	beq.n	80034ba <UART_SetConfig+0x1c6>
 80034ae:	2bc0      	cmp	r3, #192	; 0xc0
 80034b0:	d009      	beq.n	80034c6 <UART_SetConfig+0x1d2>
 80034b2:	e00b      	b.n	80034cc <UART_SetConfig+0x1d8>
 80034b4:	2300      	movs	r3, #0
 80034b6:	76fb      	strb	r3, [r7, #27]
 80034b8:	e062      	b.n	8003580 <UART_SetConfig+0x28c>
 80034ba:	2302      	movs	r3, #2
 80034bc:	76fb      	strb	r3, [r7, #27]
 80034be:	e05f      	b.n	8003580 <UART_SetConfig+0x28c>
 80034c0:	2304      	movs	r3, #4
 80034c2:	76fb      	strb	r3, [r7, #27]
 80034c4:	e05c      	b.n	8003580 <UART_SetConfig+0x28c>
 80034c6:	2308      	movs	r3, #8
 80034c8:	76fb      	strb	r3, [r7, #27]
 80034ca:	e059      	b.n	8003580 <UART_SetConfig+0x28c>
 80034cc:	2310      	movs	r3, #16
 80034ce:	76fb      	strb	r3, [r7, #27]
 80034d0:	bf00      	nop
 80034d2:	e055      	b.n	8003580 <UART_SetConfig+0x28c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a47      	ldr	r2, [pc, #284]	; (80035f8 <UART_SetConfig+0x304>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d124      	bne.n	8003528 <UART_SetConfig+0x234>
 80034de:	4b42      	ldr	r3, [pc, #264]	; (80035e8 <UART_SetConfig+0x2f4>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ec:	d012      	beq.n	8003514 <UART_SetConfig+0x220>
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d802      	bhi.n	80034fa <UART_SetConfig+0x206>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <UART_SetConfig+0x214>
 80034f8:	e012      	b.n	8003520 <UART_SetConfig+0x22c>
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fe:	d006      	beq.n	800350e <UART_SetConfig+0x21a>
 8003500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003504:	d009      	beq.n	800351a <UART_SetConfig+0x226>
 8003506:	e00b      	b.n	8003520 <UART_SetConfig+0x22c>
 8003508:	2300      	movs	r3, #0
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e038      	b.n	8003580 <UART_SetConfig+0x28c>
 800350e:	2302      	movs	r3, #2
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e035      	b.n	8003580 <UART_SetConfig+0x28c>
 8003514:	2304      	movs	r3, #4
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	e032      	b.n	8003580 <UART_SetConfig+0x28c>
 800351a:	2308      	movs	r3, #8
 800351c:	76fb      	strb	r3, [r7, #27]
 800351e:	e02f      	b.n	8003580 <UART_SetConfig+0x28c>
 8003520:	2310      	movs	r3, #16
 8003522:	76fb      	strb	r3, [r7, #27]
 8003524:	bf00      	nop
 8003526:	e02b      	b.n	8003580 <UART_SetConfig+0x28c>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <UART_SetConfig+0x2ec>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d124      	bne.n	800357c <UART_SetConfig+0x288>
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <UART_SetConfig+0x2f4>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d012      	beq.n	8003568 <UART_SetConfig+0x274>
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d802      	bhi.n	800354e <UART_SetConfig+0x25a>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <UART_SetConfig+0x268>
 800354c:	e012      	b.n	8003574 <UART_SetConfig+0x280>
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003552:	d006      	beq.n	8003562 <UART_SetConfig+0x26e>
 8003554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003558:	d009      	beq.n	800356e <UART_SetConfig+0x27a>
 800355a:	e00b      	b.n	8003574 <UART_SetConfig+0x280>
 800355c:	2300      	movs	r3, #0
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	e00e      	b.n	8003580 <UART_SetConfig+0x28c>
 8003562:	2302      	movs	r3, #2
 8003564:	76fb      	strb	r3, [r7, #27]
 8003566:	e00b      	b.n	8003580 <UART_SetConfig+0x28c>
 8003568:	2304      	movs	r3, #4
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	e008      	b.n	8003580 <UART_SetConfig+0x28c>
 800356e:	2308      	movs	r3, #8
 8003570:	76fb      	strb	r3, [r7, #27]
 8003572:	e005      	b.n	8003580 <UART_SetConfig+0x28c>
 8003574:	2310      	movs	r3, #16
 8003576:	76fb      	strb	r3, [r7, #27]
 8003578:	bf00      	nop
 800357a:	e001      	b.n	8003580 <UART_SetConfig+0x28c>
 800357c:	2310      	movs	r3, #16
 800357e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a16      	ldr	r2, [pc, #88]	; (80035e0 <UART_SetConfig+0x2ec>)
 8003586:	4293      	cmp	r3, r2
 8003588:	f040 80fa 	bne.w	8003780 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800358c:	7efb      	ldrb	r3, [r7, #27]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d836      	bhi.n	8003600 <UART_SetConfig+0x30c>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x2a4>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035bd 	.word	0x080035bd
 800359c:	08003601 	.word	0x08003601
 80035a0:	080035c5 	.word	0x080035c5
 80035a4:	08003601 	.word	0x08003601
 80035a8:	080035cb 	.word	0x080035cb
 80035ac:	08003601 	.word	0x08003601
 80035b0:	08003601 	.word	0x08003601
 80035b4:	08003601 	.word	0x08003601
 80035b8:	080035d3 	.word	0x080035d3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe f934 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 80035c0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035c2:	e020      	b.n	8003606 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80035c4:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <UART_SetConfig+0x308>)
 80035c6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035c8:	e01d      	b.n	8003606 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80035ca:	f7fe f897 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80035ce:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035d0:	e019      	b.n	8003606 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035d8:	e015      	b.n	8003606 <UART_SetConfig+0x312>
 80035da:	bf00      	nop
 80035dc:	efff69f3 	.word	0xefff69f3
 80035e0:	40008000 	.word	0x40008000
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40004400 	.word	0x40004400
 80035f0:	40004800 	.word	0x40004800
 80035f4:	40004c00 	.word	0x40004c00
 80035f8:	40005000 	.word	0x40005000
 80035fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	74fb      	strb	r3, [r7, #19]
        break;
 8003604:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 81ac 	beq.w	8003966 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	429a      	cmp	r2, r3
 800361c:	d305      	bcc.n	800362a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	429a      	cmp	r2, r3
 8003628:	d902      	bls.n	8003630 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	74fb      	strb	r3, [r7, #19]
 800362e:	e19a      	b.n	8003966 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003630:	7efb      	ldrb	r3, [r7, #27]
 8003632:	2b08      	cmp	r3, #8
 8003634:	f200 8091 	bhi.w	800375a <UART_SetConfig+0x466>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <UART_SetConfig+0x34c>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003665 	.word	0x08003665
 8003644:	0800375b 	.word	0x0800375b
 8003648:	080036b1 	.word	0x080036b1
 800364c:	0800375b 	.word	0x0800375b
 8003650:	080036e5 	.word	0x080036e5
 8003654:	0800375b 	.word	0x0800375b
 8003658:	0800375b 	.word	0x0800375b
 800365c:	0800375b 	.word	0x0800375b
 8003660:	08003731 	.word	0x08003731
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003664:	f7fe f8e0 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 8003668:	4603      	mov	r3, r0
 800366a:	4619      	mov	r1, r3
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	0214      	lsls	r4, r2, #8
 800367a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800367e:	020b      	lsls	r3, r1, #8
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	0852      	lsrs	r2, r2, #1
 8003686:	4611      	mov	r1, r2
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	eb13 0b01 	adds.w	fp, r3, r1
 8003690:	eb44 0c02 	adc.w	ip, r4, r2
 8003694:	4658      	mov	r0, fp
 8003696:	4661      	mov	r1, ip
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	461a      	mov	r2, r3
 80036a2:	4623      	mov	r3, r4
 80036a4:	f7fc fdec 	bl	8000280 <__aeabi_uldivmod>
 80036a8:	4603      	mov	r3, r0
 80036aa:	460c      	mov	r4, r1
 80036ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80036ae:	e057      	b.n	8003760 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	f04f 0400 	mov.w	r4, #0
 80036ba:	49b1      	ldr	r1, [pc, #708]	; (8003980 <UART_SetConfig+0x68c>)
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	eb13 0b01 	adds.w	fp, r3, r1
 80036c4:	eb44 0c02 	adc.w	ip, r4, r2
 80036c8:	4658      	mov	r0, fp
 80036ca:	4661      	mov	r1, ip
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f04f 0400 	mov.w	r4, #0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	f7fc fdd2 	bl	8000280 <__aeabi_uldivmod>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80036e2:	e03d      	b.n	8003760 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80036e4:	f7fe f80a 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4619      	mov	r1, r3
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	0214      	lsls	r4, r2, #8
 80036fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036fe:	020b      	lsls	r3, r1, #8
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	0852      	lsrs	r2, r2, #1
 8003706:	4611      	mov	r1, r2
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	eb13 0b01 	adds.w	fp, r3, r1
 8003710:	eb44 0c02 	adc.w	ip, r4, r2
 8003714:	4658      	mov	r0, fp
 8003716:	4661      	mov	r1, ip
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	461a      	mov	r2, r3
 8003722:	4623      	mov	r3, r4
 8003724:	f7fc fdac 	bl	8000280 <__aeabi_uldivmod>
 8003728:	4603      	mov	r3, r0
 800372a:	460c      	mov	r4, r1
 800372c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800372e:	e017      	b.n	8003760 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	f04f 0400 	mov.w	r4, #0
 800373a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800373e:	f144 0100 	adc.w	r1, r4, #0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f04f 0400 	mov.w	r4, #0
 800374a:	461a      	mov	r2, r3
 800374c:	4623      	mov	r3, r4
 800374e:	f7fc fd97 	bl	8000280 <__aeabi_uldivmod>
 8003752:	4603      	mov	r3, r0
 8003754:	460c      	mov	r4, r1
 8003756:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003758:	e002      	b.n	8003760 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	74fb      	strb	r3, [r7, #19]
            break;
 800375e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003766:	d308      	bcc.n	800377a <UART_SetConfig+0x486>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d204      	bcs.n	800377a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	e0f5      	b.n	8003966 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	74fb      	strb	r3, [r7, #19]
 800377e:	e0f2      	b.n	8003966 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003788:	d17f      	bne.n	800388a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800378a:	7efb      	ldrb	r3, [r7, #27]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d85c      	bhi.n	800384a <UART_SetConfig+0x556>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x4a4>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037bd 	.word	0x080037bd
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	0800384b 	.word	0x0800384b
 80037a8:	08003815 	.word	0x08003815
 80037ac:	0800384b 	.word	0x0800384b
 80037b0:	0800384b 	.word	0x0800384b
 80037b4:	0800384b 	.word	0x0800384b
 80037b8:	08003833 	.word	0x08003833
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037bc:	f7fe f834 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 80037c0:	4603      	mov	r3, r0
 80037c2:	005a      	lsls	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	441a      	add	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037d8:	e03a      	b.n	8003850 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037da:	f7fe f83b 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 80037de:	4603      	mov	r3, r0
 80037e0:	005a      	lsls	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037f6:	e02b      	b.n	8003850 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003802:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6852      	ldr	r2, [r2, #4]
 800380a:	fbb3 f3f2 	udiv	r3, r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003812:	e01d      	b.n	8003850 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003814:	f7fd ff72 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 8003818:	4603      	mov	r3, r0
 800381a:	005a      	lsls	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	441a      	add	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003830:	e00e      	b.n	8003850 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	b29b      	uxth	r3, r3
 8003846:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003848:	e002      	b.n	8003850 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	74fb      	strb	r3, [r7, #19]
        break;
 800384e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	d916      	bls.n	8003884 <UART_SetConfig+0x590>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385c:	d212      	bcs.n	8003884 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f023 030f 	bic.w	r3, r3, #15
 8003866:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	b29b      	uxth	r3, r3
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	b29a      	uxth	r2, r3
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	4313      	orrs	r3, r2
 8003878:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	897a      	ldrh	r2, [r7, #10]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e070      	b.n	8003966 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	74fb      	strb	r3, [r7, #19]
 8003888:	e06d      	b.n	8003966 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800388a:	7efb      	ldrb	r3, [r7, #27]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d859      	bhi.n	8003944 <UART_SetConfig+0x650>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <UART_SetConfig+0x5a4>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038d9 	.word	0x080038d9
 80038a0:	080038f5 	.word	0x080038f5
 80038a4:	08003945 	.word	0x08003945
 80038a8:	08003911 	.word	0x08003911
 80038ac:	08003945 	.word	0x08003945
 80038b0:	08003945 	.word	0x08003945
 80038b4:	08003945 	.word	0x08003945
 80038b8:	0800392d 	.word	0x0800392d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038bc:	f7fd ffb4 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 80038c0:	4602      	mov	r2, r0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038d6:	e038      	b.n	800394a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80038d8:	f7fd ffbc 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 80038dc:	4602      	mov	r2, r0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038f2:	e02a      	b.n	800394a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	085b      	lsrs	r3, r3, #1
 80038fa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80038fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6852      	ldr	r2, [r2, #4]
 8003906:	fbb3 f3f2 	udiv	r3, r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800390e:	e01c      	b.n	800394a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003910:	f7fd fef4 	bl	80016fc <HAL_RCC_GetSysClockFreq>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	085b      	lsrs	r3, r3, #1
 800391c:	441a      	add	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	b29b      	uxth	r3, r3
 8003928:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800392a:	e00e      	b.n	800394a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003942:	e002      	b.n	800394a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	74fb      	strb	r3, [r7, #19]
        break;
 8003948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b0f      	cmp	r3, #15
 800394e:	d908      	bls.n	8003962 <UART_SetConfig+0x66e>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d204      	bcs.n	8003962 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	e001      	b.n	8003966 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003972:	7cfb      	ldrb	r3, [r7, #19]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3720      	adds	r7, #32
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800397e:	bf00      	nop
 8003980:	f4240000 	.word	0xf4240000

08003984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0320 	and.w	r3, r3, #32
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01a      	beq.n	8003a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d10a      	bne.n	8003a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ad6:	f7fc fdb7 	bl	8000648 <HAL_GetTick>
 8003ada:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d10e      	bne.n	8003b08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f82a 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e020      	b.n	8003b4a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d10e      	bne.n	8003b34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f814 	bl	8003b52 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e00a      	b.n	8003b4a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	e02a      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d026      	beq.n	8003bba <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fc fd6c 	bl	8000648 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11b      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b90:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e00f      	b.n	8003bda <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	bf0c      	ite	eq
 8003bca:	2301      	moveq	r3, #1
 8003bcc:	2300      	movne	r3, #0
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d0c5      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003bf8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d114      	bne.n	8003c92 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c7e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c8e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c90:	e002      	b.n	8003c98 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fb10 	bl	80032b8 <HAL_UART_TxCpltCallback>
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f7ff fb0c 	bl	80032cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d109      	bne.n	8003cf8 <UART_DMAError+0x3c>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b21      	cmp	r3, #33	; 0x21
 8003ce8:	d106      	bne.n	8003cf8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7ff ff75 	bl	8003be2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d109      	bne.n	8003d1a <UART_DMAError+0x5e>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b22      	cmp	r3, #34	; 0x22
 8003d0a:	d106      	bne.n	8003d1a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7ff ff79 	bl	8003c0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d1e:	f043 0210 	orr.w	r2, r3, #16
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d26:	6978      	ldr	r0, [r7, #20]
 8003d28:	f7ff fada 	bl	80032e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2c:	bf00      	nop
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <ICM_readBytes>:
#include "main.h"
#include "ICM_20948.h"


void ICM_readBytes(uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80bb      	strh	r3, [r7, #4]
	reg = reg | 0x80;
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2110      	movs	r1, #16
 8003d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d56:	f7fc ffc3 	bl	8000ce0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8003d5a:	1df9      	adds	r1, r7, #7
 8003d5c:	2332      	movs	r3, #50	; 0x32
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4809      	ldr	r0, [pc, #36]	; (8003d88 <ICM_readBytes+0x54>)
 8003d62:	f7fe fb27 	bl	80023b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BUS, pData, Size, 50);
 8003d66:	88ba      	ldrh	r2, [r7, #4]
 8003d68:	2332      	movs	r3, #50	; 0x32
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	4806      	ldr	r0, [pc, #24]	; (8003d88 <ICM_readBytes+0x54>)
 8003d6e:	f7fe fc87 	bl	8002680 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8003d72:	2201      	movs	r2, #1
 8003d74:	2110      	movs	r1, #16
 8003d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d7a:	f7fc ffb1 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000228 	.word	0x20000228

08003d8c <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(uint8_t reg, uint8_t* pData) // ***
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	71fb      	strb	r3, [r7, #7]
	reg = reg | 0x80;
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2110      	movs	r1, #16
 8003da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003daa:	f7fc ff99 	bl	8000ce0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8003dae:	1df9      	adds	r1, r7, #7
 8003db0:	2332      	movs	r3, #50	; 0x32
 8003db2:	2201      	movs	r2, #1
 8003db4:	4810      	ldr	r0, [pc, #64]	; (8003df8 <ICM_ReadOneByte+0x6c>)
 8003db6:	f7fe fafd 	bl	80023b4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8003dba:	bf00      	nop
 8003dbc:	480e      	ldr	r0, [pc, #56]	; (8003df8 <ICM_ReadOneByte+0x6c>)
 8003dbe:	f7fe ff9a 	bl	8002cf6 <HAL_SPI_GetState>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d1f9      	bne.n	8003dbc <ICM_ReadOneByte+0x30>
		;
	HAL_SPI_Receive(SPI_BUS, pData, 1, 50);
 8003dc8:	2332      	movs	r3, #50	; 0x32
 8003dca:	2201      	movs	r2, #1
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	480a      	ldr	r0, [pc, #40]	; (8003df8 <ICM_ReadOneByte+0x6c>)
 8003dd0:	f7fe fc56 	bl	8002680 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8003dd4:	bf00      	nop
 8003dd6:	4808      	ldr	r0, [pc, #32]	; (8003df8 <ICM_ReadOneByte+0x6c>)
 8003dd8:	f7fe ff8d 	bl	8002cf6 <HAL_SPI_GetState>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d1f9      	bne.n	8003dd6 <ICM_ReadOneByte+0x4a>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8003de2:	2201      	movs	r2, #1
 8003de4:	2110      	movs	r1, #16
 8003de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dea:	f7fc ff79 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000228 	.word	0x20000228

08003dfc <ICM_WriteOneByte>:

void ICM_WriteOneByte(uint8_t reg, uint8_t Data) // ***
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	460a      	mov	r2, r1
 8003e06:	71fb      	strb	r3, [r7, #7]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2110      	movs	r1, #16
 8003e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e1e:	f7fc ff5f 	bl	8000ce0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8003e22:	1df9      	adds	r1, r7, #7
 8003e24:	2332      	movs	r3, #50	; 0x32
 8003e26:	2201      	movs	r2, #1
 8003e28:	4809      	ldr	r0, [pc, #36]	; (8003e50 <ICM_WriteOneByte+0x54>)
 8003e2a:	f7fe fac3 	bl	80023b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BUS, &Data, 1, 50);
 8003e2e:	1db9      	adds	r1, r7, #6
 8003e30:	2332      	movs	r3, #50	; 0x32
 8003e32:	2201      	movs	r2, #1
 8003e34:	4806      	ldr	r0, [pc, #24]	; (8003e50 <ICM_WriteOneByte+0x54>)
 8003e36:	f7fe fabd 	bl	80023b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	2110      	movs	r1, #16
 8003e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e42:	f7fc ff4d 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000228 	.word	0x20000228

08003e54 <i2c_Mag_write>:

void i2c_Mag_write(uint8_t reg,uint8_t value)
  {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	460a      	mov	r2, r1
 8003e5e:	71fb      	strb	r3, [r7, #7]
 8003e60:	4613      	mov	r3, r2
 8003e62:	71bb      	strb	r3, [r7, #6]
  	ICM_WriteOneByte(0x7F, 0x30);
 8003e64:	2130      	movs	r1, #48	; 0x30
 8003e66:	207f      	movs	r0, #127	; 0x7f
 8003e68:	f7ff ffc8 	bl	8003dfc <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7fc fbf7 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C);//mode: write
 8003e72:	210c      	movs	r1, #12
 8003e74:	2003      	movs	r0, #3
 8003e76:	f7ff ffc1 	bl	8003dfc <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fc fbf0 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);//set reg addr
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	4619      	mov	r1, r3
 8003e84:	2004      	movs	r0, #4
 8003e86:	f7ff ffb9 	bl	8003dfc <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f7fc fbe8 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,value);//send value
 8003e90:	79bb      	ldrb	r3, [r7, #6]
 8003e92:	4619      	mov	r1, r3
 8003e94:	2006      	movs	r0, #6
 8003e96:	f7ff ffb1 	bl	8003dfc <ICM_WriteOneByte>

  	HAL_Delay(1);
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f7fc fbe0 	bl	8000660 <HAL_Delay>
  }
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(uint8_t reg)
  {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  	uint8_t  Data;
  	ICM_WriteOneByte(0x7F, 0x30);
 8003eb2:	2130      	movs	r1, #48	; 0x30
 8003eb4:	207f      	movs	r0, #127	; 0x7f
 8003eb6:	f7ff ffa1 	bl	8003dfc <ICM_WriteOneByte>
    HAL_Delay(1);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fc fbd0 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C|0x80);
 8003ec0:	218c      	movs	r1, #140	; 0x8c
 8003ec2:	2003      	movs	r0, #3
 8003ec4:	f7ff ff9a 	bl	8003dfc <ICM_WriteOneByte>
    HAL_Delay(1);
 8003ec8:	2001      	movs	r0, #1
 8003eca:	f7fc fbc9 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);// set reg addr
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	2004      	movs	r0, #4
 8003ed4:	f7ff ff92 	bl	8003dfc <ICM_WriteOneByte>
    HAL_Delay(1);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fc fbc1 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,0xff);//read
 8003ede:	21ff      	movs	r1, #255	; 0xff
 8003ee0:	2006      	movs	r0, #6
 8003ee2:	f7ff ff8b 	bl	8003dfc <ICM_WriteOneByte>
  	HAL_Delay(1);
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f7fc fbba 	bl	8000660 <HAL_Delay>
  	ICM_WriteOneByte(0x7F, 0x00);
 8003eec:	2100      	movs	r1, #0
 8003eee:	207f      	movs	r0, #127	; 0x7f
 8003ef0:	f7ff ff84 	bl	8003dfc <ICM_WriteOneByte>
  	ICM_ReadOneByte(0x3B,&Data);
 8003ef4:	f107 030f 	add.w	r3, r7, #15
 8003ef8:	4619      	mov	r1, r3
 8003efa:	203b      	movs	r0, #59	; 0x3b
 8003efc:	f7ff ff46 	bl	8003d8c <ICM_ReadOneByte>
    HAL_Delay(1);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7fc fbad 	bl	8000660 <HAL_Delay>
  	return Data;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
  }
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <ICM_ReadMag>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMag(int16_t magn[3]) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	uint8_t mag_buffer[10];

	      mag_buffer[0] =ICM_Mag_Read(0x01);
 8003f18:	2001      	movs	r0, #1
 8003f1a:	f7ff ffc5 	bl	8003ea8 <ICM_Mag_Read>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	733b      	strb	r3, [r7, #12]

	      mag_buffer[1] =ICM_Mag_Read(0x11);
 8003f22:	2011      	movs	r0, #17
 8003f24:	f7ff ffc0 	bl	8003ea8 <ICM_Mag_Read>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	737b      	strb	r3, [r7, #13]
	  	  mag_buffer[2] =ICM_Mag_Read(0x12);
 8003f2c:	2012      	movs	r0, #18
 8003f2e:	f7ff ffbb 	bl	8003ea8 <ICM_Mag_Read>
 8003f32:	4603      	mov	r3, r0
 8003f34:	73bb      	strb	r3, [r7, #14]
	  	  magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8003f36:	7b7b      	ldrb	r3, [r7, #13]
 8003f38:	b21a      	sxth	r2, r3
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	b21b      	sxth	r3, r3
 8003f40:	4313      	orrs	r3, r2
 8003f42:	b21a      	sxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	801a      	strh	r2, [r3, #0]
	    	mag_buffer[3] =ICM_Mag_Read(0x13);
 8003f48:	2013      	movs	r0, #19
 8003f4a:	f7ff ffad 	bl	8003ea8 <ICM_Mag_Read>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	73fb      	strb	r3, [r7, #15]
	      mag_buffer[4] =ICM_Mag_Read(0x14);
 8003f52:	2014      	movs	r0, #20
 8003f54:	f7ff ffa8 	bl	8003ea8 <ICM_Mag_Read>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	743b      	strb	r3, [r7, #16]
	    	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	b219      	sxth	r1, r3
 8003f60:	7c3b      	ldrb	r3, [r7, #16]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3302      	adds	r3, #2
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	b212      	sxth	r2, r2
 8003f6e:	801a      	strh	r2, [r3, #0]
	  	 	mag_buffer[5] =ICM_Mag_Read(0x15);
 8003f70:	2015      	movs	r0, #21
 8003f72:	f7ff ff99 	bl	8003ea8 <ICM_Mag_Read>
 8003f76:	4603      	mov	r3, r0
 8003f78:	747b      	strb	r3, [r7, #17]
	      mag_buffer[6] =ICM_Mag_Read(0x16);
 8003f7a:	2016      	movs	r0, #22
 8003f7c:	f7ff ff94 	bl	8003ea8 <ICM_Mag_Read>
 8003f80:	4603      	mov	r3, r0
 8003f82:	74bb      	strb	r3, [r7, #18]
	  		magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 8003f84:	7c7b      	ldrb	r3, [r7, #17]
 8003f86:	b219      	sxth	r1, r3
 8003f88:	7cbb      	ldrb	r3, [r7, #18]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	b21a      	sxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	430a      	orrs	r2, r1
 8003f94:	b212      	sxth	r2, r2
 8003f96:	801a      	strh	r2, [r3, #0]

	     	i2c_Mag_write(0x31,0x01);
 8003f98:	2101      	movs	r1, #1
 8003f9a:	2031      	movs	r0, #49	; 0x31
 8003f9c:	f7ff ff5a 	bl	8003e54 <i2c_Mag_write>
}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(void) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b0b4      	sub	sp, #208	; 0xd0
 8003fac:	af00      	add	r7, sp, #0
	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 8003fae:	23ea      	movs	r3, #234	; 0xea
 8003fb0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint8_t test = ICM_WHOAMI();
 8003fb4:	f000 f96e 	bl	8004294 <ICM_WHOAMI>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if (test == whoami) {
 8003fbe:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8003fc2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d122      	bne.n	8004010 <ICM_PowerOn+0x68>
		ICM_CSHigh();
 8003fca:	f000 f93b 	bl	8004244 <ICM_CSHigh>
		HAL_Delay(10);
 8003fce:	200a      	movs	r0, #10
 8003fd0:	f7fc fb46 	bl	8000660 <HAL_Delay>
		ICM_SelectBank(USER_BANK_0);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 f91f 	bl	8004218 <ICM_SelectBank>
		HAL_Delay(10);
 8003fda:	200a      	movs	r0, #10
 8003fdc:	f7fc fb40 	bl	8000660 <HAL_Delay>
		ICM_Disable_I2C();
 8003fe0:	f000 f928 	bl	8004234 <ICM_Disable_I2C>
		HAL_Delay(10);
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f7fc fb3b 	bl	8000660 <HAL_Delay>
		ICM_SetClock((uint8_t)CLK_BEST_AVAIL);
 8003fea:	2001      	movs	r0, #1
 8003fec:	f000 f934 	bl	8004258 <ICM_SetClock>
		HAL_Delay(10);
 8003ff0:	200a      	movs	r0, #10
 8003ff2:	f7fc fb35 	bl	8000660 <HAL_Delay>
		ICM_AccelGyroOff();
 8003ff6:	f000 f93d 	bl	8004274 <ICM_AccelGyroOff>
		HAL_Delay(20);
 8003ffa:	2014      	movs	r0, #20
 8003ffc:	f7fc fb30 	bl	8000660 <HAL_Delay>
		ICM_AccelGyroOn();
 8004000:	f000 f940 	bl	8004284 <ICM_AccelGyroOn>
		HAL_Delay(10);
 8004004:	200a      	movs	r0, #10
 8004006:	f7fc fb2b 	bl	8000660 <HAL_Delay>
		ICM_Initialize();
 800400a:	f000 f81f 	bl	800404c <ICM_Initialize>
	} else {
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		HAL_Delay(100);
	}
}
 800400e:	e014      	b.n	800403a <ICM_PowerOn+0x92>
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
 8004010:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	490b      	ldr	r1, [pc, #44]	; (8004044 <ICM_PowerOn+0x9c>)
 8004018:	4618      	mov	r0, r3
 800401a:	f001 ff61 	bl	8005ee0 <siprintf>
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	4618      	mov	r0, r3
 8004022:	f7fc f8d5 	bl	80001d0 <strlen>
 8004026:	4603      	mov	r3, r0
 8004028:	b29a      	uxth	r2, r3
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4806      	ldr	r0, [pc, #24]	; (8004048 <ICM_PowerOn+0xa0>)
 8004030:	f7ff f8c6 	bl	80031c0 <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 8004034:	2064      	movs	r0, #100	; 0x64
 8004036:	f7fc fb13 	bl	8000660 <HAL_Delay>
}
 800403a:	bf00      	nop
 800403c:	37d0      	adds	r7, #208	; 0xd0
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	080066f0 	.word	0x080066f0
 8004048:	20000198 	.word	0x20000198

0800404c <ICM_Initialize>:
uint16_t ICM_Initialize(void) {
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
		ICM_SelectBank(USER_BANK_2);
 8004050:	2020      	movs	r0, #32
 8004052:	f000 f8e1 	bl	8004218 <ICM_SelectBank>
		HAL_Delay(20);
 8004056:	2014      	movs	r0, #20
 8004058:	f7fc fb02 	bl	8000660 <HAL_Delay>
//		ICM_SetGyroRateLPF(GYRO_RATE_500, GYRO_LPF_17HZ);
		ICM_SetGyroRateLPF(GYRO_RATE_500, 0x00);
 800405c:	2100      	movs	r1, #0
 800405e:	2001      	movs	r0, #1
 8004060:	f000 f927 	bl	80042b2 <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 8004064:	200a      	movs	r0, #10
 8004066:	f7fc fafb 	bl	8000660 <HAL_Delay>


		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A);
 800406a:	210a      	movs	r1, #10
 800406c:	2000      	movs	r0, #0
 800406e:	f7ff fec5 	bl	8003dfc <ICM_WriteOneByte>
		HAL_Delay(10);
 8004072:	200a      	movs	r0, #10
 8004074:	f7fc faf4 	bl	8000660 <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
//		ICM_WriteOneByte(0x14, (0x04 | 0x11));
		ICM_WriteOneByte(0x14, 0x04);
 8004078:	2104      	movs	r1, #4
 800407a:	2014      	movs	r0, #20
 800407c:	f7ff febe 	bl	8003dfc <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00);
 8004080:	2100      	movs	r1, #0
 8004082:	2010      	movs	r0, #16
 8004084:	f7ff feba 	bl	8003dfc <ICM_WriteOneByte>
		HAL_Delay(10);
 8004088:	200a      	movs	r0, #10
 800408a:	f7fc fae9 	bl	8000660 <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A);
 800408e:	210a      	movs	r1, #10
 8004090:	2011      	movs	r0, #17
 8004092:	f7ff feb3 	bl	8003dfc <ICM_WriteOneByte>
		HAL_Delay(10);
 8004096:	200a      	movs	r0, #10
 8004098:	f7fc fae2 	bl	8000660 <HAL_Delay>

		ICM_SelectBank(USER_BANK_2);
 800409c:	2020      	movs	r0, #32
 800409e:	f000 f8bb 	bl	8004218 <ICM_SelectBank>
		HAL_Delay(20);
 80040a2:	2014      	movs	r0, #20
 80040a4:	f7fc fadc 	bl	8000660 <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00); // Select user bank 0
 80040a8:	2100      	movs	r1, #0
 80040aa:	207f      	movs	r0, #127	; 0x7f
 80040ac:	f7ff fea6 	bl	8003dfc <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80040b0:	2130      	movs	r1, #48	; 0x30
 80040b2:	200f      	movs	r0, #15
 80040b4:	f7ff fea2 	bl	8003dfc <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20); // I2C_MST_EN
 80040b8:	2120      	movs	r1, #32
 80040ba:	2003      	movs	r0, #3
 80040bc:	f7ff fe9e 	bl	8003dfc <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30); // Select user bank 3
 80040c0:	2130      	movs	r1, #48	; 0x30
 80040c2:	207f      	movs	r0, #127	; 0x7f
 80040c4:	f7ff fe9a 	bl	8003dfc <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80040c8:	214d      	movs	r1, #77	; 0x4d
 80040ca:	2001      	movs	r0, #1
 80040cc:	f7ff fe96 	bl	8003dfc <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80040d0:	2101      	movs	r1, #1
 80040d2:	2002      	movs	r0, #2
 80040d4:	f7ff fe92 	bl	8003dfc <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 80040d8:	2181      	movs	r1, #129	; 0x81
 80040da:	2005      	movs	r0, #5
 80040dc:	f7ff fe8e 	bl	8003dfc <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01); // Reset AK8963
 80040e0:	2101      	movs	r1, #1
 80040e2:	2032      	movs	r0, #50	; 0x32
 80040e4:	f7ff feb6 	bl	8003e54 <i2c_Mag_write>
		HAL_Delay(1000);
 80040e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ec:	f7fc fab8 	bl	8000660 <HAL_Delay>
		i2c_Mag_write(0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 80040f0:	2102      	movs	r1, #2
 80040f2:	2031      	movs	r0, #49	; 0x31
 80040f4:	f7ff feae 	bl	8003e54 <i2c_Mag_write>

		return 1337;
 80040f8:	f240 5339 	movw	r3, #1337	; 0x539
	}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}

08004100 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(void) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
	uint8_t raw_data[12];
	ICM_readBytes(0x2D, raw_data, 12);
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	220c      	movs	r2, #12
 800410a:	4619      	mov	r1, r3
 800410c:	202d      	movs	r0, #45	; 0x2d
 800410e:	f7ff fe11 	bl	8003d34 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8004112:	793b      	ldrb	r3, [r7, #4]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	b21a      	sxth	r2, r3
 8004118:	797b      	ldrb	r3, [r7, #5]
 800411a:	b21b      	sxth	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b21a      	sxth	r2, r3
 8004120:	4b3a      	ldr	r3, [pc, #232]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 8004122:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8004124:	79bb      	ldrb	r3, [r7, #6]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	b21a      	sxth	r2, r3
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	b21b      	sxth	r3, r3
 800412e:	4313      	orrs	r3, r2
 8004130:	b21a      	sxth	r2, r3
 8004132:	4b36      	ldr	r3, [pc, #216]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 8004134:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8004136:	7a3b      	ldrb	r3, [r7, #8]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	b21a      	sxth	r2, r3
 800413c:	7a7b      	ldrb	r3, [r7, #9]
 800413e:	b21b      	sxth	r3, r3
 8004140:	4313      	orrs	r3, r2
 8004142:	b21a      	sxth	r2, r3
 8004144:	4b31      	ldr	r3, [pc, #196]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 8004146:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8004148:	7abb      	ldrb	r3, [r7, #10]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	b21a      	sxth	r2, r3
 800414e:	7afb      	ldrb	r3, [r7, #11]
 8004150:	b21b      	sxth	r3, r3
 8004152:	4313      	orrs	r3, r2
 8004154:	b21a      	sxth	r2, r3
 8004156:	4b2e      	ldr	r3, [pc, #184]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 8004158:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800415a:	7b3b      	ldrb	r3, [r7, #12]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	b21a      	sxth	r2, r3
 8004160:	7b7b      	ldrb	r3, [r7, #13]
 8004162:	b21b      	sxth	r3, r3
 8004164:	4313      	orrs	r3, r2
 8004166:	b21a      	sxth	r2, r3
 8004168:	4b29      	ldr	r3, [pc, #164]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 800416a:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	b21a      	sxth	r2, r3
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	b21b      	sxth	r3, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	b21a      	sxth	r2, r3
 800417a:	4b25      	ldr	r3, [pc, #148]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 800417c:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 800417e:	4b23      	ldr	r3, [pc, #140]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 8004180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004184:	2b00      	cmp	r3, #0
 8004186:	da00      	bge.n	800418a <ICM_ReadAccelGyro+0x8a>
 8004188:	3307      	adds	r3, #7
 800418a:	10db      	asrs	r3, r3, #3
 800418c:	b21a      	sxth	r2, r3
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 8004190:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 8004192:	4b1e      	ldr	r3, [pc, #120]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 8004194:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004198:	2b00      	cmp	r3, #0
 800419a:	da00      	bge.n	800419e <ICM_ReadAccelGyro+0x9e>
 800419c:	3307      	adds	r3, #7
 800419e:	10db      	asrs	r3, r3, #3
 80041a0:	b21a      	sxth	r2, r3
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 80041a4:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 80041a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	da00      	bge.n	80041b2 <ICM_ReadAccelGyro+0xb2>
 80041b0:	3307      	adds	r3, #7
 80041b2:	10db      	asrs	r3, r3, #3
 80041b4:	b21a      	sxth	r2, r3
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <ICM_ReadAccelGyro+0x10c>)
 80041b8:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 80041bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041c0:	4a14      	ldr	r2, [pc, #80]	; (8004214 <ICM_ReadAccelGyro+0x114>)
 80041c2:	fb82 1203 	smull	r1, r2, r2, r3
 80041c6:	1112      	asrs	r2, r2, #4
 80041c8:	17db      	asrs	r3, r3, #31
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	b21a      	sxth	r2, r3
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 80041d0:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 80041d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041d8:	4a0e      	ldr	r2, [pc, #56]	; (8004214 <ICM_ReadAccelGyro+0x114>)
 80041da:	fb82 1203 	smull	r1, r2, r2, r3
 80041de:	1112      	asrs	r2, r2, #4
 80041e0:	17db      	asrs	r3, r3, #31
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	b21a      	sxth	r2, r3
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 80041e8:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 80041ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <ICM_ReadAccelGyro+0x114>)
 80041f2:	fb82 1203 	smull	r1, r2, r2, r3
 80041f6:	1112      	asrs	r2, r2, #4
 80041f8:	17db      	asrs	r3, r3, #31
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	b21a      	sxth	r2, r3
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <ICM_ReadAccelGyro+0x110>)
 8004200:	809a      	strh	r2, [r3, #4]
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000218 	.word	0x20000218
 8004210:	20000220 	.word	0x20000220
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <ICM_SelectBank>:
void ICM_SelectBank(uint8_t bank) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank);
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	4619      	mov	r1, r3
 8004226:	207f      	movs	r0, #127	; 0x7f
 8004228:	f7ff fde8 	bl	8003dfc <ICM_WriteOneByte>
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <ICM_Disable_I2C>:
void ICM_Disable_I2C(void) {
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x03, 0x78);
 8004238:	2178      	movs	r1, #120	; 0x78
 800423a:	2003      	movs	r0, #3
 800423c:	f7ff fdde 	bl	8003dfc <ICM_WriteOneByte>
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8004248:	2201      	movs	r2, #1
 800424a:	2110      	movs	r1, #16
 800424c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004250:	f7fc fd46 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}

08004258 <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(uint8_t clk) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk);
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	4619      	mov	r1, r3
 8004266:	2006      	movs	r0, #6
 8004268:	f7ff fdc8 	bl	8003dfc <ICM_WriteOneByte>
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(void) {
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07));
 8004278:	213f      	movs	r1, #63	; 0x3f
 800427a:	2007      	movs	r0, #7
 800427c:	f7ff fdbe 	bl	8003dfc <ICM_WriteOneByte>
}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}

08004284 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(void) {
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x07, (0x00 | 0x00));
 8004288:	2100      	movs	r1, #0
 800428a:	2007      	movs	r0, #7
 800428c:	f7ff fdb6 	bl	8003dfc <ICM_WriteOneByte>
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}

08004294 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(void) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
	uint8_t spiData = 0x01;
 800429a:	2301      	movs	r3, #1
 800429c:	71fb      	strb	r3, [r7, #7]
	ICM_ReadOneByte(0x00, &spiData);
 800429e:	1dfb      	adds	r3, r7, #7
 80042a0:	4619      	mov	r1, r3
 80042a2:	2000      	movs	r0, #0
 80042a4:	f7ff fd72 	bl	8003d8c <ICM_ReadOneByte>
	return spiData;
 80042a8:	79fb      	ldrb	r3, [r7, #7]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf) {
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	460a      	mov	r2, r1
 80042bc:	71fb      	strb	r3, [r7, #7]
 80042be:	4613      	mov	r3, r2
 80042c0:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf));
 80042c2:	79fa      	ldrb	r2, [r7, #7]
 80042c4:	79bb      	ldrb	r3, [r7, #6]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	4619      	mov	r1, r3
 80042cc:	2001      	movs	r0, #1
 80042ce:	f7ff fd95 	bl	8003dfc <ICM_WriteOneByte>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <NRF24_DelayMicroSeconds+0x38>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <NRF24_DelayMicroSeconds+0x3c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9a      	lsrs	r2, r3, #18
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	fb02 f303 	mul.w	r3, r2, r3
 80042fa:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80042fc:	bf00      	nop
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1e5a      	subs	r2, r3, #1
 8004302:	60fa      	str	r2, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1fa      	bne.n	80042fe <NRF24_DelayMicroSeconds+0x22>
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000010 	.word	0x20000010
 8004318:	165e9f81 	.word	0x165e9f81

0800431c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <NRF24_csn+0x20>
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <NRF24_csn+0x38>)
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <NRF24_csn+0x3c>)
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	4619      	mov	r1, r3
 8004336:	f7fc fcd3 	bl	8000ce0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800433a:	e007      	b.n	800434c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <NRF24_csn+0x38>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <NRF24_csn+0x3c>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	2200      	movs	r2, #0
 8004346:	4619      	mov	r1, r3
 8004348:	f7fc fcca 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	2000009c 	.word	0x2000009c
 8004358:	200000a0 	.word	0x200000a0

0800435c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <NRF24_ce+0x20>
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <NRF24_ce+0x38>)
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <NRF24_ce+0x3c>)
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	4619      	mov	r1, r3
 8004376:	f7fc fcb3 	bl	8000ce0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800437a:	e007      	b.n	800438c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <NRF24_ce+0x38>)
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <NRF24_ce+0x3c>)
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	2200      	movs	r2, #0
 8004386:	4619      	mov	r1, r3
 8004388:	f7fc fcaa 	bl	8000ce0 <HAL_GPIO_WritePin>
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	2000009c 	.word	0x2000009c
 8004398:	200000a2 	.word	0x200000a2

0800439c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7ff ffb8 	bl	800431c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80043b6:	f107 010c 	add.w	r1, r7, #12
 80043ba:	2364      	movs	r3, #100	; 0x64
 80043bc:	2201      	movs	r2, #1
 80043be:	480a      	ldr	r0, [pc, #40]	; (80043e8 <NRF24_read_register+0x4c>)
 80043c0:	f7fd fff8 	bl	80023b4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	2364      	movs	r3, #100	; 0x64
 80043cc:	2201      	movs	r2, #1
 80043ce:	4806      	ldr	r0, [pc, #24]	; (80043e8 <NRF24_read_register+0x4c>)
 80043d0:	f7fe f956 	bl	8002680 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80043d4:	7b7b      	ldrb	r3, [r7, #13]
 80043d6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80043d8:	2001      	movs	r0, #1
 80043da:	f7ff ff9f 	bl	800431c <NRF24_csn>
	return retData;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	200000a4 	.word	0x200000a4

080043ec <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
 80043f8:	4613      	mov	r3, r2
 80043fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80043fc:	2000      	movs	r0, #0
 80043fe:	f7ff ff8d 	bl	800431c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	b2db      	uxtb	r3, r3
 800440a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800440c:	f107 010c 	add.w	r1, r7, #12
 8004410:	2364      	movs	r3, #100	; 0x64
 8004412:	2201      	movs	r2, #1
 8004414:	4808      	ldr	r0, [pc, #32]	; (8004438 <NRF24_read_registerN+0x4c>)
 8004416:	f7fd ffcd 	bl	80023b4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800441a:	79bb      	ldrb	r3, [r7, #6]
 800441c:	b29a      	uxth	r2, r3
 800441e:	2364      	movs	r3, #100	; 0x64
 8004420:	6839      	ldr	r1, [r7, #0]
 8004422:	4805      	ldr	r0, [pc, #20]	; (8004438 <NRF24_read_registerN+0x4c>)
 8004424:	f7fe f92c 	bl	8002680 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8004428:	2001      	movs	r0, #1
 800442a:	f7ff ff77 	bl	800431c <NRF24_csn>
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200000a4 	.word	0x200000a4

0800443c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	460a      	mov	r2, r1
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	4613      	mov	r3, r2
 800444a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800444c:	2000      	movs	r0, #0
 800444e:	f7ff ff65 	bl	800431c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	f043 0320 	orr.w	r3, r3, #32
 8004458:	b2db      	uxtb	r3, r3
 800445a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800445c:	79bb      	ldrb	r3, [r7, #6]
 800445e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8004460:	f107 010c 	add.w	r1, r7, #12
 8004464:	2364      	movs	r3, #100	; 0x64
 8004466:	2202      	movs	r2, #2
 8004468:	4804      	ldr	r0, [pc, #16]	; (800447c <NRF24_write_register+0x40>)
 800446a:	f7fd ffa3 	bl	80023b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800446e:	2001      	movs	r0, #1
 8004470:	f7ff ff54 	bl	800431c <NRF24_csn>
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200000a4 	.word	0x200000a4

08004480 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	71fb      	strb	r3, [r7, #7]
 800448c:	4613      	mov	r3, r2
 800448e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8004490:	2000      	movs	r0, #0
 8004492:	f7ff ff43 	bl	800431c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	f043 0320 	orr.w	r3, r3, #32
 800449c:	b2db      	uxtb	r3, r3
 800449e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80044a0:	f107 010c 	add.w	r1, r7, #12
 80044a4:	2364      	movs	r3, #100	; 0x64
 80044a6:	2201      	movs	r2, #1
 80044a8:	4808      	ldr	r0, [pc, #32]	; (80044cc <NRF24_write_registerN+0x4c>)
 80044aa:	f7fd ff83 	bl	80023b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80044ae:	79bb      	ldrb	r3, [r7, #6]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	2364      	movs	r3, #100	; 0x64
 80044b4:	6839      	ldr	r1, [r7, #0]
 80044b6:	4805      	ldr	r0, [pc, #20]	; (80044cc <NRF24_write_registerN+0x4c>)
 80044b8:	f7fd ff7c 	bl	80023b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80044bc:	2001      	movs	r0, #1
 80044be:	f7ff ff2d 	bl	800431c <NRF24_csn>
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200000a4 	.word	0x200000a4

080044d0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80044dc:	2000      	movs	r0, #0
 80044de:	f7ff ff1d 	bl	800431c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80044e2:	23a0      	movs	r3, #160	; 0xa0
 80044e4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80044e6:	f107 010f 	add.w	r1, r7, #15
 80044ea:	2364      	movs	r3, #100	; 0x64
 80044ec:	2201      	movs	r2, #1
 80044ee:	4808      	ldr	r0, [pc, #32]	; (8004510 <NRF24_write_payload+0x40>)
 80044f0:	f7fd ff60 	bl	80023b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	2364      	movs	r3, #100	; 0x64
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4804      	ldr	r0, [pc, #16]	; (8004510 <NRF24_write_payload+0x40>)
 80044fe:	f7fd ff59 	bl	80023b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8004502:	2001      	movs	r0, #1
 8004504:	f7ff ff0a 	bl	800431c <NRF24_csn>
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200000a4 	.word	0x200000a4

08004514 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8004518:	21ff      	movs	r1, #255	; 0xff
 800451a:	20e1      	movs	r0, #225	; 0xe1
 800451c:	f7ff ff8e 	bl	800443c <NRF24_write_register>
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}

08004524 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8004528:	21ff      	movs	r1, #255	; 0xff
 800452a:	20e2      	movs	r0, #226	; 0xe2
 800452c:	f7ff ff86 	bl	800443c <NRF24_write_register>
}
 8004530:	bf00      	nop
 8004532:	bd80      	pop	{r7, pc}

08004534 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800453a:	2007      	movs	r0, #7
 800453c:	f7ff ff2e 	bl	800439c <NRF24_read_register>
 8004540:	4603      	mov	r3, r0
 8004542:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8004544:	79fb      	ldrb	r3, [r7, #7]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8004550:	b082      	sub	sp, #8
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
 8004560:	4613      	mov	r3, r2
 8004562:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <NRF24_begin+0x1b0>)
 8004566:	4618      	mov	r0, r3
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	2264      	movs	r2, #100	; 0x64
 800456e:	4619      	mov	r1, r3
 8004570:	f001 fca2 	bl	8005eb8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8004574:	4a63      	ldr	r2, [pc, #396]	; (8004704 <NRF24_begin+0x1b4>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800457a:	4a63      	ldr	r2, [pc, #396]	; (8004708 <NRF24_begin+0x1b8>)
 800457c:	887b      	ldrh	r3, [r7, #2]
 800457e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8004580:	4a62      	ldr	r2, [pc, #392]	; (800470c <NRF24_begin+0x1bc>)
 8004582:	883b      	ldrh	r3, [r7, #0]
 8004584:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8004586:	2001      	movs	r0, #1
 8004588:	f7ff fec8 	bl	800431c <NRF24_csn>
	NRF24_ce(0);
 800458c:	2000      	movs	r0, #0
 800458e:	f7ff fee5 	bl	800435c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8004592:	2005      	movs	r0, #5
 8004594:	f7fc f864 	bl	8000660 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8004598:	2108      	movs	r1, #8
 800459a:	2000      	movs	r0, #0
 800459c:	f7ff ff4e 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80045a0:	213f      	movs	r1, #63	; 0x3f
 80045a2:	2001      	movs	r0, #1
 80045a4:	f7ff ff4a 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80045a8:	2103      	movs	r1, #3
 80045aa:	2002      	movs	r0, #2
 80045ac:	f7ff ff46 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80045b0:	2103      	movs	r1, #3
 80045b2:	2003      	movs	r0, #3
 80045b4:	f7ff ff42 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80045b8:	2103      	movs	r1, #3
 80045ba:	2004      	movs	r0, #4
 80045bc:	f7ff ff3e 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80045c0:	2102      	movs	r1, #2
 80045c2:	2005      	movs	r0, #5
 80045c4:	f7ff ff3a 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80045c8:	210f      	movs	r1, #15
 80045ca:	2006      	movs	r0, #6
 80045cc:	f7ff ff36 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80045d0:	210e      	movs	r1, #14
 80045d2:	2007      	movs	r0, #7
 80045d4:	f7ff ff32 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80045d8:	2100      	movs	r1, #0
 80045da:	2008      	movs	r0, #8
 80045dc:	f7ff ff2e 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80045e0:	2100      	movs	r1, #0
 80045e2:	2009      	movs	r0, #9
 80045e4:	f7ff ff2a 	bl	800443c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80045e8:	23e7      	movs	r3, #231	; 0xe7
 80045ea:	733b      	strb	r3, [r7, #12]
 80045ec:	23e7      	movs	r3, #231	; 0xe7
 80045ee:	72fb      	strb	r3, [r7, #11]
 80045f0:	23e7      	movs	r3, #231	; 0xe7
 80045f2:	72bb      	strb	r3, [r7, #10]
 80045f4:	23e7      	movs	r3, #231	; 0xe7
 80045f6:	727b      	strb	r3, [r7, #9]
 80045f8:	23e7      	movs	r3, #231	; 0xe7
 80045fa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	2205      	movs	r2, #5
 8004602:	4619      	mov	r1, r3
 8004604:	200a      	movs	r0, #10
 8004606:	f7ff ff3b 	bl	8004480 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800460a:	23c2      	movs	r3, #194	; 0xc2
 800460c:	733b      	strb	r3, [r7, #12]
 800460e:	23c2      	movs	r3, #194	; 0xc2
 8004610:	72fb      	strb	r3, [r7, #11]
 8004612:	23c2      	movs	r3, #194	; 0xc2
 8004614:	72bb      	strb	r3, [r7, #10]
 8004616:	23c2      	movs	r3, #194	; 0xc2
 8004618:	727b      	strb	r3, [r7, #9]
 800461a:	23c2      	movs	r3, #194	; 0xc2
 800461c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800461e:	f107 0308 	add.w	r3, r7, #8
 8004622:	2205      	movs	r2, #5
 8004624:	4619      	mov	r1, r3
 8004626:	200b      	movs	r0, #11
 8004628:	f7ff ff2a 	bl	8004480 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800462c:	21c3      	movs	r1, #195	; 0xc3
 800462e:	200c      	movs	r0, #12
 8004630:	f7ff ff04 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8004634:	21c4      	movs	r1, #196	; 0xc4
 8004636:	200d      	movs	r0, #13
 8004638:	f7ff ff00 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800463c:	21c5      	movs	r1, #197	; 0xc5
 800463e:	200e      	movs	r0, #14
 8004640:	f7ff fefc 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8004644:	21c6      	movs	r1, #198	; 0xc6
 8004646:	200f      	movs	r0, #15
 8004648:	f7ff fef8 	bl	800443c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800464c:	23e7      	movs	r3, #231	; 0xe7
 800464e:	733b      	strb	r3, [r7, #12]
 8004650:	23e7      	movs	r3, #231	; 0xe7
 8004652:	72fb      	strb	r3, [r7, #11]
 8004654:	23e7      	movs	r3, #231	; 0xe7
 8004656:	72bb      	strb	r3, [r7, #10]
 8004658:	23e7      	movs	r3, #231	; 0xe7
 800465a:	727b      	strb	r3, [r7, #9]
 800465c:	23e7      	movs	r3, #231	; 0xe7
 800465e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	2205      	movs	r2, #5
 8004666:	4619      	mov	r1, r3
 8004668:	2010      	movs	r0, #16
 800466a:	f7ff ff09 	bl	8004480 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800466e:	2100      	movs	r1, #0
 8004670:	2011      	movs	r0, #17
 8004672:	f7ff fee3 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8004676:	2100      	movs	r1, #0
 8004678:	2012      	movs	r0, #18
 800467a:	f7ff fedf 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800467e:	2100      	movs	r1, #0
 8004680:	2013      	movs	r0, #19
 8004682:	f7ff fedb 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8004686:	2100      	movs	r1, #0
 8004688:	2014      	movs	r0, #20
 800468a:	f7ff fed7 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800468e:	2100      	movs	r1, #0
 8004690:	2015      	movs	r0, #21
 8004692:	f7ff fed3 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8004696:	2100      	movs	r1, #0
 8004698:	2016      	movs	r0, #22
 800469a:	f7ff fecf 	bl	800443c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800469e:	f000 fae3 	bl	8004c68 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80046a2:	2100      	movs	r1, #0
 80046a4:	201c      	movs	r0, #28
 80046a6:	f7ff fec9 	bl	800443c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80046aa:	2100      	movs	r1, #0
 80046ac:	201d      	movs	r0, #29
 80046ae:	f7ff fec5 	bl	800443c <NRF24_write_register>
	printRadioSettings();
 80046b2:	f000 faf3 	bl	8004c9c <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80046b6:	210f      	movs	r1, #15
 80046b8:	200f      	movs	r0, #15
 80046ba:	f000 f8ad 	bl	8004818 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80046be:	2003      	movs	r0, #3
 80046c0:	f000 f987 	bl	80049d2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80046c4:	2001      	movs	r0, #1
 80046c6:	f000 f9bd 	bl	8004a44 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80046ca:	2002      	movs	r0, #2
 80046cc:	f000 fa00 	bl	8004ad0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80046d0:	f000 f952 	bl	8004978 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80046d4:	2020      	movs	r0, #32
 80046d6:	f000 f8cf 	bl	8004878 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80046da:	f000 fabc 	bl	8004c56 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80046de:	204c      	movs	r0, #76	; 0x4c
 80046e0:	f000 f8b5 	bl	800484e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80046e4:	f7ff ff16 	bl	8004514 <NRF24_flush_tx>
	NRF24_flush_rx();
 80046e8:	f7ff ff1c 	bl	8004524 <NRF24_flush_rx>

	NRF24_powerDown();
 80046ec:	f000 fa18 	bl	8004b20 <NRF24_powerDown>

}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046fa:	b002      	add	sp, #8
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	200000a4 	.word	0x200000a4
 8004704:	2000009c 	.word	0x2000009c
 8004708:	200000a0 	.word	0x200000a0
 800470c:	200000a2 	.word	0x200000a2

08004710 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8004714:	2000      	movs	r0, #0
 8004716:	f7ff fe21 	bl	800435c <NRF24_ce>
	NRF24_flush_tx();
 800471a:	f7ff fefb 	bl	8004514 <NRF24_flush_tx>
	NRF24_flush_rx();
 800471e:	f7ff ff01 	bl	8004524 <NRF24_flush_rx>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8004734:	f000 fa8f 	bl	8004c56 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fa2e 	bl	8004b9e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8004742:	f7fb ff81 	bl	8000648 <HAL_GetTick>
 8004746:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8004748:	230a      	movs	r3, #10
 800474a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800474c:	f107 030d 	add.w	r3, r7, #13
 8004750:	2201      	movs	r2, #1
 8004752:	4619      	mov	r1, r3
 8004754:	2008      	movs	r0, #8
 8004756:	f7ff fe49 	bl	80043ec <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800475a:	f7ff feeb 	bl	8004534 <NRF24_get_status>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <NRF24_write+0x54>
 800476c:	f7fb ff6c 	bl	8000648 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d8e7      	bhi.n	800474c <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800477c:	f107 010b 	add.w	r1, r7, #11
 8004780:	f107 030c 	add.w	r3, r7, #12
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <NRF24_write+0x90>)
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fa32 	bl	8004bf0 <NRF24_whatHappened>
	retStatus = tx_ok;
 800478c:	7b3b      	ldrb	r3, [r7, #12]
 800478e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <NRF24_write+0x90>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8004798:	f000 f886 	bl	80048a8 <NRF24_getDynamicPayloadSize>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <NRF24_write+0x94>)
 80047a2:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 80047a4:	f000 f80c 	bl	80047c0 <NRF24_available>
	NRF24_flush_tx();
 80047a8:	f7ff feb4 	bl	8004514 <NRF24_flush_tx>
	return retStatus;
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000094 	.word	0x20000094
 80047bc:	20000095 	.word	0x20000095

080047c0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80047c4:	2000      	movs	r0, #0
 80047c6:	f000 f9ba 	bl	8004b3e <NRF24_availablePipe>
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80047da:	463b      	mov	r3, r7
 80047dc:	2205      	movs	r2, #5
 80047de:	4619      	mov	r1, r3
 80047e0:	200a      	movs	r0, #10
 80047e2:	f7ff fe4d 	bl	8004480 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80047e6:	463b      	mov	r3, r7
 80047e8:	2205      	movs	r2, #5
 80047ea:	4619      	mov	r1, r3
 80047ec:	2010      	movs	r0, #16
 80047ee:	f7ff fe47 	bl	8004480 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80047f2:	2320      	movs	r3, #32
 80047f4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <NRF24_openWritingPipe+0x44>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	4293      	cmp	r3, r2
 80047fe:	bf28      	it	cs
 8004800:	4613      	movcs	r3, r2
 8004802:	b2db      	uxtb	r3, r3
 8004804:	4619      	mov	r1, r3
 8004806:	2011      	movs	r0, #17
 8004808:	f7ff fe18 	bl	800443c <NRF24_write_register>
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20000096 	.word	0x20000096

08004818 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	460a      	mov	r2, r1
 8004822:	71fb      	strb	r3, [r7, #7]
 8004824:	4613      	mov	r3, r2
 8004826:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8004828:	79fb      	ldrb	r3, [r7, #7]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	b25a      	sxtb	r2, r3
 800482e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	b25b      	sxtb	r3, r3
 8004838:	4313      	orrs	r3, r2
 800483a:	b25b      	sxtb	r3, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	4619      	mov	r1, r3
 8004840:	2004      	movs	r0, #4
 8004842:	f7ff fdfb 	bl	800443c <NRF24_write_register>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8004858:	237f      	movs	r3, #127	; 0x7f
 800485a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	4293      	cmp	r3, r2
 8004862:	bf28      	it	cs
 8004864:	4613      	movcs	r3, r2
 8004866:	b2db      	uxtb	r3, r3
 8004868:	4619      	mov	r1, r3
 800486a:	2005      	movs	r0, #5
 800486c:	f7ff fde6 	bl	800443c <NRF24_write_register>
}
 8004870:	bf00      	nop
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8004882:	2320      	movs	r3, #32
 8004884:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	4293      	cmp	r3, r2
 800488c:	bf28      	it	cs
 800488e:	4613      	movcs	r3, r2
 8004890:	b2da      	uxtb	r2, r3
 8004892:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <NRF24_setPayloadSize+0x2c>)
 8004894:	701a      	strb	r2, [r3, #0]
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000096 	.word	0x20000096

080048a8 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80048ac:	2060      	movs	r0, #96	; 0x60
 80048ae:	f7ff fd75 	bl	800439c <NRF24_read_register>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80048bc:	201d      	movs	r0, #29
 80048be:	f7ff fd6d 	bl	800439c <NRF24_read_register>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f043 0306 	orr.w	r3, r3, #6
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	201d      	movs	r0, #29
 80048ce:	f7ff fdb5 	bl	800443c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80048d2:	201d      	movs	r0, #29
 80048d4:	f7ff fd62 	bl	800439c <NRF24_read_register>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10c      	bne.n	80048f8 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80048de:	f000 f9c3 	bl	8004c68 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80048e2:	201d      	movs	r0, #29
 80048e4:	f7ff fd5a 	bl	800439c <NRF24_read_register>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f043 0306 	orr.w	r3, r3, #6
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	201d      	movs	r0, #29
 80048f4:	f7ff fda2 	bl	800443c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80048f8:	201c      	movs	r0, #28
 80048fa:	f7ff fd4f 	bl	800439c <NRF24_read_register>
 80048fe:	4603      	mov	r3, r0
 8004900:	f043 0303 	orr.w	r3, r3, #3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	4619      	mov	r1, r3
 8004908:	201c      	movs	r0, #28
 800490a:	f7ff fd97 	bl	800443c <NRF24_write_register>
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8004918:	201d      	movs	r0, #29
 800491a:	f7ff fd3f 	bl	800439c <NRF24_read_register>
 800491e:	4603      	mov	r3, r0
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	b2db      	uxtb	r3, r3
 8004926:	4619      	mov	r1, r3
 8004928:	201d      	movs	r0, #29
 800492a:	f7ff fd87 	bl	800443c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800492e:	201d      	movs	r0, #29
 8004930:	f7ff fd34 	bl	800439c <NRF24_read_register>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800493a:	f000 f995 	bl	8004c68 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800493e:	201d      	movs	r0, #29
 8004940:	f7ff fd2c 	bl	800439c <NRF24_read_register>
 8004944:	4603      	mov	r3, r0
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	b2db      	uxtb	r3, r3
 800494c:	4619      	mov	r1, r3
 800494e:	201d      	movs	r0, #29
 8004950:	f7ff fd74 	bl	800443c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8004954:	201c      	movs	r0, #28
 8004956:	f7ff fd21 	bl	800439c <NRF24_read_register>
 800495a:	4603      	mov	r3, r0
 800495c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004960:	b2db      	uxtb	r3, r3
 8004962:	4619      	mov	r1, r3
 8004964:	201c      	movs	r0, #28
 8004966:	f7ff fd69 	bl	800443c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800496a:	4b02      	ldr	r3, [pc, #8]	; (8004974 <NRF24_enableDynamicPayloads+0x60>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]

}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000097 	.word	0x20000097

08004978 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800497c:	201d      	movs	r0, #29
 800497e:	f7ff fd0d 	bl	800439c <NRF24_read_register>
 8004982:	4603      	mov	r3, r0
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4619      	mov	r1, r3
 800498c:	201d      	movs	r0, #29
 800498e:	f7ff fd55 	bl	800443c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8004992:	2100      	movs	r1, #0
 8004994:	201c      	movs	r0, #28
 8004996:	f7ff fd51 	bl	800443c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800499a:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <NRF24_disableDynamicPayloads+0x2c>)
 800499c:	2200      	movs	r2, #0
 800499e:	701a      	strb	r2, [r3, #0]
}
 80049a0:	bf00      	nop
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20000097 	.word	0x20000097

080049a8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80049b8:	213f      	movs	r1, #63	; 0x3f
 80049ba:	2001      	movs	r0, #1
 80049bc:	f7ff fd3e 	bl	800443c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80049c0:	e003      	b.n	80049ca <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80049c2:	2100      	movs	r1, #0
 80049c4:	2001      	movs	r0, #1
 80049c6:	f7ff fd39 	bl	800443c <NRF24_write_register>
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80049dc:	2006      	movs	r0, #6
 80049de:	f7ff fcdd 	bl	800439c <NRF24_read_register>
 80049e2:	4603      	mov	r3, r0
 80049e4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	f023 0306 	bic.w	r3, r3, #6
 80049ec:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d104      	bne.n	80049fe <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	f043 0306 	orr.w	r3, r3, #6
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e019      	b.n	8004a32 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d104      	bne.n	8004a0e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e011      	b.n	8004a32 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d104      	bne.n	8004a1e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	73fb      	strb	r3, [r7, #15]
 8004a1c:	e009      	b.n	8004a32 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d103      	bne.n	8004a32 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	f043 0306 	orr.w	r3, r3, #6
 8004a30:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	4619      	mov	r1, r3
 8004a36:	2006      	movs	r0, #6
 8004a38:	f7ff fd00 	bl	800443c <NRF24_write_register>
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8004a52:	2006      	movs	r0, #6
 8004a54:	f7ff fca2 	bl	800439c <NRF24_read_register>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <NRF24_setDataRate+0x88>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8004a62:	7bbb      	ldrb	r3, [r7, #14]
 8004a64:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004a68:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d107      	bne.n	8004a80 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8004a70:	4b16      	ldr	r3, [pc, #88]	; (8004acc <NRF24_setDataRate+0x88>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	73bb      	strb	r3, [r7, #14]
 8004a7e:	e00d      	b.n	8004a9c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <NRF24_setDataRate+0x88>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	f043 0308 	orr.w	r3, r3, #8
 8004a92:	73bb      	strb	r3, [r7, #14]
 8004a94:	e002      	b.n	8004a9c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <NRF24_setDataRate+0x88>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	2006      	movs	r0, #6
 8004aa2:	f7ff fccb 	bl	800443c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8004aa6:	2006      	movs	r0, #6
 8004aa8:	f7ff fc78 	bl	800439c <NRF24_read_register>
 8004aac:	4603      	mov	r3, r0
 8004aae:	461a      	mov	r2, r3
 8004ab0:	7bbb      	ldrb	r3, [r7, #14]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d102      	bne.n	8004abc <NRF24_setDataRate+0x78>
  {
    result = true;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e002      	b.n	8004ac2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <NRF24_setDataRate+0x88>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000098 	.word	0x20000098

08004ad0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8004ada:	2000      	movs	r0, #0
 8004adc:	f7ff fc5e 	bl	800439c <NRF24_read_register>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f023 030c 	bic.w	r3, r3, #12
 8004ae6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00f      	beq.n	8004b0e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d104      	bne.n	8004afe <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	f043 0308 	orr.w	r3, r3, #8
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	e007      	b.n	8004b0e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	f043 0308 	orr.w	r3, r3, #8
 8004b04:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	f043 0304 	orr.w	r3, r3, #4
 8004b0c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	4619      	mov	r1, r3
 8004b12:	2000      	movs	r0, #0
 8004b14:	f7ff fc92 	bl	800443c <NRF24_write_register>
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8004b24:	2000      	movs	r0, #0
 8004b26:	f7ff fc39 	bl	800439c <NRF24_read_register>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f023 0302 	bic.w	r3, r3, #2
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	2000      	movs	r0, #0
 8004b36:	f7ff fc81 	bl	800443c <NRF24_write_register>
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004b46:	f7ff fcf5 	bl	8004534 <NRF24_get_status>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8004b5e:	7bbb      	ldrb	r3, [r7, #14]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d017      	beq.n	8004b94 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	085b      	lsrs	r3, r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8004b7a:	2140      	movs	r1, #64	; 0x40
 8004b7c:	2007      	movs	r0, #7
 8004b7e:	f7ff fc5d 	bl	800443c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	2007      	movs	r0, #7
 8004b90:	f7ff fc54 	bl	800443c <NRF24_write_register>
    }
  }
  return result;
 8004b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7ff fbf6 	bl	800439c <NRF24_read_register>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f043 0302 	orr.w	r3, r3, #2
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f7ff fc3b 	bl	800443c <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8004bc6:	2096      	movs	r0, #150	; 0x96
 8004bc8:	f7ff fb88 	bl	80042dc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fc7d 	bl	80044d0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7ff fbc0 	bl	800435c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8004bdc:	200f      	movs	r0, #15
 8004bde:	f7ff fb7d 	bl	80042dc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8004be2:	2000      	movs	r0, #0
 8004be4:	f7ff fbba 	bl	800435c <NRF24_ce>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8004bfc:	f7ff fc9a 	bl	8004534 <NRF24_get_status>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004c0a:	2170      	movs	r1, #112	; 0x70
 8004c0c:	2007      	movs	r0, #7
 8004c0e:	f7ff fc15 	bl	800443c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	701a      	strb	r2, [r3, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8004c5a:	2170      	movs	r1, #112	; 0x70
 8004c5c:	2007      	movs	r0, #7
 8004c5e:	f7ff fbed 	bl	800443c <NRF24_write_register>
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7ff fb54 	bl	800431c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8004c74:	2350      	movs	r3, #80	; 0x50
 8004c76:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8004c78:	2373      	movs	r3, #115	; 0x73
 8004c7a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8004c7c:	1d39      	adds	r1, r7, #4
 8004c7e:	2364      	movs	r3, #100	; 0x64
 8004c80:	2202      	movs	r2, #2
 8004c82:	4805      	ldr	r0, [pc, #20]	; (8004c98 <NRF24_ACTIVATE_cmd+0x30>)
 8004c84:	f7fd fb96 	bl	80023b4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f7ff fb47 	bl	800431c <NRF24_csn>
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200000a4 	.word	0x200000a4

08004c9c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b0a1      	sub	sp, #132	; 0x84
 8004ca0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8004ca2:	f107 0308 	add.w	r3, r7, #8
 8004ca6:	4ab6      	ldr	r2, [pc, #728]	; (8004f80 <printRadioSettings+0x2e4>)
 8004ca8:	461c      	mov	r4, r3
 8004caa:	4615      	mov	r5, r2
 8004cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	8022      	strh	r2, [r4, #0]
 8004cbe:	3402      	adds	r4, #2
 8004cc0:	0c1b      	lsrs	r3, r3, #16
 8004cc2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004cc4:	f107 0308 	add.w	r3, r7, #8
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fa81 	bl	80001d0 <strlen>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	f107 0108 	add.w	r1, r7, #8
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	48aa      	ldr	r0, [pc, #680]	; (8004f84 <printRadioSettings+0x2e8>)
 8004cda:	f7fe f9dd 	bl	8003098 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7ff fb5c 	bl	800439c <NRF24_read_register>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8004cea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d020      	beq.n	8004d38 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8004cf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <printRadioSettings+0x7e>
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	4aa0      	ldr	r2, [pc, #640]	; (8004f88 <printRadioSettings+0x2ec>)
 8004d08:	461c      	mov	r4, r3
 8004d0a:	4615      	mov	r5, r2
 8004d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d18:	e017      	b.n	8004d4a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	4a9b      	ldr	r2, [pc, #620]	; (8004f8c <printRadioSettings+0x2f0>)
 8004d20:	461c      	mov	r4, r3
 8004d22:	4615      	mov	r5, r2
 8004d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d2c:	c403      	stmia	r4!, {r0, r1}
 8004d2e:	8022      	strh	r2, [r4, #0]
 8004d30:	3402      	adds	r4, #2
 8004d32:	0c13      	lsrs	r3, r2, #16
 8004d34:	7023      	strb	r3, [r4, #0]
 8004d36:	e008      	b.n	8004d4a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	4a94      	ldr	r2, [pc, #592]	; (8004f90 <printRadioSettings+0x2f4>)
 8004d3e:	461c      	mov	r4, r3
 8004d40:	4615      	mov	r5, r2
 8004d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d46:	682b      	ldr	r3, [r5, #0]
 8004d48:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fa3e 	bl	80001d0 <strlen>
 8004d54:	4603      	mov	r3, r0
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f107 0108 	add.w	r1, r7, #8
 8004d5c:	230a      	movs	r3, #10
 8004d5e:	4889      	ldr	r0, [pc, #548]	; (8004f84 <printRadioSettings+0x2e8>)
 8004d60:	f7fe f99a 	bl	8003098 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8004d64:	2001      	movs	r0, #1
 8004d66:	f7ff fb19 	bl	800439c <NRF24_read_register>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfcc      	ite	gt
 8004d7c:	2301      	movgt	r3, #1
 8004d7e:	2300      	movle	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d88:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bfcc      	ite	gt
 8004d90:	2301      	movgt	r3, #1
 8004d92:	2300      	movle	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004d98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d9c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfcc      	ite	gt
 8004da4:	2301      	movgt	r3, #1
 8004da6:	2300      	movle	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004dac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004db0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bfcc      	ite	gt
 8004db8:	2301      	movgt	r3, #1
 8004dba:	2300      	movle	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004dc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004dc4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfcc      	ite	gt
 8004dcc:	2301      	movgt	r3, #1
 8004dce:	2300      	movle	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004dd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004dd8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bfcc      	ite	gt
 8004de0:	2301      	movgt	r3, #1
 8004de2:	2300      	movle	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f107 0008 	add.w	r0, r7, #8
 8004dea:	9303      	str	r3, [sp, #12]
 8004dec:	9402      	str	r4, [sp, #8]
 8004dee:	9101      	str	r1, [sp, #4]
 8004df0:	9200      	str	r2, [sp, #0]
 8004df2:	4633      	mov	r3, r6
 8004df4:	462a      	mov	r2, r5
 8004df6:	4967      	ldr	r1, [pc, #412]	; (8004f94 <printRadioSettings+0x2f8>)
 8004df8:	f001 f872 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004dfc:	f107 0308 	add.w	r3, r7, #8
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb f9e5 	bl	80001d0 <strlen>
 8004e06:	4603      	mov	r3, r0
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	f107 0108 	add.w	r1, r7, #8
 8004e0e:	230a      	movs	r3, #10
 8004e10:	485c      	ldr	r0, [pc, #368]	; (8004f84 <printRadioSettings+0x2e8>)
 8004e12:	f7fe f941 	bl	8003098 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8004e16:	2002      	movs	r0, #2
 8004e18:	f7ff fac0 	bl	800439c <NRF24_read_register>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004e22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e26:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfcc      	ite	gt
 8004e2e:	2301      	movgt	r3, #1
 8004e30:	2300      	movle	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004e36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e3a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bfcc      	ite	gt
 8004e42:	2301      	movgt	r3, #1
 8004e44:	2300      	movle	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004e4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e4e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bfcc      	ite	gt
 8004e56:	2301      	movgt	r3, #1
 8004e58:	2300      	movle	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e62:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bfcc      	ite	gt
 8004e6a:	2301      	movgt	r3, #1
 8004e6c:	2300      	movle	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004e72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e76:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bfcc      	ite	gt
 8004e7e:	2301      	movgt	r3, #1
 8004e80:	2300      	movle	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8004e86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e8a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bfcc      	ite	gt
 8004e92:	2301      	movgt	r3, #1
 8004e94:	2300      	movle	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f107 0008 	add.w	r0, r7, #8
 8004e9c:	9303      	str	r3, [sp, #12]
 8004e9e:	9402      	str	r4, [sp, #8]
 8004ea0:	9101      	str	r1, [sp, #4]
 8004ea2:	9200      	str	r2, [sp, #0]
 8004ea4:	4633      	mov	r3, r6
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	493b      	ldr	r1, [pc, #236]	; (8004f98 <printRadioSettings+0x2fc>)
 8004eaa:	f001 f819 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb f98c 	bl	80001d0 <strlen>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	f107 0108 	add.w	r1, r7, #8
 8004ec0:	230a      	movs	r3, #10
 8004ec2:	4830      	ldr	r0, [pc, #192]	; (8004f84 <printRadioSettings+0x2e8>)
 8004ec4:	f7fe f8e8 	bl	8003098 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8004ec8:	2003      	movs	r0, #3
 8004eca:	f7ff fa67 	bl	800439c <NRF24_read_register>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8004ed8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004edc:	3302      	adds	r3, #2
 8004ede:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8004ee2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	492c      	ldr	r1, [pc, #176]	; (8004f9c <printRadioSettings+0x300>)
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fff7 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004ef2:	f107 0308 	add.w	r3, r7, #8
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fb f96a 	bl	80001d0 <strlen>
 8004efc:	4603      	mov	r3, r0
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	f107 0108 	add.w	r1, r7, #8
 8004f04:	230a      	movs	r3, #10
 8004f06:	481f      	ldr	r0, [pc, #124]	; (8004f84 <printRadioSettings+0x2e8>)
 8004f08:	f7fe f8c6 	bl	8003098 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8004f0c:	2005      	movs	r0, #5
 8004f0e:	f7ff fa45 	bl	800439c <NRF24_read_register>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8004f18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f20:	f107 0308 	add.w	r3, r7, #8
 8004f24:	491e      	ldr	r1, [pc, #120]	; (8004fa0 <printRadioSettings+0x304>)
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ffda 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004f2c:	f107 0308 	add.w	r3, r7, #8
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fb f94d 	bl	80001d0 <strlen>
 8004f36:	4603      	mov	r3, r0
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	f107 0108 	add.w	r1, r7, #8
 8004f3e:	230a      	movs	r3, #10
 8004f40:	4810      	ldr	r0, [pc, #64]	; (8004f84 <printRadioSettings+0x2e8>)
 8004f42:	f7fe f8a9 	bl	8003098 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8004f46:	2006      	movs	r0, #6
 8004f48:	f7ff fa28 	bl	800439c <NRF24_read_register>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8004f52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d024      	beq.n	8004fa8 <printRadioSettings+0x30c>
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	4a10      	ldr	r2, [pc, #64]	; (8004fa4 <printRadioSettings+0x308>)
 8004f64:	461c      	mov	r4, r3
 8004f66:	4615      	mov	r5, r2
 8004f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004f70:	6020      	str	r0, [r4, #0]
 8004f72:	3404      	adds	r4, #4
 8004f74:	8021      	strh	r1, [r4, #0]
 8004f76:	3402      	adds	r4, #2
 8004f78:	0c0b      	lsrs	r3, r1, #16
 8004f7a:	7023      	strb	r3, [r4, #0]
 8004f7c:	e023      	b.n	8004fc6 <printRadioSettings+0x32a>
 8004f7e:	bf00      	nop
 8004f80:	08006714 	.word	0x08006714
 8004f84:	20000108 	.word	0x20000108
 8004f88:	08006748 	.word	0x08006748
 8004f8c:	08006764 	.word	0x08006764
 8004f90:	08006780 	.word	0x08006780
 8004f94:	08006794 	.word	0x08006794
 8004f98:	080067d8 	.word	0x080067d8
 8004f9c:	08006824 	.word	0x08006824
 8004fa0:	08006840 	.word	0x08006840
 8004fa4:	08006854 	.word	0x08006854
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8004fa8:	f107 0308 	add.w	r3, r7, #8
 8004fac:	4a29      	ldr	r2, [pc, #164]	; (8005054 <printRadioSettings+0x3b8>)
 8004fae:	461c      	mov	r4, r3
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004fba:	6020      	str	r0, [r4, #0]
 8004fbc:	3404      	adds	r4, #4
 8004fbe:	8021      	strh	r1, [r4, #0]
 8004fc0:	3402      	adds	r4, #2
 8004fc2:	0c0b      	lsrs	r3, r1, #16
 8004fc4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fb f900 	bl	80001d0 <strlen>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	f107 0108 	add.w	r1, r7, #8
 8004fd8:	230a      	movs	r3, #10
 8004fda:	481f      	ldr	r0, [pc, #124]	; (8005058 <printRadioSettings+0x3bc>)
 8004fdc:	f7fe f85c 	bl	8003098 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8004fe0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004fe4:	f003 0306 	and.w	r3, r3, #6
 8004fe8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8004fec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8004ff6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <printRadioSettings+0x376>
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	4a16      	ldr	r2, [pc, #88]	; (800505c <printRadioSettings+0x3c0>)
 8005004:	461c      	mov	r4, r3
 8005006:	4615      	mov	r5, r2
 8005008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800500a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	e037      	b.n	8005082 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8005012:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005016:	2b01      	cmp	r3, #1
 8005018:	d109      	bne.n	800502e <printRadioSettings+0x392>
 800501a:	f107 0308 	add.w	r3, r7, #8
 800501e:	4a10      	ldr	r2, [pc, #64]	; (8005060 <printRadioSettings+0x3c4>)
 8005020:	461c      	mov	r4, r3
 8005022:	4615      	mov	r5, r2
 8005024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	6023      	str	r3, [r4, #0]
 800502c:	e029      	b.n	8005082 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800502e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005032:	2b02      	cmp	r3, #2
 8005034:	d118      	bne.n	8005068 <printRadioSettings+0x3cc>
 8005036:	f107 0308 	add.w	r3, r7, #8
 800503a:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <printRadioSettings+0x3c8>)
 800503c:	461c      	mov	r4, r3
 800503e:	4615      	mov	r5, r2
 8005040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	8022      	strh	r2, [r4, #0]
 800504a:	3402      	adds	r4, #2
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	7023      	strb	r3, [r4, #0]
 8005050:	e017      	b.n	8005082 <printRadioSettings+0x3e6>
 8005052:	bf00      	nop
 8005054:	0800686c 	.word	0x0800686c
 8005058:	20000108 	.word	0x20000108
 800505c:	08006884 	.word	0x08006884
 8005060:	08006898 	.word	0x08006898
 8005064:	080068ac 	.word	0x080068ac
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8005068:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800506c:	2b03      	cmp	r3, #3
 800506e:	d108      	bne.n	8005082 <printRadioSettings+0x3e6>
 8005070:	f107 0308 	add.w	r3, r7, #8
 8005074:	4ad7      	ldr	r2, [pc, #860]	; (80053d4 <printRadioSettings+0x738>)
 8005076:	461c      	mov	r4, r3
 8005078:	4615      	mov	r5, r2
 800507a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800507c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb f8a2 	bl	80001d0 <strlen>
 800508c:	4603      	mov	r3, r0
 800508e:	b29a      	uxth	r2, r3
 8005090:	f107 0108 	add.w	r1, r7, #8
 8005094:	230a      	movs	r3, #10
 8005096:	48d0      	ldr	r0, [pc, #832]	; (80053d8 <printRadioSettings+0x73c>)
 8005098:	f7fd fffe 	bl	8003098 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800509c:	463b      	mov	r3, r7
 800509e:	2205      	movs	r2, #5
 80050a0:	4619      	mov	r1, r3
 80050a2:	200a      	movs	r0, #10
 80050a4:	f7ff f9a2 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80050a8:	793b      	ldrb	r3, [r7, #4]
 80050aa:	461c      	mov	r4, r3
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	461d      	mov	r5, r3
 80050b0:	78bb      	ldrb	r3, [r7, #2]
 80050b2:	787a      	ldrb	r2, [r7, #1]
 80050b4:	7839      	ldrb	r1, [r7, #0]
 80050b6:	f107 0008 	add.w	r0, r7, #8
 80050ba:	9102      	str	r1, [sp, #8]
 80050bc:	9201      	str	r2, [sp, #4]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	462b      	mov	r3, r5
 80050c2:	4622      	mov	r2, r4
 80050c4:	49c5      	ldr	r1, [pc, #788]	; (80053dc <printRadioSettings+0x740>)
 80050c6:	f000 ff0b 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fb f87e 	bl	80001d0 <strlen>
 80050d4:	4603      	mov	r3, r0
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	f107 0108 	add.w	r1, r7, #8
 80050dc:	230a      	movs	r3, #10
 80050de:	48be      	ldr	r0, [pc, #760]	; (80053d8 <printRadioSettings+0x73c>)
 80050e0:	f7fd ffda 	bl	8003098 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80050e4:	463b      	mov	r3, r7
 80050e6:	2205      	movs	r2, #5
 80050e8:	4619      	mov	r1, r3
 80050ea:	200b      	movs	r0, #11
 80050ec:	f7ff f97e 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80050f0:	793b      	ldrb	r3, [r7, #4]
 80050f2:	461c      	mov	r4, r3
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	461d      	mov	r5, r3
 80050f8:	78bb      	ldrb	r3, [r7, #2]
 80050fa:	787a      	ldrb	r2, [r7, #1]
 80050fc:	7839      	ldrb	r1, [r7, #0]
 80050fe:	f107 0008 	add.w	r0, r7, #8
 8005102:	9102      	str	r1, [sp, #8]
 8005104:	9201      	str	r2, [sp, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	462b      	mov	r3, r5
 800510a:	4622      	mov	r2, r4
 800510c:	49b4      	ldr	r1, [pc, #720]	; (80053e0 <printRadioSettings+0x744>)
 800510e:	f000 fee7 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb f85a 	bl	80001d0 <strlen>
 800511c:	4603      	mov	r3, r0
 800511e:	b29a      	uxth	r2, r3
 8005120:	f107 0108 	add.w	r1, r7, #8
 8005124:	230a      	movs	r3, #10
 8005126:	48ac      	ldr	r0, [pc, #688]	; (80053d8 <printRadioSettings+0x73c>)
 8005128:	f7fd ffb6 	bl	8003098 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800512c:	463b      	mov	r3, r7
 800512e:	2201      	movs	r2, #1
 8005130:	4619      	mov	r1, r3
 8005132:	200c      	movs	r0, #12
 8005134:	f7ff f95a 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8005138:	783b      	ldrb	r3, [r7, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	f107 0308 	add.w	r3, r7, #8
 8005140:	49a8      	ldr	r1, [pc, #672]	; (80053e4 <printRadioSettings+0x748>)
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fecc 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	4618      	mov	r0, r3
 800514e:	f7fb f83f 	bl	80001d0 <strlen>
 8005152:	4603      	mov	r3, r0
 8005154:	b29a      	uxth	r2, r3
 8005156:	f107 0108 	add.w	r1, r7, #8
 800515a:	230a      	movs	r3, #10
 800515c:	489e      	ldr	r0, [pc, #632]	; (80053d8 <printRadioSettings+0x73c>)
 800515e:	f7fd ff9b 	bl	8003098 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8005162:	463b      	mov	r3, r7
 8005164:	2201      	movs	r2, #1
 8005166:	4619      	mov	r1, r3
 8005168:	200d      	movs	r0, #13
 800516a:	f7ff f93f 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800516e:	783b      	ldrb	r3, [r7, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	f107 0308 	add.w	r3, r7, #8
 8005176:	499c      	ldr	r1, [pc, #624]	; (80053e8 <printRadioSettings+0x74c>)
 8005178:	4618      	mov	r0, r3
 800517a:	f000 feb1 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800517e:	f107 0308 	add.w	r3, r7, #8
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb f824 	bl	80001d0 <strlen>
 8005188:	4603      	mov	r3, r0
 800518a:	b29a      	uxth	r2, r3
 800518c:	f107 0108 	add.w	r1, r7, #8
 8005190:	230a      	movs	r3, #10
 8005192:	4891      	ldr	r0, [pc, #580]	; (80053d8 <printRadioSettings+0x73c>)
 8005194:	f7fd ff80 	bl	8003098 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8005198:	463b      	mov	r3, r7
 800519a:	2201      	movs	r2, #1
 800519c:	4619      	mov	r1, r3
 800519e:	200e      	movs	r0, #14
 80051a0:	f7ff f924 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80051a4:	783b      	ldrb	r3, [r7, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f107 0308 	add.w	r3, r7, #8
 80051ac:	498f      	ldr	r1, [pc, #572]	; (80053ec <printRadioSettings+0x750>)
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fe96 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80051b4:	f107 0308 	add.w	r3, r7, #8
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb f809 	bl	80001d0 <strlen>
 80051be:	4603      	mov	r3, r0
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	f107 0108 	add.w	r1, r7, #8
 80051c6:	230a      	movs	r3, #10
 80051c8:	4883      	ldr	r0, [pc, #524]	; (80053d8 <printRadioSettings+0x73c>)
 80051ca:	f7fd ff65 	bl	8003098 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80051ce:	463b      	mov	r3, r7
 80051d0:	2201      	movs	r2, #1
 80051d2:	4619      	mov	r1, r3
 80051d4:	200f      	movs	r0, #15
 80051d6:	f7ff f909 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80051da:	783b      	ldrb	r3, [r7, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	f107 0308 	add.w	r3, r7, #8
 80051e2:	4983      	ldr	r1, [pc, #524]	; (80053f0 <printRadioSettings+0x754>)
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fe7b 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fa ffee 	bl	80001d0 <strlen>
 80051f4:	4603      	mov	r3, r0
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	230a      	movs	r3, #10
 80051fe:	4876      	ldr	r0, [pc, #472]	; (80053d8 <printRadioSettings+0x73c>)
 8005200:	f7fd ff4a 	bl	8003098 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8005204:	463b      	mov	r3, r7
 8005206:	2205      	movs	r2, #5
 8005208:	4619      	mov	r1, r3
 800520a:	2010      	movs	r0, #16
 800520c:	f7ff f8ee 	bl	80043ec <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8005210:	793b      	ldrb	r3, [r7, #4]
 8005212:	461c      	mov	r4, r3
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	461d      	mov	r5, r3
 8005218:	78bb      	ldrb	r3, [r7, #2]
 800521a:	787a      	ldrb	r2, [r7, #1]
 800521c:	7839      	ldrb	r1, [r7, #0]
 800521e:	f107 0008 	add.w	r0, r7, #8
 8005222:	9102      	str	r1, [sp, #8]
 8005224:	9201      	str	r2, [sp, #4]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	462b      	mov	r3, r5
 800522a:	4622      	mov	r2, r4
 800522c:	4971      	ldr	r1, [pc, #452]	; (80053f4 <printRadioSettings+0x758>)
 800522e:	f000 fe57 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	4618      	mov	r0, r3
 8005238:	f7fa ffca 	bl	80001d0 <strlen>
 800523c:	4603      	mov	r3, r0
 800523e:	b29a      	uxth	r2, r3
 8005240:	f107 0108 	add.w	r1, r7, #8
 8005244:	230a      	movs	r3, #10
 8005246:	4864      	ldr	r0, [pc, #400]	; (80053d8 <printRadioSettings+0x73c>)
 8005248:	f7fd ff26 	bl	8003098 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800524c:	2011      	movs	r0, #17
 800524e:	f7ff f8a5 	bl	800439c <NRF24_read_register>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005258:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800525c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4964      	ldr	r1, [pc, #400]	; (80053f8 <printRadioSettings+0x75c>)
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fe3a 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800526c:	f107 0308 	add.w	r3, r7, #8
 8005270:	4618      	mov	r0, r3
 8005272:	f7fa ffad 	bl	80001d0 <strlen>
 8005276:	4603      	mov	r3, r0
 8005278:	b29a      	uxth	r2, r3
 800527a:	f107 0108 	add.w	r1, r7, #8
 800527e:	230a      	movs	r3, #10
 8005280:	4855      	ldr	r0, [pc, #340]	; (80053d8 <printRadioSettings+0x73c>)
 8005282:	f7fd ff09 	bl	8003098 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8005286:	2012      	movs	r0, #18
 8005288:	f7ff f888 	bl	800439c <NRF24_read_register>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005292:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	4957      	ldr	r1, [pc, #348]	; (80053fc <printRadioSettings+0x760>)
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fe1d 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80052a6:	f107 0308 	add.w	r3, r7, #8
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fa ff90 	bl	80001d0 <strlen>
 80052b0:	4603      	mov	r3, r0
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f107 0108 	add.w	r1, r7, #8
 80052b8:	230a      	movs	r3, #10
 80052ba:	4847      	ldr	r0, [pc, #284]	; (80053d8 <printRadioSettings+0x73c>)
 80052bc:	f7fd feec 	bl	8003098 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80052c0:	2013      	movs	r0, #19
 80052c2:	f7ff f86b 	bl	800439c <NRF24_read_register>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80052cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80052d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052d4:	f107 0308 	add.w	r3, r7, #8
 80052d8:	4949      	ldr	r1, [pc, #292]	; (8005400 <printRadioSettings+0x764>)
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fe00 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80052e0:	f107 0308 	add.w	r3, r7, #8
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7fa ff73 	bl	80001d0 <strlen>
 80052ea:	4603      	mov	r3, r0
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f107 0108 	add.w	r1, r7, #8
 80052f2:	230a      	movs	r3, #10
 80052f4:	4838      	ldr	r0, [pc, #224]	; (80053d8 <printRadioSettings+0x73c>)
 80052f6:	f7fd fecf 	bl	8003098 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80052fa:	2014      	movs	r0, #20
 80052fc:	f7ff f84e 	bl	800439c <NRF24_read_register>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005306:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800530a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	493c      	ldr	r1, [pc, #240]	; (8005404 <printRadioSettings+0x768>)
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fde3 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800531a:	f107 0308 	add.w	r3, r7, #8
 800531e:	4618      	mov	r0, r3
 8005320:	f7fa ff56 	bl	80001d0 <strlen>
 8005324:	4603      	mov	r3, r0
 8005326:	b29a      	uxth	r2, r3
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	230a      	movs	r3, #10
 800532e:	482a      	ldr	r0, [pc, #168]	; (80053d8 <printRadioSettings+0x73c>)
 8005330:	f7fd feb2 	bl	8003098 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8005334:	2015      	movs	r0, #21
 8005336:	f7ff f831 	bl	800439c <NRF24_read_register>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8005340:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005348:	f107 0308 	add.w	r3, r7, #8
 800534c:	492e      	ldr	r1, [pc, #184]	; (8005408 <printRadioSettings+0x76c>)
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fdc6 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005354:	f107 0308 	add.w	r3, r7, #8
 8005358:	4618      	mov	r0, r3
 800535a:	f7fa ff39 	bl	80001d0 <strlen>
 800535e:	4603      	mov	r3, r0
 8005360:	b29a      	uxth	r2, r3
 8005362:	f107 0108 	add.w	r1, r7, #8
 8005366:	230a      	movs	r3, #10
 8005368:	481b      	ldr	r0, [pc, #108]	; (80053d8 <printRadioSettings+0x73c>)
 800536a:	f7fd fe95 	bl	8003098 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800536e:	2016      	movs	r0, #22
 8005370:	f7ff f814 	bl	800439c <NRF24_read_register>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800537a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800537e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	4921      	ldr	r1, [pc, #132]	; (800540c <printRadioSettings+0x770>)
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fda9 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800538e:	f107 0308 	add.w	r3, r7, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f7fa ff1c 	bl	80001d0 <strlen>
 8005398:	4603      	mov	r3, r0
 800539a:	b29a      	uxth	r2, r3
 800539c:	f107 0108 	add.w	r1, r7, #8
 80053a0:	230a      	movs	r3, #10
 80053a2:	480d      	ldr	r0, [pc, #52]	; (80053d8 <printRadioSettings+0x73c>)
 80053a4:	f7fd fe78 	bl	8003098 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80053a8:	201c      	movs	r0, #28
 80053aa:	f7fe fff7 	bl	800439c <NRF24_read_register>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80053b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80053b8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bfcc      	ite	gt
 80053c0:	2301      	movgt	r3, #1
 80053c2:	2300      	movle	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80053c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	e01e      	b.n	8005410 <printRadioSettings+0x774>
 80053d2:	bf00      	nop
 80053d4:	080068c0 	.word	0x080068c0
 80053d8:	20000108 	.word	0x20000108
 80053dc:	080068d4 	.word	0x080068d4
 80053e0:	08006904 	.word	0x08006904
 80053e4:	08006934 	.word	0x08006934
 80053e8:	0800695c 	.word	0x0800695c
 80053ec:	08006984 	.word	0x08006984
 80053f0:	080069ac 	.word	0x080069ac
 80053f4:	080069d4 	.word	0x080069d4
 80053f8:	08006a00 	.word	0x08006a00
 80053fc:	08006a1c 	.word	0x08006a1c
 8005400:	08006a38 	.word	0x08006a38
 8005404:	08006a54 	.word	0x08006a54
 8005408:	08006a70 	.word	0x08006a70
 800540c:	08006a8c 	.word	0x08006a8c
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005410:	2b00      	cmp	r3, #0
 8005412:	bfcc      	ite	gt
 8005414:	2301      	movgt	r3, #1
 8005416:	2300      	movle	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800541c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005420:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005424:	2b00      	cmp	r3, #0
 8005426:	bfcc      	ite	gt
 8005428:	2301      	movgt	r3, #1
 800542a:	2300      	movle	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005430:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005434:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfcc      	ite	gt
 800543c:	2301      	movgt	r3, #1
 800543e:	2300      	movle	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005448:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfcc      	ite	gt
 8005450:	2301      	movgt	r3, #1
 8005452:	2300      	movle	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005458:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800545c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005460:	2b00      	cmp	r3, #0
 8005462:	bfcc      	ite	gt
 8005464:	2301      	movgt	r3, #1
 8005466:	2300      	movle	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f107 0008 	add.w	r0, r7, #8
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	9402      	str	r4, [sp, #8]
 8005472:	9101      	str	r1, [sp, #4]
 8005474:	9200      	str	r2, [sp, #0]
 8005476:	4633      	mov	r3, r6
 8005478:	462a      	mov	r2, r5
 800547a:	494a      	ldr	r1, [pc, #296]	; (80055a4 <printRadioSettings+0x908>)
 800547c:	f000 fd30 	bl	8005ee0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4618      	mov	r0, r3
 8005486:	f7fa fea3 	bl	80001d0 <strlen>
 800548a:	4603      	mov	r3, r0
 800548c:	b29a      	uxth	r2, r3
 800548e:	f107 0108 	add.w	r1, r7, #8
 8005492:	230a      	movs	r3, #10
 8005494:	4844      	ldr	r0, [pc, #272]	; (80055a8 <printRadioSettings+0x90c>)
 8005496:	f7fd fdff 	bl	8003098 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800549a:	201d      	movs	r0, #29
 800549c:	f7fe ff7e 	bl	800439c <NRF24_read_register>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80054a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <printRadioSettings+0x830>
 80054b2:	f107 0308 	add.w	r3, r7, #8
 80054b6:	4a3d      	ldr	r2, [pc, #244]	; (80055ac <printRadioSettings+0x910>)
 80054b8:	461c      	mov	r4, r3
 80054ba:	4615      	mov	r5, r2
 80054bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80054c4:	6020      	str	r0, [r4, #0]
 80054c6:	3404      	adds	r4, #4
 80054c8:	8021      	strh	r1, [r4, #0]
 80054ca:	e00e      	b.n	80054ea <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80054cc:	f107 0308 	add.w	r3, r7, #8
 80054d0:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <printRadioSettings+0x914>)
 80054d2:	461c      	mov	r4, r3
 80054d4:	4615      	mov	r5, r2
 80054d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80054de:	6020      	str	r0, [r4, #0]
 80054e0:	3404      	adds	r4, #4
 80054e2:	8021      	strh	r1, [r4, #0]
 80054e4:	3402      	adds	r4, #2
 80054e6:	0c0b      	lsrs	r3, r1, #16
 80054e8:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80054ea:	f107 0308 	add.w	r3, r7, #8
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fa fe6e 	bl	80001d0 <strlen>
 80054f4:	4603      	mov	r3, r0
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	f107 0108 	add.w	r1, r7, #8
 80054fc:	230a      	movs	r3, #10
 80054fe:	482a      	ldr	r0, [pc, #168]	; (80055a8 <printRadioSettings+0x90c>)
 8005500:	f7fd fdca 	bl	8003098 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8005504:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <printRadioSettings+0x88c>
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <printRadioSettings+0x918>)
 8005516:	461c      	mov	r4, r3
 8005518:	4615      	mov	r5, r2
 800551a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800551c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800551e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005522:	c403      	stmia	r4!, {r0, r1}
 8005524:	8022      	strh	r2, [r4, #0]
 8005526:	e00d      	b.n	8005544 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8005528:	f107 0308 	add.w	r3, r7, #8
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <printRadioSettings+0x91c>)
 800552e:	461c      	mov	r4, r3
 8005530:	4615      	mov	r5, r2
 8005532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800553a:	c403      	stmia	r4!, {r0, r1}
 800553c:	8022      	strh	r2, [r4, #0]
 800553e:	3402      	adds	r4, #2
 8005540:	0c13      	lsrs	r3, r2, #16
 8005542:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4618      	mov	r0, r3
 800554a:	f7fa fe41 	bl	80001d0 <strlen>
 800554e:	4603      	mov	r3, r0
 8005550:	b29a      	uxth	r2, r3
 8005552:	f107 0108 	add.w	r1, r7, #8
 8005556:	230a      	movs	r3, #10
 8005558:	4813      	ldr	r0, [pc, #76]	; (80055a8 <printRadioSettings+0x90c>)
 800555a:	f7fd fd9d 	bl	8003098 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <printRadioSettings+0x920>)
 8005564:	461c      	mov	r4, r3
 8005566:	4615      	mov	r5, r2
 8005568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800556a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800556c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800556e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	8022      	strh	r2, [r4, #0]
 800557a:	3402      	adds	r4, #2
 800557c:	0c1b      	lsrs	r3, r3, #16
 800557e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	4618      	mov	r0, r3
 8005586:	f7fa fe23 	bl	80001d0 <strlen>
 800558a:	4603      	mov	r3, r0
 800558c:	b29a      	uxth	r2, r3
 800558e:	f107 0108 	add.w	r1, r7, #8
 8005592:	230a      	movs	r3, #10
 8005594:	4804      	ldr	r0, [pc, #16]	; (80055a8 <printRadioSettings+0x90c>)
 8005596:	f7fd fd7f 	bl	8003098 <HAL_UART_Transmit>
}
 800559a:	bf00      	nop
 800559c:	3774      	adds	r7, #116	; 0x74
 800559e:	46bd      	mov	sp, r7
 80055a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08006aa8 	.word	0x08006aa8
 80055a8:	20000108 	.word	0x20000108
 80055ac:	08006af4 	.word	0x08006af4
 80055b0:	08006b0c 	.word	0x08006b0c
 80055b4:	08006b24 	.word	0x08006b24
 80055b8:	08006b40 	.word	0x08006b40
 80055bc:	08006714 	.word	0x08006714

080055c0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80055c0:	b084      	sub	sp, #16
 80055c2:	b580      	push	{r7, lr}
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	f107 0c08 	add.w	ip, r7, #8
 80055ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <nrf24_DebugUART_Init+0x2c>)
 80055d0:	4618      	mov	r0, r3
 80055d2:	f107 0108 	add.w	r1, r7, #8
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	461a      	mov	r2, r3
 80055da:	f000 fc6d 	bl	8005eb8 <memcpy>
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055e6:	b004      	add	sp, #16
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000108 	.word	0x20000108

080055f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f2:	b0b3      	sub	sp, #204	; 0xcc
 80055f4:	af1c      	add	r7, sp, #112	; 0x70
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055f6:	f7fa ffc3 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055fa:	f000 f8ed 	bl	80057d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055fe:	f000 fa0f 	bl	8005a20 <MX_GPIO_Init>
  MX_SPI3_Init();
 8005602:	f000 f99f 	bl	8005944 <MX_SPI3_Init>
  MX_SPI1_Init();
 8005606:	f000 f95f 	bl	80058c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800560a:	f000 f9d9 	bl	80059c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_SET);
 800560e:	2201      	movs	r2, #1
 8005610:	2101      	movs	r1, #1
 8005612:	4863      	ldr	r0, [pc, #396]	; (80057a0 <main+0x1b0>)
 8005614:	f7fb fb64 	bl	8000ce0 <HAL_GPIO_WritePin>

   NRF24_begin(nRF_CS_GPIO_Port, nRF_CS_Pin, nRF_CE_Pin, hspi3);
 8005618:	4c62      	ldr	r4, [pc, #392]	; (80057a4 <main+0x1b4>)
 800561a:	4668      	mov	r0, sp
 800561c:	1d23      	adds	r3, r4, #4
 800561e:	2260      	movs	r2, #96	; 0x60
 8005620:	4619      	mov	r1, r3
 8005622:	f000 fc49 	bl	8005eb8 <memcpy>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005630:	485d      	ldr	r0, [pc, #372]	; (80057a8 <main+0x1b8>)
 8005632:	f7fe ff8d 	bl	8004550 <NRF24_begin>
   nrf24_DebugUART_Init(huart1);
 8005636:	4c5d      	ldr	r4, [pc, #372]	; (80057ac <main+0x1bc>)
 8005638:	4668      	mov	r0, sp
 800563a:	f104 0310 	add.w	r3, r4, #16
 800563e:	2270      	movs	r2, #112	; 0x70
 8005640:	4619      	mov	r1, r3
 8005642:	f000 fc39 	bl	8005eb8 <memcpy>
 8005646:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800564a:	f7ff ffb9 	bl	80055c0 <nrf24_DebugUART_Init>

   NRF24_stopListening();
 800564e:	f7ff f85f 	bl	8004710 <NRF24_stopListening>
   NRF24_openWritingPipe(TxpipeAddrs);
 8005652:	4b57      	ldr	r3, [pc, #348]	; (80057b0 <main+0x1c0>)
 8005654:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005658:	4618      	mov	r0, r3
 800565a:	4621      	mov	r1, r4
 800565c:	f7ff f8b8 	bl	80047d0 <NRF24_openWritingPipe>
   NRF24_setAutoAck(true);
 8005660:	2001      	movs	r0, #1
 8005662:	f7ff f9a1 	bl	80049a8 <NRF24_setAutoAck>
   NRF24_setChannel(52);
 8005666:	2034      	movs	r0, #52	; 0x34
 8005668:	f7ff f8f1 	bl	800484e <NRF24_setChannel>
   NRF24_setPayloadSize(32);
 800566c:	2020      	movs	r0, #32
 800566e:	f7ff f903 	bl	8004878 <NRF24_setPayloadSize>

   NRF24_enableDynamicPayloads();
 8005672:	f7ff f94f 	bl	8004914 <NRF24_enableDynamicPayloads>
   NRF24_enableAckPayload();
 8005676:	f7ff f91f 	bl	80048b8 <NRF24_enableAckPayload>

   printRadioSettings();
 800567a:	f7ff fb0f 	bl	8004c9c <printRadioSettings>

   ICM_SelectBank(USER_BANK_0);
 800567e:	2000      	movs	r0, #0
 8005680:	f7fe fdca 	bl	8004218 <ICM_SelectBank>
   ICM_PowerOn();
 8005684:	f7fe fc90 	bl	8003fa8 <ICM_PowerOn>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Select User Bank 0
	  		ICM_SelectBank(USER_BANK_0);
 8005688:	2000      	movs	r0, #0
 800568a:	f7fe fdc5 	bl	8004218 <ICM_SelectBank>
	  		HAL_Delay(10);
 800568e:	200a      	movs	r0, #10
 8005690:	f7fa ffe6 	bl	8000660 <HAL_Delay>

	  		// Obtain accelerometer and gyro data
	  		ICM_ReadAccelGyro();
 8005694:	f7fe fd34 	bl	8004100 <ICM_ReadAccelGyro>

	  		// Obtain magnetometer data
	  		int16_t mag_data[3];
	  		ICM_ReadMag(mag_data);
 8005698:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe fc37 	bl	8003f10 <ICM_ReadMag>

	  		// Print raw, but joined, axis data values to screen
	  		sprintf(tx_buffer,
	  				"%i,%i,%i,%i,%i,%i,%i,%i,%i",
	  				accel_data[0], accel_data[1], accel_data[2],
 80056a2:	4b44      	ldr	r3, [pc, #272]	; (80057b4 <main+0x1c4>)
 80056a4:	f9b3 3000 	ldrsh.w	r3, [r3]
	  		sprintf(tx_buffer,
 80056a8:	469c      	mov	ip, r3
	  				accel_data[0], accel_data[1], accel_data[2],
 80056aa:	4b42      	ldr	r3, [pc, #264]	; (80057b4 <main+0x1c4>)
 80056ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  		sprintf(tx_buffer,
 80056b0:	469e      	mov	lr, r3
	  				accel_data[0], accel_data[1], accel_data[2],
 80056b2:	4b40      	ldr	r3, [pc, #256]	; (80057b4 <main+0x1c4>)
 80056b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  		sprintf(tx_buffer,
 80056b8:	461a      	mov	r2, r3
	  				gyro_data[0], gyro_data[1], gyro_data[2],
 80056ba:	4b3f      	ldr	r3, [pc, #252]	; (80057b8 <main+0x1c8>)
 80056bc:	f9b3 3000 	ldrsh.w	r3, [r3]
	  		sprintf(tx_buffer,
 80056c0:	4619      	mov	r1, r3
	  				gyro_data[0], gyro_data[1], gyro_data[2],
 80056c2:	4b3d      	ldr	r3, [pc, #244]	; (80057b8 <main+0x1c8>)
 80056c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  		sprintf(tx_buffer,
 80056c8:	4618      	mov	r0, r3
	  				gyro_data[0], gyro_data[1], gyro_data[2],
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <main+0x1c8>)
 80056cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	  				mag_data[0], mag_data[1], mag_data[2]
 80056d0:	f9b7 4050 	ldrsh.w	r4, [r7, #80]	; 0x50
 80056d4:	f9b7 5052 	ldrsh.w	r5, [r7, #82]	; 0x52
 80056d8:	f9b7 6054 	ldrsh.w	r6, [r7, #84]	; 0x54
	  		sprintf(tx_buffer,
 80056dc:	9606      	str	r6, [sp, #24]
 80056de:	9505      	str	r5, [sp, #20]
 80056e0:	9404      	str	r4, [sp, #16]
 80056e2:	9303      	str	r3, [sp, #12]
 80056e4:	9002      	str	r0, [sp, #8]
 80056e6:	9101      	str	r1, [sp, #4]
 80056e8:	9200      	str	r2, [sp, #0]
 80056ea:	4673      	mov	r3, lr
 80056ec:	4662      	mov	r2, ip
 80056ee:	4933      	ldr	r1, [pc, #204]	; (80057bc <main+0x1cc>)
 80056f0:	4833      	ldr	r0, [pc, #204]	; (80057c0 <main+0x1d0>)
 80056f2:	f000 fbf5 	bl	8005ee0 <siprintf>
			sprintf(uart_buffer,
					"(Ax: %i | Ay: %i | Az: %i)   "
					"(Gx: %i | Gy: %i | Gz: %i)   "
					"(Mx: %i | My: %i | Mz: %i)"
					" \r\n",
					accel_data[0], accel_data[1], accel_data[2],
 80056f6:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <main+0x1c4>)
 80056f8:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(uart_buffer,
 80056fc:	469c      	mov	ip, r3
					accel_data[0], accel_data[1], accel_data[2],
 80056fe:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <main+0x1c4>)
 8005700:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf(uart_buffer,
 8005704:	469e      	mov	lr, r3
					accel_data[0], accel_data[1], accel_data[2],
 8005706:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <main+0x1c4>)
 8005708:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			sprintf(uart_buffer,
 800570c:	461a      	mov	r2, r3
					gyro_data[0], gyro_data[1], gyro_data[2],
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <main+0x1c8>)
 8005710:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(uart_buffer,
 8005714:	4619      	mov	r1, r3
					gyro_data[0], gyro_data[1], gyro_data[2],
 8005716:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <main+0x1c8>)
 8005718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			sprintf(uart_buffer,
 800571c:	4618      	mov	r0, r3
					gyro_data[0], gyro_data[1], gyro_data[2],
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <main+0x1c8>)
 8005720:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					mag_data[0], mag_data[1], mag_data[2]);
 8005724:	f9b7 4050 	ldrsh.w	r4, [r7, #80]	; 0x50
 8005728:	f9b7 5052 	ldrsh.w	r5, [r7, #82]	; 0x52
 800572c:	f9b7 6054 	ldrsh.w	r6, [r7, #84]	; 0x54
			sprintf(uart_buffer,
 8005730:	9606      	str	r6, [sp, #24]
 8005732:	9505      	str	r5, [sp, #20]
 8005734:	9404      	str	r4, [sp, #16]
 8005736:	9303      	str	r3, [sp, #12]
 8005738:	9002      	str	r0, [sp, #8]
 800573a:	9101      	str	r1, [sp, #4]
 800573c:	9200      	str	r2, [sp, #0]
 800573e:	4673      	mov	r3, lr
 8005740:	4662      	mov	r2, ip
 8005742:	4920      	ldr	r1, [pc, #128]	; (80057c4 <main+0x1d4>)
 8005744:	4820      	ldr	r0, [pc, #128]	; (80057c8 <main+0x1d8>)
 8005746:	f000 fbcb 	bl	8005ee0 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 800574a:	481f      	ldr	r0, [pc, #124]	; (80057c8 <main+0x1d8>)
 800574c:	f7fa fd40 	bl	80001d0 <strlen>
 8005750:	4603      	mov	r3, r0
 8005752:	b29a      	uxth	r2, r3
 8005754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005758:	491b      	ldr	r1, [pc, #108]	; (80057c8 <main+0x1d8>)
 800575a:	4814      	ldr	r0, [pc, #80]	; (80057ac <main+0x1bc>)
 800575c:	f7fd fc9c 	bl	8003098 <HAL_UART_Transmit>

	  		if(NRF24_write(tx_buffer, 32)) {
 8005760:	2120      	movs	r1, #32
 8005762:	4817      	ldr	r0, [pc, #92]	; (80057c0 <main+0x1d0>)
 8005764:	f7fe ffe0 	bl	8004728 <NRF24_write>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d08c      	beq.n	8005688 <main+0x98>
	  			HAL_UART_Transmit(&huart1, (uint8_t *)"Transmitted Successfully\r\n", strlen("Transmitted Successfully\r\n"), 10);
 800576e:	230a      	movs	r3, #10
 8005770:	221a      	movs	r2, #26
 8005772:	4916      	ldr	r1, [pc, #88]	; (80057cc <main+0x1dc>)
 8005774:	480d      	ldr	r0, [pc, #52]	; (80057ac <main+0x1bc>)
 8005776:	f7fd fc8f 	bl	8003098 <HAL_UART_Transmit>
	  		  	char myDataack[80];
	  		  	sprintf(myDataack, "AckPayload:  %s \r\n", AckPayload);
 800577a:	463b      	mov	r3, r7
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <main+0x1e0>)
 800577e:	4915      	ldr	r1, [pc, #84]	; (80057d4 <main+0x1e4>)
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fbad 	bl	8005ee0 <siprintf>
	  		  	HAL_UART_Transmit(&huart1, (uint8_t *)myDataack, strlen(myDataack), 10);
 8005786:	463b      	mov	r3, r7
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fd21 	bl	80001d0 <strlen>
 800578e:	4603      	mov	r3, r0
 8005790:	b29a      	uxth	r2, r3
 8005792:	4639      	mov	r1, r7
 8005794:	230a      	movs	r3, #10
 8005796:	4805      	ldr	r0, [pc, #20]	; (80057ac <main+0x1bc>)
 8005798:	f7fd fc7e 	bl	8003098 <HAL_UART_Transmit>
  {
 800579c:	e774      	b.n	8005688 <main+0x98>
 800579e:	bf00      	nop
 80057a0:	48000400 	.word	0x48000400
 80057a4:	200002b4 	.word	0x200002b4
 80057a8:	48000800 	.word	0x48000800
 80057ac:	20000198 	.word	0x20000198
 80057b0:	20000008 	.word	0x20000008
 80057b4:	20000218 	.word	0x20000218
 80057b8:	20000220 	.word	0x20000220
 80057bc:	08006c58 	.word	0x08006c58
 80057c0:	20000318 	.word	0x20000318
 80057c4:	08006c74 	.word	0x08006c74
 80057c8:	200003e0 	.word	0x200003e0
 80057cc:	08006ccc 	.word	0x08006ccc
 80057d0:	20000294 	.word	0x20000294
 80057d4:	08006ce8 	.word	0x08006ce8

080057d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b0b8      	sub	sp, #224	; 0xe0
 80057dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80057e2:	2244      	movs	r2, #68	; 0x44
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fb71 	bl	8005ece <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80057fc:	463b      	mov	r3, r7
 80057fe:	2288      	movs	r2, #136	; 0x88
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fb63 	bl	8005ece <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005808:	2310      	movs	r3, #16
 800580a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800580e:	2301      	movs	r3, #1
 8005810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800581a:	2360      	movs	r3, #96	; 0x60
 800581c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005820:	2302      	movs	r3, #2
 8005822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005826:	2301      	movs	r3, #1
 8005828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800582c:	2301      	movs	r3, #1
 800582e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005832:	2328      	movs	r3, #40	; 0x28
 8005834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005838:	2307      	movs	r3, #7
 800583a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800583e:	2302      	movs	r3, #2
 8005840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005844:	2302      	movs	r3, #2
 8005846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800584a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fb fac2 	bl	8000dd8 <HAL_RCC_OscConfig>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800585a:	f000 f963 	bl	8005b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800585e:	230f      	movs	r3, #15
 8005860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005864:	2303      	movs	r3, #3
 8005866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800586a:	2300      	movs	r3, #0
 800586c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005876:	2300      	movs	r3, #0
 8005878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800587c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005880:	2104      	movs	r1, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7fb fe58 	bl	8001538 <HAL_RCC_ClockConfig>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800588e:	f000 f949 	bl	8005b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005892:	2301      	movs	r3, #1
 8005894:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005896:	2300      	movs	r3, #0
 8005898:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800589a:	463b      	mov	r3, r7
 800589c:	4618      	mov	r0, r3
 800589e:	f7fc f84f 	bl	8001940 <HAL_RCCEx_PeriphCLKConfig>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80058a8:	f000 f93c 	bl	8005b24 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80058ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80058b0:	f7fb fa3c 	bl	8000d2c <HAL_PWREx_ControlVoltageScaling>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80058ba:	f000 f933 	bl	8005b24 <Error_Handler>
  }
}
 80058be:	bf00      	nop
 80058c0:	37e0      	adds	r7, #224	; 0xe0
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <MX_SPI1_Init+0x74>)
 80058ce:	4a1c      	ldr	r2, [pc, #112]	; (8005940 <MX_SPI1_Init+0x78>)
 80058d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058d2:	4b1a      	ldr	r3, [pc, #104]	; (800593c <MX_SPI1_Init+0x74>)
 80058d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80058d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80058da:	4b18      	ldr	r3, [pc, #96]	; (800593c <MX_SPI1_Init+0x74>)
 80058dc:	2200      	movs	r2, #0
 80058de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <MX_SPI1_Init+0x74>)
 80058e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80058e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <MX_SPI1_Init+0x74>)
 80058ea:	2202      	movs	r2, #2
 80058ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <MX_SPI1_Init+0x74>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <MX_SPI1_Init+0x74>)
 80058f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <MX_SPI1_Init+0x74>)
 80058fe:	2210      	movs	r2, #16
 8005900:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005902:	4b0e      	ldr	r3, [pc, #56]	; (800593c <MX_SPI1_Init+0x74>)
 8005904:	2200      	movs	r2, #0
 8005906:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <MX_SPI1_Init+0x74>)
 800590a:	2200      	movs	r2, #0
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <MX_SPI1_Init+0x74>)
 8005910:	2200      	movs	r2, #0
 8005912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <MX_SPI1_Init+0x74>)
 8005916:	2207      	movs	r2, #7
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <MX_SPI1_Init+0x74>)
 800591c:	2200      	movs	r2, #0
 800591e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005920:	4b06      	ldr	r3, [pc, #24]	; (800593c <MX_SPI1_Init+0x74>)
 8005922:	2200      	movs	r2, #0
 8005924:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005926:	4805      	ldr	r0, [pc, #20]	; (800593c <MX_SPI1_Init+0x74>)
 8005928:	f7fc fcba 	bl	80022a0 <HAL_SPI_Init>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005932:	f000 f8f7 	bl	8005b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000228 	.word	0x20000228
 8005940:	40013000 	.word	0x40013000

08005944 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <MX_SPI3_Init+0x74>)
 800594a:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <MX_SPI3_Init+0x78>)
 800594c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005954:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005958:	2200      	movs	r2, #0
 800595a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <MX_SPI3_Init+0x74>)
 800595e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005962:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005964:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005966:	2200      	movs	r2, #0
 8005968:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <MX_SPI3_Init+0x74>)
 800596c:	2200      	movs	r2, #0
 800596e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005976:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005978:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <MX_SPI3_Init+0x74>)
 800597a:	2210      	movs	r2, #16
 800597c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800597e:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005980:	2200      	movs	r2, #0
 8005982:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005986:	2200      	movs	r2, #0
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <MX_SPI3_Init+0x74>)
 800598c:	2200      	movs	r2, #0
 800598e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005992:	2207      	movs	r2, #7
 8005994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <MX_SPI3_Init+0x74>)
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800599c:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <MX_SPI3_Init+0x74>)
 800599e:	2208      	movs	r2, #8
 80059a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80059a2:	4805      	ldr	r0, [pc, #20]	; (80059b8 <MX_SPI3_Init+0x74>)
 80059a4:	f7fc fc7c 	bl	80022a0 <HAL_SPI_Init>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80059ae:	f000 f8b9 	bl	8005b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200002b4 	.word	0x200002b4
 80059bc:	40003c00 	.word	0x40003c00

080059c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80059c4:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <MX_USART1_UART_Init+0x5c>)
 80059c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80059d8:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80059de:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80059e4:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059e6:	220c      	movs	r2, #12
 80059e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005a02:	4805      	ldr	r0, [pc, #20]	; (8005a18 <MX_USART1_UART_Init+0x58>)
 8005a04:	f7fd fafa 	bl	8002ffc <HAL_UART_Init>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005a0e:	f000 f889 	bl	8005b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000198 	.word	0x20000198
 8005a1c:	40013800 	.word	0x40013800

08005a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08a      	sub	sp, #40	; 0x28
 8005a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	609a      	str	r2, [r3, #8]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	4a37      	ldr	r2, [pc, #220]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a42:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a4e:	4b32      	ldr	r3, [pc, #200]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a52:	4a31      	ldr	r2, [pc, #196]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a5a:	4b2f      	ldr	r3, [pc, #188]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a66:	4b2c      	ldr	r3, [pc, #176]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6a:	4a2b      	ldr	r2, [pc, #172]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a72:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a7e:	4b26      	ldr	r3, [pc, #152]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a84:	f043 0304 	orr.w	r3, r3, #4
 8005a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a8a:	4b23      	ldr	r3, [pc, #140]	; (8005b18 <MX_GPIO_Init+0xf8>)
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8005a96:	2200      	movs	r2, #0
 8005a98:	2110      	movs	r1, #16
 8005a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a9e:	f7fb f91f 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_RESET);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	481d      	ldr	r0, [pc, #116]	; (8005b1c <MX_GPIO_Init+0xfc>)
 8005aa8:	f7fb f91a 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_CS_Pin|nRF_CE_Pin, GPIO_PIN_RESET);
 8005aac:	2200      	movs	r2, #0
 8005aae:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005ab2:	481b      	ldr	r0, [pc, #108]	; (8005b20 <MX_GPIO_Init+0x100>)
 8005ab4:	f7fb f914 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM_CS_Pin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 8005ab8:	2310      	movs	r3, #16
 8005aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005abc:	2301      	movs	r3, #1
 8005abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	4619      	mov	r1, r3
 8005ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ad2:	f7fa ff5d 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_PWR_Pin */
  GPIO_InitStruct.Pin = nRF_PWR_Pin;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ada:	2301      	movs	r3, #1
 8005adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_PWR_GPIO_Port, &GPIO_InitStruct);
 8005ae6:	f107 0314 	add.w	r3, r7, #20
 8005aea:	4619      	mov	r1, r3
 8005aec:	480b      	ldr	r0, [pc, #44]	; (8005b1c <MX_GPIO_Init+0xfc>)
 8005aee:	f7fa ff4f 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CS_Pin nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CS_Pin|nRF_CE_Pin;
 8005af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b00:	2300      	movs	r3, #0
 8005b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4805      	ldr	r0, [pc, #20]	; (8005b20 <MX_GPIO_Init+0x100>)
 8005b0c:	f7fa ff40 	bl	8000990 <HAL_GPIO_Init>

}
 8005b10:	bf00      	nop
 8005b12:	3728      	adds	r7, #40	; 0x28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	48000400 	.word	0x48000400
 8005b20:	48000800 	.word	0x48000800

08005b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005b28:	bf00      	nop
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b3a:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <HAL_MspInit+0x44>)
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3e:	4a0e      	ldr	r2, [pc, #56]	; (8005b78 <HAL_MspInit+0x44>)
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	6613      	str	r3, [r2, #96]	; 0x60
 8005b46:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <HAL_MspInit+0x44>)
 8005b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_MspInit+0x44>)
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	4a08      	ldr	r2, [pc, #32]	; (8005b78 <HAL_MspInit+0x44>)
 8005b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_MspInit+0x44>)
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40021000 	.word	0x40021000

08005b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08c      	sub	sp, #48	; 0x30
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b84:	f107 031c 	add.w	r3, r7, #28
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a2f      	ldr	r2, [pc, #188]	; (8005c58 <HAL_SPI_MspInit+0xdc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d129      	bne.n	8005bf2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b9e:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	4a2e      	ldr	r2, [pc, #184]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8005baa:	4b2c      	ldr	r3, [pc, #176]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb6:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	4a28      	ldr	r2, [pc, #160]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bc2:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005bce:	23e0      	movs	r3, #224	; 0xe0
 8005bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005bde:	2305      	movs	r3, #5
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be2:	f107 031c 	add.w	r3, r7, #28
 8005be6:	4619      	mov	r1, r3
 8005be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bec:	f7fa fed0 	bl	8000990 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005bf0:	e02d      	b.n	8005c4e <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_SPI_MspInit+0xe4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d128      	bne.n	8005c4e <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005bfc:	4b17      	ldr	r3, [pc, #92]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	6593      	str	r3, [r2, #88]	; 0x58
 8005c08:	4b14      	ldr	r3, [pc, #80]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c18:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c20:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HAL_SPI_MspInit+0xe0>)
 8005c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2302      	movs	r3, #2
 8005c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c3e:	2306      	movs	r3, #6
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c42:	f107 031c 	add.w	r3, r7, #28
 8005c46:	4619      	mov	r1, r3
 8005c48:	4806      	ldr	r0, [pc, #24]	; (8005c64 <HAL_SPI_MspInit+0xe8>)
 8005c4a:	f7fa fea1 	bl	8000990 <HAL_GPIO_Init>
}
 8005c4e:	bf00      	nop
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40013000 	.word	0x40013000
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40003c00 	.word	0x40003c00
 8005c64:	48000800 	.word	0x48000800

08005c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <HAL_UART_MspInit+0x80>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d129      	bne.n	8005cde <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c8a:	4b18      	ldr	r3, [pc, #96]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c8e:	4a17      	ldr	r2, [pc, #92]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c94:	6613      	str	r3, [r2, #96]	; 0x60
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca2:	4b12      	ldr	r3, [pc, #72]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca6:	4a11      	ldr	r2, [pc, #68]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_UART_MspInit+0x84>)
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005cba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ccc:	2307      	movs	r3, #7
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cda:	f7fa fe59 	bl	8000990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005cde:	bf00      	nop
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40013800 	.word	0x40013800
 8005cec:	40021000 	.word	0x40021000

08005cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d02:	e7fe      	b.n	8005d02 <HardFault_Handler+0x4>

08005d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d08:	e7fe      	b.n	8005d08 <MemManage_Handler+0x4>

08005d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d0e:	e7fe      	b.n	8005d0e <BusFault_Handler+0x4>

08005d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d14:	e7fe      	b.n	8005d14 <UsageFault_Handler+0x4>

08005d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d16:	b480      	push	{r7}
 8005d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d36:	bf00      	nop
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d44:	f7fa fc6e 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d54:	4b11      	ldr	r3, [pc, #68]	; (8005d9c <_sbrk+0x50>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <_sbrk+0x16>
		heap_end = &end;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <_sbrk+0x50>)
 8005d5e:	4a10      	ldr	r2, [pc, #64]	; (8005da0 <_sbrk+0x54>)
 8005d60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <_sbrk+0x50>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005d68:	4b0c      	ldr	r3, [pc, #48]	; (8005d9c <_sbrk+0x50>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	466a      	mov	r2, sp
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d907      	bls.n	8005d86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005d76:	f000 f875 	bl	8005e64 <__errno>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005d80:	f04f 33ff 	mov.w	r3, #4294967295
 8005d84:	e006      	b.n	8005d94 <_sbrk+0x48>
	}

	heap_end += incr;
 8005d86:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <_sbrk+0x50>)
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4a03      	ldr	r2, [pc, #12]	; (8005d9c <_sbrk+0x50>)
 8005d90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005d92:	68fb      	ldr	r3, [r7, #12]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000188 	.word	0x20000188
 8005da0:	20000448 	.word	0x20000448

08005da4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005da8:	4b17      	ldr	r3, [pc, #92]	; (8005e08 <SystemInit+0x64>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	4a16      	ldr	r2, [pc, #88]	; (8005e08 <SystemInit+0x64>)
 8005db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <SystemInit+0x68>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a13      	ldr	r2, [pc, #76]	; (8005e0c <SystemInit+0x68>)
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <SystemInit+0x68>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <SystemInit+0x68>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a0f      	ldr	r2, [pc, #60]	; (8005e0c <SystemInit+0x68>)
 8005dd0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005dd4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005dd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005dda:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <SystemInit+0x68>)
 8005ddc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005de0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <SystemInit+0x68>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <SystemInit+0x68>)
 8005de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <SystemInit+0x68>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <SystemInit+0x64>)
 8005df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dfa:	609a      	str	r2, [r3, #8]
#endif
}
 8005dfc:	bf00      	nop
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	e000ed00 	.word	0xe000ed00
 8005e0c:	40021000 	.word	0x40021000

08005e10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005e14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005e16:	e003      	b.n	8005e20 <LoopCopyDataInit>

08005e18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005e1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005e1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005e1e:	3104      	adds	r1, #4

08005e20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005e20:	480b      	ldr	r0, [pc, #44]	; (8005e50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005e22:	4b0c      	ldr	r3, [pc, #48]	; (8005e54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005e24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005e26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005e28:	d3f6      	bcc.n	8005e18 <CopyDataInit>
	ldr	r2, =_sbss
 8005e2a:	4a0b      	ldr	r2, [pc, #44]	; (8005e58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005e2c:	e002      	b.n	8005e34 <LoopFillZerobss>

08005e2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005e2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005e30:	f842 3b04 	str.w	r3, [r2], #4

08005e34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005e34:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <LoopForever+0x16>)
	cmp	r2, r3
 8005e36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005e38:	d3f9      	bcc.n	8005e2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005e3a:	f7ff ffb3 	bl	8005da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e3e:	f000 f817 	bl	8005e70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e42:	f7ff fbd5 	bl	80055f0 <main>

08005e46 <LoopForever>:

LoopForever:
    b LoopForever
 8005e46:	e7fe      	b.n	8005e46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005e48:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005e4c:	08006d88 	.word	0x08006d88
	ldr	r0, =_sdata
 8005e50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005e54:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8005e58:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 8005e5c:	20000448 	.word	0x20000448

08005e60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e60:	e7fe      	b.n	8005e60 <ADC1_2_IRQHandler>
	...

08005e64 <__errno>:
 8005e64:	4b01      	ldr	r3, [pc, #4]	; (8005e6c <__errno+0x8>)
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000014 	.word	0x20000014

08005e70 <__libc_init_array>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	4e0d      	ldr	r6, [pc, #52]	; (8005ea8 <__libc_init_array+0x38>)
 8005e74:	4c0d      	ldr	r4, [pc, #52]	; (8005eac <__libc_init_array+0x3c>)
 8005e76:	1ba4      	subs	r4, r4, r6
 8005e78:	10a4      	asrs	r4, r4, #2
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	42a5      	cmp	r5, r4
 8005e7e:	d109      	bne.n	8005e94 <__libc_init_array+0x24>
 8005e80:	4e0b      	ldr	r6, [pc, #44]	; (8005eb0 <__libc_init_array+0x40>)
 8005e82:	4c0c      	ldr	r4, [pc, #48]	; (8005eb4 <__libc_init_array+0x44>)
 8005e84:	f000 fc28 	bl	80066d8 <_init>
 8005e88:	1ba4      	subs	r4, r4, r6
 8005e8a:	10a4      	asrs	r4, r4, #2
 8005e8c:	2500      	movs	r5, #0
 8005e8e:	42a5      	cmp	r5, r4
 8005e90:	d105      	bne.n	8005e9e <__libc_init_array+0x2e>
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e98:	4798      	blx	r3
 8005e9a:	3501      	adds	r5, #1
 8005e9c:	e7ee      	b.n	8005e7c <__libc_init_array+0xc>
 8005e9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ea2:	4798      	blx	r3
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	e7f2      	b.n	8005e8e <__libc_init_array+0x1e>
 8005ea8:	08006d80 	.word	0x08006d80
 8005eac:	08006d80 	.word	0x08006d80
 8005eb0:	08006d80 	.word	0x08006d80
 8005eb4:	08006d84 	.word	0x08006d84

08005eb8 <memcpy>:
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	1e43      	subs	r3, r0, #1
 8005ebc:	440a      	add	r2, r1
 8005ebe:	4291      	cmp	r1, r2
 8005ec0:	d100      	bne.n	8005ec4 <memcpy+0xc>
 8005ec2:	bd10      	pop	{r4, pc}
 8005ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ecc:	e7f7      	b.n	8005ebe <memcpy+0x6>

08005ece <memset>:
 8005ece:	4402      	add	r2, r0
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d100      	bne.n	8005ed8 <memset+0xa>
 8005ed6:	4770      	bx	lr
 8005ed8:	f803 1b01 	strb.w	r1, [r3], #1
 8005edc:	e7f9      	b.n	8005ed2 <memset+0x4>
	...

08005ee0 <siprintf>:
 8005ee0:	b40e      	push	{r1, r2, r3}
 8005ee2:	b500      	push	{lr}
 8005ee4:	b09c      	sub	sp, #112	; 0x70
 8005ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ee8:	9002      	str	r0, [sp, #8]
 8005eea:	9006      	str	r0, [sp, #24]
 8005eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ef0:	4809      	ldr	r0, [pc, #36]	; (8005f18 <siprintf+0x38>)
 8005ef2:	9107      	str	r1, [sp, #28]
 8005ef4:	9104      	str	r1, [sp, #16]
 8005ef6:	4909      	ldr	r1, [pc, #36]	; (8005f1c <siprintf+0x3c>)
 8005ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efc:	9105      	str	r1, [sp, #20]
 8005efe:	6800      	ldr	r0, [r0, #0]
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	a902      	add	r1, sp, #8
 8005f04:	f000 f866 	bl	8005fd4 <_svfiprintf_r>
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	b01c      	add	sp, #112	; 0x70
 8005f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f14:	b003      	add	sp, #12
 8005f16:	4770      	bx	lr
 8005f18:	20000014 	.word	0x20000014
 8005f1c:	ffff0208 	.word	0xffff0208

08005f20 <__ssputs_r>:
 8005f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	688e      	ldr	r6, [r1, #8]
 8005f26:	429e      	cmp	r6, r3
 8005f28:	4682      	mov	sl, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	4690      	mov	r8, r2
 8005f2e:	4699      	mov	r9, r3
 8005f30:	d837      	bhi.n	8005fa2 <__ssputs_r+0x82>
 8005f32:	898a      	ldrh	r2, [r1, #12]
 8005f34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f38:	d031      	beq.n	8005f9e <__ssputs_r+0x7e>
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	6909      	ldr	r1, [r1, #16]
 8005f3e:	1a6f      	subs	r7, r5, r1
 8005f40:	6965      	ldr	r5, [r4, #20]
 8005f42:	2302      	movs	r3, #2
 8005f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f48:	fb95 f5f3 	sdiv	r5, r5, r3
 8005f4c:	f109 0301 	add.w	r3, r9, #1
 8005f50:	443b      	add	r3, r7
 8005f52:	429d      	cmp	r5, r3
 8005f54:	bf38      	it	cc
 8005f56:	461d      	movcc	r5, r3
 8005f58:	0553      	lsls	r3, r2, #21
 8005f5a:	d530      	bpl.n	8005fbe <__ssputs_r+0x9e>
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	f000 fb21 	bl	80065a4 <_malloc_r>
 8005f62:	4606      	mov	r6, r0
 8005f64:	b950      	cbnz	r0, 8005f7c <__ssputs_r+0x5c>
 8005f66:	230c      	movs	r3, #12
 8005f68:	f8ca 3000 	str.w	r3, [sl]
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	6921      	ldr	r1, [r4, #16]
 8005f80:	f7ff ff9a 	bl	8005eb8 <memcpy>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	6126      	str	r6, [r4, #16]
 8005f92:	6165      	str	r5, [r4, #20]
 8005f94:	443e      	add	r6, r7
 8005f96:	1bed      	subs	r5, r5, r7
 8005f98:	6026      	str	r6, [r4, #0]
 8005f9a:	60a5      	str	r5, [r4, #8]
 8005f9c:	464e      	mov	r6, r9
 8005f9e:	454e      	cmp	r6, r9
 8005fa0:	d900      	bls.n	8005fa4 <__ssputs_r+0x84>
 8005fa2:	464e      	mov	r6, r9
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	f000 fa93 	bl	80064d4 <memmove>
 8005fae:	68a3      	ldr	r3, [r4, #8]
 8005fb0:	1b9b      	subs	r3, r3, r6
 8005fb2:	60a3      	str	r3, [r4, #8]
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	441e      	add	r6, r3
 8005fb8:	6026      	str	r6, [r4, #0]
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e7dc      	b.n	8005f78 <__ssputs_r+0x58>
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	f000 fb4a 	bl	8006658 <_realloc_r>
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d1e2      	bne.n	8005f90 <__ssputs_r+0x70>
 8005fca:	6921      	ldr	r1, [r4, #16]
 8005fcc:	4650      	mov	r0, sl
 8005fce:	f000 fa9b 	bl	8006508 <_free_r>
 8005fd2:	e7c8      	b.n	8005f66 <__ssputs_r+0x46>

08005fd4 <_svfiprintf_r>:
 8005fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd8:	461d      	mov	r5, r3
 8005fda:	898b      	ldrh	r3, [r1, #12]
 8005fdc:	061f      	lsls	r7, r3, #24
 8005fde:	b09d      	sub	sp, #116	; 0x74
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	d50f      	bpl.n	8006008 <_svfiprintf_r+0x34>
 8005fe8:	690b      	ldr	r3, [r1, #16]
 8005fea:	b96b      	cbnz	r3, 8006008 <_svfiprintf_r+0x34>
 8005fec:	2140      	movs	r1, #64	; 0x40
 8005fee:	f000 fad9 	bl	80065a4 <_malloc_r>
 8005ff2:	6020      	str	r0, [r4, #0]
 8005ff4:	6120      	str	r0, [r4, #16]
 8005ff6:	b928      	cbnz	r0, 8006004 <_svfiprintf_r+0x30>
 8005ff8:	230c      	movs	r3, #12
 8005ffa:	f8c8 3000 	str.w	r3, [r8]
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	e0c8      	b.n	8006196 <_svfiprintf_r+0x1c2>
 8006004:	2340      	movs	r3, #64	; 0x40
 8006006:	6163      	str	r3, [r4, #20]
 8006008:	2300      	movs	r3, #0
 800600a:	9309      	str	r3, [sp, #36]	; 0x24
 800600c:	2320      	movs	r3, #32
 800600e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006012:	2330      	movs	r3, #48	; 0x30
 8006014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006018:	9503      	str	r5, [sp, #12]
 800601a:	f04f 0b01 	mov.w	fp, #1
 800601e:	4637      	mov	r7, r6
 8006020:	463d      	mov	r5, r7
 8006022:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006026:	b10b      	cbz	r3, 800602c <_svfiprintf_r+0x58>
 8006028:	2b25      	cmp	r3, #37	; 0x25
 800602a:	d13e      	bne.n	80060aa <_svfiprintf_r+0xd6>
 800602c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006030:	d00b      	beq.n	800604a <_svfiprintf_r+0x76>
 8006032:	4653      	mov	r3, sl
 8006034:	4632      	mov	r2, r6
 8006036:	4621      	mov	r1, r4
 8006038:	4640      	mov	r0, r8
 800603a:	f7ff ff71 	bl	8005f20 <__ssputs_r>
 800603e:	3001      	adds	r0, #1
 8006040:	f000 80a4 	beq.w	800618c <_svfiprintf_r+0x1b8>
 8006044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006046:	4453      	add	r3, sl
 8006048:	9309      	str	r3, [sp, #36]	; 0x24
 800604a:	783b      	ldrb	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 809d 	beq.w	800618c <_svfiprintf_r+0x1b8>
 8006052:	2300      	movs	r3, #0
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	9307      	str	r3, [sp, #28]
 8006060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006064:	931a      	str	r3, [sp, #104]	; 0x68
 8006066:	462f      	mov	r7, r5
 8006068:	2205      	movs	r2, #5
 800606a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800606e:	4850      	ldr	r0, [pc, #320]	; (80061b0 <_svfiprintf_r+0x1dc>)
 8006070:	f7fa f8b6 	bl	80001e0 <memchr>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	b9d0      	cbnz	r0, 80060ae <_svfiprintf_r+0xda>
 8006078:	06d9      	lsls	r1, r3, #27
 800607a:	bf44      	itt	mi
 800607c:	2220      	movmi	r2, #32
 800607e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006082:	071a      	lsls	r2, r3, #28
 8006084:	bf44      	itt	mi
 8006086:	222b      	movmi	r2, #43	; 0x2b
 8006088:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800608c:	782a      	ldrb	r2, [r5, #0]
 800608e:	2a2a      	cmp	r2, #42	; 0x2a
 8006090:	d015      	beq.n	80060be <_svfiprintf_r+0xea>
 8006092:	9a07      	ldr	r2, [sp, #28]
 8006094:	462f      	mov	r7, r5
 8006096:	2000      	movs	r0, #0
 8006098:	250a      	movs	r5, #10
 800609a:	4639      	mov	r1, r7
 800609c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060a0:	3b30      	subs	r3, #48	; 0x30
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d94d      	bls.n	8006142 <_svfiprintf_r+0x16e>
 80060a6:	b1b8      	cbz	r0, 80060d8 <_svfiprintf_r+0x104>
 80060a8:	e00f      	b.n	80060ca <_svfiprintf_r+0xf6>
 80060aa:	462f      	mov	r7, r5
 80060ac:	e7b8      	b.n	8006020 <_svfiprintf_r+0x4c>
 80060ae:	4a40      	ldr	r2, [pc, #256]	; (80061b0 <_svfiprintf_r+0x1dc>)
 80060b0:	1a80      	subs	r0, r0, r2
 80060b2:	fa0b f000 	lsl.w	r0, fp, r0
 80060b6:	4318      	orrs	r0, r3
 80060b8:	9004      	str	r0, [sp, #16]
 80060ba:	463d      	mov	r5, r7
 80060bc:	e7d3      	b.n	8006066 <_svfiprintf_r+0x92>
 80060be:	9a03      	ldr	r2, [sp, #12]
 80060c0:	1d11      	adds	r1, r2, #4
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	9103      	str	r1, [sp, #12]
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	db01      	blt.n	80060ce <_svfiprintf_r+0xfa>
 80060ca:	9207      	str	r2, [sp, #28]
 80060cc:	e004      	b.n	80060d8 <_svfiprintf_r+0x104>
 80060ce:	4252      	negs	r2, r2
 80060d0:	f043 0302 	orr.w	r3, r3, #2
 80060d4:	9207      	str	r2, [sp, #28]
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	783b      	ldrb	r3, [r7, #0]
 80060da:	2b2e      	cmp	r3, #46	; 0x2e
 80060dc:	d10c      	bne.n	80060f8 <_svfiprintf_r+0x124>
 80060de:	787b      	ldrb	r3, [r7, #1]
 80060e0:	2b2a      	cmp	r3, #42	; 0x2a
 80060e2:	d133      	bne.n	800614c <_svfiprintf_r+0x178>
 80060e4:	9b03      	ldr	r3, [sp, #12]
 80060e6:	1d1a      	adds	r2, r3, #4
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	9203      	str	r2, [sp, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bfb8      	it	lt
 80060f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060f4:	3702      	adds	r7, #2
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	4d2e      	ldr	r5, [pc, #184]	; (80061b4 <_svfiprintf_r+0x1e0>)
 80060fa:	7839      	ldrb	r1, [r7, #0]
 80060fc:	2203      	movs	r2, #3
 80060fe:	4628      	mov	r0, r5
 8006100:	f7fa f86e 	bl	80001e0 <memchr>
 8006104:	b138      	cbz	r0, 8006116 <_svfiprintf_r+0x142>
 8006106:	2340      	movs	r3, #64	; 0x40
 8006108:	1b40      	subs	r0, r0, r5
 800610a:	fa03 f000 	lsl.w	r0, r3, r0
 800610e:	9b04      	ldr	r3, [sp, #16]
 8006110:	4303      	orrs	r3, r0
 8006112:	3701      	adds	r7, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	7839      	ldrb	r1, [r7, #0]
 8006118:	4827      	ldr	r0, [pc, #156]	; (80061b8 <_svfiprintf_r+0x1e4>)
 800611a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800611e:	2206      	movs	r2, #6
 8006120:	1c7e      	adds	r6, r7, #1
 8006122:	f7fa f85d 	bl	80001e0 <memchr>
 8006126:	2800      	cmp	r0, #0
 8006128:	d038      	beq.n	800619c <_svfiprintf_r+0x1c8>
 800612a:	4b24      	ldr	r3, [pc, #144]	; (80061bc <_svfiprintf_r+0x1e8>)
 800612c:	bb13      	cbnz	r3, 8006174 <_svfiprintf_r+0x1a0>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	3307      	adds	r3, #7
 8006132:	f023 0307 	bic.w	r3, r3, #7
 8006136:	3308      	adds	r3, #8
 8006138:	9303      	str	r3, [sp, #12]
 800613a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613c:	444b      	add	r3, r9
 800613e:	9309      	str	r3, [sp, #36]	; 0x24
 8006140:	e76d      	b.n	800601e <_svfiprintf_r+0x4a>
 8006142:	fb05 3202 	mla	r2, r5, r2, r3
 8006146:	2001      	movs	r0, #1
 8006148:	460f      	mov	r7, r1
 800614a:	e7a6      	b.n	800609a <_svfiprintf_r+0xc6>
 800614c:	2300      	movs	r3, #0
 800614e:	3701      	adds	r7, #1
 8006150:	9305      	str	r3, [sp, #20]
 8006152:	4619      	mov	r1, r3
 8006154:	250a      	movs	r5, #10
 8006156:	4638      	mov	r0, r7
 8006158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800615c:	3a30      	subs	r2, #48	; 0x30
 800615e:	2a09      	cmp	r2, #9
 8006160:	d903      	bls.n	800616a <_svfiprintf_r+0x196>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0c8      	beq.n	80060f8 <_svfiprintf_r+0x124>
 8006166:	9105      	str	r1, [sp, #20]
 8006168:	e7c6      	b.n	80060f8 <_svfiprintf_r+0x124>
 800616a:	fb05 2101 	mla	r1, r5, r1, r2
 800616e:	2301      	movs	r3, #1
 8006170:	4607      	mov	r7, r0
 8006172:	e7f0      	b.n	8006156 <_svfiprintf_r+0x182>
 8006174:	ab03      	add	r3, sp, #12
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	4622      	mov	r2, r4
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <_svfiprintf_r+0x1ec>)
 800617c:	a904      	add	r1, sp, #16
 800617e:	4640      	mov	r0, r8
 8006180:	f3af 8000 	nop.w
 8006184:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006188:	4681      	mov	r9, r0
 800618a:	d1d6      	bne.n	800613a <_svfiprintf_r+0x166>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	065b      	lsls	r3, r3, #25
 8006190:	f53f af35 	bmi.w	8005ffe <_svfiprintf_r+0x2a>
 8006194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006196:	b01d      	add	sp, #116	; 0x74
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	ab03      	add	r3, sp, #12
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4622      	mov	r2, r4
 80061a2:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <_svfiprintf_r+0x1ec>)
 80061a4:	a904      	add	r1, sp, #16
 80061a6:	4640      	mov	r0, r8
 80061a8:	f000 f882 	bl	80062b0 <_printf_i>
 80061ac:	e7ea      	b.n	8006184 <_svfiprintf_r+0x1b0>
 80061ae:	bf00      	nop
 80061b0:	08006d44 	.word	0x08006d44
 80061b4:	08006d4a 	.word	0x08006d4a
 80061b8:	08006d4e 	.word	0x08006d4e
 80061bc:	00000000 	.word	0x00000000
 80061c0:	08005f21 	.word	0x08005f21

080061c4 <_printf_common>:
 80061c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	4691      	mov	r9, r2
 80061ca:	461f      	mov	r7, r3
 80061cc:	688a      	ldr	r2, [r1, #8]
 80061ce:	690b      	ldr	r3, [r1, #16]
 80061d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bfb8      	it	lt
 80061d8:	4613      	movlt	r3, r2
 80061da:	f8c9 3000 	str.w	r3, [r9]
 80061de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e2:	4606      	mov	r6, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	b112      	cbz	r2, 80061ee <_printf_common+0x2a>
 80061e8:	3301      	adds	r3, #1
 80061ea:	f8c9 3000 	str.w	r3, [r9]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	0699      	lsls	r1, r3, #26
 80061f2:	bf42      	ittt	mi
 80061f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061f8:	3302      	addmi	r3, #2
 80061fa:	f8c9 3000 	strmi.w	r3, [r9]
 80061fe:	6825      	ldr	r5, [r4, #0]
 8006200:	f015 0506 	ands.w	r5, r5, #6
 8006204:	d107      	bne.n	8006216 <_printf_common+0x52>
 8006206:	f104 0a19 	add.w	sl, r4, #25
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	f8d9 2000 	ldr.w	r2, [r9]
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	42ab      	cmp	r3, r5
 8006214:	dc28      	bgt.n	8006268 <_printf_common+0xa4>
 8006216:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	3300      	adds	r3, #0
 800621e:	bf18      	it	ne
 8006220:	2301      	movne	r3, #1
 8006222:	0692      	lsls	r2, r2, #26
 8006224:	d42d      	bmi.n	8006282 <_printf_common+0xbe>
 8006226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800622a:	4639      	mov	r1, r7
 800622c:	4630      	mov	r0, r6
 800622e:	47c0      	blx	r8
 8006230:	3001      	adds	r0, #1
 8006232:	d020      	beq.n	8006276 <_printf_common+0xb2>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	68e5      	ldr	r5, [r4, #12]
 8006238:	f8d9 2000 	ldr.w	r2, [r9]
 800623c:	f003 0306 	and.w	r3, r3, #6
 8006240:	2b04      	cmp	r3, #4
 8006242:	bf08      	it	eq
 8006244:	1aad      	subeq	r5, r5, r2
 8006246:	68a3      	ldr	r3, [r4, #8]
 8006248:	6922      	ldr	r2, [r4, #16]
 800624a:	bf0c      	ite	eq
 800624c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006250:	2500      	movne	r5, #0
 8006252:	4293      	cmp	r3, r2
 8006254:	bfc4      	itt	gt
 8006256:	1a9b      	subgt	r3, r3, r2
 8006258:	18ed      	addgt	r5, r5, r3
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	341a      	adds	r4, #26
 8006260:	454d      	cmp	r5, r9
 8006262:	d11a      	bne.n	800629a <_printf_common+0xd6>
 8006264:	2000      	movs	r0, #0
 8006266:	e008      	b.n	800627a <_printf_common+0xb6>
 8006268:	2301      	movs	r3, #1
 800626a:	4652      	mov	r2, sl
 800626c:	4639      	mov	r1, r7
 800626e:	4630      	mov	r0, r6
 8006270:	47c0      	blx	r8
 8006272:	3001      	adds	r0, #1
 8006274:	d103      	bne.n	800627e <_printf_common+0xba>
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800627e:	3501      	adds	r5, #1
 8006280:	e7c3      	b.n	800620a <_printf_common+0x46>
 8006282:	18e1      	adds	r1, r4, r3
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	2030      	movs	r0, #48	; 0x30
 8006288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800628c:	4422      	add	r2, r4
 800628e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006292:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006296:	3302      	adds	r3, #2
 8006298:	e7c5      	b.n	8006226 <_printf_common+0x62>
 800629a:	2301      	movs	r3, #1
 800629c:	4622      	mov	r2, r4
 800629e:	4639      	mov	r1, r7
 80062a0:	4630      	mov	r0, r6
 80062a2:	47c0      	blx	r8
 80062a4:	3001      	adds	r0, #1
 80062a6:	d0e6      	beq.n	8006276 <_printf_common+0xb2>
 80062a8:	f109 0901 	add.w	r9, r9, #1
 80062ac:	e7d8      	b.n	8006260 <_printf_common+0x9c>
	...

080062b0 <_printf_i>:
 80062b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062b8:	460c      	mov	r4, r1
 80062ba:	7e09      	ldrb	r1, [r1, #24]
 80062bc:	b085      	sub	sp, #20
 80062be:	296e      	cmp	r1, #110	; 0x6e
 80062c0:	4617      	mov	r7, r2
 80062c2:	4606      	mov	r6, r0
 80062c4:	4698      	mov	r8, r3
 80062c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062c8:	f000 80b3 	beq.w	8006432 <_printf_i+0x182>
 80062cc:	d822      	bhi.n	8006314 <_printf_i+0x64>
 80062ce:	2963      	cmp	r1, #99	; 0x63
 80062d0:	d036      	beq.n	8006340 <_printf_i+0x90>
 80062d2:	d80a      	bhi.n	80062ea <_printf_i+0x3a>
 80062d4:	2900      	cmp	r1, #0
 80062d6:	f000 80b9 	beq.w	800644c <_printf_i+0x19c>
 80062da:	2958      	cmp	r1, #88	; 0x58
 80062dc:	f000 8083 	beq.w	80063e6 <_printf_i+0x136>
 80062e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062e8:	e032      	b.n	8006350 <_printf_i+0xa0>
 80062ea:	2964      	cmp	r1, #100	; 0x64
 80062ec:	d001      	beq.n	80062f2 <_printf_i+0x42>
 80062ee:	2969      	cmp	r1, #105	; 0x69
 80062f0:	d1f6      	bne.n	80062e0 <_printf_i+0x30>
 80062f2:	6820      	ldr	r0, [r4, #0]
 80062f4:	6813      	ldr	r3, [r2, #0]
 80062f6:	0605      	lsls	r5, r0, #24
 80062f8:	f103 0104 	add.w	r1, r3, #4
 80062fc:	d52a      	bpl.n	8006354 <_printf_i+0xa4>
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	da03      	bge.n	800630e <_printf_i+0x5e>
 8006306:	222d      	movs	r2, #45	; 0x2d
 8006308:	425b      	negs	r3, r3
 800630a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800630e:	486f      	ldr	r0, [pc, #444]	; (80064cc <_printf_i+0x21c>)
 8006310:	220a      	movs	r2, #10
 8006312:	e039      	b.n	8006388 <_printf_i+0xd8>
 8006314:	2973      	cmp	r1, #115	; 0x73
 8006316:	f000 809d 	beq.w	8006454 <_printf_i+0x1a4>
 800631a:	d808      	bhi.n	800632e <_printf_i+0x7e>
 800631c:	296f      	cmp	r1, #111	; 0x6f
 800631e:	d020      	beq.n	8006362 <_printf_i+0xb2>
 8006320:	2970      	cmp	r1, #112	; 0x70
 8006322:	d1dd      	bne.n	80062e0 <_printf_i+0x30>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	f043 0320 	orr.w	r3, r3, #32
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	e003      	b.n	8006336 <_printf_i+0x86>
 800632e:	2975      	cmp	r1, #117	; 0x75
 8006330:	d017      	beq.n	8006362 <_printf_i+0xb2>
 8006332:	2978      	cmp	r1, #120	; 0x78
 8006334:	d1d4      	bne.n	80062e0 <_printf_i+0x30>
 8006336:	2378      	movs	r3, #120	; 0x78
 8006338:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800633c:	4864      	ldr	r0, [pc, #400]	; (80064d0 <_printf_i+0x220>)
 800633e:	e055      	b.n	80063ec <_printf_i+0x13c>
 8006340:	6813      	ldr	r3, [r2, #0]
 8006342:	1d19      	adds	r1, r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6011      	str	r1, [r2, #0]
 8006348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006350:	2301      	movs	r3, #1
 8006352:	e08c      	b.n	800646e <_printf_i+0x1be>
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6011      	str	r1, [r2, #0]
 8006358:	f010 0f40 	tst.w	r0, #64	; 0x40
 800635c:	bf18      	it	ne
 800635e:	b21b      	sxthne	r3, r3
 8006360:	e7cf      	b.n	8006302 <_printf_i+0x52>
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	6825      	ldr	r5, [r4, #0]
 8006366:	1d18      	adds	r0, r3, #4
 8006368:	6010      	str	r0, [r2, #0]
 800636a:	0628      	lsls	r0, r5, #24
 800636c:	d501      	bpl.n	8006372 <_printf_i+0xc2>
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0xc8>
 8006372:	0668      	lsls	r0, r5, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0xbe>
 8006376:	881b      	ldrh	r3, [r3, #0]
 8006378:	4854      	ldr	r0, [pc, #336]	; (80064cc <_printf_i+0x21c>)
 800637a:	296f      	cmp	r1, #111	; 0x6f
 800637c:	bf14      	ite	ne
 800637e:	220a      	movne	r2, #10
 8006380:	2208      	moveq	r2, #8
 8006382:	2100      	movs	r1, #0
 8006384:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006388:	6865      	ldr	r5, [r4, #4]
 800638a:	60a5      	str	r5, [r4, #8]
 800638c:	2d00      	cmp	r5, #0
 800638e:	f2c0 8095 	blt.w	80064bc <_printf_i+0x20c>
 8006392:	6821      	ldr	r1, [r4, #0]
 8006394:	f021 0104 	bic.w	r1, r1, #4
 8006398:	6021      	str	r1, [r4, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d13d      	bne.n	800641a <_printf_i+0x16a>
 800639e:	2d00      	cmp	r5, #0
 80063a0:	f040 808e 	bne.w	80064c0 <_printf_i+0x210>
 80063a4:	4665      	mov	r5, ip
 80063a6:	2a08      	cmp	r2, #8
 80063a8:	d10b      	bne.n	80063c2 <_printf_i+0x112>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	07db      	lsls	r3, r3, #31
 80063ae:	d508      	bpl.n	80063c2 <_printf_i+0x112>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	6862      	ldr	r2, [r4, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bfde      	ittt	le
 80063b8:	2330      	movle	r3, #48	; 0x30
 80063ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063c2:	ebac 0305 	sub.w	r3, ip, r5
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	f8cd 8000 	str.w	r8, [sp]
 80063cc:	463b      	mov	r3, r7
 80063ce:	aa03      	add	r2, sp, #12
 80063d0:	4621      	mov	r1, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff fef6 	bl	80061c4 <_printf_common>
 80063d8:	3001      	adds	r0, #1
 80063da:	d14d      	bne.n	8006478 <_printf_i+0x1c8>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	b005      	add	sp, #20
 80063e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063e6:	4839      	ldr	r0, [pc, #228]	; (80064cc <_printf_i+0x21c>)
 80063e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063ec:	6813      	ldr	r3, [r2, #0]
 80063ee:	6821      	ldr	r1, [r4, #0]
 80063f0:	1d1d      	adds	r5, r3, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6015      	str	r5, [r2, #0]
 80063f6:	060a      	lsls	r2, r1, #24
 80063f8:	d50b      	bpl.n	8006412 <_printf_i+0x162>
 80063fa:	07ca      	lsls	r2, r1, #31
 80063fc:	bf44      	itt	mi
 80063fe:	f041 0120 	orrmi.w	r1, r1, #32
 8006402:	6021      	strmi	r1, [r4, #0]
 8006404:	b91b      	cbnz	r3, 800640e <_printf_i+0x15e>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	f022 0220 	bic.w	r2, r2, #32
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	e7b7      	b.n	8006382 <_printf_i+0xd2>
 8006412:	064d      	lsls	r5, r1, #25
 8006414:	bf48      	it	mi
 8006416:	b29b      	uxthmi	r3, r3
 8006418:	e7ef      	b.n	80063fa <_printf_i+0x14a>
 800641a:	4665      	mov	r5, ip
 800641c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006420:	fb02 3311 	mls	r3, r2, r1, r3
 8006424:	5cc3      	ldrb	r3, [r0, r3]
 8006426:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800642a:	460b      	mov	r3, r1
 800642c:	2900      	cmp	r1, #0
 800642e:	d1f5      	bne.n	800641c <_printf_i+0x16c>
 8006430:	e7b9      	b.n	80063a6 <_printf_i+0xf6>
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	6825      	ldr	r5, [r4, #0]
 8006436:	6961      	ldr	r1, [r4, #20]
 8006438:	1d18      	adds	r0, r3, #4
 800643a:	6010      	str	r0, [r2, #0]
 800643c:	0628      	lsls	r0, r5, #24
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	d501      	bpl.n	8006446 <_printf_i+0x196>
 8006442:	6019      	str	r1, [r3, #0]
 8006444:	e002      	b.n	800644c <_printf_i+0x19c>
 8006446:	066a      	lsls	r2, r5, #25
 8006448:	d5fb      	bpl.n	8006442 <_printf_i+0x192>
 800644a:	8019      	strh	r1, [r3, #0]
 800644c:	2300      	movs	r3, #0
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	4665      	mov	r5, ip
 8006452:	e7b9      	b.n	80063c8 <_printf_i+0x118>
 8006454:	6813      	ldr	r3, [r2, #0]
 8006456:	1d19      	adds	r1, r3, #4
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	681d      	ldr	r5, [r3, #0]
 800645c:	6862      	ldr	r2, [r4, #4]
 800645e:	2100      	movs	r1, #0
 8006460:	4628      	mov	r0, r5
 8006462:	f7f9 febd 	bl	80001e0 <memchr>
 8006466:	b108      	cbz	r0, 800646c <_printf_i+0x1bc>
 8006468:	1b40      	subs	r0, r0, r5
 800646a:	6060      	str	r0, [r4, #4]
 800646c:	6863      	ldr	r3, [r4, #4]
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	2300      	movs	r3, #0
 8006472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006476:	e7a7      	b.n	80063c8 <_printf_i+0x118>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	462a      	mov	r2, r5
 800647c:	4639      	mov	r1, r7
 800647e:	4630      	mov	r0, r6
 8006480:	47c0      	blx	r8
 8006482:	3001      	adds	r0, #1
 8006484:	d0aa      	beq.n	80063dc <_printf_i+0x12c>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	079b      	lsls	r3, r3, #30
 800648a:	d413      	bmi.n	80064b4 <_printf_i+0x204>
 800648c:	68e0      	ldr	r0, [r4, #12]
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	4298      	cmp	r0, r3
 8006492:	bfb8      	it	lt
 8006494:	4618      	movlt	r0, r3
 8006496:	e7a3      	b.n	80063e0 <_printf_i+0x130>
 8006498:	2301      	movs	r3, #1
 800649a:	464a      	mov	r2, r9
 800649c:	4639      	mov	r1, r7
 800649e:	4630      	mov	r0, r6
 80064a0:	47c0      	blx	r8
 80064a2:	3001      	adds	r0, #1
 80064a4:	d09a      	beq.n	80063dc <_printf_i+0x12c>
 80064a6:	3501      	adds	r5, #1
 80064a8:	68e3      	ldr	r3, [r4, #12]
 80064aa:	9a03      	ldr	r2, [sp, #12]
 80064ac:	1a9b      	subs	r3, r3, r2
 80064ae:	42ab      	cmp	r3, r5
 80064b0:	dcf2      	bgt.n	8006498 <_printf_i+0x1e8>
 80064b2:	e7eb      	b.n	800648c <_printf_i+0x1dc>
 80064b4:	2500      	movs	r5, #0
 80064b6:	f104 0919 	add.w	r9, r4, #25
 80064ba:	e7f5      	b.n	80064a8 <_printf_i+0x1f8>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ac      	bne.n	800641a <_printf_i+0x16a>
 80064c0:	7803      	ldrb	r3, [r0, #0]
 80064c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ca:	e76c      	b.n	80063a6 <_printf_i+0xf6>
 80064cc:	08006d55 	.word	0x08006d55
 80064d0:	08006d66 	.word	0x08006d66

080064d4 <memmove>:
 80064d4:	4288      	cmp	r0, r1
 80064d6:	b510      	push	{r4, lr}
 80064d8:	eb01 0302 	add.w	r3, r1, r2
 80064dc:	d807      	bhi.n	80064ee <memmove+0x1a>
 80064de:	1e42      	subs	r2, r0, #1
 80064e0:	4299      	cmp	r1, r3
 80064e2:	d00a      	beq.n	80064fa <memmove+0x26>
 80064e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80064ec:	e7f8      	b.n	80064e0 <memmove+0xc>
 80064ee:	4283      	cmp	r3, r0
 80064f0:	d9f5      	bls.n	80064de <memmove+0xa>
 80064f2:	1881      	adds	r1, r0, r2
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	42d3      	cmn	r3, r2
 80064f8:	d100      	bne.n	80064fc <memmove+0x28>
 80064fa:	bd10      	pop	{r4, pc}
 80064fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006500:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006504:	e7f7      	b.n	80064f6 <memmove+0x22>
	...

08006508 <_free_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	4605      	mov	r5, r0
 800650c:	2900      	cmp	r1, #0
 800650e:	d045      	beq.n	800659c <_free_r+0x94>
 8006510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006514:	1f0c      	subs	r4, r1, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	bfb8      	it	lt
 800651a:	18e4      	addlt	r4, r4, r3
 800651c:	f000 f8d2 	bl	80066c4 <__malloc_lock>
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <_free_r+0x98>)
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	4610      	mov	r0, r2
 8006526:	b933      	cbnz	r3, 8006536 <_free_r+0x2e>
 8006528:	6063      	str	r3, [r4, #4]
 800652a:	6014      	str	r4, [r2, #0]
 800652c:	4628      	mov	r0, r5
 800652e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006532:	f000 b8c8 	b.w	80066c6 <__malloc_unlock>
 8006536:	42a3      	cmp	r3, r4
 8006538:	d90c      	bls.n	8006554 <_free_r+0x4c>
 800653a:	6821      	ldr	r1, [r4, #0]
 800653c:	1862      	adds	r2, r4, r1
 800653e:	4293      	cmp	r3, r2
 8006540:	bf04      	itt	eq
 8006542:	681a      	ldreq	r2, [r3, #0]
 8006544:	685b      	ldreq	r3, [r3, #4]
 8006546:	6063      	str	r3, [r4, #4]
 8006548:	bf04      	itt	eq
 800654a:	1852      	addeq	r2, r2, r1
 800654c:	6022      	streq	r2, [r4, #0]
 800654e:	6004      	str	r4, [r0, #0]
 8006550:	e7ec      	b.n	800652c <_free_r+0x24>
 8006552:	4613      	mov	r3, r2
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	b10a      	cbz	r2, 800655c <_free_r+0x54>
 8006558:	42a2      	cmp	r2, r4
 800655a:	d9fa      	bls.n	8006552 <_free_r+0x4a>
 800655c:	6819      	ldr	r1, [r3, #0]
 800655e:	1858      	adds	r0, r3, r1
 8006560:	42a0      	cmp	r0, r4
 8006562:	d10b      	bne.n	800657c <_free_r+0x74>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	4401      	add	r1, r0
 8006568:	1858      	adds	r0, r3, r1
 800656a:	4282      	cmp	r2, r0
 800656c:	6019      	str	r1, [r3, #0]
 800656e:	d1dd      	bne.n	800652c <_free_r+0x24>
 8006570:	6810      	ldr	r0, [r2, #0]
 8006572:	6852      	ldr	r2, [r2, #4]
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	4401      	add	r1, r0
 8006578:	6019      	str	r1, [r3, #0]
 800657a:	e7d7      	b.n	800652c <_free_r+0x24>
 800657c:	d902      	bls.n	8006584 <_free_r+0x7c>
 800657e:	230c      	movs	r3, #12
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	e7d3      	b.n	800652c <_free_r+0x24>
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	1821      	adds	r1, r4, r0
 8006588:	428a      	cmp	r2, r1
 800658a:	bf04      	itt	eq
 800658c:	6811      	ldreq	r1, [r2, #0]
 800658e:	6852      	ldreq	r2, [r2, #4]
 8006590:	6062      	str	r2, [r4, #4]
 8006592:	bf04      	itt	eq
 8006594:	1809      	addeq	r1, r1, r0
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	605c      	str	r4, [r3, #4]
 800659a:	e7c7      	b.n	800652c <_free_r+0x24>
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	2000018c 	.word	0x2000018c

080065a4 <_malloc_r>:
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	1ccd      	adds	r5, r1, #3
 80065a8:	f025 0503 	bic.w	r5, r5, #3
 80065ac:	3508      	adds	r5, #8
 80065ae:	2d0c      	cmp	r5, #12
 80065b0:	bf38      	it	cc
 80065b2:	250c      	movcc	r5, #12
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	4606      	mov	r6, r0
 80065b8:	db01      	blt.n	80065be <_malloc_r+0x1a>
 80065ba:	42a9      	cmp	r1, r5
 80065bc:	d903      	bls.n	80065c6 <_malloc_r+0x22>
 80065be:	230c      	movs	r3, #12
 80065c0:	6033      	str	r3, [r6, #0]
 80065c2:	2000      	movs	r0, #0
 80065c4:	bd70      	pop	{r4, r5, r6, pc}
 80065c6:	f000 f87d 	bl	80066c4 <__malloc_lock>
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <_malloc_r+0xac>)
 80065cc:	6814      	ldr	r4, [r2, #0]
 80065ce:	4621      	mov	r1, r4
 80065d0:	b991      	cbnz	r1, 80065f8 <_malloc_r+0x54>
 80065d2:	4c20      	ldr	r4, [pc, #128]	; (8006654 <_malloc_r+0xb0>)
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	b91b      	cbnz	r3, 80065e0 <_malloc_r+0x3c>
 80065d8:	4630      	mov	r0, r6
 80065da:	f000 f863 	bl	80066a4 <_sbrk_r>
 80065de:	6020      	str	r0, [r4, #0]
 80065e0:	4629      	mov	r1, r5
 80065e2:	4630      	mov	r0, r6
 80065e4:	f000 f85e 	bl	80066a4 <_sbrk_r>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d124      	bne.n	8006636 <_malloc_r+0x92>
 80065ec:	230c      	movs	r3, #12
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f868 	bl	80066c6 <__malloc_unlock>
 80065f6:	e7e4      	b.n	80065c2 <_malloc_r+0x1e>
 80065f8:	680b      	ldr	r3, [r1, #0]
 80065fa:	1b5b      	subs	r3, r3, r5
 80065fc:	d418      	bmi.n	8006630 <_malloc_r+0x8c>
 80065fe:	2b0b      	cmp	r3, #11
 8006600:	d90f      	bls.n	8006622 <_malloc_r+0x7e>
 8006602:	600b      	str	r3, [r1, #0]
 8006604:	50cd      	str	r5, [r1, r3]
 8006606:	18cc      	adds	r4, r1, r3
 8006608:	4630      	mov	r0, r6
 800660a:	f000 f85c 	bl	80066c6 <__malloc_unlock>
 800660e:	f104 000b 	add.w	r0, r4, #11
 8006612:	1d23      	adds	r3, r4, #4
 8006614:	f020 0007 	bic.w	r0, r0, #7
 8006618:	1ac3      	subs	r3, r0, r3
 800661a:	d0d3      	beq.n	80065c4 <_malloc_r+0x20>
 800661c:	425a      	negs	r2, r3
 800661e:	50e2      	str	r2, [r4, r3]
 8006620:	e7d0      	b.n	80065c4 <_malloc_r+0x20>
 8006622:	428c      	cmp	r4, r1
 8006624:	684b      	ldr	r3, [r1, #4]
 8006626:	bf16      	itet	ne
 8006628:	6063      	strne	r3, [r4, #4]
 800662a:	6013      	streq	r3, [r2, #0]
 800662c:	460c      	movne	r4, r1
 800662e:	e7eb      	b.n	8006608 <_malloc_r+0x64>
 8006630:	460c      	mov	r4, r1
 8006632:	6849      	ldr	r1, [r1, #4]
 8006634:	e7cc      	b.n	80065d0 <_malloc_r+0x2c>
 8006636:	1cc4      	adds	r4, r0, #3
 8006638:	f024 0403 	bic.w	r4, r4, #3
 800663c:	42a0      	cmp	r0, r4
 800663e:	d005      	beq.n	800664c <_malloc_r+0xa8>
 8006640:	1a21      	subs	r1, r4, r0
 8006642:	4630      	mov	r0, r6
 8006644:	f000 f82e 	bl	80066a4 <_sbrk_r>
 8006648:	3001      	adds	r0, #1
 800664a:	d0cf      	beq.n	80065ec <_malloc_r+0x48>
 800664c:	6025      	str	r5, [r4, #0]
 800664e:	e7db      	b.n	8006608 <_malloc_r+0x64>
 8006650:	2000018c 	.word	0x2000018c
 8006654:	20000190 	.word	0x20000190

08006658 <_realloc_r>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	4607      	mov	r7, r0
 800665c:	4614      	mov	r4, r2
 800665e:	460e      	mov	r6, r1
 8006660:	b921      	cbnz	r1, 800666c <_realloc_r+0x14>
 8006662:	4611      	mov	r1, r2
 8006664:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006668:	f7ff bf9c 	b.w	80065a4 <_malloc_r>
 800666c:	b922      	cbnz	r2, 8006678 <_realloc_r+0x20>
 800666e:	f7ff ff4b 	bl	8006508 <_free_r>
 8006672:	4625      	mov	r5, r4
 8006674:	4628      	mov	r0, r5
 8006676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006678:	f000 f826 	bl	80066c8 <_malloc_usable_size_r>
 800667c:	42a0      	cmp	r0, r4
 800667e:	d20f      	bcs.n	80066a0 <_realloc_r+0x48>
 8006680:	4621      	mov	r1, r4
 8006682:	4638      	mov	r0, r7
 8006684:	f7ff ff8e 	bl	80065a4 <_malloc_r>
 8006688:	4605      	mov	r5, r0
 800668a:	2800      	cmp	r0, #0
 800668c:	d0f2      	beq.n	8006674 <_realloc_r+0x1c>
 800668e:	4631      	mov	r1, r6
 8006690:	4622      	mov	r2, r4
 8006692:	f7ff fc11 	bl	8005eb8 <memcpy>
 8006696:	4631      	mov	r1, r6
 8006698:	4638      	mov	r0, r7
 800669a:	f7ff ff35 	bl	8006508 <_free_r>
 800669e:	e7e9      	b.n	8006674 <_realloc_r+0x1c>
 80066a0:	4635      	mov	r5, r6
 80066a2:	e7e7      	b.n	8006674 <_realloc_r+0x1c>

080066a4 <_sbrk_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	4c06      	ldr	r4, [pc, #24]	; (80066c0 <_sbrk_r+0x1c>)
 80066a8:	2300      	movs	r3, #0
 80066aa:	4605      	mov	r5, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	f7ff fb4c 	bl	8005d4c <_sbrk>
 80066b4:	1c43      	adds	r3, r0, #1
 80066b6:	d102      	bne.n	80066be <_sbrk_r+0x1a>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	b103      	cbz	r3, 80066be <_sbrk_r+0x1a>
 80066bc:	602b      	str	r3, [r5, #0]
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	20000444 	.word	0x20000444

080066c4 <__malloc_lock>:
 80066c4:	4770      	bx	lr

080066c6 <__malloc_unlock>:
 80066c6:	4770      	bx	lr

080066c8 <_malloc_usable_size_r>:
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f18      	subs	r0, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfbc      	itt	lt
 80066d2:	580b      	ldrlt	r3, [r1, r0]
 80066d4:	18c0      	addlt	r0, r0, r3
 80066d6:	4770      	bx	lr

080066d8 <_init>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr

080066e4 <_fini>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr
