
mHealth_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e8  080083e8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080083e8  080083e8  000183e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f0  080083f0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f0  080083f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083f4  080083f4  000183f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080083f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000084  0800847c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  0800847c  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b7  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f2  00000000  00000000  0003496b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  000382b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000276c8  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8e4  00000000  00000000  000609a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eda9a  00000000  00000000  0006e284  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bd1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb8  00000000  00000000  0015bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d3c 	.word	0x08007d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007d3c 	.word	0x08007d3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b972 	b.w	8000e08 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9e08      	ldr	r6, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	4688      	mov	r8, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14b      	bne.n	8000be2 <__udivmoddi4+0xa6>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4615      	mov	r5, r2
 8000b4e:	d967      	bls.n	8000c20 <__udivmoddi4+0xe4>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0720 	rsb	r7, r2, #32
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b62:	4095      	lsls	r5, r2
 8000b64:	ea47 0803 	orr.w	r8, r7, r3
 8000b68:	4094      	lsls	r4, r2
 8000b6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6e:	0c23      	lsrs	r3, r4, #16
 8000b70:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b74:	fa1f fc85 	uxth.w	ip, r5
 8000b78:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b7c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b80:	fb07 f10c 	mul.w	r1, r7, ip
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x60>
 8000b88:	18eb      	adds	r3, r5, r3
 8000b8a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8e:	f080 811b 	bcs.w	8000dc8 <__udivmoddi4+0x28c>
 8000b92:	4299      	cmp	r1, r3
 8000b94:	f240 8118 	bls.w	8000dc8 <__udivmoddi4+0x28c>
 8000b98:	3f02      	subs	r7, #2
 8000b9a:	442b      	add	r3, r5
 8000b9c:	1a5b      	subs	r3, r3, r1
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bac:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb0:	45a4      	cmp	ip, r4
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x8c>
 8000bb4:	192c      	adds	r4, r5, r4
 8000bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bba:	f080 8107 	bcs.w	8000dcc <__udivmoddi4+0x290>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	f240 8104 	bls.w	8000dcc <__udivmoddi4+0x290>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	442c      	add	r4, r5
 8000bc8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bcc:	eba4 040c 	sub.w	r4, r4, ip
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	b11e      	cbz	r6, 8000bdc <__udivmoddi4+0xa0>
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0xbe>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	f000 80eb 	beq.w	8000dc2 <__udivmoddi4+0x286>
 8000bec:	2700      	movs	r7, #0
 8000bee:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf2:	4638      	mov	r0, r7
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f783 	clz	r7, r3
 8000bfe:	2f00      	cmp	r7, #0
 8000c00:	d147      	bne.n	8000c92 <__udivmoddi4+0x156>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xd0>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80fa 	bhi.w	8000e00 <__udivmoddi4+0x2c4>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4698      	mov	r8, r3
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d0e0      	beq.n	8000bdc <__udivmoddi4+0xa0>
 8000c1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1e:	e7dd      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000c20:	b902      	cbnz	r2, 8000c24 <__udivmoddi4+0xe8>
 8000c22:	deff      	udf	#255	; 0xff
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <__udivmoddi4+0x210>
 8000c2e:	1b49      	subs	r1, r1, r5
 8000c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c34:	fa1f f885 	uxth.w	r8, r5
 8000c38:	2701      	movs	r7, #1
 8000c3a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb08 f10c 	mul.w	r1, r8, ip
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x124>
 8000c50:	18eb      	adds	r3, r5, r3
 8000c52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x122>
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2bc>
 8000c5e:	4684      	mov	ip, r0
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c68:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c6c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c70:	fb08 f800 	mul.w	r8, r8, r0
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x14c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x14a>
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	f200 80b6 	bhi.w	8000df2 <__udivmoddi4+0x2b6>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 0408 	sub.w	r4, r4, r8
 8000c8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c90:	e79f      	b.n	8000bd2 <__udivmoddi4+0x96>
 8000c92:	f1c7 0c20 	rsb	ip, r7, #32
 8000c96:	40bb      	lsls	r3, r7
 8000c98:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c9c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cac:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb0:	4325      	orrs	r5, r4
 8000cb2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb6:	0c2c      	lsrs	r4, r5, #16
 8000cb8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cbc:	fa1f fa8e 	uxth.w	sl, lr
 8000cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	fa02 f207 	lsl.w	r2, r2, r7
 8000cce:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b0>
 8000cd4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	f080 8087 	bcs.w	8000dee <__udivmoddi4+0x2b2>
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	f240 8084 	bls.w	8000dee <__udivmoddi4+0x2b2>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4473      	add	r3, lr
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	b2ad      	uxth	r5, r5
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cfc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d00:	45a2      	cmp	sl, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1da>
 8000d04:	eb1e 0404 	adds.w	r4, lr, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	d26b      	bcs.n	8000de6 <__udivmoddi4+0x2aa>
 8000d0e:	45a2      	cmp	sl, r4
 8000d10:	d969      	bls.n	8000de6 <__udivmoddi4+0x2aa>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4474      	add	r4, lr
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	eba4 040a 	sub.w	r4, r4, sl
 8000d22:	454c      	cmp	r4, r9
 8000d24:	46c2      	mov	sl, r8
 8000d26:	464b      	mov	r3, r9
 8000d28:	d354      	bcc.n	8000dd4 <__udivmoddi4+0x298>
 8000d2a:	d051      	beq.n	8000dd0 <__udivmoddi4+0x294>
 8000d2c:	2e00      	cmp	r6, #0
 8000d2e:	d069      	beq.n	8000e04 <__udivmoddi4+0x2c8>
 8000d30:	ebb1 050a 	subs.w	r5, r1, sl
 8000d34:	eb64 0403 	sbc.w	r4, r4, r3
 8000d38:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d3c:	40fd      	lsrs	r5, r7
 8000d3e:	40fc      	lsrs	r4, r7
 8000d40:	ea4c 0505 	orr.w	r5, ip, r5
 8000d44:	e9c6 5400 	strd	r5, r4, [r6]
 8000d48:	2700      	movs	r7, #0
 8000d4a:	e747      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f703 	lsr.w	r7, r0, r3
 8000d54:	4095      	lsls	r5, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d62:	4338      	orrs	r0, r7
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6a:	fa1f f885 	uxth.w	r8, r5
 8000d6e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d76:	fb07 f308 	mul.w	r3, r7, r8
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x256>
 8000d82:	1869      	adds	r1, r5, r1
 8000d84:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d88:	d22f      	bcs.n	8000dea <__udivmoddi4+0x2ae>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d92d      	bls.n	8000dea <__udivmoddi4+0x2ae>
 8000d8e:	3f02      	subs	r7, #2
 8000d90:	4429      	add	r1, r5
 8000d92:	1acb      	subs	r3, r1, r3
 8000d94:	b281      	uxth	r1, r0
 8000d96:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da2:	fb00 f308 	mul.w	r3, r0, r8
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x27e>
 8000daa:	1869      	adds	r1, r5, r1
 8000dac:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db0:	d217      	bcs.n	8000de2 <__udivmoddi4+0x2a6>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d915      	bls.n	8000de2 <__udivmoddi4+0x2a6>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4429      	add	r1, r5
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc0:	e73b      	b.n	8000c3a <__udivmoddi4+0xfe>
 8000dc2:	4637      	mov	r7, r6
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	e709      	b.n	8000bdc <__udivmoddi4+0xa0>
 8000dc8:	4607      	mov	r7, r0
 8000dca:	e6e7      	b.n	8000b9c <__udivmoddi4+0x60>
 8000dcc:	4618      	mov	r0, r3
 8000dce:	e6fb      	b.n	8000bc8 <__udivmoddi4+0x8c>
 8000dd0:	4541      	cmp	r1, r8
 8000dd2:	d2ab      	bcs.n	8000d2c <__udivmoddi4+0x1f0>
 8000dd4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ddc:	3801      	subs	r0, #1
 8000dde:	4613      	mov	r3, r2
 8000de0:	e7a4      	b.n	8000d2c <__udivmoddi4+0x1f0>
 8000de2:	4660      	mov	r0, ip
 8000de4:	e7e9      	b.n	8000dba <__udivmoddi4+0x27e>
 8000de6:	4618      	mov	r0, r3
 8000de8:	e795      	b.n	8000d16 <__udivmoddi4+0x1da>
 8000dea:	4667      	mov	r7, ip
 8000dec:	e7d1      	b.n	8000d92 <__udivmoddi4+0x256>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e77c      	b.n	8000cec <__udivmoddi4+0x1b0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	442c      	add	r4, r5
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0x14c>
 8000df8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dfc:	442b      	add	r3, r5
 8000dfe:	e72f      	b.n	8000c60 <__udivmoddi4+0x124>
 8000e00:	4638      	mov	r0, r7
 8000e02:	e708      	b.n	8000c16 <__udivmoddi4+0xda>
 8000e04:	4637      	mov	r7, r6
 8000e06:	e6e9      	b.n	8000bdc <__udivmoddi4+0xa0>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f93c 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f80d 	bl	8000e3c <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2e:	f006 f96f 	bl	8007110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_InitTick+0x68>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d022      	beq.n	8000e96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_InitTick+0x6c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_InitTick+0x68>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f93c 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10f      	bne.n	8000e90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	d809      	bhi.n	8000e8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	2200      	movs	r2, #0
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7e:	f000 f914 	bl	80010aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_InitTick+0x70>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e007      	b.n	8000e9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e004      	b.n	8000e9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e001      	b.n	8000e9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000004 	.word	0x20000004
 8000ea8:	2000001c 	.word	0x2000001c
 8000eac:	20000000 	.word	0x20000000

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <HAL_IncTick+0x1c>)
 8000ec0:	6013      	str	r3, [r2, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	200001a4 	.word	0x200001a4
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001a4 	.word	0x200001a4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d004      	beq.n	8000f10 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_Delay+0x40>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f10:	bf00      	nop
 8000f12:	f7ff ffdf 	bl	8000ed4 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d8f7      	bhi.n	8000f12 <HAL_Delay+0x26>
  {
  }
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000004 	.word	0x20000004

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff47 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff5c 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffb0 	bl	8001050 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001112:	2b01      	cmp	r3, #1
 8001114:	d101      	bne.n	800111a <HAL_DMA_Start_IT+0x20>
 8001116:	2302      	movs	r3, #2
 8001118:	e04b      	b.n	80011b2 <HAL_DMA_Start_IT+0xb8>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d13a      	bne.n	80011a4 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2202      	movs	r2, #2
 8001132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 f831 	bl	80011ba <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 020e 	orr.w	r2, r2, #14
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e00f      	b.n	8001192 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0204 	bic.w	r2, r2, #4
 8001180:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 020a 	orr.w	r2, r2, #10
 8001190:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e005      	b.n	80011b0 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80011ac:	2302      	movs	r3, #2
 80011ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	f003 021c 	and.w	r2, r3, #28
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d108      	bne.n	80011fe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011fc:	e007      	b.n	800120e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	60da      	str	r2, [r3, #12]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e17f      	b.n	800152c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8171 	beq.w	8001526 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x38>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b12      	cmp	r3, #18
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d00b      	beq.n	80012f0 <HAL_GPIO_Init+0xd4>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e4:	2b11      	cmp	r3, #17
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b12      	cmp	r3, #18
 80012ee:	d130      	bne.n	8001352 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001326:	2201      	movs	r2, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 0201 	and.w	r2, r3, #1
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b03      	cmp	r3, #3
 800135c:	d118      	bne.n	8001390 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001364:	2201      	movs	r2, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f003 0201 	and.w	r2, r3, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80ac 	beq.w	8001526 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	4b5e      	ldr	r3, [pc, #376]	; (8001548 <HAL_GPIO_Init+0x32c>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	4a5d      	ldr	r2, [pc, #372]	; (8001548 <HAL_GPIO_Init+0x32c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6613      	str	r3, [r2, #96]	; 0x60
 80013da:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <HAL_GPIO_Init+0x32c>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013e6:	4a59      	ldr	r2, [pc, #356]	; (800154c <HAL_GPIO_Init+0x330>)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001410:	d025      	beq.n	800145e <HAL_GPIO_Init+0x242>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4e      	ldr	r2, [pc, #312]	; (8001550 <HAL_GPIO_Init+0x334>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d01f      	beq.n	800145a <HAL_GPIO_Init+0x23e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4d      	ldr	r2, [pc, #308]	; (8001554 <HAL_GPIO_Init+0x338>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d019      	beq.n	8001456 <HAL_GPIO_Init+0x23a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_GPIO_Init+0x33c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d013      	beq.n	8001452 <HAL_GPIO_Init+0x236>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_GPIO_Init+0x340>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x232>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <HAL_GPIO_Init+0x344>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x22e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a49      	ldr	r2, [pc, #292]	; (8001564 <HAL_GPIO_Init+0x348>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x22a>
 8001442:	2306      	movs	r3, #6
 8001444:	e00c      	b.n	8001460 <HAL_GPIO_Init+0x244>
 8001446:	2307      	movs	r3, #7
 8001448:	e00a      	b.n	8001460 <HAL_GPIO_Init+0x244>
 800144a:	2305      	movs	r3, #5
 800144c:	e008      	b.n	8001460 <HAL_GPIO_Init+0x244>
 800144e:	2304      	movs	r3, #4
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x244>
 8001452:	2303      	movs	r3, #3
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x244>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x244>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x244>
 800145e:	2300      	movs	r3, #0
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001470:	4936      	ldr	r1, [pc, #216]	; (800154c <HAL_GPIO_Init+0x330>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_GPIO_Init+0x34c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a2:	4a31      	ldr	r2, [pc, #196]	; (8001568 <HAL_GPIO_Init+0x34c>)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x34c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <HAL_GPIO_Init+0x34c>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_GPIO_Init+0x34c>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <HAL_GPIO_Init+0x34c>)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_GPIO_Init+0x34c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_GPIO_Init+0x34c>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3301      	adds	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f ae78 	bne.w	800122c <HAL_GPIO_Init+0x10>
  }
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	48000400 	.word	0x48000400
 8001554:	48000800 	.word	0x48000800
 8001558:	48000c00 	.word	0x48000c00
 800155c:	48001000 	.word	0x48001000
 8001560:	48001400 	.word	0x48001400
 8001564:	48001800 	.word	0x48001800
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001588:	e002      	b.n	8001590 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e081      	b.n	80016b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f005 fdc8 	bl	8007158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2224      	movs	r2, #36	; 0x24
 80015cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e006      	b.n	8001624 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001622:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d104      	bne.n	8001636 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001634:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001648:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001658:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	ea42 0103 	orr.w	r1, r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	021a      	lsls	r2, r3, #8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69d9      	ldr	r1, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	461a      	mov	r2, r3
 80016c8:	460b      	mov	r3, r1
 80016ca:	817b      	strh	r3, [r7, #10]
 80016cc:	4613      	mov	r3, r2
 80016ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b20      	cmp	r3, #32
 80016da:	f040 80da 	bne.w	8001892 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2C_Master_Transmit+0x30>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0d3      	b.n	8001894 <HAL_I2C_Master_Transmit+0x1d8>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f4:	f7ff fbee 	bl	8000ed4 <HAL_GetTick>
 80016f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2319      	movs	r3, #25
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f9e6 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0be      	b.n	8001894 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2221      	movs	r2, #33	; 0x21
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2210      	movs	r2, #16
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	893a      	ldrh	r2, [r7, #8]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d90e      	bls.n	8001766 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	b2da      	uxtb	r2, r3
 8001754:	8979      	ldrh	r1, [r7, #10]
 8001756:	4b51      	ldr	r3, [pc, #324]	; (800189c <HAL_I2C_Master_Transmit+0x1e0>)
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 fb48 	bl	8001df4 <I2C_TransferConfig>
 8001764:	e06c      	b.n	8001840 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_I2C_Master_Transmit+0x1e0>)
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fb37 	bl	8001df4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001786:	e05b      	b.n	8001840 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	6a39      	ldr	r1, [r7, #32]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f9e3 	bl	8001b58 <I2C_WaitOnTXISFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e07b      	b.n	8001894 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d034      	beq.n	8001840 <HAL_I2C_Master_Transmit+0x184>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d130      	bne.n	8001840 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f975 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e04d      	b.n	8001894 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d90e      	bls.n	8001820 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	22ff      	movs	r2, #255	; 0xff
 8001806:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180c:	b2da      	uxtb	r2, r3
 800180e:	8979      	ldrh	r1, [r7, #10]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 faeb 	bl	8001df4 <I2C_TransferConfig>
 800181e:	e00f      	b.n	8001840 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	b2da      	uxtb	r2, r3
 8001830:	8979      	ldrh	r1, [r7, #10]
 8001832:	2300      	movs	r3, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 fada 	bl	8001df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d19e      	bne.n	8001788 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6a39      	ldr	r1, [r7, #32]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f9c2 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e01a      	b.n	8001894 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2220      	movs	r2, #32
 8001864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001872:	400b      	ands	r3, r1
 8001874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2220      	movs	r2, #32
 800187a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	80002000 	.word	0x80002000
 80018a0:	fe00e800 	.word	0xfe00e800

080018a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	460b      	mov	r3, r1
 80018b2:	817b      	strh	r3, [r7, #10]
 80018b4:	4613      	mov	r3, r2
 80018b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	f040 80db 	bne.w	8001a7c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_I2C_Master_Receive+0x30>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e0d4      	b.n	8001a7e <HAL_I2C_Master_Receive+0x1da>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff fafa 	bl	8000ed4 <HAL_GetTick>
 80018e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2319      	movs	r3, #25
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f000 f8f2 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0bf      	b.n	8001a7e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2222      	movs	r2, #34	; 0x22
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2210      	movs	r2, #16
 800190a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	893a      	ldrh	r2, [r7, #8]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	2bff      	cmp	r3, #255	; 0xff
 800192e:	d90e      	bls.n	800194e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	22ff      	movs	r2, #255	; 0xff
 8001934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	b2da      	uxtb	r2, r3
 800193c:	8979      	ldrh	r1, [r7, #10]
 800193e:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <HAL_I2C_Master_Receive+0x1e4>)
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 fa54 	bl	8001df4 <I2C_TransferConfig>
 800194c:	e06d      	b.n	8001a2a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	b2da      	uxtb	r2, r3
 800195e:	8979      	ldrh	r1, [r7, #10]
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_I2C_Master_Receive+0x1e4>)
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 fa43 	bl	8001df4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800196e:	e05c      	b.n	8001a2a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6a39      	ldr	r1, [r7, #32]
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f96b 	bl	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e07c      	b.n	8001a7e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d034      	beq.n	8001a2a <HAL_I2C_Master_Receive+0x186>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d130      	bne.n	8001a2a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f880 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e04d      	b.n	8001a7e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2bff      	cmp	r3, #255	; 0xff
 80019ea:	d90e      	bls.n	8001a0a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	8979      	ldrh	r1, [r7, #10]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f9f6 	bl	8001df4 <I2C_TransferConfig>
 8001a08:	e00f      	b.n	8001a2a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	8979      	ldrh	r1, [r7, #10]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f9e5 	bl	8001df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d19d      	bne.n	8001970 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	6a39      	ldr	r1, [r7, #32]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f8cd 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e01a      	b.n	8001a7e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_I2C_Master_Receive+0x1e8>)
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a7c:	2302      	movs	r3, #2
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	80002400 	.word	0x80002400
 8001a8c:	fe00e800 	.word	0xfe00e800

08001a90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d103      	bne.n	8001aae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d007      	beq.n	8001acc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	619a      	str	r2, [r3, #24]
  }
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae8:	e022      	b.n	8001b30 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d01e      	beq.n	8001b30 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff f9ef 	bl	8000ed4 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d113      	bne.n	8001b30 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f043 0220 	orr.w	r2, r3, #32
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e00f      	b.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d0cd      	beq.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b64:	e02c      	b.n	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f8dc 	bl	8001d28 <I2C_IsAcknowledgeFailed>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e02a      	b.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d01e      	beq.n	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff f9a7 	bl	8000ed4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d113      	bne.n	8001bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f043 0220 	orr.w	r2, r3, #32
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e007      	b.n	8001bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d1cb      	bne.n	8001b66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be4:	e028      	b.n	8001c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f89c 	bl	8001d28 <I2C_IsAcknowledgeFailed>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e026      	b.n	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfa:	f7ff f96b 	bl	8000ed4 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d302      	bcc.n	8001c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d113      	bne.n	8001c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e007      	b.n	8001c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b20      	cmp	r3, #32
 8001c44:	d1cf      	bne.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c5c:	e055      	b.n	8001d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f860 	bl	8001d28 <I2C_IsAcknowledgeFailed>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e053      	b.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0320 	and.w	r3, r3, #32
 8001c7c:	2b20      	cmp	r3, #32
 8001c7e:	d129      	bne.n	8001cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d105      	bne.n	8001c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e03f      	b.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001cae:	400b      	ands	r3, r1
 8001cb0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e022      	b.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd4:	f7ff f8fe 	bl	8000ed4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d302      	bcc.n	8001cea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e007      	b.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d1a2      	bne.n	8001c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	fe00e800 	.word	0xfe00e800

08001d28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b10      	cmp	r3, #16
 8001d40:	d151      	bne.n	8001de6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d42:	e022      	b.n	8001d8a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4a:	d01e      	beq.n	8001d8a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4c:	f7ff f8c2 	bl	8000ed4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d302      	bcc.n	8001d62 <I2C_IsAcknowledgeFailed+0x3a>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d113      	bne.n	8001d8a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f043 0220 	orr.w	r2, r3, #32
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e02e      	b.n	8001de8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b20      	cmp	r3, #32
 8001d96:	d1d5      	bne.n	8001d44 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fe71 	bl	8001a90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <I2C_IsAcknowledgeFailed+0xc8>)
 8001dba:	400b      	ands	r3, r1
 8001dbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	fe00e800 	.word	0xfe00e800

08001df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	817b      	strh	r3, [r7, #10]
 8001e02:	4613      	mov	r3, r2
 8001e04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	0d5b      	lsrs	r3, r3, #21
 8001e10:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <I2C_TransferConfig+0x58>)
 8001e16:	430b      	orrs	r3, r1
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	ea02 0103 	and.w	r1, r2, r3
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e24:	7a7b      	ldrb	r3, [r7, #9]
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	03ff63ff 	.word	0x03ff63ff

08001e50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d138      	bne.n	8001ed8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e032      	b.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2224      	movs	r2, #36	; 0x24
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ea2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d139      	bne.n	8001f70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e033      	b.n	8001f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2224      	movs	r2, #36	; 0x24
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e000      	b.n	8001f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
  }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40007000 	.word	0x40007000

08001f9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001faa:	d130      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d038      	beq.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2232      	movs	r2, #50	; 0x32
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe0:	e002      	b.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff4:	d102      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f2      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002008:	d110      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e00f      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201a:	d007      	beq.n	800202c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002024:	4a05      	ldr	r2, [pc, #20]	; (800203c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000
 8002040:	2000001c 	.word	0x2000001c
 8002044:	431bde83 	.word	0x431bde83

08002048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e39d      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205a:	4ba4      	ldr	r3, [pc, #656]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	4ba1      	ldr	r3, [pc, #644]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80e1 	beq.w	800223e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_RCC_OscConfig+0x4a>
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b0c      	cmp	r3, #12
 8002086:	f040 8088 	bne.w	800219a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f040 8084 	bne.w	800219a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002092:	4b96      	ldr	r3, [pc, #600]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_RCC_OscConfig+0x62>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e375      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1a      	ldr	r2, [r3, #32]
 80020ae:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_RCC_OscConfig+0x7c>
 80020ba:	4b8c      	ldr	r3, [pc, #560]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_OscConfig+0x88>
 80020c4:	4b89      	ldr	r3, [pc, #548]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d223      	bcs.n	800211c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fd09 	bl	8002af0 <RCC_SetFlashLatencyFromMSIRange>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e356      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e8:	4b80      	ldr	r3, [pc, #512]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a7f      	ldr	r2, [pc, #508]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b7d      	ldr	r3, [pc, #500]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	497a      	ldr	r1, [pc, #488]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002106:	4b79      	ldr	r3, [pc, #484]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4975      	ldr	r1, [pc, #468]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002116:	4313      	orrs	r3, r2
 8002118:	604b      	str	r3, [r1, #4]
 800211a:	e022      	b.n	8002162 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800211c:	4b73      	ldr	r3, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a72      	ldr	r2, [pc, #456]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b70      	ldr	r3, [pc, #448]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	496d      	ldr	r1, [pc, #436]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213a:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4968      	ldr	r1, [pc, #416]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fccc 	bl	8002af0 <RCC_SetFlashLatencyFromMSIRange>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e319      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002162:	f000 fc03 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002166:	4601      	mov	r1, r0
 8002168:	4b60      	ldr	r3, [pc, #384]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x2a8>)
 8002174:	5cd3      	ldrb	r3, [r2, r3]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x2b0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fe58 	bl	8000e3c <HAL_InitTick>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d052      	beq.n	800223c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	e2fd      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d032      	beq.n	8002208 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a51      	ldr	r2, [pc, #324]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ae:	f7fe fe91 	bl	8000ed4 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b6:	f7fe fe8d 	bl	8000ed4 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e2e6      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021c8:	4b48      	ldr	r3, [pc, #288]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d4:	4b45      	ldr	r3, [pc, #276]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a44      	ldr	r2, [pc, #272]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	493f      	ldr	r1, [pc, #252]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f2:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	493a      	ldr	r1, [pc, #232]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
 8002206:	e01a      	b.n	800223e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002208:	4b38      	ldr	r3, [pc, #224]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a37      	ldr	r2, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002214:	f7fe fe5e 	bl	8000ed4 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221c:	f7fe fe5a 	bl	8000ed4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e2b3      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800222e:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x1d4>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d074      	beq.n	8002334 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b08      	cmp	r3, #8
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x214>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d10e      	bne.n	8002274 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	4b23      	ldr	r3, [pc, #140]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d064      	beq.n	8002332 <HAL_RCC_OscConfig+0x2ea>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d160      	bne.n	8002332 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e290      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x244>
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e01d      	b.n	80022c8 <HAL_RCC_OscConfig+0x280>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x268>
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a11      	ldr	r2, [pc, #68]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x280>
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0d      	ldr	r2, [pc, #52]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <HAL_RCC_OscConfig+0x2a4>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fe00 	bl	8000ed4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d6:	e011      	b.n	80022fc <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7fe fdfc 	bl	8000ed4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d90a      	bls.n	80022fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e255      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	0800836c 	.word	0x0800836c
 80022f4:	2000001c 	.word	0x2000001c
 80022f8:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fc:	4bae      	ldr	r3, [pc, #696]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0e7      	beq.n	80022d8 <HAL_RCC_OscConfig+0x290>
 8002308:	e014      	b.n	8002334 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7fe fde3 	bl	8000ed4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002312:	f7fe fddf 	bl	8000ed4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e238      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002324:	4ba4      	ldr	r3, [pc, #656]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ca>
 8002330:	e000      	b.n	8002334 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002332:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d060      	beq.n	8002402 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d005      	beq.n	8002352 <HAL_RCC_OscConfig+0x30a>
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d119      	bne.n	8002380 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d116      	bne.n	8002380 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002352:	4b99      	ldr	r3, [pc, #612]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x322>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e215      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b93      	ldr	r3, [pc, #588]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	061b      	lsls	r3, r3, #24
 8002378:	498f      	ldr	r1, [pc, #572]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800237e:	e040      	b.n	8002402 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d023      	beq.n	80023d0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fd9e 	bl	8000ed4 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fd9a 	bl	8000ed4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1f3      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	497b      	ldr	r1, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
 80023ce:	e018      	b.n	8002402 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a78      	ldr	r2, [pc, #480]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80023d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fd7a 	bl	8000ed4 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe fd76 	bl	8000ed4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1cf      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d03c      	beq.n	8002488 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01c      	beq.n	8002450 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241c:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe fd55 	bl	8000ed4 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe fd51 	bl	8000ed4 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1aa      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002440:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ef      	beq.n	800242e <HAL_RCC_OscConfig+0x3e6>
 800244e:	e01b      	b.n	8002488 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fd38 	bl	8000ed4 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe fd34 	bl	8000ed4 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e18d      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800247c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ef      	bne.n	8002468 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a5 	beq.w	80025e0 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	6593      	str	r3, [r2, #88]	; 0x58
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024be:	2301      	movs	r3, #1
 80024c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c2:	4b3e      	ldr	r3, [pc, #248]	; (80025bc <HAL_RCC_OscConfig+0x574>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d118      	bne.n	8002500 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ce:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x574>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <HAL_RCC_OscConfig+0x574>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024da:	f7fe fcfb 	bl	8000ed4 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7fe fcf7 	bl	8000ed4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e150      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCC_OscConfig+0x574>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_RCC_OscConfig+0x4d2>
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	e024      	b.n	8002564 <HAL_RCC_OscConfig+0x51c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d110      	bne.n	8002544 <HAL_RCC_OscConfig+0x4fc>
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002542:	e00f      	b.n	8002564 <HAL_RCC_OscConfig+0x51c>
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d016      	beq.n	800259a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fcb2 	bl	8000ed4 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe fcae 	bl	8000ed4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e105      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x570>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ed      	beq.n	8002574 <HAL_RCC_OscConfig+0x52c>
 8002598:	e019      	b.n	80025ce <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259a:	f7fe fc9b 	bl	8000ed4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a0:	e00e      	b.n	80025c0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fc97 	bl	8000ed4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d905      	bls.n	80025c0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0ee      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	4b77      	ldr	r3, [pc, #476]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1e9      	bne.n	80025a2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d105      	bne.n	80025e0 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d4:	4b72      	ldr	r3, [pc, #456]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	4a71      	ldr	r2, [pc, #452]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80025da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80d5 	beq.w	8002794 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	f000 808e 	beq.w	800270e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d15b      	bne.n	80026b2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b69      	ldr	r3, [pc, #420]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fc65 	bl	8000ed4 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fc61 	bl	8000ed4 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0ba      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	4b5f      	ldr	r3, [pc, #380]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262c:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b5c      	ldr	r3, [pc, #368]	; (80027a4 <HAL_RCC_OscConfig+0x75c>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800263c:	3a01      	subs	r2, #1
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002646:	0212      	lsls	r2, r2, #8
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800265a:	0852      	lsrs	r2, r2, #1
 800265c:	3a01      	subs	r2, #1
 800265e:	0652      	lsls	r2, r2, #25
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002666:	0912      	lsrs	r2, r2, #4
 8002668:	0452      	lsls	r2, r2, #17
 800266a:	430a      	orrs	r2, r1
 800266c:	494c      	ldr	r1, [pc, #304]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002672:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800267e:	4b48      	ldr	r3, [pc, #288]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a47      	ldr	r2, [pc, #284]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002688:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe fc23 	bl	8000ed4 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002692:	f7fe fc1f 	bl	8000ed4 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e078      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a4:	4b3e      	ldr	r3, [pc, #248]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x64a>
 80026b0:	e070      	b.n	8002794 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b3b      	ldr	r3, [pc, #236]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ca:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026d0:	f023 0303 	bic.w	r3, r3, #3
 80026d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026d6:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 80026dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fbf5 	bl	8000ed4 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fbf1 	bl	8000ed4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e04a      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x6a6>
 800270c:	e042      	b.n	8002794 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e03d      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_RCC_OscConfig+0x758>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	429a      	cmp	r2, r3
 800272c:	d130      	bne.n	8002790 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	3b01      	subs	r3, #1
 800273a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d127      	bne.n	8002790 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d11f      	bne.n	8002790 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800275a:	2a07      	cmp	r2, #7
 800275c:	bf14      	ite	ne
 800275e:	2201      	movne	r2, #1
 8002760:	2200      	moveq	r2, #0
 8002762:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002764:	4293      	cmp	r3, r2
 8002766:	d113      	bne.n	8002790 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d109      	bne.n	8002790 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	f99d808c 	.word	0xf99d808c

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0c8      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4961      	ldr	r1, [pc, #388]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b5f      	ldr	r3, [pc, #380]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b0      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d04c      	beq.n	8002892 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002800:	4b56      	ldr	r3, [pc, #344]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d121      	bne.n	8002850 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e09e      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d107      	bne.n	8002828 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d115      	bne.n	8002850 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e092      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002830:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e086      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002840:	4b46      	ldr	r3, [pc, #280]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e07e      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f023 0203 	bic.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	493f      	ldr	r1, [pc, #252]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002862:	f7fe fb37 	bl	8000ed4 <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002868:	e00a      	b.n	8002880 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286a:	f7fe fb33 	bl	8000ed4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e066      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002880:	4b36      	ldr	r3, [pc, #216]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 020c 	and.w	r2, r3, #12
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	429a      	cmp	r2, r3
 8002890:	d1eb      	bne.n	800286a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289e:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	492c      	ldr	r1, [pc, #176]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d210      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4924      	ldr	r1, [pc, #144]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_RCC_ClockConfig+0x1b0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e036      	b.n	800294e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4918      	ldr	r1, [pc, #96]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4910      	ldr	r1, [pc, #64]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800291e:	f000 f825 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002922:	4601      	mov	r1, r0
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_RCC_ClockConfig+0x1b4>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	fa21 f303 	lsr.w	r3, r1, r3
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fa7a 	bl	8000e3c <HAL_InitTick>
 8002948:	4603      	mov	r3, r0
 800294a:	72fb      	strb	r3, [r7, #11]

  return status;
 800294c:	7afb      	ldrb	r3, [r7, #11]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
 8002960:	0800836c 	.word	0x0800836c
 8002964:	2000001c 	.word	0x2000001c
 8002968:	20000000 	.word	0x20000000

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297a:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d121      	bne.n	80029de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d11e      	bne.n	80029de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a0:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029ac:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b2:	0a1b      	lsrs	r3, r3, #8
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e005      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029bc:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029c8:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10d      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e004      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x110>)
 80029f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d133      	bne.n	8002a62 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0xaa>
 8002a0e:	e005      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a12:	617b      	str	r3, [r7, #20]
      break;
 8002a14:	e005      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a16:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a18:	617b      	str	r3, [r7, #20]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	617b      	str	r3, [r7, #20]
      break;
 8002a20:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	fb02 f203 	mul.w	r2, r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0e5b      	lsrs	r3, r3, #25
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a62:	69bb      	ldr	r3, [r7, #24]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08008384 	.word	0x08008384
 8002a78:	00f42400 	.word	0x00f42400
 8002a7c:	007a1200 	.word	0x007a1200

08002a80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2000001c 	.word	0x2000001c

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4601      	mov	r1, r0
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	0800837c 	.word	0x0800837c

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ac8:	f7ff ffda 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002acc:	4601      	mov	r1, r0
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0adb      	lsrs	r3, r3, #11
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ada:	5cd3      	ldrb	r3, [r2, r3]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	0800837c 	.word	0x0800837c

08002af0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b08:	f7ff fa3a 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002b0c:	6178      	str	r0, [r7, #20]
 8002b0e:	e014      	b.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b28:	f7ff fa2a 	bl	8001f80 <HAL_PWREx_GetVoltageRange>
 8002b2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b40:	d10b      	bne.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d919      	bls.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b4c:	d902      	bls.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b4e:	2302      	movs	r3, #2
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	e013      	b.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b54:	2301      	movs	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	e010      	b.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d902      	bls.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b60:	2303      	movs	r3, #3
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e00a      	b.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d102      	bne.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	e004      	b.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b70      	cmp	r3, #112	; 0x70
 8002b76:	d101      	bne.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b78:	2301      	movs	r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 0207 	bic.w	r2, r3, #7
 8002b84:	4909      	ldr	r1, [pc, #36]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d001      	beq.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb8:	2300      	movs	r3, #0
 8002bba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d03f      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd4:	d01c      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bda:	d802      	bhi.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002be0:	e01f      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002be2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002be6:	d003      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002be8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bec:	d01c      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002bee:	e018      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bf0:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a84      	ldr	r2, [pc, #528]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bfc:	e015      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fab9 	bl	800317c <RCCEx_PLLSAI1_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c0e:	e00c      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3320      	adds	r3, #32
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fba0 	bl	800335c <RCCEx_PLLSAI2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c20:	e003      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	74fb      	strb	r3, [r7, #19]
      break;
 8002c26:	e000      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10b      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3e:	4972      	ldr	r1, [pc, #456]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c46:	e001      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03f      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d01c      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c66:	d802      	bhi.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002c6c:	e01f      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c72:	d003      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002c74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c78:	d01c      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002c7a:	e018      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c7c:	4b62      	ldr	r3, [pc, #392]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a61      	ldr	r2, [pc, #388]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c88:	e015      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fa73 	bl	800317c <RCCEx_PLLSAI1_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c9a:	e00c      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fb5a 	bl	800335c <RCCEx_PLLSAI2_Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cac:	e003      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10b      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cbc:	4b52      	ldr	r3, [pc, #328]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cca:	494f      	ldr	r1, [pc, #316]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cd2:	e001      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a0 	beq.w	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00d      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d0c:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3a      	ldr	r2, [pc, #232]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d28:	f7fe f8d4 	bl	8000ed4 <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d2e:	e009      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fe f8d0 	bl	8000ed4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	74fb      	strb	r3, [r7, #19]
        break;
 8002d42:	e005      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d44:	4b31      	ldr	r3, [pc, #196]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d15c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d56:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01f      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d019      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002da0:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d016      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe f88f 	bl	8000ed4 <HAL_GetTick>
 8002db6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	e00b      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe f88b 	bl	8000ed4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	74fb      	strb	r3, [r7, #19]
            break;
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ec      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002df6:	4904      	ldr	r1, [pc, #16]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dfe:	e009      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	74bb      	strb	r3, [r7, #18]
 8002e04:	e006      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002e06:	bf00      	nop
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e14:	7c7b      	ldrb	r3, [r7, #17]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e1a:	4b9e      	ldr	r3, [pc, #632]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4a9d      	ldr	r2, [pc, #628]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e32:	4b98      	ldr	r3, [pc, #608]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f023 0203 	bic.w	r2, r3, #3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	4994      	ldr	r1, [pc, #592]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e54:	4b8f      	ldr	r3, [pc, #572]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 020c 	bic.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	498c      	ldr	r1, [pc, #560]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e76:	4b87      	ldr	r3, [pc, #540]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4983      	ldr	r1, [pc, #524]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e98:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	497b      	ldr	r1, [pc, #492]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec8:	4972      	ldr	r1, [pc, #456]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002edc:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eea:	496a      	ldr	r1, [pc, #424]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efe:	4b65      	ldr	r3, [pc, #404]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	4961      	ldr	r1, [pc, #388]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f20:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	4959      	ldr	r1, [pc, #356]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f42:	4b54      	ldr	r3, [pc, #336]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f50:	4950      	ldr	r1, [pc, #320]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f64:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	4948      	ldr	r1, [pc, #288]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f86:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	493f      	ldr	r1, [pc, #252]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d028      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fb6:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a31      	ldr	r2, [pc, #196]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd2:	60d3      	str	r3, [r2, #12]
 8002fd4:	e011      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f8c8 	bl	800317c <RCCEx_PLLSAI1_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d028      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	491f      	ldr	r1, [pc, #124]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003024:	d106      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800302c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003030:	60d3      	str	r3, [r2, #12]
 8003032:	e011      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800303c:	d10c      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	2101      	movs	r1, #1
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f899 	bl	800317c <RCCEx_PLLSAI1_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800304e:	7cfb      	ldrb	r3, [r7, #19]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d02b      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	4908      	ldr	r1, [pc, #32]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003082:	d109      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a02      	ldr	r2, [pc, #8]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800308a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800308e:	60d3      	str	r3, [r2, #12]
 8003090:	e014      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2101      	movs	r1, #1
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f867 	bl	800317c <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d02f      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d6:	4928      	ldr	r1, [pc, #160]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e6:	d10d      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3304      	adds	r3, #4
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f844 	bl	800317c <RCCEx_PLLSAI1_Config>
 80030f4:	4603      	mov	r3, r0
 80030f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d014      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	74bb      	strb	r3, [r7, #18]
 8003102:	e011      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310c:	d10c      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3320      	adds	r3, #32
 8003112:	2102      	movs	r1, #2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f921 	bl	800335c <RCCEx_PLLSAI2_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003142:	490d      	ldr	r1, [pc, #52]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003166:	4904      	ldr	r1, [pc, #16]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800316e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000

0800317c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d018      	beq.n	80031c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003196:	4b70      	ldr	r3, [pc, #448]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0203 	and.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d10d      	bne.n	80031c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
       ||
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ae:	4b6a      	ldr	r3, [pc, #424]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	091b      	lsrs	r3, r3, #4
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
       ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d044      	beq.n	800324c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e041      	b.n	800324c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d00c      	beq.n	80031ea <RCCEx_PLLSAI1_Config+0x6e>
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d013      	beq.n	80031fc <RCCEx_PLLSAI1_Config+0x80>
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d120      	bne.n	800321a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031d8:	4b5f      	ldr	r3, [pc, #380]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11d      	bne.n	8003220 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e8:	e01a      	b.n	8003220 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d116      	bne.n	8003224 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fa:	e013      	b.n	8003224 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003218:	e006      	b.n	8003228 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      break;
 800321e:	e004      	b.n	800322a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003220:	bf00      	nop
 8003222:	e002      	b.n	800322a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003228:	bf00      	nop
    }

    if(status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6819      	ldr	r1, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	3b01      	subs	r3, #1
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	430b      	orrs	r3, r1
 8003246:	4944      	ldr	r1, [pc, #272]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d17d      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a40      	ldr	r2, [pc, #256]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003258:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800325c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325e:	f7fd fe39 	bl	8000ed4 <HAL_GetTick>
 8003262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003264:	e009      	b.n	800327a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003266:	f7fd fe35 	bl	8000ed4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d902      	bls.n	800327a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	73fb      	strb	r3, [r7, #15]
        break;
 8003278:	e005      	b.n	8003286 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327a:	4b37      	ldr	r3, [pc, #220]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ef      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d160      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d111      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	0211      	lsls	r1, r2, #8
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	0912      	lsrs	r2, r2, #4
 80032aa:	0452      	lsls	r2, r2, #17
 80032ac:	430a      	orrs	r2, r1
 80032ae:	492a      	ldr	r1, [pc, #168]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	610b      	str	r3, [r1, #16]
 80032b4:	e027      	b.n	8003306 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d112      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6892      	ldr	r2, [r2, #8]
 80032cc:	0211      	lsls	r1, r2, #8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6912      	ldr	r2, [r2, #16]
 80032d2:	0852      	lsrs	r2, r2, #1
 80032d4:	3a01      	subs	r2, #1
 80032d6:	0552      	lsls	r2, r2, #21
 80032d8:	430a      	orrs	r2, r1
 80032da:	491f      	ldr	r1, [pc, #124]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	610b      	str	r3, [r1, #16]
 80032e0:	e011      	b.n	8003306 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6892      	ldr	r2, [r2, #8]
 80032f2:	0211      	lsls	r1, r2, #8
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6952      	ldr	r2, [r2, #20]
 80032f8:	0852      	lsrs	r2, r2, #1
 80032fa:	3a01      	subs	r2, #1
 80032fc:	0652      	lsls	r2, r2, #25
 80032fe:	430a      	orrs	r2, r1
 8003300:	4915      	ldr	r1, [pc, #84]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 800330c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003310:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fd fddf 	bl	8000ed4 <HAL_GetTick>
 8003316:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003318:	e009      	b.n	800332e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331a:	f7fd fddb 	bl	8000ed4 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d902      	bls.n	800332e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	73fb      	strb	r3, [r7, #15]
          break;
 800332c:	e005      	b.n	800333a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0ef      	beq.n	800331a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d106      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	4903      	ldr	r1, [pc, #12]	; (8003358 <RCCEx_PLLSAI1_Config+0x1dc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000

0800335c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336a:	4b68      	ldr	r3, [pc, #416]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d018      	beq.n	80033a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003376:	4b65      	ldr	r3, [pc, #404]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d10d      	bne.n	80033a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
       ||
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800338e:	4b5f      	ldr	r3, [pc, #380]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
       ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d044      	beq.n	800342c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	e041      	b.n	800342c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d00c      	beq.n	80033ca <RCCEx_PLLSAI2_Config+0x6e>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d013      	beq.n	80033dc <RCCEx_PLLSAI2_Config+0x80>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d120      	bne.n	80033fa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033b8:	4b54      	ldr	r3, [pc, #336]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d11d      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c8:	e01a      	b.n	8003400 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033da:	e013      	b.n	8003404 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033f8:	e006      	b.n	8003408 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      break;
 80033fe:	e004      	b.n	800340a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003400:	bf00      	nop
 8003402:	e002      	b.n	800340a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003404:	bf00      	nop
 8003406:	e000      	b.n	800340a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003408:	bf00      	nop
    }

    if(status == HAL_OK)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003410:	4b3e      	ldr	r3, [pc, #248]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	3b01      	subs	r3, #1
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	430b      	orrs	r3, r1
 8003426:	4939      	ldr	r1, [pc, #228]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d167      	bne.n	8003502 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a35      	ldr	r2, [pc, #212]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343e:	f7fd fd49 	bl	8000ed4 <HAL_GetTick>
 8003442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003444:	e009      	b.n	800345a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003446:	f7fd fd45 	bl	8000ed4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d902      	bls.n	800345a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	73fb      	strb	r3, [r7, #15]
        break;
 8003458:	e005      	b.n	8003466 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800345a:	4b2c      	ldr	r3, [pc, #176]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ef      	bne.n	8003446 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d14a      	bne.n	8003502 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d111      	bne.n	8003496 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800347a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	0211      	lsls	r1, r2, #8
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68d2      	ldr	r2, [r2, #12]
 8003488:	0912      	lsrs	r2, r2, #4
 800348a:	0452      	lsls	r2, r2, #17
 800348c:	430a      	orrs	r2, r1
 800348e:	491f      	ldr	r1, [pc, #124]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	614b      	str	r3, [r1, #20]
 8003494:	e011      	b.n	80034ba <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003496:	4b1d      	ldr	r3, [pc, #116]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800349e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6892      	ldr	r2, [r2, #8]
 80034a6:	0211      	lsls	r1, r2, #8
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6912      	ldr	r2, [r2, #16]
 80034ac:	0852      	lsrs	r2, r2, #1
 80034ae:	3a01      	subs	r2, #1
 80034b0:	0652      	lsls	r2, r2, #25
 80034b2:	430a      	orrs	r2, r1
 80034b4:	4915      	ldr	r1, [pc, #84]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a13      	ldr	r2, [pc, #76]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd fd05 	bl	8000ed4 <HAL_GetTick>
 80034ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034cc:	e009      	b.n	80034e2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034ce:	f7fd fd01 	bl	8000ed4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d902      	bls.n	80034e2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	73fb      	strb	r3, [r7, #15]
          break;
 80034e0:	e005      	b.n	80034ee <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ef      	beq.n	80034ce <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07c      	b.n	800361c <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f003 fe4f 	bl	80071e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003558:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003562:	d902      	bls.n	800356a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e002      	b.n	8003570 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800356a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003578:	d007      	beq.n	800358a <HAL_SPI_Init+0x7a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003582:	d002      	beq.n	800358a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10b      	bne.n	80035aa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800359a:	d903      	bls.n	80035a4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
 80035a2:	e002      	b.n	80035aa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	ea42 0103 	orr.w	r1, r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	f003 0204 	and.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	ea42 0103 	orr.w	r1, r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	430a      	orrs	r2, r1
 800360a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_SPI_Transmit+0x22>
 8003642:	2302      	movs	r3, #2
 8003644:	e150      	b.n	80038e8 <HAL_SPI_Transmit+0x2c4>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800364e:	f7fd fc41 	bl	8000ed4 <HAL_GetTick>
 8003652:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d002      	beq.n	800366a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003668:	e135      	b.n	80038d6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Transmit+0x52>
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	77fb      	strb	r3, [r7, #31]
    goto error;
 800367a:	e12c      	b.n	80038d6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2203      	movs	r2, #3
 8003680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c6:	d107      	bne.n	80036d8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d007      	beq.n	80036f6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036fe:	d94b      	bls.n	8003798 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_SPI_Transmit+0xea>
 8003708:	8afb      	ldrh	r3, [r7, #22]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d13e      	bne.n	800378c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	881a      	ldrh	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003732:	e02b      	b.n	800378c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d112      	bne.n	8003768 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	1c9a      	adds	r2, r3, #2
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003766:	e011      	b.n	800378c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003768:	f7fd fbb4 	bl	8000ed4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d803      	bhi.n	8003780 <HAL_SPI_Transmit+0x15c>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d102      	bne.n	8003786 <HAL_SPI_Transmit+0x162>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d102      	bne.n	800378c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	77fb      	strb	r3, [r7, #31]
          goto error;
 800378a:	e0a4      	b.n	80038d6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ce      	bne.n	8003734 <HAL_SPI_Transmit+0x110>
 8003796:	e07c      	b.n	8003892 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <HAL_SPI_Transmit+0x182>
 80037a0:	8afb      	ldrh	r3, [r7, #22]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d170      	bne.n	8003888 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d912      	bls.n	80037d6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	1c9a      	adds	r2, r3, #2
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b02      	subs	r3, #2
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037d4:	e058      	b.n	8003888 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037fc:	e044      	b.n	8003888 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b02      	cmp	r3, #2
 800380a:	d12b      	bne.n	8003864 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d912      	bls.n	800383c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	1c9a      	adds	r2, r3, #2
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b02      	subs	r3, #2
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	87da      	strh	r2, [r3, #62]	; 0x3e
 800383a:	e025      	b.n	8003888 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	7812      	ldrb	r2, [r2, #0]
 8003848:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003862:	e011      	b.n	8003888 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003864:	f7fd fb36 	bl	8000ed4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d803      	bhi.n	800387c <HAL_SPI_Transmit+0x258>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d102      	bne.n	8003882 <HAL_SPI_Transmit+0x25e>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003886:	e026      	b.n	80038d6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1b5      	bne.n	80037fe <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fca2 	bl	80041e0 <SPI_EndRxTxTransaction>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e000      	b.n	80038d6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80038d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800390c:	d112      	bne.n	8003934 <HAL_SPI_Receive+0x44>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10e      	bne.n	8003934 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2204      	movs	r2, #4
 800391a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f908 	bl	8003b40 <HAL_SPI_TransmitReceive>
 8003930:	4603      	mov	r3, r0
 8003932:	e101      	b.n	8003b38 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_SPI_Receive+0x52>
 800393e:	2302      	movs	r3, #2
 8003940:	e0fa      	b.n	8003b38 <HAL_SPI_Receive+0x248>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800394a:	f7fd fac3 	bl	8000ed4 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800395c:	2302      	movs	r3, #2
 800395e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003960:	e0e1      	b.n	8003b26 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SPI_Receive+0x7e>
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003972:	e0d8      	b.n	8003b26 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2204      	movs	r2, #4
 8003978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039be:	d908      	bls.n	80039d2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	e007      	b.n	80039e2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d107      	bne.n	80039fc <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d007      	beq.n	8003a1a <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a22:	d867      	bhi.n	8003af4 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a24:	e030      	b.n	8003a88 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d117      	bne.n	8003a64 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f103 020c 	add.w	r2, r3, #12
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003a62:	e011      	b.n	8003a88 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a64:	f7fd fa36 	bl	8000ed4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d803      	bhi.n	8003a7c <HAL_SPI_Receive+0x18c>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d102      	bne.n	8003a82 <HAL_SPI_Receive+0x192>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a86:	e04e      	b.n	8003b26 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1c8      	bne.n	8003a26 <HAL_SPI_Receive+0x136>
 8003a94:	e034      	b.n	8003b00 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d115      	bne.n	8003ad0 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	b292      	uxth	r2, r2
 8003ab0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003ace:	e011      	b.n	8003af4 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad0:	f7fd fa00 	bl	8000ed4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d803      	bhi.n	8003ae8 <HAL_SPI_Receive+0x1f8>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d102      	bne.n	8003aee <HAL_SPI_Receive+0x1fe>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003af2:	e018      	b.n	8003b26 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1ca      	bne.n	8003a96 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	6839      	ldr	r1, [r7, #0]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fb13 	bl	8004130 <SPI_EndRxTransaction>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
 8003b22:	e000      	b.n	8003b26 <HAL_SPI_Receive+0x236>
  }

error :
 8003b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x26>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e1fb      	b.n	8003f5e <HAL_SPI_TransmitReceive+0x41e>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6e:	f7fd f9b1 	bl	8000ed4 <HAL_GetTick>
 8003b72:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b7a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b8a:	7efb      	ldrb	r3, [r7, #27]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d00e      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x6e>
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b96:	d106      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_SPI_TransmitReceive+0x66>
 8003ba0:	7efb      	ldrb	r3, [r7, #27]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d003      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bac:	e1cd      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x80>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_TransmitReceive+0x80>
 8003bba:	887b      	ldrh	r3, [r7, #2]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003bc6:	e1c0      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d003      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	887a      	ldrh	r2, [r7, #2]
 8003c02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c1e:	d802      	bhi.n	8003c26 <HAL_SPI_TransmitReceive+0xe6>
 8003c20:	8a3b      	ldrh	r3, [r7, #16]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d908      	bls.n	8003c38 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	e007      	b.n	8003c48 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c46:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d007      	beq.n	8003c66 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c6e:	d97c      	bls.n	8003d6a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x13e>
 8003c78:	8a7b      	ldrh	r3, [r7, #18]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d169      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	881a      	ldrh	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ca2:	e056      	b.n	8003d52 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d11b      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x1aa>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d016      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x1aa>
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d113      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	1c9a      	adds	r2, r3, #2
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d11c      	bne.n	8003d32 <HAL_SPI_TransmitReceive+0x1f2>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d016      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	1c9a      	adds	r2, r3, #2
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d32:	f7fd f8cf 	bl	8000ed4 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d807      	bhi.n	8003d52 <HAL_SPI_TransmitReceive+0x212>
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d003      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003d50:	e0fb      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1a3      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x164>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d19d      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x164>
 8003d68:	e0df      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_SPI_TransmitReceive+0x23a>
 8003d72:	8a7b      	ldrh	r3, [r7, #18]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	f040 80cb 	bne.w	8003f10 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d912      	bls.n	8003daa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	1c9a      	adds	r2, r3, #2
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b02      	subs	r3, #2
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da8:	e0b2      	b.n	8003f10 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dd0:	e09e      	b.n	8003f10 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d134      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x30a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d02f      	beq.n	8003e4a <HAL_SPI_TransmitReceive+0x30a>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d12c      	bne.n	8003e4a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d912      	bls.n	8003e20 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b02      	subs	r3, #2
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e1e:	e012      	b.n	8003e46 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d148      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x3aa>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d042      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d923      	bls.n	8003eb8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	1c9a      	adds	r2, r3, #2
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	3b02      	subs	r3, #2
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d81f      	bhi.n	8003ee6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	e016      	b.n	8003ee6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f103 020c 	add.w	r2, r3, #12
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eea:	f7fc fff3 	bl	8000ed4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d803      	bhi.n	8003f02 <HAL_SPI_TransmitReceive+0x3c2>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d102      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x3c8>
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003f0e:	e01c      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f af5b 	bne.w	8003dd2 <HAL_SPI_TransmitReceive+0x292>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f47f af54 	bne.w	8003dd2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f956 	bl	80041e0 <SPI_EndRxTxTransaction>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60
 8003f46:	e000      	b.n	8003f4a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003f48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3728      	adds	r7, #40	; 0x28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f74:	b2db      	uxtb	r3, r3
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f92:	e04c      	b.n	800402e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d048      	beq.n	800402e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f9c:	f7fc ff9a 	bl	8000ed4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d902      	bls.n	8003fb2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d13d      	bne.n	800402e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fca:	d111      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd4:	d004      	beq.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d107      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d10f      	bne.n	800401a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004018:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00f      	b.n	800404e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d1a3      	bne.n	8003f94 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004064:	e057      	b.n	8004116 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800406c:	d106      	bne.n	800407c <SPI_WaitFifoStateUntilTimeout+0x26>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d048      	beq.n	8004116 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004084:	f7fc ff26 	bl	8000ed4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d902      	bls.n	800409a <SPI_WaitFifoStateUntilTimeout+0x44>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d13d      	bne.n	8004116 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b2:	d111      	bne.n	80040d8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040bc:	d004      	beq.n	80040c8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d107      	bne.n	80040d8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e0:	d10f      	bne.n	8004102 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e008      	b.n	8004128 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4013      	ands	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d19f      	bne.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004144:	d111      	bne.n	800416a <SPI_EndRxTransaction+0x3a>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d004      	beq.n	800415a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004158:	d107      	bne.n	800416a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff04 	bl	8003f82 <SPI_WaitFlagStateUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e023      	b.n	80041d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004198:	d11d      	bne.n	80041d6 <SPI_EndRxTransaction+0xa6>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a2:	d004      	beq.n	80041ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ac:	d113      	bne.n	80041d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff ff4b 	bl	8004056 <SPI_WaitFifoStateUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e000      	b.n	80041d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff ff2c 	bl	8004056 <SPI_WaitFifoStateUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e027      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff feaf 	bl	8003f82 <SPI_WaitFlagStateUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e014      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff ff05 	bl	8004056 <SPI_WaitFifoStateUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d007      	beq.n	8004262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e000      	b.n	8004264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e040      	b.n	8004300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f003 f81c 	bl	80072cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	; 0x24
 8004298:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f95a 	bl	8004564 <UART_SetConfig>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e022      	b.n	8004300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fc96 	bl	8004bf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fd1d 	bl	8004d38 <UART_CheckIdleState>
 80042fe:	4603      	mov	r3, r0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	; 0x28
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431c:	2b20      	cmp	r3, #32
 800431e:	f040 8081 	bne.w	8004424 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_Transmit+0x26>
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e079      	b.n	8004426 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Transmit+0x38>
 800433c:	2302      	movs	r3, #2
 800433e:	e072      	b.n	8004426 <HAL_UART_Transmit+0x11e>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2221      	movs	r2, #33	; 0x21
 8004352:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004354:	f7fc fdbe 	bl	8000ed4 <HAL_GetTick>
 8004358:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	88fa      	ldrh	r2, [r7, #6]
 8004366:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004372:	d108      	bne.n	8004386 <HAL_UART_Transmit+0x7e>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d104      	bne.n	8004386 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e003      	b.n	800438e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800438e:	e02d      	b.n	80043ec <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2200      	movs	r2, #0
 8004398:	2180      	movs	r1, #128	; 0x80
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fd11 	bl	8004dc2 <UART_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e03d      	b.n	8004426 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043bc:	b292      	uxth	r2, r2
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	3302      	adds	r3, #2
 80043c4:	61bb      	str	r3, [r7, #24]
 80043c6:	e008      	b.n	80043da <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	3301      	adds	r3, #1
 80043d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1cb      	bne.n	8004390 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 fcdd 	bl	8004dc2 <UART_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e009      	b.n	8004426 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	2b20      	cmp	r3, #32
 8004444:	d164      	bne.n	8004510 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_UART_Transmit_DMA+0x22>
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e05d      	b.n	8004512 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UART_Transmit_DMA+0x34>
 8004460:	2302      	movs	r3, #2
 8004462:	e056      	b.n	8004512 <HAL_UART_Transmit_DMA+0xe2>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2221      	movs	r2, #33	; 0x21
 800448c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004492:	2b00      	cmp	r3, #0
 8004494:	d02a      	beq.n	80044ec <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449a:	4a20      	ldr	r2, [pc, #128]	; (800451c <HAL_UART_Transmit_DMA+0xec>)
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a2:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_UART_Transmit_DMA+0xf0>)
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <HAL_UART_Transmit_DMA+0xf4>)
 80044ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b2:	2200      	movs	r2, #0
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	4619      	mov	r1, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3328      	adds	r3, #40	; 0x28
 80044c6:	461a      	mov	r2, r3
 80044c8:	88fb      	ldrh	r3, [r7, #6]
 80044ca:	f7fc fe16 	bl	80010fa <HAL_DMA_Start_IT>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2210      	movs	r2, #16
 80044d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e012      	b.n	8004512 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2240      	movs	r2, #64	; 0x40
 80044f2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800450a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	08004ebd 	.word	0x08004ebd
 8004520:	08004f11 	.word	0x08004f11
 8004524:	08004f2d 	.word	0x08004f2d

08004528 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004564:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004568:	b088      	sub	sp, #32
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	431a      	orrs	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	4313      	orrs	r3, r2
 8004590:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4bac      	ldr	r3, [pc, #688]	; (800484c <UART_SetConfig+0x2e8>)
 800459a:	4013      	ands	r3, r2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4aa2      	ldr	r2, [pc, #648]	; (8004850 <UART_SetConfig+0x2ec>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d004      	beq.n	80045d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a99      	ldr	r2, [pc, #612]	; (8004854 <UART_SetConfig+0x2f0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d121      	bne.n	8004638 <UART_SetConfig+0xd4>
 80045f4:	4b98      	ldr	r3, [pc, #608]	; (8004858 <UART_SetConfig+0x2f4>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d816      	bhi.n	8004630 <UART_SetConfig+0xcc>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0xa4>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004619 	.word	0x08004619
 800460c:	08004625 	.word	0x08004625
 8004610:	0800461f 	.word	0x0800461f
 8004614:	0800462b 	.word	0x0800462b
 8004618:	2301      	movs	r3, #1
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	e0e8      	b.n	80047f0 <UART_SetConfig+0x28c>
 800461e:	2302      	movs	r3, #2
 8004620:	76fb      	strb	r3, [r7, #27]
 8004622:	e0e5      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004624:	2304      	movs	r3, #4
 8004626:	76fb      	strb	r3, [r7, #27]
 8004628:	e0e2      	b.n	80047f0 <UART_SetConfig+0x28c>
 800462a:	2308      	movs	r3, #8
 800462c:	76fb      	strb	r3, [r7, #27]
 800462e:	e0df      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004630:	2310      	movs	r3, #16
 8004632:	76fb      	strb	r3, [r7, #27]
 8004634:	bf00      	nop
 8004636:	e0db      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a87      	ldr	r2, [pc, #540]	; (800485c <UART_SetConfig+0x2f8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d134      	bne.n	80046ac <UART_SetConfig+0x148>
 8004642:	4b85      	ldr	r3, [pc, #532]	; (8004858 <UART_SetConfig+0x2f4>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d829      	bhi.n	80046a4 <UART_SetConfig+0x140>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xf4>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046a5 	.word	0x080046a5
 8004660:	080046a5 	.word	0x080046a5
 8004664:	080046a5 	.word	0x080046a5
 8004668:	08004699 	.word	0x08004699
 800466c:	080046a5 	.word	0x080046a5
 8004670:	080046a5 	.word	0x080046a5
 8004674:	080046a5 	.word	0x080046a5
 8004678:	08004693 	.word	0x08004693
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046a5 	.word	0x080046a5
 8004688:	0800469f 	.word	0x0800469f
 800468c:	2300      	movs	r3, #0
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e0ae      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004692:	2302      	movs	r3, #2
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e0ab      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004698:	2304      	movs	r3, #4
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	e0a8      	b.n	80047f0 <UART_SetConfig+0x28c>
 800469e:	2308      	movs	r3, #8
 80046a0:	76fb      	strb	r3, [r7, #27]
 80046a2:	e0a5      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046a4:	2310      	movs	r3, #16
 80046a6:	76fb      	strb	r3, [r7, #27]
 80046a8:	bf00      	nop
 80046aa:	e0a1      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a6b      	ldr	r2, [pc, #428]	; (8004860 <UART_SetConfig+0x2fc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d120      	bne.n	80046f8 <UART_SetConfig+0x194>
 80046b6:	4b68      	ldr	r3, [pc, #416]	; (8004858 <UART_SetConfig+0x2f4>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d00f      	beq.n	80046e4 <UART_SetConfig+0x180>
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d802      	bhi.n	80046ce <UART_SetConfig+0x16a>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <UART_SetConfig+0x174>
 80046cc:	e010      	b.n	80046f0 <UART_SetConfig+0x18c>
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d005      	beq.n	80046de <UART_SetConfig+0x17a>
 80046d2:	2b30      	cmp	r3, #48	; 0x30
 80046d4:	d009      	beq.n	80046ea <UART_SetConfig+0x186>
 80046d6:	e00b      	b.n	80046f0 <UART_SetConfig+0x18c>
 80046d8:	2300      	movs	r3, #0
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e088      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046de:	2302      	movs	r3, #2
 80046e0:	76fb      	strb	r3, [r7, #27]
 80046e2:	e085      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046e4:	2304      	movs	r3, #4
 80046e6:	76fb      	strb	r3, [r7, #27]
 80046e8:	e082      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046ea:	2308      	movs	r3, #8
 80046ec:	76fb      	strb	r3, [r7, #27]
 80046ee:	e07f      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046f0:	2310      	movs	r3, #16
 80046f2:	76fb      	strb	r3, [r7, #27]
 80046f4:	bf00      	nop
 80046f6:	e07b      	b.n	80047f0 <UART_SetConfig+0x28c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a59      	ldr	r2, [pc, #356]	; (8004864 <UART_SetConfig+0x300>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d120      	bne.n	8004744 <UART_SetConfig+0x1e0>
 8004702:	4b55      	ldr	r3, [pc, #340]	; (8004858 <UART_SetConfig+0x2f4>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d00f      	beq.n	8004730 <UART_SetConfig+0x1cc>
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d802      	bhi.n	800471a <UART_SetConfig+0x1b6>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <UART_SetConfig+0x1c0>
 8004718:	e010      	b.n	800473c <UART_SetConfig+0x1d8>
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d005      	beq.n	800472a <UART_SetConfig+0x1c6>
 800471e:	2bc0      	cmp	r3, #192	; 0xc0
 8004720:	d009      	beq.n	8004736 <UART_SetConfig+0x1d2>
 8004722:	e00b      	b.n	800473c <UART_SetConfig+0x1d8>
 8004724:	2300      	movs	r3, #0
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e062      	b.n	80047f0 <UART_SetConfig+0x28c>
 800472a:	2302      	movs	r3, #2
 800472c:	76fb      	strb	r3, [r7, #27]
 800472e:	e05f      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004730:	2304      	movs	r3, #4
 8004732:	76fb      	strb	r3, [r7, #27]
 8004734:	e05c      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004736:	2308      	movs	r3, #8
 8004738:	76fb      	strb	r3, [r7, #27]
 800473a:	e059      	b.n	80047f0 <UART_SetConfig+0x28c>
 800473c:	2310      	movs	r3, #16
 800473e:	76fb      	strb	r3, [r7, #27]
 8004740:	bf00      	nop
 8004742:	e055      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a47      	ldr	r2, [pc, #284]	; (8004868 <UART_SetConfig+0x304>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d124      	bne.n	8004798 <UART_SetConfig+0x234>
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <UART_SetConfig+0x2f4>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475c:	d012      	beq.n	8004784 <UART_SetConfig+0x220>
 800475e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004762:	d802      	bhi.n	800476a <UART_SetConfig+0x206>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <UART_SetConfig+0x214>
 8004768:	e012      	b.n	8004790 <UART_SetConfig+0x22c>
 800476a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476e:	d006      	beq.n	800477e <UART_SetConfig+0x21a>
 8004770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004774:	d009      	beq.n	800478a <UART_SetConfig+0x226>
 8004776:	e00b      	b.n	8004790 <UART_SetConfig+0x22c>
 8004778:	2300      	movs	r3, #0
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e038      	b.n	80047f0 <UART_SetConfig+0x28c>
 800477e:	2302      	movs	r3, #2
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e035      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004784:	2304      	movs	r3, #4
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	e032      	b.n	80047f0 <UART_SetConfig+0x28c>
 800478a:	2308      	movs	r3, #8
 800478c:	76fb      	strb	r3, [r7, #27]
 800478e:	e02f      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004790:	2310      	movs	r3, #16
 8004792:	76fb      	strb	r3, [r7, #27]
 8004794:	bf00      	nop
 8004796:	e02b      	b.n	80047f0 <UART_SetConfig+0x28c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2c      	ldr	r2, [pc, #176]	; (8004850 <UART_SetConfig+0x2ec>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d124      	bne.n	80047ec <UART_SetConfig+0x288>
 80047a2:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <UART_SetConfig+0x2f4>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d012      	beq.n	80047d8 <UART_SetConfig+0x274>
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b6:	d802      	bhi.n	80047be <UART_SetConfig+0x25a>
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <UART_SetConfig+0x268>
 80047bc:	e012      	b.n	80047e4 <UART_SetConfig+0x280>
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c2:	d006      	beq.n	80047d2 <UART_SetConfig+0x26e>
 80047c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c8:	d009      	beq.n	80047de <UART_SetConfig+0x27a>
 80047ca:	e00b      	b.n	80047e4 <UART_SetConfig+0x280>
 80047cc:	2300      	movs	r3, #0
 80047ce:	76fb      	strb	r3, [r7, #27]
 80047d0:	e00e      	b.n	80047f0 <UART_SetConfig+0x28c>
 80047d2:	2302      	movs	r3, #2
 80047d4:	76fb      	strb	r3, [r7, #27]
 80047d6:	e00b      	b.n	80047f0 <UART_SetConfig+0x28c>
 80047d8:	2304      	movs	r3, #4
 80047da:	76fb      	strb	r3, [r7, #27]
 80047dc:	e008      	b.n	80047f0 <UART_SetConfig+0x28c>
 80047de:	2308      	movs	r3, #8
 80047e0:	76fb      	strb	r3, [r7, #27]
 80047e2:	e005      	b.n	80047f0 <UART_SetConfig+0x28c>
 80047e4:	2310      	movs	r3, #16
 80047e6:	76fb      	strb	r3, [r7, #27]
 80047e8:	bf00      	nop
 80047ea:	e001      	b.n	80047f0 <UART_SetConfig+0x28c>
 80047ec:	2310      	movs	r3, #16
 80047ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a16      	ldr	r2, [pc, #88]	; (8004850 <UART_SetConfig+0x2ec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	f040 80fa 	bne.w	80049f0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047fc:	7efb      	ldrb	r3, [r7, #27]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d836      	bhi.n	8004870 <UART_SetConfig+0x30c>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x2a4>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004871 	.word	0x08004871
 8004810:	08004835 	.word	0x08004835
 8004814:	08004871 	.word	0x08004871
 8004818:	0800483b 	.word	0x0800483b
 800481c:	08004871 	.word	0x08004871
 8004820:	08004871 	.word	0x08004871
 8004824:	08004871 	.word	0x08004871
 8004828:	08004843 	.word	0x08004843
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fe f934 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004830:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004832:	e020      	b.n	8004876 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <UART_SetConfig+0x308>)
 8004836:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004838:	e01d      	b.n	8004876 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800483a:	f7fe f897 	bl	800296c <HAL_RCC_GetSysClockFreq>
 800483e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004840:	e019      	b.n	8004876 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004846:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004848:	e015      	b.n	8004876 <UART_SetConfig+0x312>
 800484a:	bf00      	nop
 800484c:	efff69f3 	.word	0xefff69f3
 8004850:	40008000 	.word	0x40008000
 8004854:	40013800 	.word	0x40013800
 8004858:	40021000 	.word	0x40021000
 800485c:	40004400 	.word	0x40004400
 8004860:	40004800 	.word	0x40004800
 8004864:	40004c00 	.word	0x40004c00
 8004868:	40005000 	.word	0x40005000
 800486c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	74fb      	strb	r3, [r7, #19]
        break;
 8004874:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 81ac 	beq.w	8004bd6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	429a      	cmp	r2, r3
 800488c:	d305      	bcc.n	800489a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	429a      	cmp	r2, r3
 8004898:	d902      	bls.n	80048a0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	74fb      	strb	r3, [r7, #19]
 800489e:	e19a      	b.n	8004bd6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80048a0:	7efb      	ldrb	r3, [r7, #27]
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	f200 8091 	bhi.w	80049ca <UART_SetConfig+0x466>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x34c>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080049cb 	.word	0x080049cb
 80048b8:	08004921 	.word	0x08004921
 80048bc:	080049cb 	.word	0x080049cb
 80048c0:	08004955 	.word	0x08004955
 80048c4:	080049cb 	.word	0x080049cb
 80048c8:	080049cb 	.word	0x080049cb
 80048cc:	080049cb 	.word	0x080049cb
 80048d0:	080049a1 	.word	0x080049a1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80048d4:	f7fe f8e0 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80048d8:	4603      	mov	r3, r0
 80048da:	4619      	mov	r1, r3
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	f04f 0400 	mov.w	r4, #0
 80048e8:	0214      	lsls	r4, r2, #8
 80048ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80048ee:	020b      	lsls	r3, r1, #8
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6852      	ldr	r2, [r2, #4]
 80048f4:	0852      	lsrs	r2, r2, #1
 80048f6:	4611      	mov	r1, r2
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	eb13 0b01 	adds.w	fp, r3, r1
 8004900:	eb44 0c02 	adc.w	ip, r4, r2
 8004904:	4658      	mov	r0, fp
 8004906:	4661      	mov	r1, ip
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f04f 0400 	mov.w	r4, #0
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	f7fc f8fa 	bl	8000b0c <__aeabi_uldivmod>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800491e:	e057      	b.n	80049d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	085b      	lsrs	r3, r3, #1
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	49b1      	ldr	r1, [pc, #708]	; (8004bf0 <UART_SetConfig+0x68c>)
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	eb13 0b01 	adds.w	fp, r3, r1
 8004934:	eb44 0c02 	adc.w	ip, r4, r2
 8004938:	4658      	mov	r0, fp
 800493a:	4661      	mov	r1, ip
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	f7fc f8e0 	bl	8000b0c <__aeabi_uldivmod>
 800494c:	4603      	mov	r3, r0
 800494e:	460c      	mov	r4, r1
 8004950:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004952:	e03d      	b.n	80049d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004954:	f7fe f80a 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	f04f 0400 	mov.w	r4, #0
 8004968:	0214      	lsls	r4, r2, #8
 800496a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800496e:	020b      	lsls	r3, r1, #8
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6852      	ldr	r2, [r2, #4]
 8004974:	0852      	lsrs	r2, r2, #1
 8004976:	4611      	mov	r1, r2
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	eb13 0b01 	adds.w	fp, r3, r1
 8004980:	eb44 0c02 	adc.w	ip, r4, r2
 8004984:	4658      	mov	r0, fp
 8004986:	4661      	mov	r1, ip
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f04f 0400 	mov.w	r4, #0
 8004990:	461a      	mov	r2, r3
 8004992:	4623      	mov	r3, r4
 8004994:	f7fc f8ba 	bl	8000b0c <__aeabi_uldivmod>
 8004998:	4603      	mov	r3, r0
 800499a:	460c      	mov	r4, r1
 800499c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800499e:	e017      	b.n	80049d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	085b      	lsrs	r3, r3, #1
 80049a6:	f04f 0400 	mov.w	r4, #0
 80049aa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80049ae:	f144 0100 	adc.w	r1, r4, #0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f04f 0400 	mov.w	r4, #0
 80049ba:	461a      	mov	r2, r3
 80049bc:	4623      	mov	r3, r4
 80049be:	f7fc f8a5 	bl	8000b0c <__aeabi_uldivmod>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80049c8:	e002      	b.n	80049d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	74fb      	strb	r3, [r7, #19]
            break;
 80049ce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d6:	d308      	bcc.n	80049ea <UART_SetConfig+0x486>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049de:	d204      	bcs.n	80049ea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e0f5      	b.n	8004bd6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	74fb      	strb	r3, [r7, #19]
 80049ee:	e0f2      	b.n	8004bd6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	d17f      	bne.n	8004afa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80049fa:	7efb      	ldrb	r3, [r7, #27]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d85c      	bhi.n	8004aba <UART_SetConfig+0x556>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x4a4>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a4b 	.word	0x08004a4b
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004abb 	.word	0x08004abb
 8004a18:	08004a85 	.word	0x08004a85
 8004a1c:	08004abb 	.word	0x08004abb
 8004a20:	08004abb 	.word	0x08004abb
 8004a24:	08004abb 	.word	0x08004abb
 8004a28:	08004aa3 	.word	0x08004aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a2c:	f7fe f834 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004a30:	4603      	mov	r3, r0
 8004a32:	005a      	lsls	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	441a      	add	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a48:	e03a      	b.n	8004ac0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a4a:	f7fe f83b 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	005a      	lsls	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	441a      	add	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a66:	e02b      	b.n	8004ac0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004a72:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6852      	ldr	r2, [r2, #4]
 8004a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a82:	e01d      	b.n	8004ac0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a84:	f7fd ff72 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	005a      	lsls	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aa0:	e00e      	b.n	8004ac0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004ab8:	e002      	b.n	8004ac0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	74fb      	strb	r3, [r7, #19]
        break;
 8004abe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	d916      	bls.n	8004af4 <UART_SetConfig+0x590>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d212      	bcs.n	8004af4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f023 030f 	bic.w	r3, r3, #15
 8004ad6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	897a      	ldrh	r2, [r7, #10]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e070      	b.n	8004bd6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	74fb      	strb	r3, [r7, #19]
 8004af8:	e06d      	b.n	8004bd6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8004afa:	7efb      	ldrb	r3, [r7, #27]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d859      	bhi.n	8004bb4 <UART_SetConfig+0x650>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <UART_SetConfig+0x5a4>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b49 	.word	0x08004b49
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004bb5 	.word	0x08004bb5
 8004b18:	08004b81 	.word	0x08004b81
 8004b1c:	08004bb5 	.word	0x08004bb5
 8004b20:	08004bb5 	.word	0x08004bb5
 8004b24:	08004bb5 	.word	0x08004bb5
 8004b28:	08004b9d 	.word	0x08004b9d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b2c:	f7fd ffb4 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b46:	e038      	b.n	8004bba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b48:	f7fd ffbc 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b62:	e02a      	b.n	8004bba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004b6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6852      	ldr	r2, [r2, #4]
 8004b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b7e:	e01c      	b.n	8004bba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b80:	f7fd fef4 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b9a:	e00e      	b.n	8004bba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bb2:	e002      	b.n	8004bba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	74fb      	strb	r3, [r7, #19]
        break;
 8004bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b0f      	cmp	r3, #15
 8004bbe:	d908      	bls.n	8004bd2 <UART_SetConfig+0x66e>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d204      	bcs.n	8004bd2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	60da      	str	r2, [r3, #12]
 8004bd0:	e001      	b.n	8004bd6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004bee:	bf00      	nop
 8004bf0:	f4240000 	.word	0xf4240000

08004bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf2:	d10a      	bne.n	8004d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d46:	f7fc f8c5 	bl	8000ed4 <HAL_GetTick>
 8004d4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d10e      	bne.n	8004d78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f82a 	bl	8004dc2 <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e020      	b.n	8004dba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d10e      	bne.n	8004da4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f814 	bl	8004dc2 <UART_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e00a      	b.n	8004dba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd2:	e02a      	b.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d026      	beq.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ddc:	f7fc f87a 	bl	8000ed4 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d302      	bcc.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d11b      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0201 	bic.w	r2, r2, #1
 8004e10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e00f      	b.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d0c5      	beq.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d114      	bne.n	8004f02 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eee:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004efe:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f00:	e002      	b.n	8004f08 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff fb10 	bl	8004528 <HAL_UART_TxCpltCallback>
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff fb0c 	bl	800453c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d109      	bne.n	8004f68 <UART_DMAError+0x3c>
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b21      	cmp	r3, #33	; 0x21
 8004f58:	d106      	bne.n	8004f68 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004f62:	6978      	ldr	r0, [r7, #20]
 8004f64:	f7ff ff75 	bl	8004e52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d109      	bne.n	8004f8a <UART_DMAError+0x5e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b22      	cmp	r3, #34	; 0x22
 8004f7a:	d106      	bne.n	8004f8a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004f84:	6978      	ldr	r0, [r7, #20]
 8004f86:	f7ff ff79 	bl	8004e7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f8e:	f043 0210 	orr.w	r2, r3, #16
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f96:	6978      	ldr	r0, [r7, #20]
 8004f98:	f7ff fada 	bl	8004550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <ICM_readBytes>:
#include "main.h"
#include "ICM_20948.h"


void ICM_readBytes(uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	71fb      	strb	r3, [r7, #7]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80bb      	strh	r3, [r7, #4]
	reg = reg | 0x80;
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2110      	movs	r1, #16
 8004fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fc6:	f7fc fad1 	bl	800156c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8004fca:	1df9      	adds	r1, r7, #7
 8004fcc:	2332      	movs	r3, #50	; 0x32
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <ICM_readBytes+0x54>)
 8004fd2:	f7fe fb27 	bl	8003624 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BUS, pData, Size, 50);
 8004fd6:	88ba      	ldrh	r2, [r7, #4]
 8004fd8:	2332      	movs	r3, #50	; 0x32
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	4806      	ldr	r0, [pc, #24]	; (8004ff8 <ICM_readBytes+0x54>)
 8004fde:	f7fe fc87 	bl	80038f0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	2110      	movs	r1, #16
 8004fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fea:	f7fc fabf 	bl	800156c <HAL_GPIO_WritePin>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	200001b8 	.word	0x200001b8

08004ffc <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(uint8_t reg, uint8_t* pData) // ***
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	71fb      	strb	r3, [r7, #7]
	reg = reg | 0x80;
 8005008:	79fb      	ldrb	r3, [r7, #7]
 800500a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800500e:	b2db      	uxtb	r3, r3
 8005010:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8005012:	2200      	movs	r2, #0
 8005014:	2110      	movs	r1, #16
 8005016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800501a:	f7fc faa7 	bl	800156c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 800501e:	1df9      	adds	r1, r7, #7
 8005020:	2332      	movs	r3, #50	; 0x32
 8005022:	2201      	movs	r2, #1
 8005024:	4810      	ldr	r0, [pc, #64]	; (8005068 <ICM_ReadOneByte+0x6c>)
 8005026:	f7fe fafd 	bl	8003624 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 800502a:	bf00      	nop
 800502c:	480e      	ldr	r0, [pc, #56]	; (8005068 <ICM_ReadOneByte+0x6c>)
 800502e:	f7fe ff9a 	bl	8003f66 <HAL_SPI_GetState>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d1f9      	bne.n	800502c <ICM_ReadOneByte+0x30>
		;
	HAL_SPI_Receive(SPI_BUS, pData, 1, 50);
 8005038:	2332      	movs	r3, #50	; 0x32
 800503a:	2201      	movs	r2, #1
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	480a      	ldr	r0, [pc, #40]	; (8005068 <ICM_ReadOneByte+0x6c>)
 8005040:	f7fe fc56 	bl	80038f0 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(SPI_BUS) != HAL_SPI_STATE_READY)
 8005044:	bf00      	nop
 8005046:	4808      	ldr	r0, [pc, #32]	; (8005068 <ICM_ReadOneByte+0x6c>)
 8005048:	f7fe ff8d 	bl	8003f66 <HAL_SPI_GetState>
 800504c:	4603      	mov	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d1f9      	bne.n	8005046 <ICM_ReadOneByte+0x4a>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8005052:	2201      	movs	r2, #1
 8005054:	2110      	movs	r1, #16
 8005056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800505a:	f7fc fa87 	bl	800156c <HAL_GPIO_WritePin>
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	200001b8 	.word	0x200001b8

0800506c <ICM_WriteOneByte>:

void ICM_WriteOneByte(uint8_t reg, uint8_t Data) // ***
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	460a      	mov	r2, r1
 8005076:	71fb      	strb	r3, [r7, #7]
 8005078:	4613      	mov	r3, r2
 800507a:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005082:	b2db      	uxtb	r3, r3
 8005084:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8005086:	2200      	movs	r2, #0
 8005088:	2110      	movs	r1, #16
 800508a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800508e:	f7fc fa6d 	bl	800156c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BUS, &reg, 1, 50);
 8005092:	1df9      	adds	r1, r7, #7
 8005094:	2332      	movs	r3, #50	; 0x32
 8005096:	2201      	movs	r2, #1
 8005098:	4809      	ldr	r0, [pc, #36]	; (80050c0 <ICM_WriteOneByte+0x54>)
 800509a:	f7fe fac3 	bl	8003624 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BUS, &Data, 1, 50);
 800509e:	1db9      	adds	r1, r7, #6
 80050a0:	2332      	movs	r3, #50	; 0x32
 80050a2:	2201      	movs	r2, #1
 80050a4:	4806      	ldr	r0, [pc, #24]	; (80050c0 <ICM_WriteOneByte+0x54>)
 80050a6:	f7fe fabd 	bl	8003624 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80050aa:	2201      	movs	r2, #1
 80050ac:	2110      	movs	r1, #16
 80050ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b2:	f7fc fa5b 	bl	800156c <HAL_GPIO_WritePin>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	200001b8 	.word	0x200001b8

080050c4 <i2c_Mag_write>:

void i2c_Mag_write(uint8_t reg,uint8_t value)
  {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	460a      	mov	r2, r1
 80050ce:	71fb      	strb	r3, [r7, #7]
 80050d0:	4613      	mov	r3, r2
 80050d2:	71bb      	strb	r3, [r7, #6]
  	ICM_WriteOneByte(0x7F, 0x30);
 80050d4:	2130      	movs	r1, #48	; 0x30
 80050d6:	207f      	movs	r0, #127	; 0x7f
 80050d8:	f7ff ffc8 	bl	800506c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fb ff05 	bl	8000eec <HAL_Delay>
  	ICM_WriteOneByte(0x03 ,0x0C);//mode: write
 80050e2:	210c      	movs	r1, #12
 80050e4:	2003      	movs	r0, #3
 80050e6:	f7ff ffc1 	bl	800506c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80050ea:	2001      	movs	r0, #1
 80050ec:	f7fb fefe 	bl	8000eec <HAL_Delay>
  	ICM_WriteOneByte(0x04 ,reg);//set reg addr
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	4619      	mov	r1, r3
 80050f4:	2004      	movs	r0, #4
 80050f6:	f7ff ffb9 	bl	800506c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7fb fef6 	bl	8000eec <HAL_Delay>
  	ICM_WriteOneByte(0x06 ,value);//send value
 8005100:	79bb      	ldrb	r3, [r7, #6]
 8005102:	4619      	mov	r1, r3
 8005104:	2006      	movs	r0, #6
 8005106:	f7ff ffb1 	bl	800506c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800510a:	2001      	movs	r0, #1
 800510c:	f7fb feee 	bl	8000eec <HAL_Delay>
  }
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(void) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b0b4      	sub	sp, #208	; 0xd0
 800511c:	af00      	add	r7, sp, #0
	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 800511e:	23ea      	movs	r3, #234	; 0xea
 8005120:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint8_t test = ICM_WHOAMI();
 8005124:	f000 f96e 	bl	8005404 <ICM_WHOAMI>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
	if (test == whoami) {
 800512e:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8005132:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8005136:	429a      	cmp	r2, r3
 8005138:	d122      	bne.n	8005180 <ICM_PowerOn+0x68>
		ICM_CSHigh();
 800513a:	f000 f93b 	bl	80053b4 <ICM_CSHigh>
		HAL_Delay(10);
 800513e:	200a      	movs	r0, #10
 8005140:	f7fb fed4 	bl	8000eec <HAL_Delay>
		ICM_SelectBank(USER_BANK_0);
 8005144:	2000      	movs	r0, #0
 8005146:	f000 f91f 	bl	8005388 <ICM_SelectBank>
		HAL_Delay(10);
 800514a:	200a      	movs	r0, #10
 800514c:	f7fb fece 	bl	8000eec <HAL_Delay>
		ICM_Disable_I2C();
 8005150:	f000 f928 	bl	80053a4 <ICM_Disable_I2C>
		HAL_Delay(10);
 8005154:	200a      	movs	r0, #10
 8005156:	f7fb fec9 	bl	8000eec <HAL_Delay>
		ICM_SetClock((uint8_t)CLK_BEST_AVAIL);
 800515a:	2001      	movs	r0, #1
 800515c:	f000 f934 	bl	80053c8 <ICM_SetClock>
		HAL_Delay(10);
 8005160:	200a      	movs	r0, #10
 8005162:	f7fb fec3 	bl	8000eec <HAL_Delay>
		ICM_AccelGyroOff();
 8005166:	f000 f93d 	bl	80053e4 <ICM_AccelGyroOff>
		HAL_Delay(20);
 800516a:	2014      	movs	r0, #20
 800516c:	f7fb febe 	bl	8000eec <HAL_Delay>
		ICM_AccelGyroOn();
 8005170:	f000 f940 	bl	80053f4 <ICM_AccelGyroOn>
		HAL_Delay(10);
 8005174:	200a      	movs	r0, #10
 8005176:	f7fb feb9 	bl	8000eec <HAL_Delay>
		ICM_Initialize();
 800517a:	f000 f81f 	bl	80051bc <ICM_Initialize>
	} else {
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		HAL_Delay(100);
	}
}
 800517e:	e014      	b.n	80051aa <ICM_PowerOn+0x92>
		sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
 8005180:	f897 20ce 	ldrb.w	r2, [r7, #206]	; 0xce
 8005184:	1d3b      	adds	r3, r7, #4
 8005186:	490b      	ldr	r1, [pc, #44]	; (80051b4 <ICM_PowerOn+0x9c>)
 8005188:	4618      	mov	r0, r3
 800518a:	f002 f9db 	bl	8007544 <siprintf>
		HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
 800518e:	1d3b      	adds	r3, r7, #4
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb f81d 	bl	80001d0 <strlen>
 8005196:	4603      	mov	r3, r0
 8005198:	b29a      	uxth	r2, r3
 800519a:	1d3b      	adds	r3, r7, #4
 800519c:	4619      	mov	r1, r3
 800519e:	4806      	ldr	r0, [pc, #24]	; (80051b8 <ICM_PowerOn+0xa0>)
 80051a0:	f7ff f946 	bl	8004430 <HAL_UART_Transmit_DMA>
		HAL_Delay(100);
 80051a4:	2064      	movs	r0, #100	; 0x64
 80051a6:	f7fb fea1 	bl	8000eec <HAL_Delay>
}
 80051aa:	bf00      	nop
 80051ac:	37d0      	adds	r7, #208	; 0xd0
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	08007d54 	.word	0x08007d54
 80051b8:	2000021c 	.word	0x2000021c

080051bc <ICM_Initialize>:
uint16_t ICM_Initialize(void) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
		ICM_SelectBank(USER_BANK_2);
 80051c0:	2020      	movs	r0, #32
 80051c2:	f000 f8e1 	bl	8005388 <ICM_SelectBank>
		HAL_Delay(20);
 80051c6:	2014      	movs	r0, #20
 80051c8:	f7fb fe90 	bl	8000eec <HAL_Delay>
		ICM_SetGyroRateLPF(GYRO_RATE_500, GYRO_LPF_17HZ);
 80051cc:	2129      	movs	r1, #41	; 0x29
 80051ce:	2001      	movs	r0, #1
 80051d0:	f000 f927 	bl	8005422 <ICM_SetGyroRateLPF>
		//ICM_SetGyroRateLPF(GYRO_RATE_500, 0x00);
		HAL_Delay(10);
 80051d4:	200a      	movs	r0, #10
 80051d6:	f7fb fe89 	bl	8000eec <HAL_Delay>


		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(0x00, 0x0A);
 80051da:	210a      	movs	r1, #10
 80051dc:	2000      	movs	r0, #0
 80051de:	f7ff ff45 	bl	800506c <ICM_WriteOneByte>
		HAL_Delay(10);
 80051e2:	200a      	movs	r0, #10
 80051e4:	f7fb fe82 	bl	8000eec <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(0x14, (0x04 | 0x11));
 80051e8:	2115      	movs	r1, #21
 80051ea:	2014      	movs	r0, #20
 80051ec:	f7ff ff3e 	bl	800506c <ICM_WriteOneByte>
		//ICM_WriteOneByte(0x14, 0x04);

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(0x10, 0x00);
 80051f0:	2100      	movs	r1, #0
 80051f2:	2010      	movs	r0, #16
 80051f4:	f7ff ff3a 	bl	800506c <ICM_WriteOneByte>
		HAL_Delay(10);
 80051f8:	200a      	movs	r0, #10
 80051fa:	f7fb fe77 	bl	8000eec <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(0x11, 0x0A);
 80051fe:	210a      	movs	r1, #10
 8005200:	2011      	movs	r0, #17
 8005202:	f7ff ff33 	bl	800506c <ICM_WriteOneByte>
		HAL_Delay(10);
 8005206:	200a      	movs	r0, #10
 8005208:	f7fb fe70 	bl	8000eec <HAL_Delay>

		ICM_SelectBank(USER_BANK_2);
 800520c:	2020      	movs	r0, #32
 800520e:	f000 f8bb 	bl	8005388 <ICM_SelectBank>
		HAL_Delay(20);
 8005212:	2014      	movs	r0, #20
 8005214:	f7fb fe6a 	bl	8000eec <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(0x7F, 0x00); // Select user bank 0
 8005218:	2100      	movs	r1, #0
 800521a:	207f      	movs	r0, #127	; 0x7f
 800521c:	f7ff ff26 	bl	800506c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8005220:	2130      	movs	r1, #48	; 0x30
 8005222:	200f      	movs	r0, #15
 8005224:	f7ff ff22 	bl	800506c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x03, 0x20); // I2C_MST_EN
 8005228:	2120      	movs	r1, #32
 800522a:	2003      	movs	r0, #3
 800522c:	f7ff ff1e 	bl	800506c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x7F, 0x30); // Select user bank 3
 8005230:	2130      	movs	r1, #48	; 0x30
 8005232:	207f      	movs	r0, #127	; 0x7f
 8005234:	f7ff ff1a 	bl	800506c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8005238:	214d      	movs	r1, #77	; 0x4d
 800523a:	2001      	movs	r0, #1
 800523c:	f7ff ff16 	bl	800506c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8005240:	2101      	movs	r1, #1
 8005242:	2002      	movs	r0, #2
 8005244:	f7ff ff12 	bl	800506c <ICM_WriteOneByte>
		ICM_WriteOneByte(0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8005248:	2181      	movs	r1, #129	; 0x81
 800524a:	2005      	movs	r0, #5
 800524c:	f7ff ff0e 	bl	800506c <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(0x32, 0x01); // Reset AK8963
 8005250:	2101      	movs	r1, #1
 8005252:	2032      	movs	r0, #50	; 0x32
 8005254:	f7ff ff36 	bl	80050c4 <i2c_Mag_write>
		HAL_Delay(1000);
 8005258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800525c:	f7fb fe46 	bl	8000eec <HAL_Delay>
		i2c_Mag_write(0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8005260:	2102      	movs	r1, #2
 8005262:	2031      	movs	r0, #49	; 0x31
 8005264:	f7ff ff2e 	bl	80050c4 <i2c_Mag_write>

		return 1337;
 8005268:	f240 5339 	movw	r3, #1337	; 0x539
	}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}

08005270 <ICM_ReadAccelGyro>:

void ICM_ReadAccelGyro(void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
	uint8_t raw_data[12];
	ICM_readBytes(0x2D, raw_data, 12);
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	220c      	movs	r2, #12
 800527a:	4619      	mov	r1, r3
 800527c:	202d      	movs	r0, #45	; 0x2d
 800527e:	f7ff fe91 	bl	8004fa4 <ICM_readBytes>

	accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8005282:	793b      	ldrb	r3, [r7, #4]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	b21a      	sxth	r2, r3
 8005288:	797b      	ldrb	r3, [r7, #5]
 800528a:	b21b      	sxth	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b21a      	sxth	r2, r3
 8005290:	4b3a      	ldr	r3, [pc, #232]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 8005292:	801a      	strh	r2, [r3, #0]
	accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8005294:	79bb      	ldrb	r3, [r7, #6]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	b21a      	sxth	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	b21b      	sxth	r3, r3
 800529e:	4313      	orrs	r3, r2
 80052a0:	b21a      	sxth	r2, r3
 80052a2:	4b36      	ldr	r3, [pc, #216]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 80052a4:	805a      	strh	r2, [r3, #2]
	accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 80052a6:	7a3b      	ldrb	r3, [r7, #8]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	7a7b      	ldrb	r3, [r7, #9]
 80052ae:	b21b      	sxth	r3, r3
 80052b0:	4313      	orrs	r3, r2
 80052b2:	b21a      	sxth	r2, r3
 80052b4:	4b31      	ldr	r3, [pc, #196]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 80052b6:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 80052b8:	7abb      	ldrb	r3, [r7, #10]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b21a      	sxth	r2, r3
 80052be:	7afb      	ldrb	r3, [r7, #11]
 80052c0:	b21b      	sxth	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b21a      	sxth	r2, r3
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 80052c8:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 80052ca:	7b3b      	ldrb	r3, [r7, #12]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	b21a      	sxth	r2, r3
 80052d0:	7b7b      	ldrb	r3, [r7, #13]
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b21a      	sxth	r2, r3
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 80052da:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	b21a      	sxth	r2, r3
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b21a      	sxth	r2, r3
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 80052ec:	809a      	strh	r2, [r3, #4]

	accel_data[0] = accel_data[0] / 8;
 80052ee:	4b23      	ldr	r3, [pc, #140]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 80052f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	da00      	bge.n	80052fa <ICM_ReadAccelGyro+0x8a>
 80052f8:	3307      	adds	r3, #7
 80052fa:	10db      	asrs	r3, r3, #3
 80052fc:	b21a      	sxth	r2, r3
 80052fe:	4b1f      	ldr	r3, [pc, #124]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 8005300:	801a      	strh	r2, [r3, #0]
	accel_data[1] = accel_data[1] / 8;
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 8005304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005308:	2b00      	cmp	r3, #0
 800530a:	da00      	bge.n	800530e <ICM_ReadAccelGyro+0x9e>
 800530c:	3307      	adds	r3, #7
 800530e:	10db      	asrs	r3, r3, #3
 8005310:	b21a      	sxth	r2, r3
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 8005314:	805a      	strh	r2, [r3, #2]
	accel_data[2] = accel_data[2] / 8;
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 8005318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da00      	bge.n	8005322 <ICM_ReadAccelGyro+0xb2>
 8005320:	3307      	adds	r3, #7
 8005322:	10db      	asrs	r3, r3, #3
 8005324:	b21a      	sxth	r2, r3
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <ICM_ReadAccelGyro+0x10c>)
 8005328:	809a      	strh	r2, [r3, #4]

	gyro_data[0] = gyro_data[0] / 250;
 800532a:	4b15      	ldr	r3, [pc, #84]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 800532c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <ICM_ReadAccelGyro+0x114>)
 8005332:	fb82 1203 	smull	r1, r2, r2, r3
 8005336:	1112      	asrs	r2, r2, #4
 8005338:	17db      	asrs	r3, r3, #31
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	b21a      	sxth	r2, r3
 800533e:	4b10      	ldr	r3, [pc, #64]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 8005340:	801a      	strh	r2, [r3, #0]
	gyro_data[1] = gyro_data[1] / 250;
 8005342:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 8005344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005348:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <ICM_ReadAccelGyro+0x114>)
 800534a:	fb82 1203 	smull	r1, r2, r2, r3
 800534e:	1112      	asrs	r2, r2, #4
 8005350:	17db      	asrs	r3, r3, #31
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	b21a      	sxth	r2, r3
 8005356:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 8005358:	805a      	strh	r2, [r3, #2]
	gyro_data[2] = gyro_data[2] / 250;
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 800535c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <ICM_ReadAccelGyro+0x114>)
 8005362:	fb82 1203 	smull	r1, r2, r2, r3
 8005366:	1112      	asrs	r2, r2, #4
 8005368:	17db      	asrs	r3, r3, #31
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	b21a      	sxth	r2, r3
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <ICM_ReadAccelGyro+0x110>)
 8005370:	809a      	strh	r2, [r3, #4]
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200001a8 	.word	0x200001a8
 8005380:	200001b0 	.word	0x200001b0
 8005384:	10624dd3 	.word	0x10624dd3

08005388 <ICM_SelectBank>:
void ICM_SelectBank(uint8_t bank) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(USER_BANK_SEL, bank);
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	4619      	mov	r1, r3
 8005396:	207f      	movs	r0, #127	; 0x7f
 8005398:	f7ff fe68 	bl	800506c <ICM_WriteOneByte>
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <ICM_Disable_I2C>:
void ICM_Disable_I2C(void) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x03, 0x78);
 80053a8:	2178      	movs	r1, #120	; 0x78
 80053aa:	2003      	movs	r0, #3
 80053ac:	f7ff fe5e 	bl	800506c <ICM_WriteOneByte>
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 80053b8:	2201      	movs	r2, #1
 80053ba:	2110      	movs	r1, #16
 80053bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053c0:	f7fc f8d4 	bl	800156c <HAL_GPIO_WritePin>
}
 80053c4:	bf00      	nop
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(uint8_t clk) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	71fb      	strb	r3, [r7, #7]
	ICM_WriteOneByte(PWR_MGMT_1, clk);
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4619      	mov	r1, r3
 80053d6:	2006      	movs	r0, #6
 80053d8:	f7ff fe48 	bl	800506c <ICM_WriteOneByte>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(void) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(PWR_MGMT_2, (0x38 | 0x07));
 80053e8:	213f      	movs	r1, #63	; 0x3f
 80053ea:	2007      	movs	r0, #7
 80053ec:	f7ff fe3e 	bl	800506c <ICM_WriteOneByte>
}
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(void) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
	ICM_WriteOneByte(0x07, (0x00 | 0x00));
 80053f8:	2100      	movs	r1, #0
 80053fa:	2007      	movs	r0, #7
 80053fc:	f7ff fe36 	bl	800506c <ICM_WriteOneByte>
}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}

08005404 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
	uint8_t spiData = 0x01;
 800540a:	2301      	movs	r3, #1
 800540c:	71fb      	strb	r3, [r7, #7]
	ICM_ReadOneByte(0x00, &spiData);
 800540e:	1dfb      	adds	r3, r7, #7
 8005410:	4619      	mov	r1, r3
 8005412:	2000      	movs	r0, #0
 8005414:	f7ff fdf2 	bl	8004ffc <ICM_ReadOneByte>
	return spiData;
 8005418:	79fb      	ldrb	r3, [r7, #7]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(uint8_t rate, uint8_t lpf) {
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	4603      	mov	r3, r0
 800542a:	460a      	mov	r2, r1
 800542c:	71fb      	strb	r3, [r7, #7]
 800542e:	4613      	mov	r3, r2
 8005430:	71bb      	strb	r3, [r7, #6]
	ICM_WriteOneByte(GYRO_CONFIG_1, (rate|lpf));
 8005432:	79fa      	ldrb	r2, [r7, #7]
 8005434:	79bb      	ldrb	r3, [r7, #6]
 8005436:	4313      	orrs	r3, r2
 8005438:	b2db      	uxtb	r3, r3
 800543a:	4619      	mov	r1, r3
 800543c:	2001      	movs	r0, #1
 800543e:	f7ff fe15 	bl	800506c <ICM_WriteOneByte>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <MAX86150_setup>:

/**********************************************************************************
 * FUNCTION DEFINITIONS
 **********************************************************************************/

void MAX86150_setup() {
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
	// =====================================

	// Copying this setup code from github
	//sprintf(uartBuffer, "Before: %d\r\n", readRegister8(MAX86150_Address, MAX86150_SystemControl));
	//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 1000);
	writeRegister8(MAX86150_Address, MAX86150_SystemControl,0x01);
 8005450:	230d      	movs	r3, #13
 8005452:	2201      	movs	r2, #1
 8005454:	4619      	mov	r1, r3
 8005456:	20bc      	movs	r0, #188	; 0xbc
 8005458:	f000 f89a 	bl	8005590 <writeRegister8>
	HAL_Delay(100);
 800545c:	2064      	movs	r0, #100	; 0x64
 800545e:	f7fb fd45 	bl	8000eec <HAL_Delay>
	//sprintf(uartBuffer, "After: %d\r\n", readRegister8(MAX86150_Address, MAX86150_SystemControl));
	//HAL_UART_Transmit(&huart1, (uint8_t*)uartBuffer, strlen(uartBuffer), 1000);
	writeRegister8(MAX86150_Address, MAX86150_FIFOConfig,0x7F);
 8005462:	2308      	movs	r3, #8
 8005464:	227f      	movs	r2, #127	; 0x7f
 8005466:	4619      	mov	r1, r3
 8005468:	20bc      	movs	r0, #188	; 0xbc
 800546a:	f000 f891 	bl	8005590 <writeRegister8>
	// Default to average 4 samples
//	setFIFOAverage(MAX86150_SMPAVG_4);
	setFIFOAverage(0x5F);
 800546e:	205f      	movs	r0, #95	; 0x5f
 8005470:	f000 f8ac 	bl	80055cc <setFIFOAverage>


	uint16_t FIFOCode = 0x00;
 8005474:	2300      	movs	r3, #0
 8005476:	80fb      	strh	r3, [r7, #6]

	FIFOCode = FIFOCode<<4 | 0x0009;// : FIFOCode;  //insert ECG front of ETI in FIFO
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	b21b      	sxth	r3, r3
 800547e:	f043 0309 	orr.w	r3, r3, #9
 8005482:	b21b      	sxth	r3, r3
 8005484:	80fb      	strh	r3, [r7, #6]
	FIFOCode = FIFOCode<<8 | 0x0021;//) : FIFOCode; //insert Red(2) and IR (1) in front of ECG in FIFO
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	b21b      	sxth	r3, r3
 800548c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005490:	b21b      	sxth	r3, r3
 8005492:	80fb      	strh	r3, [r7, #6]

	writeRegister8(MAX86150_Address, MAX86150_FIFODataControl1,(0b00100001));
 8005494:	2309      	movs	r3, #9
 8005496:	2221      	movs	r2, #33	; 0x21
 8005498:	4619      	mov	r1, r3
 800549a:	20bc      	movs	r0, #188	; 0xbc
 800549c:	f000 f878 	bl	8005590 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_FIFODataControl2,(0b00001001));
 80054a0:	230a      	movs	r3, #10
 80054a2:	2209      	movs	r2, #9
 80054a4:	4619      	mov	r1, r3
 80054a6:	20bc      	movs	r0, #188	; 0xbc
 80054a8:	f000 f872 	bl	8005590 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_PPGConfig1,(0b11010001));
 80054ac:	230e      	movs	r3, #14
 80054ae:	22d1      	movs	r2, #209	; 0xd1
 80054b0:	4619      	mov	r1, r3
 80054b2:	20bc      	movs	r0, #188	; 0xbc
 80054b4:	f000 f86c 	bl	8005590 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_PPGConfig2,0x06);
 80054b8:	230f      	movs	r3, #15
 80054ba:	2206      	movs	r2, #6
 80054bc:	4619      	mov	r1, r3
 80054be:	20bc      	movs	r0, #188	; 0xbc
 80054c0:	f000 f866 	bl	8005590 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_LEDRange,0x00);
 80054c4:	2314      	movs	r3, #20
 80054c6:	2200      	movs	r2, #0
 80054c8:	4619      	mov	r1, r3
 80054ca:	20bc      	movs	r0, #188	; 0xbc
 80054cc:	f000 f860 	bl	8005590 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_SystemControl,0x04); // start FIFO
 80054d0:	230d      	movs	r3, #13
 80054d2:	2204      	movs	r2, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	20bc      	movs	r0, #188	; 0xbc
 80054d8:	f000 f85a 	bl	8005590 <writeRegister8>

	writeRegister8(MAX86150_Address, MAX86150_ECGConfig1,0b00000011);
 80054dc:	233c      	movs	r3, #60	; 0x3c
 80054de:	2203      	movs	r2, #3
 80054e0:	4619      	mov	r1, r3
 80054e2:	20bc      	movs	r0, #188	; 0xbc
 80054e4:	f000 f854 	bl	8005590 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_ECGConfig2,0b00001101);
 80054e8:	233e      	movs	r3, #62	; 0x3e
 80054ea:	220d      	movs	r2, #13
 80054ec:	4619      	mov	r1, r3
 80054ee:	20bc      	movs	r0, #188	; 0xbc
 80054f0:	f000 f84e 	bl	8005590 <writeRegister8>

	setPulseAmplitudeRed(0xFF);
 80054f4:	20ff      	movs	r0, #255	; 0xff
 80054f6:	f000 f878 	bl	80055ea <setPulseAmplitudeRed>
	setPulseAmplitudeIR(0xFF);
 80054fa:	20ff      	movs	r0, #255	; 0xff
 80054fc:	f000 f884 	bl	8005608 <setPulseAmplitudeIR>

	clearFIFO();
 8005500:	f000 f891 	bl	8005626 <clearFIFO>
//	setPulseAmplitudeRed(0x3F);
//	setPulseAmplitudeIR(0x3F);
	// 0x7F = 25.4 mA
//	setPulseAmplitudeProximity(0x7F);

}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <bitMask>:

// Given a register, read from it, mask the bits, change it
void bitMask(uint8_t reg, uint8_t mask, uint8_t value) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
 8005516:	460b      	mov	r3, r1
 8005518:	71bb      	strb	r3, [r7, #6]
 800551a:	4613      	mov	r3, r2
 800551c:	717b      	strb	r3, [r7, #5]

	// Read the contents of the register
	uint8_t originalContents = readRegister8(MAX86150_Address, reg);
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	4619      	mov	r1, r3
 8005522:	20bc      	movs	r0, #188	; 0xbc
 8005524:	f000 f814 	bl	8005550 <readRegister8>
 8005528:	4603      	mov	r3, r0
 800552a:	73fb      	strb	r3, [r7, #15]

	// Zero-out portions of the register I'm interested in
	originalContents = (reg & mask);
 800552c:	79fa      	ldrb	r2, [r7, #7]
 800552e:	79bb      	ldrb	r3, [r7, #6]
 8005530:	4013      	ands	r3, r2
 8005532:	73fb      	strb	r3, [r7, #15]

	// Change contents
	writeRegister8(MAX86150_Address, reg, (originalContents | value));
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	797b      	ldrb	r3, [r7, #5]
 8005538:	4313      	orrs	r3, r2
 800553a:	b2da      	uxtb	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	4619      	mov	r1, r3
 8005540:	20bc      	movs	r0, #188	; 0xbc
 8005542:	f000 f825 	bl	8005590 <writeRegister8>
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <readRegister8>:
}



// I2C Communication
uint8_t readRegister8(uint8_t address, uint8_t reg) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af02      	add	r7, sp, #8
 8005556:	4603      	mov	r3, r0
 8005558:	460a      	mov	r2, r1
 800555a:	71fb      	strb	r3, [r7, #7]
 800555c:	4613      	mov	r3, r2
 800555e:	71bb      	strb	r3, [r7, #6]

//	uint8_t data[2];
	uint8_t registerContents;
//	data[0] = reg;

	HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, &reg, 1, 100);
 8005560:	1dba      	adds	r2, r7, #6
 8005562:	2364      	movs	r3, #100	; 0x64
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	2301      	movs	r3, #1
 8005568:	21bc      	movs	r1, #188	; 0xbc
 800556a:	4808      	ldr	r0, [pc, #32]	; (800558c <readRegister8+0x3c>)
 800556c:	f7fc f8a6 	bl	80016bc <HAL_I2C_Master_Transmit>


	// Store the data from the I2C Communication in data[1]
	HAL_I2C_Master_Receive(&hi2c1, MAX86150_Address, &registerContents, 1, 100);
 8005570:	f107 020f 	add.w	r2, r7, #15
 8005574:	2364      	movs	r3, #100	; 0x64
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2301      	movs	r3, #1
 800557a:	21bc      	movs	r1, #188	; 0xbc
 800557c:	4803      	ldr	r0, [pc, #12]	; (800558c <readRegister8+0x3c>)
 800557e:	f7fc f991 	bl	80018a4 <HAL_I2C_Master_Receive>

	return registerContents;
 8005582:	7bfb      	ldrb	r3, [r7, #15]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200002a4 	.word	0x200002a4

08005590 <writeRegister8>:

// The 7-bit address of device, the register you want to write to, the value you want to write
void writeRegister8(uint8_t SevenBitAddress, uint8_t reg, uint8_t value) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af02      	add	r7, sp, #8
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
 800559a:	460b      	mov	r3, r1
 800559c:	71bb      	strb	r3, [r7, #6]
 800559e:	4613      	mov	r3, r2
 80055a0:	717b      	strb	r3, [r7, #5]

	uint8_t data[2];

	data[0] = reg;
 80055a2:	79bb      	ldrb	r3, [r7, #6]
 80055a4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80055a6:	797b      	ldrb	r3, [r7, #5]
 80055a8:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, MAX86150_Address, data, 2, 100);
 80055aa:	f107 020c 	add.w	r2, r7, #12
 80055ae:	2364      	movs	r3, #100	; 0x64
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	2302      	movs	r3, #2
 80055b4:	21bc      	movs	r1, #188	; 0xbc
 80055b6:	4804      	ldr	r0, [pc, #16]	; (80055c8 <writeRegister8+0x38>)
 80055b8:	f7fc f880 	bl	80016bc <HAL_I2C_Master_Transmit>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]

	return;
 80055c0:	bf00      	nop

}
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	200002a4 	.word	0x200002a4

080055cc <setFIFOAverage>:

void setFIFOAverage(uint8_t numSamp) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]

	bitMask(MAX86150_FIFOConfig, MAX86150_SampleRate_MASK, numSamp);
 80055d6:	2008      	movs	r0, #8
 80055d8:	21c3      	movs	r1, #195	; 0xc3
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	461a      	mov	r2, r3
 80055de:	f7ff ff95 	bl	800550c <bitMask>
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <setPulseAmplitudeRed>:

	// LEDPulseWidth_50, _100, _200, _400
	bitMask(MAX86150_PPGConfig1,MAX86150_LEDPulseWidth_MASK, pulseWidth);
}

void setPulseAmplitudeRed(uint8_t amplitude) {
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	71fb      	strb	r3, [r7, #7]

	writeRegister8(MAX86150_Address, MAX86150_LED2_RED, amplitude);
 80055f4:	2112      	movs	r1, #18
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	461a      	mov	r2, r3
 80055fa:	20bc      	movs	r0, #188	; 0xbc
 80055fc:	f7ff ffc8 	bl	8005590 <writeRegister8>
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <setPulseAmplitudeIR>:


void setPulseAmplitudeIR(uint8_t amplitude) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]

	writeRegister8(MAX86150_Address, MAX86150_LED1_IR, amplitude);
 8005612:	2111      	movs	r1, #17
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	461a      	mov	r2, r3
 8005618:	20bc      	movs	r0, #188	; 0xbc
 800561a:	f7ff ffb9 	bl	8005590 <writeRegister8>
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <clearFIFO>:
void disablePROX_INT(void) {

	bitMask(MAX86150_INT_EN1, MAX86150_INT_PROX_MASK, MAX86150_INT_PROX_DISABLE);
}

void clearFIFO(void) {
 8005626:	b580      	push	{r7, lr}
 8005628:	af00      	add	r7, sp, #0

	writeRegister8(MAX86150_Address, MAX86150_FIFOWritePointer, 0);
 800562a:	2304      	movs	r3, #4
 800562c:	2200      	movs	r2, #0
 800562e:	4619      	mov	r1, r3
 8005630:	20bc      	movs	r0, #188	; 0xbc
 8005632:	f7ff ffad 	bl	8005590 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_OverflowCounter, 0);
 8005636:	2305      	movs	r3, #5
 8005638:	2200      	movs	r2, #0
 800563a:	4619      	mov	r1, r3
 800563c:	20bc      	movs	r0, #188	; 0xbc
 800563e:	f7ff ffa7 	bl	8005590 <writeRegister8>
	writeRegister8(MAX86150_Address, MAX86150_FIFOReadPointer, 0);
 8005642:	2306      	movs	r3, #6
 8005644:	2200      	movs	r2, #0
 8005646:	4619      	mov	r1, r3
 8005648:	20bc      	movs	r0, #188	; 0xbc
 800564a:	f7ff ffa1 	bl	8005590 <writeRegister8>
}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <NRF24_csn+0x20>
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <NRF24_csn+0x38>)
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <NRF24_csn+0x3c>)
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	2201      	movs	r2, #1
 800566c:	4619      	mov	r1, r3
 800566e:	f7fb ff7d 	bl	800156c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8005672:	e007      	b.n	8005684 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8005674:	4b05      	ldr	r3, [pc, #20]	; (800568c <NRF24_csn+0x38>)
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <NRF24_csn+0x3c>)
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	2200      	movs	r2, #0
 800567e:	4619      	mov	r1, r3
 8005680:	f7fb ff74 	bl	800156c <HAL_GPIO_WritePin>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	200000a4 	.word	0x200000a4
 8005690:	200000a8 	.word	0x200000a8

08005694 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <NRF24_ce+0x20>
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <NRF24_ce+0x38>)
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <NRF24_ce+0x3c>)
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4619      	mov	r1, r3
 80056ae:	f7fb ff5d 	bl	800156c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80056b2:	e007      	b.n	80056c4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <NRF24_ce+0x38>)
 80056b6:	6818      	ldr	r0, [r3, #0]
 80056b8:	4b05      	ldr	r3, [pc, #20]	; (80056d0 <NRF24_ce+0x3c>)
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	4619      	mov	r1, r3
 80056c0:	f7fb ff54 	bl	800156c <HAL_GPIO_WritePin>
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200000a4 	.word	0x200000a4
 80056d0:	200000aa 	.word	0x200000aa

080056d4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80056de:	2000      	movs	r0, #0
 80056e0:	f7ff ffb8 	bl	8005654 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80056ee:	f107 010c 	add.w	r1, r7, #12
 80056f2:	2364      	movs	r3, #100	; 0x64
 80056f4:	2201      	movs	r2, #1
 80056f6:	480a      	ldr	r0, [pc, #40]	; (8005720 <NRF24_read_register+0x4c>)
 80056f8:	f7fd ff94 	bl	8003624 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80056fc:	f107 030c 	add.w	r3, r7, #12
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	2364      	movs	r3, #100	; 0x64
 8005704:	2201      	movs	r2, #1
 8005706:	4806      	ldr	r0, [pc, #24]	; (8005720 <NRF24_read_register+0x4c>)
 8005708:	f7fe f8f2 	bl	80038f0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800570c:	7b7b      	ldrb	r3, [r7, #13]
 800570e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8005710:	2001      	movs	r0, #1
 8005712:	f7ff ff9f 	bl	8005654 <NRF24_csn>
	return retData;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200000ac 	.word	0x200000ac

08005724 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	4613      	mov	r3, r2
 8005732:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005734:	2000      	movs	r0, #0
 8005736:	f7ff ff8d 	bl	8005654 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	b2db      	uxtb	r3, r3
 8005742:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8005744:	f107 010c 	add.w	r1, r7, #12
 8005748:	2364      	movs	r3, #100	; 0x64
 800574a:	2201      	movs	r2, #1
 800574c:	4808      	ldr	r0, [pc, #32]	; (8005770 <NRF24_read_registerN+0x4c>)
 800574e:	f7fd ff69 	bl	8003624 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8005752:	79bb      	ldrb	r3, [r7, #6]
 8005754:	b29a      	uxth	r2, r3
 8005756:	2364      	movs	r3, #100	; 0x64
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	4805      	ldr	r0, [pc, #20]	; (8005770 <NRF24_read_registerN+0x4c>)
 800575c:	f7fe f8c8 	bl	80038f0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8005760:	2001      	movs	r0, #1
 8005762:	f7ff ff77 	bl	8005654 <NRF24_csn>
}
 8005766:	bf00      	nop
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200000ac 	.word	0x200000ac

08005774 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	460a      	mov	r2, r1
 800577e:	71fb      	strb	r3, [r7, #7]
 8005780:	4613      	mov	r3, r2
 8005782:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005784:	2000      	movs	r0, #0
 8005786:	f7ff ff65 	bl	8005654 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	f043 0320 	orr.w	r3, r3, #32
 8005790:	b2db      	uxtb	r3, r3
 8005792:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8005794:	79bb      	ldrb	r3, [r7, #6]
 8005796:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8005798:	f107 010c 	add.w	r1, r7, #12
 800579c:	2364      	movs	r3, #100	; 0x64
 800579e:	2202      	movs	r2, #2
 80057a0:	4804      	ldr	r0, [pc, #16]	; (80057b4 <NRF24_write_register+0x40>)
 80057a2:	f7fd ff3f 	bl	8003624 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80057a6:	2001      	movs	r0, #1
 80057a8:	f7ff ff54 	bl	8005654 <NRF24_csn>
}
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	200000ac 	.word	0x200000ac

080057b8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	6039      	str	r1, [r7, #0]
 80057c2:	71fb      	strb	r3, [r7, #7]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80057c8:	2000      	movs	r0, #0
 80057ca:	f7ff ff43 	bl	8005654 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	f043 0320 	orr.w	r3, r3, #32
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80057d8:	f107 010c 	add.w	r1, r7, #12
 80057dc:	2364      	movs	r3, #100	; 0x64
 80057de:	2201      	movs	r2, #1
 80057e0:	4808      	ldr	r0, [pc, #32]	; (8005804 <NRF24_write_registerN+0x4c>)
 80057e2:	f7fd ff1f 	bl	8003624 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80057e6:	79bb      	ldrb	r3, [r7, #6]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	2364      	movs	r3, #100	; 0x64
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	4805      	ldr	r0, [pc, #20]	; (8005804 <NRF24_write_registerN+0x4c>)
 80057f0:	f7fd ff18 	bl	8003624 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f7ff ff2d 	bl	8005654 <NRF24_csn>
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200000ac 	.word	0x200000ac

08005808 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800580c:	21ff      	movs	r1, #255	; 0xff
 800580e:	20e1      	movs	r0, #225	; 0xe1
 8005810:	f7ff ffb0 	bl	8005774 <NRF24_write_register>
}
 8005814:	bf00      	nop
 8005816:	bd80      	pop	{r7, pc}

08005818 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800581c:	21ff      	movs	r1, #255	; 0xff
 800581e:	20e2      	movs	r0, #226	; 0xe2
 8005820:	f7ff ffa8 	bl	8005774 <NRF24_write_register>
}
 8005824:	bf00      	nop
 8005826:	bd80      	pop	{r7, pc}

08005828 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8005828:	b082      	sub	sp, #8
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
 8005838:	4613      	mov	r3, r2
 800583a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800583c:	4b66      	ldr	r3, [pc, #408]	; (80059d8 <NRF24_begin+0x1b0>)
 800583e:	4618      	mov	r0, r3
 8005840:	f107 031c 	add.w	r3, r7, #28
 8005844:	2264      	movs	r2, #100	; 0x64
 8005846:	4619      	mov	r1, r3
 8005848:	f001 fe68 	bl	800751c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800584c:	4a63      	ldr	r2, [pc, #396]	; (80059dc <NRF24_begin+0x1b4>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8005852:	4a63      	ldr	r2, [pc, #396]	; (80059e0 <NRF24_begin+0x1b8>)
 8005854:	887b      	ldrh	r3, [r7, #2]
 8005856:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8005858:	4a62      	ldr	r2, [pc, #392]	; (80059e4 <NRF24_begin+0x1bc>)
 800585a:	883b      	ldrh	r3, [r7, #0]
 800585c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800585e:	2001      	movs	r0, #1
 8005860:	f7ff fef8 	bl	8005654 <NRF24_csn>
	NRF24_ce(0);
 8005864:	2000      	movs	r0, #0
 8005866:	f7ff ff15 	bl	8005694 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800586a:	2005      	movs	r0, #5
 800586c:	f7fb fb3e 	bl	8000eec <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8005870:	2108      	movs	r1, #8
 8005872:	2000      	movs	r0, #0
 8005874:	f7ff ff7e 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8005878:	213f      	movs	r1, #63	; 0x3f
 800587a:	2001      	movs	r0, #1
 800587c:	f7ff ff7a 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8005880:	2103      	movs	r1, #3
 8005882:	2002      	movs	r0, #2
 8005884:	f7ff ff76 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8005888:	2103      	movs	r1, #3
 800588a:	2003      	movs	r0, #3
 800588c:	f7ff ff72 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8005890:	2103      	movs	r1, #3
 8005892:	2004      	movs	r0, #4
 8005894:	f7ff ff6e 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8005898:	2102      	movs	r1, #2
 800589a:	2005      	movs	r0, #5
 800589c:	f7ff ff6a 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80058a0:	210f      	movs	r1, #15
 80058a2:	2006      	movs	r0, #6
 80058a4:	f7ff ff66 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80058a8:	210e      	movs	r1, #14
 80058aa:	2007      	movs	r0, #7
 80058ac:	f7ff ff62 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80058b0:	2100      	movs	r1, #0
 80058b2:	2008      	movs	r0, #8
 80058b4:	f7ff ff5e 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80058b8:	2100      	movs	r1, #0
 80058ba:	2009      	movs	r0, #9
 80058bc:	f7ff ff5a 	bl	8005774 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80058c0:	23e7      	movs	r3, #231	; 0xe7
 80058c2:	733b      	strb	r3, [r7, #12]
 80058c4:	23e7      	movs	r3, #231	; 0xe7
 80058c6:	72fb      	strb	r3, [r7, #11]
 80058c8:	23e7      	movs	r3, #231	; 0xe7
 80058ca:	72bb      	strb	r3, [r7, #10]
 80058cc:	23e7      	movs	r3, #231	; 0xe7
 80058ce:	727b      	strb	r3, [r7, #9]
 80058d0:	23e7      	movs	r3, #231	; 0xe7
 80058d2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	2205      	movs	r2, #5
 80058da:	4619      	mov	r1, r3
 80058dc:	200a      	movs	r0, #10
 80058de:	f7ff ff6b 	bl	80057b8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80058e2:	23c2      	movs	r3, #194	; 0xc2
 80058e4:	733b      	strb	r3, [r7, #12]
 80058e6:	23c2      	movs	r3, #194	; 0xc2
 80058e8:	72fb      	strb	r3, [r7, #11]
 80058ea:	23c2      	movs	r3, #194	; 0xc2
 80058ec:	72bb      	strb	r3, [r7, #10]
 80058ee:	23c2      	movs	r3, #194	; 0xc2
 80058f0:	727b      	strb	r3, [r7, #9]
 80058f2:	23c2      	movs	r3, #194	; 0xc2
 80058f4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	2205      	movs	r2, #5
 80058fc:	4619      	mov	r1, r3
 80058fe:	200b      	movs	r0, #11
 8005900:	f7ff ff5a 	bl	80057b8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8005904:	21c3      	movs	r1, #195	; 0xc3
 8005906:	200c      	movs	r0, #12
 8005908:	f7ff ff34 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800590c:	21c4      	movs	r1, #196	; 0xc4
 800590e:	200d      	movs	r0, #13
 8005910:	f7ff ff30 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8005914:	21c5      	movs	r1, #197	; 0xc5
 8005916:	200e      	movs	r0, #14
 8005918:	f7ff ff2c 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800591c:	21c6      	movs	r1, #198	; 0xc6
 800591e:	200f      	movs	r0, #15
 8005920:	f7ff ff28 	bl	8005774 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8005924:	23e7      	movs	r3, #231	; 0xe7
 8005926:	733b      	strb	r3, [r7, #12]
 8005928:	23e7      	movs	r3, #231	; 0xe7
 800592a:	72fb      	strb	r3, [r7, #11]
 800592c:	23e7      	movs	r3, #231	; 0xe7
 800592e:	72bb      	strb	r3, [r7, #10]
 8005930:	23e7      	movs	r3, #231	; 0xe7
 8005932:	727b      	strb	r3, [r7, #9]
 8005934:	23e7      	movs	r3, #231	; 0xe7
 8005936:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	2205      	movs	r2, #5
 800593e:	4619      	mov	r1, r3
 8005940:	2010      	movs	r0, #16
 8005942:	f7ff ff39 	bl	80057b8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8005946:	2100      	movs	r1, #0
 8005948:	2011      	movs	r0, #17
 800594a:	f7ff ff13 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800594e:	2100      	movs	r1, #0
 8005950:	2012      	movs	r0, #18
 8005952:	f7ff ff0f 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8005956:	2100      	movs	r1, #0
 8005958:	2013      	movs	r0, #19
 800595a:	f7ff ff0b 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800595e:	2100      	movs	r1, #0
 8005960:	2014      	movs	r0, #20
 8005962:	f7ff ff07 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8005966:	2100      	movs	r1, #0
 8005968:	2015      	movs	r0, #21
 800596a:	f7ff ff03 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800596e:	2100      	movs	r1, #0
 8005970:	2016      	movs	r0, #22
 8005972:	f7ff feff 	bl	8005774 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8005976:	f000 f9fb 	bl	8005d70 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800597a:	2100      	movs	r1, #0
 800597c:	201c      	movs	r0, #28
 800597e:	f7ff fef9 	bl	8005774 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8005982:	2100      	movs	r1, #0
 8005984:	201d      	movs	r0, #29
 8005986:	f7ff fef5 	bl	8005774 <NRF24_write_register>
	printRadioSettings();
 800598a:	f000 fa0b 	bl	8005da4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800598e:	210f      	movs	r1, #15
 8005990:	200f      	movs	r0, #15
 8005992:	f000 f859 	bl	8005a48 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8005996:	2003      	movs	r0, #3
 8005998:	f000 f92b 	bl	8005bf2 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800599c:	2001      	movs	r0, #1
 800599e:	f000 f961 	bl	8005c64 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80059a2:	2002      	movs	r0, #2
 80059a4:	f000 f9a4 	bl	8005cf0 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80059a8:	f000 f8f6 	bl	8005b98 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80059ac:	2020      	movs	r0, #32
 80059ae:	f000 f87b 	bl	8005aa8 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80059b2:	f000 f9d4 	bl	8005d5e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80059b6:	204c      	movs	r0, #76	; 0x4c
 80059b8:	f000 f861 	bl	8005a7e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80059bc:	f7ff ff24 	bl	8005808 <NRF24_flush_tx>
	NRF24_flush_rx();
 80059c0:	f7ff ff2a 	bl	8005818 <NRF24_flush_rx>

	NRF24_powerDown();
 80059c4:	f000 f9bc 	bl	8005d40 <NRF24_powerDown>

}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d2:	b002      	add	sp, #8
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	200000ac 	.word	0x200000ac
 80059dc:	200000a4 	.word	0x200000a4
 80059e0:	200000a8 	.word	0x200000a8
 80059e4:	200000aa 	.word	0x200000aa

080059e8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80059ec:	2000      	movs	r0, #0
 80059ee:	f7ff fe51 	bl	8005694 <NRF24_ce>
	NRF24_flush_tx();
 80059f2:	f7ff ff09 	bl	8005808 <NRF24_flush_tx>
	NRF24_flush_rx();
 80059f6:	f7ff ff0f 	bl	8005818 <NRF24_flush_rx>
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	2205      	movs	r2, #5
 8005a0e:	4619      	mov	r1, r3
 8005a10:	200a      	movs	r0, #10
 8005a12:	f7ff fed1 	bl	80057b8 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8005a16:	463b      	mov	r3, r7
 8005a18:	2205      	movs	r2, #5
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	2010      	movs	r0, #16
 8005a1e:	f7ff fecb 	bl	80057b8 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8005a22:	2320      	movs	r3, #32
 8005a24:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <NRF24_openWritingPipe+0x44>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	bf28      	it	cs
 8005a30:	4613      	movcs	r3, r2
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	4619      	mov	r1, r3
 8005a36:	2011      	movs	r0, #17
 8005a38:	f7ff fe9c 	bl	8005774 <NRF24_write_register>
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	200000a0 	.word	0x200000a0

08005a48 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	460a      	mov	r2, r1
 8005a52:	71fb      	strb	r3, [r7, #7]
 8005a54:	4613      	mov	r3, r2
 8005a56:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	b25a      	sxtb	r2, r3
 8005a5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	b25b      	sxtb	r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	2004      	movs	r0, #4
 8005a72:	f7ff fe7f 	bl	8005774 <NRF24_write_register>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8005a88:	237f      	movs	r3, #127	; 0x7f
 8005a8a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	bf28      	it	cs
 8005a94:	4613      	movcs	r3, r2
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	2005      	movs	r0, #5
 8005a9c:	f7ff fe6a 	bl	8005774 <NRF24_write_register>
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8005ab6:	7bfa      	ldrb	r2, [r7, #15]
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bf28      	it	cs
 8005abe:	4613      	movcs	r3, r2
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <NRF24_setPayloadSize+0x2c>)
 8005ac4:	701a      	strb	r2, [r3, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	200000a0 	.word	0x200000a0

08005ad8 <NRF24_enableAckPayload>:
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
}
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005adc:	201d      	movs	r0, #29
 8005ade:	f7ff fdf9 	bl	80056d4 <NRF24_read_register>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f043 0306 	orr.w	r3, r3, #6
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	201d      	movs	r0, #29
 8005aee:	f7ff fe41 	bl	8005774 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8005af2:	201d      	movs	r0, #29
 8005af4:	f7ff fdee 	bl	80056d4 <NRF24_read_register>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10c      	bne.n	8005b18 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005afe:	f000 f937 	bl	8005d70 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005b02:	201d      	movs	r0, #29
 8005b04:	f7ff fde6 	bl	80056d4 <NRF24_read_register>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f043 0306 	orr.w	r3, r3, #6
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	4619      	mov	r1, r3
 8005b12:	201d      	movs	r0, #29
 8005b14:	f7ff fe2e 	bl	8005774 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005b18:	201c      	movs	r0, #28
 8005b1a:	f7ff fddb 	bl	80056d4 <NRF24_read_register>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f043 0303 	orr.w	r3, r3, #3
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	201c      	movs	r0, #28
 8005b2a:	f7ff fe23 	bl	8005774 <NRF24_write_register>
}
 8005b2e:	bf00      	nop
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005b38:	201d      	movs	r0, #29
 8005b3a:	f7ff fdcb 	bl	80056d4 <NRF24_read_register>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	4619      	mov	r1, r3
 8005b48:	201d      	movs	r0, #29
 8005b4a:	f7ff fe13 	bl	8005774 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8005b4e:	201d      	movs	r0, #29
 8005b50:	f7ff fdc0 	bl	80056d4 <NRF24_read_register>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10c      	bne.n	8005b74 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005b5a:	f000 f909 	bl	8005d70 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005b5e:	201d      	movs	r0, #29
 8005b60:	f7ff fdb8 	bl	80056d4 <NRF24_read_register>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	201d      	movs	r0, #29
 8005b70:	f7ff fe00 	bl	8005774 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005b74:	201c      	movs	r0, #28
 8005b76:	f7ff fdad 	bl	80056d4 <NRF24_read_register>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	201c      	movs	r0, #28
 8005b86:	f7ff fdf5 	bl	8005774 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8005b8a:	4b02      	ldr	r3, [pc, #8]	; (8005b94 <NRF24_enableDynamicPayloads+0x60>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]

}
 8005b90:	bf00      	nop
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	200000a1 	.word	0x200000a1

08005b98 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8005b9c:	201d      	movs	r0, #29
 8005b9e:	f7ff fd99 	bl	80056d4 <NRF24_read_register>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f023 0304 	bic.w	r3, r3, #4
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	4619      	mov	r1, r3
 8005bac:	201d      	movs	r0, #29
 8005bae:	f7ff fde1 	bl	8005774 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	201c      	movs	r0, #28
 8005bb6:	f7ff fddd 	bl	8005774 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8005bba:	4b02      	ldr	r3, [pc, #8]	; (8005bc4 <NRF24_disableDynamicPayloads+0x2c>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200000a1 	.word	0x200000a1

08005bc8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8005bd8:	213f      	movs	r1, #63	; 0x3f
 8005bda:	2001      	movs	r0, #1
 8005bdc:	f7ff fdca 	bl	8005774 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8005be0:	e003      	b.n	8005bea <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8005be2:	2100      	movs	r1, #0
 8005be4:	2001      	movs	r0, #1
 8005be6:	f7ff fdc5 	bl	8005774 <NRF24_write_register>
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005bfc:	2006      	movs	r0, #6
 8005bfe:	f7ff fd69 	bl	80056d4 <NRF24_read_register>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	f023 0306 	bic.w	r3, r3, #6
 8005c0c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d104      	bne.n	8005c1e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	f043 0306 	orr.w	r3, r3, #6
 8005c1a:	73fb      	strb	r3, [r7, #15]
 8005c1c:	e019      	b.n	8005c52 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d104      	bne.n	8005c2e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	f043 0304 	orr.w	r3, r3, #4
 8005c2a:	73fb      	strb	r3, [r7, #15]
 8005c2c:	e011      	b.n	8005c52 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d104      	bne.n	8005c3e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	f043 0302 	orr.w	r3, r3, #2
 8005c3a:	73fb      	strb	r3, [r7, #15]
 8005c3c:	e009      	b.n	8005c52 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d103      	bne.n	8005c52 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	f043 0306 	orr.w	r3, r3, #6
 8005c50:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	4619      	mov	r1, r3
 8005c56:	2006      	movs	r0, #6
 8005c58:	f7ff fd8c 	bl	8005774 <NRF24_write_register>
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005c72:	2006      	movs	r0, #6
 8005c74:	f7ff fd2e 	bl	80056d4 <NRF24_read_register>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <NRF24_setDataRate+0x88>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005c88:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d107      	bne.n	8005ca0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8005c90:	4b16      	ldr	r3, [pc, #88]	; (8005cec <NRF24_setDataRate+0x88>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	f043 0320 	orr.w	r3, r3, #32
 8005c9c:	73bb      	strb	r3, [r7, #14]
 8005c9e:	e00d      	b.n	8005cbc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8005ca6:	4b11      	ldr	r3, [pc, #68]	; (8005cec <NRF24_setDataRate+0x88>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	f043 0308 	orr.w	r3, r3, #8
 8005cb2:	73bb      	strb	r3, [r7, #14]
 8005cb4:	e002      	b.n	8005cbc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <NRF24_setDataRate+0x88>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	2006      	movs	r0, #6
 8005cc2:	f7ff fd57 	bl	8005774 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8005cc6:	2006      	movs	r0, #6
 8005cc8:	f7ff fd04 	bl	80056d4 <NRF24_read_register>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d102      	bne.n	8005cdc <NRF24_setDataRate+0x78>
  {
    result = true;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
 8005cda:	e002      	b.n	8005ce2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8005cdc:	4b03      	ldr	r3, [pc, #12]	; (8005cec <NRF24_setDataRate+0x88>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200000a2 	.word	0x200000a2

08005cf0 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	f7ff fcea 	bl	80056d4 <NRF24_read_register>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f023 030c 	bic.w	r3, r3, #12
 8005d06:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d104      	bne.n	8005d1e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	f043 0308 	orr.w	r3, r3, #8
 8005d1a:	73fb      	strb	r3, [r7, #15]
 8005d1c:	e007      	b.n	8005d2e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	f043 0308 	orr.w	r3, r3, #8
 8005d24:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	f043 0304 	orr.w	r3, r3, #4
 8005d2c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	4619      	mov	r1, r3
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7ff fd1e 	bl	8005774 <NRF24_write_register>
}
 8005d38:	bf00      	nop
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8005d44:	2000      	movs	r0, #0
 8005d46:	f7ff fcc5 	bl	80056d4 <NRF24_read_register>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f023 0302 	bic.w	r3, r3, #2
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4619      	mov	r1, r3
 8005d54:	2000      	movs	r0, #0
 8005d56:	f7ff fd0d 	bl	8005774 <NRF24_write_register>
}
 8005d5a:	bf00      	nop
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8005d62:	2170      	movs	r1, #112	; 0x70
 8005d64:	2007      	movs	r0, #7
 8005d66:	f7ff fd05 	bl	8005774 <NRF24_write_register>
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7ff fc6c 	bl	8005654 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8005d7c:	2350      	movs	r3, #80	; 0x50
 8005d7e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8005d80:	2373      	movs	r3, #115	; 0x73
 8005d82:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8005d84:	1d39      	adds	r1, r7, #4
 8005d86:	2364      	movs	r3, #100	; 0x64
 8005d88:	2202      	movs	r2, #2
 8005d8a:	4805      	ldr	r0, [pc, #20]	; (8005da0 <NRF24_ACTIVATE_cmd+0x30>)
 8005d8c:	f7fd fc4a 	bl	8003624 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8005d90:	2001      	movs	r0, #1
 8005d92:	f7ff fc5f 	bl	8005654 <NRF24_csn>
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200000ac 	.word	0x200000ac

08005da4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8005da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da6:	b0a1      	sub	sp, #132	; 0x84
 8005da8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005daa:	f107 0308 	add.w	r3, r7, #8
 8005dae:	4ab6      	ldr	r2, [pc, #728]	; (8006088 <printRadioSettings+0x2e4>)
 8005db0:	461c      	mov	r4, r3
 8005db2:	4615      	mov	r5, r2
 8005db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	8022      	strh	r2, [r4, #0]
 8005dc6:	3402      	adds	r4, #2
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fa f9fd 	bl	80001d0 <strlen>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	f107 0108 	add.w	r1, r7, #8
 8005dde:	230a      	movs	r3, #10
 8005de0:	48aa      	ldr	r0, [pc, #680]	; (800608c <printRadioSettings+0x2e8>)
 8005de2:	f7fe fa91 	bl	8004308 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8005de6:	2000      	movs	r0, #0
 8005de8:	f7ff fc74 	bl	80056d4 <NRF24_read_register>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8005df2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d020      	beq.n	8005e40 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8005dfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <printRadioSettings+0x7e>
 8005e0a:	f107 0308 	add.w	r3, r7, #8
 8005e0e:	4aa0      	ldr	r2, [pc, #640]	; (8006090 <printRadioSettings+0x2ec>)
 8005e10:	461c      	mov	r4, r3
 8005e12:	4615      	mov	r5, r2
 8005e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e20:	e017      	b.n	8005e52 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8005e22:	f107 0308 	add.w	r3, r7, #8
 8005e26:	4a9b      	ldr	r2, [pc, #620]	; (8006094 <printRadioSettings+0x2f0>)
 8005e28:	461c      	mov	r4, r3
 8005e2a:	4615      	mov	r5, r2
 8005e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e34:	c403      	stmia	r4!, {r0, r1}
 8005e36:	8022      	strh	r2, [r4, #0]
 8005e38:	3402      	adds	r4, #2
 8005e3a:	0c13      	lsrs	r3, r2, #16
 8005e3c:	7023      	strb	r3, [r4, #0]
 8005e3e:	e008      	b.n	8005e52 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8005e40:	f107 0308 	add.w	r3, r7, #8
 8005e44:	4a94      	ldr	r2, [pc, #592]	; (8006098 <printRadioSettings+0x2f4>)
 8005e46:	461c      	mov	r4, r3
 8005e48:	4615      	mov	r5, r2
 8005e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e4e:	682b      	ldr	r3, [r5, #0]
 8005e50:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005e52:	f107 0308 	add.w	r3, r7, #8
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa f9ba 	bl	80001d0 <strlen>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f107 0108 	add.w	r1, r7, #8
 8005e64:	230a      	movs	r3, #10
 8005e66:	4889      	ldr	r0, [pc, #548]	; (800608c <printRadioSettings+0x2e8>)
 8005e68:	f7fe fa4e 	bl	8004308 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f7ff fc31 	bl	80056d4 <NRF24_read_register>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005e78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e7c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	bfcc      	ite	gt
 8005e84:	2301      	movgt	r3, #1
 8005e86:	2300      	movle	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005e8c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e90:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfcc      	ite	gt
 8005e98:	2301      	movgt	r3, #1
 8005e9a:	2300      	movle	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005ea0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ea4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bfcc      	ite	gt
 8005eac:	2301      	movgt	r3, #1
 8005eae:	2300      	movle	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005eb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005eb8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bfcc      	ite	gt
 8005ec0:	2301      	movgt	r3, #1
 8005ec2:	2300      	movle	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005ec8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ecc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bfcc      	ite	gt
 8005ed4:	2301      	movgt	r3, #1
 8005ed6:	2300      	movle	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005edc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ee0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bfcc      	ite	gt
 8005ee8:	2301      	movgt	r3, #1
 8005eea:	2300      	movle	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f107 0008 	add.w	r0, r7, #8
 8005ef2:	9303      	str	r3, [sp, #12]
 8005ef4:	9402      	str	r4, [sp, #8]
 8005ef6:	9101      	str	r1, [sp, #4]
 8005ef8:	9200      	str	r2, [sp, #0]
 8005efa:	4633      	mov	r3, r6
 8005efc:	462a      	mov	r2, r5
 8005efe:	4967      	ldr	r1, [pc, #412]	; (800609c <printRadioSettings+0x2f8>)
 8005f00:	f001 fb20 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005f04:	f107 0308 	add.w	r3, r7, #8
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa f961 	bl	80001d0 <strlen>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f107 0108 	add.w	r1, r7, #8
 8005f16:	230a      	movs	r3, #10
 8005f18:	485c      	ldr	r0, [pc, #368]	; (800608c <printRadioSettings+0x2e8>)
 8005f1a:	f7fe f9f5 	bl	8004308 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8005f1e:	2002      	movs	r0, #2
 8005f20:	f7ff fbd8 	bl	80056d4 <NRF24_read_register>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f2e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bfcc      	ite	gt
 8005f36:	2301      	movgt	r3, #1
 8005f38:	2300      	movle	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f42:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfcc      	ite	gt
 8005f4a:	2301      	movgt	r3, #1
 8005f4c:	2300      	movle	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f56:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bfcc      	ite	gt
 8005f5e:	2301      	movgt	r3, #1
 8005f60:	2300      	movle	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f6a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	bfcc      	ite	gt
 8005f72:	2301      	movgt	r3, #1
 8005f74:	2300      	movle	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f7e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bfcc      	ite	gt
 8005f86:	2301      	movgt	r3, #1
 8005f88:	2300      	movle	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f92:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bfcc      	ite	gt
 8005f9a:	2301      	movgt	r3, #1
 8005f9c:	2300      	movle	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f107 0008 	add.w	r0, r7, #8
 8005fa4:	9303      	str	r3, [sp, #12]
 8005fa6:	9402      	str	r4, [sp, #8]
 8005fa8:	9101      	str	r1, [sp, #4]
 8005faa:	9200      	str	r2, [sp, #0]
 8005fac:	4633      	mov	r3, r6
 8005fae:	462a      	mov	r2, r5
 8005fb0:	493b      	ldr	r1, [pc, #236]	; (80060a0 <printRadioSettings+0x2fc>)
 8005fb2:	f001 fac7 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005fb6:	f107 0308 	add.w	r3, r7, #8
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fa f908 	bl	80001d0 <strlen>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	f107 0108 	add.w	r1, r7, #8
 8005fc8:	230a      	movs	r3, #10
 8005fca:	4830      	ldr	r0, [pc, #192]	; (800608c <printRadioSettings+0x2e8>)
 8005fcc:	f7fe f99c 	bl	8004308 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8005fd0:	2003      	movs	r0, #3
 8005fd2:	f7ff fb7f 	bl	80056d4 <NRF24_read_register>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8005fe0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8005fea:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005fee:	f107 0308 	add.w	r3, r7, #8
 8005ff2:	492c      	ldr	r1, [pc, #176]	; (80060a4 <printRadioSettings+0x300>)
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 faa5 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005ffa:	f107 0308 	add.w	r3, r7, #8
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fa f8e6 	bl	80001d0 <strlen>
 8006004:	4603      	mov	r3, r0
 8006006:	b29a      	uxth	r2, r3
 8006008:	f107 0108 	add.w	r1, r7, #8
 800600c:	230a      	movs	r3, #10
 800600e:	481f      	ldr	r0, [pc, #124]	; (800608c <printRadioSettings+0x2e8>)
 8006010:	f7fe f97a 	bl	8004308 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8006014:	2005      	movs	r0, #5
 8006016:	f7ff fb5d 	bl	80056d4 <NRF24_read_register>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8006020:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	491e      	ldr	r1, [pc, #120]	; (80060a8 <printRadioSettings+0x304>)
 800602e:	4618      	mov	r0, r3
 8006030:	f001 fa88 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	4618      	mov	r0, r3
 800603a:	f7fa f8c9 	bl	80001d0 <strlen>
 800603e:	4603      	mov	r3, r0
 8006040:	b29a      	uxth	r2, r3
 8006042:	f107 0108 	add.w	r1, r7, #8
 8006046:	230a      	movs	r3, #10
 8006048:	4810      	ldr	r0, [pc, #64]	; (800608c <printRadioSettings+0x2e8>)
 800604a:	f7fe f95d 	bl	8004308 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800604e:	2006      	movs	r0, #6
 8006050:	f7ff fb40 	bl	80056d4 <NRF24_read_register>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800605a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800605e:	f003 0308 	and.w	r3, r3, #8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d024      	beq.n	80060b0 <printRadioSettings+0x30c>
 8006066:	f107 0308 	add.w	r3, r7, #8
 800606a:	4a10      	ldr	r2, [pc, #64]	; (80060ac <printRadioSettings+0x308>)
 800606c:	461c      	mov	r4, r3
 800606e:	4615      	mov	r5, r2
 8006070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006074:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006078:	6020      	str	r0, [r4, #0]
 800607a:	3404      	adds	r4, #4
 800607c:	8021      	strh	r1, [r4, #0]
 800607e:	3402      	adds	r4, #2
 8006080:	0c0b      	lsrs	r3, r1, #16
 8006082:	7023      	strb	r3, [r4, #0]
 8006084:	e023      	b.n	80060ce <printRadioSettings+0x32a>
 8006086:	bf00      	nop
 8006088:	08007d78 	.word	0x08007d78
 800608c:	20000110 	.word	0x20000110
 8006090:	08007dac 	.word	0x08007dac
 8006094:	08007dc8 	.word	0x08007dc8
 8006098:	08007de4 	.word	0x08007de4
 800609c:	08007df8 	.word	0x08007df8
 80060a0:	08007e3c 	.word	0x08007e3c
 80060a4:	08007e88 	.word	0x08007e88
 80060a8:	08007ea4 	.word	0x08007ea4
 80060ac:	08007eb8 	.word	0x08007eb8
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4a29      	ldr	r2, [pc, #164]	; (800615c <printRadioSettings+0x3b8>)
 80060b6:	461c      	mov	r4, r3
 80060b8:	4615      	mov	r5, r2
 80060ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80060c2:	6020      	str	r0, [r4, #0]
 80060c4:	3404      	adds	r4, #4
 80060c6:	8021      	strh	r1, [r4, #0]
 80060c8:	3402      	adds	r4, #2
 80060ca:	0c0b      	lsrs	r3, r1, #16
 80060cc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80060ce:	f107 0308 	add.w	r3, r7, #8
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7fa f87c 	bl	80001d0 <strlen>
 80060d8:	4603      	mov	r3, r0
 80060da:	b29a      	uxth	r2, r3
 80060dc:	f107 0108 	add.w	r1, r7, #8
 80060e0:	230a      	movs	r3, #10
 80060e2:	481f      	ldr	r0, [pc, #124]	; (8006160 <printRadioSettings+0x3bc>)
 80060e4:	f7fe f910 	bl	8004308 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80060e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060ec:	f003 0306 	and.w	r3, r3, #6
 80060f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80060f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80060fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <printRadioSettings+0x376>
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	4a16      	ldr	r2, [pc, #88]	; (8006164 <printRadioSettings+0x3c0>)
 800610c:	461c      	mov	r4, r3
 800610e:	4615      	mov	r5, r2
 8006110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	e037      	b.n	800618a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800611a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800611e:	2b01      	cmp	r3, #1
 8006120:	d109      	bne.n	8006136 <printRadioSettings+0x392>
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <printRadioSettings+0x3c4>)
 8006128:	461c      	mov	r4, r3
 800612a:	4615      	mov	r5, r2
 800612c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800612e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	e029      	b.n	800618a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8006136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800613a:	2b02      	cmp	r3, #2
 800613c:	d118      	bne.n	8006170 <printRadioSettings+0x3cc>
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	4a0a      	ldr	r2, [pc, #40]	; (800616c <printRadioSettings+0x3c8>)
 8006144:	461c      	mov	r4, r3
 8006146:	4615      	mov	r5, r2
 8006148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800614a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	461a      	mov	r2, r3
 8006150:	8022      	strh	r2, [r4, #0]
 8006152:	3402      	adds	r4, #2
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	7023      	strb	r3, [r4, #0]
 8006158:	e017      	b.n	800618a <printRadioSettings+0x3e6>
 800615a:	bf00      	nop
 800615c:	08007ed0 	.word	0x08007ed0
 8006160:	20000110 	.word	0x20000110
 8006164:	08007ee8 	.word	0x08007ee8
 8006168:	08007efc 	.word	0x08007efc
 800616c:	08007f10 	.word	0x08007f10
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8006170:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006174:	2b03      	cmp	r3, #3
 8006176:	d108      	bne.n	800618a <printRadioSettings+0x3e6>
 8006178:	f107 0308 	add.w	r3, r7, #8
 800617c:	4ad7      	ldr	r2, [pc, #860]	; (80064dc <printRadioSettings+0x738>)
 800617e:	461c      	mov	r4, r3
 8006180:	4615      	mov	r5, r2
 8006182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800618a:	f107 0308 	add.w	r3, r7, #8
 800618e:	4618      	mov	r0, r3
 8006190:	f7fa f81e 	bl	80001d0 <strlen>
 8006194:	4603      	mov	r3, r0
 8006196:	b29a      	uxth	r2, r3
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	230a      	movs	r3, #10
 800619e:	48d0      	ldr	r0, [pc, #832]	; (80064e0 <printRadioSettings+0x73c>)
 80061a0:	f7fe f8b2 	bl	8004308 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80061a4:	463b      	mov	r3, r7
 80061a6:	2205      	movs	r2, #5
 80061a8:	4619      	mov	r1, r3
 80061aa:	200a      	movs	r0, #10
 80061ac:	f7ff faba 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80061b0:	793b      	ldrb	r3, [r7, #4]
 80061b2:	461c      	mov	r4, r3
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	461d      	mov	r5, r3
 80061b8:	78bb      	ldrb	r3, [r7, #2]
 80061ba:	787a      	ldrb	r2, [r7, #1]
 80061bc:	7839      	ldrb	r1, [r7, #0]
 80061be:	f107 0008 	add.w	r0, r7, #8
 80061c2:	9102      	str	r1, [sp, #8]
 80061c4:	9201      	str	r2, [sp, #4]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	462b      	mov	r3, r5
 80061ca:	4622      	mov	r2, r4
 80061cc:	49c5      	ldr	r1, [pc, #788]	; (80064e4 <printRadioSettings+0x740>)
 80061ce:	f001 f9b9 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80061d2:	f107 0308 	add.w	r3, r7, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7f9 fffa 	bl	80001d0 <strlen>
 80061dc:	4603      	mov	r3, r0
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f107 0108 	add.w	r1, r7, #8
 80061e4:	230a      	movs	r3, #10
 80061e6:	48be      	ldr	r0, [pc, #760]	; (80064e0 <printRadioSettings+0x73c>)
 80061e8:	f7fe f88e 	bl	8004308 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80061ec:	463b      	mov	r3, r7
 80061ee:	2205      	movs	r2, #5
 80061f0:	4619      	mov	r1, r3
 80061f2:	200b      	movs	r0, #11
 80061f4:	f7ff fa96 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80061f8:	793b      	ldrb	r3, [r7, #4]
 80061fa:	461c      	mov	r4, r3
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	461d      	mov	r5, r3
 8006200:	78bb      	ldrb	r3, [r7, #2]
 8006202:	787a      	ldrb	r2, [r7, #1]
 8006204:	7839      	ldrb	r1, [r7, #0]
 8006206:	f107 0008 	add.w	r0, r7, #8
 800620a:	9102      	str	r1, [sp, #8]
 800620c:	9201      	str	r2, [sp, #4]
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	462b      	mov	r3, r5
 8006212:	4622      	mov	r2, r4
 8006214:	49b4      	ldr	r1, [pc, #720]	; (80064e8 <printRadioSettings+0x744>)
 8006216:	f001 f995 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800621a:	f107 0308 	add.w	r3, r7, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f7f9 ffd6 	bl	80001d0 <strlen>
 8006224:	4603      	mov	r3, r0
 8006226:	b29a      	uxth	r2, r3
 8006228:	f107 0108 	add.w	r1, r7, #8
 800622c:	230a      	movs	r3, #10
 800622e:	48ac      	ldr	r0, [pc, #688]	; (80064e0 <printRadioSettings+0x73c>)
 8006230:	f7fe f86a 	bl	8004308 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8006234:	463b      	mov	r3, r7
 8006236:	2201      	movs	r2, #1
 8006238:	4619      	mov	r1, r3
 800623a:	200c      	movs	r0, #12
 800623c:	f7ff fa72 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8006240:	783b      	ldrb	r3, [r7, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	f107 0308 	add.w	r3, r7, #8
 8006248:	49a8      	ldr	r1, [pc, #672]	; (80064ec <printRadioSettings+0x748>)
 800624a:	4618      	mov	r0, r3
 800624c:	f001 f97a 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006250:	f107 0308 	add.w	r3, r7, #8
 8006254:	4618      	mov	r0, r3
 8006256:	f7f9 ffbb 	bl	80001d0 <strlen>
 800625a:	4603      	mov	r3, r0
 800625c:	b29a      	uxth	r2, r3
 800625e:	f107 0108 	add.w	r1, r7, #8
 8006262:	230a      	movs	r3, #10
 8006264:	489e      	ldr	r0, [pc, #632]	; (80064e0 <printRadioSettings+0x73c>)
 8006266:	f7fe f84f 	bl	8004308 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800626a:	463b      	mov	r3, r7
 800626c:	2201      	movs	r2, #1
 800626e:	4619      	mov	r1, r3
 8006270:	200d      	movs	r0, #13
 8006272:	f7ff fa57 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8006276:	783b      	ldrb	r3, [r7, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	499c      	ldr	r1, [pc, #624]	; (80064f0 <printRadioSettings+0x74c>)
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f95f 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	4618      	mov	r0, r3
 800628c:	f7f9 ffa0 	bl	80001d0 <strlen>
 8006290:	4603      	mov	r3, r0
 8006292:	b29a      	uxth	r2, r3
 8006294:	f107 0108 	add.w	r1, r7, #8
 8006298:	230a      	movs	r3, #10
 800629a:	4891      	ldr	r0, [pc, #580]	; (80064e0 <printRadioSettings+0x73c>)
 800629c:	f7fe f834 	bl	8004308 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80062a0:	463b      	mov	r3, r7
 80062a2:	2201      	movs	r2, #1
 80062a4:	4619      	mov	r1, r3
 80062a6:	200e      	movs	r0, #14
 80062a8:	f7ff fa3c 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80062ac:	783b      	ldrb	r3, [r7, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f107 0308 	add.w	r3, r7, #8
 80062b4:	498f      	ldr	r1, [pc, #572]	; (80064f4 <printRadioSettings+0x750>)
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f944 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80062bc:	f107 0308 	add.w	r3, r7, #8
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7f9 ff85 	bl	80001d0 <strlen>
 80062c6:	4603      	mov	r3, r0
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f107 0108 	add.w	r1, r7, #8
 80062ce:	230a      	movs	r3, #10
 80062d0:	4883      	ldr	r0, [pc, #524]	; (80064e0 <printRadioSettings+0x73c>)
 80062d2:	f7fe f819 	bl	8004308 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80062d6:	463b      	mov	r3, r7
 80062d8:	2201      	movs	r2, #1
 80062da:	4619      	mov	r1, r3
 80062dc:	200f      	movs	r0, #15
 80062de:	f7ff fa21 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80062e2:	783b      	ldrb	r3, [r7, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f107 0308 	add.w	r3, r7, #8
 80062ea:	4983      	ldr	r1, [pc, #524]	; (80064f8 <printRadioSettings+0x754>)
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f929 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7f9 ff6a 	bl	80001d0 <strlen>
 80062fc:	4603      	mov	r3, r0
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f107 0108 	add.w	r1, r7, #8
 8006304:	230a      	movs	r3, #10
 8006306:	4876      	ldr	r0, [pc, #472]	; (80064e0 <printRadioSettings+0x73c>)
 8006308:	f7fd fffe 	bl	8004308 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800630c:	463b      	mov	r3, r7
 800630e:	2205      	movs	r2, #5
 8006310:	4619      	mov	r1, r3
 8006312:	2010      	movs	r0, #16
 8006314:	f7ff fa06 	bl	8005724 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8006318:	793b      	ldrb	r3, [r7, #4]
 800631a:	461c      	mov	r4, r3
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	461d      	mov	r5, r3
 8006320:	78bb      	ldrb	r3, [r7, #2]
 8006322:	787a      	ldrb	r2, [r7, #1]
 8006324:	7839      	ldrb	r1, [r7, #0]
 8006326:	f107 0008 	add.w	r0, r7, #8
 800632a:	9102      	str	r1, [sp, #8]
 800632c:	9201      	str	r2, [sp, #4]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	462b      	mov	r3, r5
 8006332:	4622      	mov	r2, r4
 8006334:	4971      	ldr	r1, [pc, #452]	; (80064fc <printRadioSettings+0x758>)
 8006336:	f001 f905 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800633a:	f107 0308 	add.w	r3, r7, #8
 800633e:	4618      	mov	r0, r3
 8006340:	f7f9 ff46 	bl	80001d0 <strlen>
 8006344:	4603      	mov	r3, r0
 8006346:	b29a      	uxth	r2, r3
 8006348:	f107 0108 	add.w	r1, r7, #8
 800634c:	230a      	movs	r3, #10
 800634e:	4864      	ldr	r0, [pc, #400]	; (80064e0 <printRadioSettings+0x73c>)
 8006350:	f7fd ffda 	bl	8004308 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8006354:	2011      	movs	r0, #17
 8006356:	f7ff f9bd 	bl	80056d4 <NRF24_read_register>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006368:	f107 0308 	add.w	r3, r7, #8
 800636c:	4964      	ldr	r1, [pc, #400]	; (8006500 <printRadioSettings+0x75c>)
 800636e:	4618      	mov	r0, r3
 8006370:	f001 f8e8 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006374:	f107 0308 	add.w	r3, r7, #8
 8006378:	4618      	mov	r0, r3
 800637a:	f7f9 ff29 	bl	80001d0 <strlen>
 800637e:	4603      	mov	r3, r0
 8006380:	b29a      	uxth	r2, r3
 8006382:	f107 0108 	add.w	r1, r7, #8
 8006386:	230a      	movs	r3, #10
 8006388:	4855      	ldr	r0, [pc, #340]	; (80064e0 <printRadioSettings+0x73c>)
 800638a:	f7fd ffbd 	bl	8004308 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800638e:	2012      	movs	r0, #18
 8006390:	f7ff f9a0 	bl	80056d4 <NRF24_read_register>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800639a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800639e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063a2:	f107 0308 	add.w	r3, r7, #8
 80063a6:	4957      	ldr	r1, [pc, #348]	; (8006504 <printRadioSettings+0x760>)
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 f8cb 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7f9 ff0c 	bl	80001d0 <strlen>
 80063b8:	4603      	mov	r3, r0
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f107 0108 	add.w	r1, r7, #8
 80063c0:	230a      	movs	r3, #10
 80063c2:	4847      	ldr	r0, [pc, #284]	; (80064e0 <printRadioSettings+0x73c>)
 80063c4:	f7fd ffa0 	bl	8004308 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80063c8:	2013      	movs	r0, #19
 80063ca:	f7ff f983 	bl	80056d4 <NRF24_read_register>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80063d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80063d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063dc:	f107 0308 	add.w	r3, r7, #8
 80063e0:	4949      	ldr	r1, [pc, #292]	; (8006508 <printRadioSettings+0x764>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f8ae 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80063e8:	f107 0308 	add.w	r3, r7, #8
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7f9 feef 	bl	80001d0 <strlen>
 80063f2:	4603      	mov	r3, r0
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f107 0108 	add.w	r1, r7, #8
 80063fa:	230a      	movs	r3, #10
 80063fc:	4838      	ldr	r0, [pc, #224]	; (80064e0 <printRadioSettings+0x73c>)
 80063fe:	f7fd ff83 	bl	8004308 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8006402:	2014      	movs	r0, #20
 8006404:	f7ff f966 	bl	80056d4 <NRF24_read_register>
 8006408:	4603      	mov	r3, r0
 800640a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800640e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006416:	f107 0308 	add.w	r3, r7, #8
 800641a:	493c      	ldr	r1, [pc, #240]	; (800650c <printRadioSettings+0x768>)
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f891 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	4618      	mov	r0, r3
 8006428:	f7f9 fed2 	bl	80001d0 <strlen>
 800642c:	4603      	mov	r3, r0
 800642e:	b29a      	uxth	r2, r3
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	230a      	movs	r3, #10
 8006436:	482a      	ldr	r0, [pc, #168]	; (80064e0 <printRadioSettings+0x73c>)
 8006438:	f7fd ff66 	bl	8004308 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 800643c:	2015      	movs	r0, #21
 800643e:	f7ff f949 	bl	80056d4 <NRF24_read_register>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006448:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800644c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006450:	f107 0308 	add.w	r3, r7, #8
 8006454:	492e      	ldr	r1, [pc, #184]	; (8006510 <printRadioSettings+0x76c>)
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f874 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800645c:	f107 0308 	add.w	r3, r7, #8
 8006460:	4618      	mov	r0, r3
 8006462:	f7f9 feb5 	bl	80001d0 <strlen>
 8006466:	4603      	mov	r3, r0
 8006468:	b29a      	uxth	r2, r3
 800646a:	f107 0108 	add.w	r1, r7, #8
 800646e:	230a      	movs	r3, #10
 8006470:	481b      	ldr	r0, [pc, #108]	; (80064e0 <printRadioSettings+0x73c>)
 8006472:	f7fd ff49 	bl	8004308 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8006476:	2016      	movs	r0, #22
 8006478:	f7ff f92c 	bl	80056d4 <NRF24_read_register>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006482:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	4921      	ldr	r1, [pc, #132]	; (8006514 <printRadioSettings+0x770>)
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f857 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4618      	mov	r0, r3
 800649c:	f7f9 fe98 	bl	80001d0 <strlen>
 80064a0:	4603      	mov	r3, r0
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f107 0108 	add.w	r1, r7, #8
 80064a8:	230a      	movs	r3, #10
 80064aa:	480d      	ldr	r0, [pc, #52]	; (80064e0 <printRadioSettings+0x73c>)
 80064ac:	f7fd ff2c 	bl	8004308 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80064b0:	201c      	movs	r0, #28
 80064b2:	f7ff f90f 	bl	80056d4 <NRF24_read_register>
 80064b6:	4603      	mov	r3, r0
 80064b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80064bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064c0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfcc      	ite	gt
 80064c8:	2301      	movgt	r3, #1
 80064ca:	2300      	movle	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80064d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	e01e      	b.n	8006518 <printRadioSettings+0x774>
 80064da:	bf00      	nop
 80064dc:	08007f24 	.word	0x08007f24
 80064e0:	20000110 	.word	0x20000110
 80064e4:	08007f38 	.word	0x08007f38
 80064e8:	08007f68 	.word	0x08007f68
 80064ec:	08007f98 	.word	0x08007f98
 80064f0:	08007fc0 	.word	0x08007fc0
 80064f4:	08007fe8 	.word	0x08007fe8
 80064f8:	08008010 	.word	0x08008010
 80064fc:	08008038 	.word	0x08008038
 8006500:	08008064 	.word	0x08008064
 8006504:	08008080 	.word	0x08008080
 8006508:	0800809c 	.word	0x0800809c
 800650c:	080080b8 	.word	0x080080b8
 8006510:	080080d4 	.word	0x080080d4
 8006514:	080080f0 	.word	0x080080f0
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006518:	2b00      	cmp	r3, #0
 800651a:	bfcc      	ite	gt
 800651c:	2301      	movgt	r3, #1
 800651e:	2300      	movle	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006524:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006528:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800652c:	2b00      	cmp	r3, #0
 800652e:	bfcc      	ite	gt
 8006530:	2301      	movgt	r3, #1
 8006532:	2300      	movle	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006538:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800653c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfcc      	ite	gt
 8006544:	2301      	movgt	r3, #1
 8006546:	2300      	movle	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800654c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006550:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfcc      	ite	gt
 8006558:	2301      	movgt	r3, #1
 800655a:	2300      	movle	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006560:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006564:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfcc      	ite	gt
 800656c:	2301      	movgt	r3, #1
 800656e:	2300      	movle	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f107 0008 	add.w	r0, r7, #8
 8006576:	9303      	str	r3, [sp, #12]
 8006578:	9402      	str	r4, [sp, #8]
 800657a:	9101      	str	r1, [sp, #4]
 800657c:	9200      	str	r2, [sp, #0]
 800657e:	4633      	mov	r3, r6
 8006580:	462a      	mov	r2, r5
 8006582:	494a      	ldr	r1, [pc, #296]	; (80066ac <printRadioSettings+0x908>)
 8006584:	f000 ffde 	bl	8007544 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006588:	f107 0308 	add.w	r3, r7, #8
 800658c:	4618      	mov	r0, r3
 800658e:	f7f9 fe1f 	bl	80001d0 <strlen>
 8006592:	4603      	mov	r3, r0
 8006594:	b29a      	uxth	r2, r3
 8006596:	f107 0108 	add.w	r1, r7, #8
 800659a:	230a      	movs	r3, #10
 800659c:	4844      	ldr	r0, [pc, #272]	; (80066b0 <printRadioSettings+0x90c>)
 800659e:	f7fd feb3 	bl	8004308 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80065a2:	201d      	movs	r0, #29
 80065a4:	f7ff f896 	bl	80056d4 <NRF24_read_register>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80065ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00c      	beq.n	80065d4 <printRadioSettings+0x830>
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4a3d      	ldr	r2, [pc, #244]	; (80066b4 <printRadioSettings+0x910>)
 80065c0:	461c      	mov	r4, r3
 80065c2:	4615      	mov	r5, r2
 80065c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80065cc:	6020      	str	r0, [r4, #0]
 80065ce:	3404      	adds	r4, #4
 80065d0:	8021      	strh	r1, [r4, #0]
 80065d2:	e00e      	b.n	80065f2 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	4a37      	ldr	r2, [pc, #220]	; (80066b8 <printRadioSettings+0x914>)
 80065da:	461c      	mov	r4, r3
 80065dc:	4615      	mov	r5, r2
 80065de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80065e6:	6020      	str	r0, [r4, #0]
 80065e8:	3404      	adds	r4, #4
 80065ea:	8021      	strh	r1, [r4, #0]
 80065ec:	3402      	adds	r4, #2
 80065ee:	0c0b      	lsrs	r3, r1, #16
 80065f0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 fdea 	bl	80001d0 <strlen>
 80065fc:	4603      	mov	r3, r0
 80065fe:	b29a      	uxth	r2, r3
 8006600:	f107 0108 	add.w	r1, r7, #8
 8006604:	230a      	movs	r3, #10
 8006606:	482a      	ldr	r0, [pc, #168]	; (80066b0 <printRadioSettings+0x90c>)
 8006608:	f7fd fe7e 	bl	8004308 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800660c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <printRadioSettings+0x88c>
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <printRadioSettings+0x918>)
 800661e:	461c      	mov	r4, r3
 8006620:	4615      	mov	r5, r2
 8006622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800662a:	c403      	stmia	r4!, {r0, r1}
 800662c:	8022      	strh	r2, [r4, #0]
 800662e:	e00d      	b.n	800664c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8006630:	f107 0308 	add.w	r3, r7, #8
 8006634:	4a22      	ldr	r2, [pc, #136]	; (80066c0 <printRadioSettings+0x91c>)
 8006636:	461c      	mov	r4, r3
 8006638:	4615      	mov	r5, r2
 800663a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800663c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006642:	c403      	stmia	r4!, {r0, r1}
 8006644:	8022      	strh	r2, [r4, #0]
 8006646:	3402      	adds	r4, #2
 8006648:	0c13      	lsrs	r3, r2, #16
 800664a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800664c:	f107 0308 	add.w	r3, r7, #8
 8006650:	4618      	mov	r0, r3
 8006652:	f7f9 fdbd 	bl	80001d0 <strlen>
 8006656:	4603      	mov	r3, r0
 8006658:	b29a      	uxth	r2, r3
 800665a:	f107 0108 	add.w	r1, r7, #8
 800665e:	230a      	movs	r3, #10
 8006660:	4813      	ldr	r0, [pc, #76]	; (80066b0 <printRadioSettings+0x90c>)
 8006662:	f7fd fe51 	bl	8004308 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8006666:	f107 0308 	add.w	r3, r7, #8
 800666a:	4a16      	ldr	r2, [pc, #88]	; (80066c4 <printRadioSettings+0x920>)
 800666c:	461c      	mov	r4, r3
 800666e:	4615      	mov	r5, r2
 8006670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800667a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	8022      	strh	r2, [r4, #0]
 8006682:	3402      	adds	r4, #2
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006688:	f107 0308 	add.w	r3, r7, #8
 800668c:	4618      	mov	r0, r3
 800668e:	f7f9 fd9f 	bl	80001d0 <strlen>
 8006692:	4603      	mov	r3, r0
 8006694:	b29a      	uxth	r2, r3
 8006696:	f107 0108 	add.w	r1, r7, #8
 800669a:	230a      	movs	r3, #10
 800669c:	4804      	ldr	r0, [pc, #16]	; (80066b0 <printRadioSettings+0x90c>)
 800669e:	f7fd fe33 	bl	8004308 <HAL_UART_Transmit>
}
 80066a2:	bf00      	nop
 80066a4:	3774      	adds	r7, #116	; 0x74
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066aa:	bf00      	nop
 80066ac:	0800810c 	.word	0x0800810c
 80066b0:	20000110 	.word	0x20000110
 80066b4:	08008158 	.word	0x08008158
 80066b8:	08008170 	.word	0x08008170
 80066bc:	08008188 	.word	0x08008188
 80066c0:	080081a4 	.word	0x080081a4
 80066c4:	08007d78 	.word	0x08007d78

080066c8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80066c8:	b084      	sub	sp, #16
 80066ca:	b580      	push	{r7, lr}
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	f107 0c08 	add.w	ip, r7, #8
 80066d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <nrf24_DebugUART_Init+0x2c>)
 80066d8:	4618      	mov	r0, r3
 80066da:	f107 0108 	add.w	r1, r7, #8
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	461a      	mov	r2, r3
 80066e2:	f000 ff1b 	bl	800751c <memcpy>
}
 80066e6:	bf00      	nop
 80066e8:	46bd      	mov	sp, r7
 80066ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066ee:	b004      	add	sp, #16
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000110 	.word	0x20000110

080066f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80066f8:	b590      	push	{r4, r7, lr}
 80066fa:	b09f      	sub	sp, #124	; 0x7c
 80066fc:	af1c      	add	r7, sp, #112	; 0x70
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066fe:	f7fa fb85 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006702:	f000 fb15 	bl	8006d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006706:	f000 fc79 	bl	8006ffc <MX_GPIO_Init>
  MX_SPI3_Init();
 800670a:	f000 fc09 	bl	8006f20 <MX_SPI3_Init>
  MX_SPI1_Init();
 800670e:	f000 fbc9 	bl	8006ea4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8006712:	f000 fc43 	bl	8006f9c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8006716:	f000 fb85 	bl	8006e24 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_SET);
 800671a:	2201      	movs	r2, #1
 800671c:	2101      	movs	r1, #1
 800671e:	4830      	ldr	r0, [pc, #192]	; (80067e0 <main+0xe8>)
 8006720:	f7fa ff24 	bl	800156c <HAL_GPIO_WritePin>

   NRF24_begin(nRF_CS_GPIO_Port, nRF_CS_Pin, nRF_CE_Pin, hspi3);
 8006724:	4c2f      	ldr	r4, [pc, #188]	; (80067e4 <main+0xec>)
 8006726:	4668      	mov	r0, sp
 8006728:	1d23      	adds	r3, r4, #4
 800672a:	2260      	movs	r2, #96	; 0x60
 800672c:	4619      	mov	r1, r3
 800672e:	f000 fef5 	bl	800751c <memcpy>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800673c:	482a      	ldr	r0, [pc, #168]	; (80067e8 <main+0xf0>)
 800673e:	f7ff f873 	bl	8005828 <NRF24_begin>
   nrf24_DebugUART_Init(huart1);
 8006742:	4c2a      	ldr	r4, [pc, #168]	; (80067ec <main+0xf4>)
 8006744:	4668      	mov	r0, sp
 8006746:	f104 0310 	add.w	r3, r4, #16
 800674a:	2270      	movs	r2, #112	; 0x70
 800674c:	4619      	mov	r1, r3
 800674e:	f000 fee5 	bl	800751c <memcpy>
 8006752:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006756:	f7ff ffb7 	bl	80066c8 <nrf24_DebugUART_Init>

   NRF24_stopListening();
 800675a:	f7ff f945 	bl	80059e8 <NRF24_stopListening>
   NRF24_openWritingPipe(TxpipeAddrs);
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <main+0xf8>)
 8006760:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006764:	4618      	mov	r0, r3
 8006766:	4621      	mov	r1, r4
 8006768:	f7ff f94a 	bl	8005a00 <NRF24_openWritingPipe>
   NRF24_setAutoAck(true);
 800676c:	2001      	movs	r0, #1
 800676e:	f7ff fa2b 	bl	8005bc8 <NRF24_setAutoAck>
   NRF24_setChannel(52);
 8006772:	2034      	movs	r0, #52	; 0x34
 8006774:	f7ff f983 	bl	8005a7e <NRF24_setChannel>
   NRF24_setPayloadSize(32);
 8006778:	2020      	movs	r0, #32
 800677a:	f7ff f995 	bl	8005aa8 <NRF24_setPayloadSize>

   NRF24_enableDynamicPayloads();
 800677e:	f7ff f9d9 	bl	8005b34 <NRF24_enableDynamicPayloads>
   NRF24_enableAckPayload();
 8006782:	f7ff f9a9 	bl	8005ad8 <NRF24_enableAckPayload>

   printRadioSettings();
 8006786:	f7ff fb0d 	bl	8005da4 <printRadioSettings>

   ICM_SelectBank(USER_BANK_0);
 800678a:	2000      	movs	r0, #0
 800678c:	f7fe fdfc 	bl	8005388 <ICM_SelectBank>
   ICM_PowerOn();
 8006790:	f7fe fcc2 	bl	8005118 <ICM_PowerOn>

   MAX86150_setup();
 8006794:	f7fe fe59 	bl	800544a <MAX86150_setup>

   sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", 300, 90, 100);
 8006798:	2364      	movs	r3, #100	; 0x64
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	235a      	movs	r3, #90	; 0x5a
 800679e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067a2:	4914      	ldr	r1, [pc, #80]	; (80067f4 <main+0xfc>)
 80067a4:	4814      	ldr	r0, [pc, #80]	; (80067f8 <main+0x100>)
 80067a6:	f000 fecd 	bl	8007544 <siprintf>
   HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80067aa:	4813      	ldr	r0, [pc, #76]	; (80067f8 <main+0x100>)
 80067ac:	f7f9 fd10 	bl	80001d0 <strlen>
 80067b0:	4603      	mov	r3, r0
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067b8:	490f      	ldr	r1, [pc, #60]	; (80067f8 <main+0x100>)
 80067ba:	480c      	ldr	r0, [pc, #48]	; (80067ec <main+0xf4>)
 80067bc:	f7fd fda4 	bl	8004308 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Select User Bank 0
	  		ICM_SelectBank(USER_BANK_0);
 80067c0:	2000      	movs	r0, #0
 80067c2:	f7fe fde1 	bl	8005388 <ICM_SelectBank>
	  		HAL_Delay(10);
 80067c6:	200a      	movs	r0, #10
 80067c8:	f7fa fb90 	bl	8000eec <HAL_Delay>

	  		// Obtain accelerometer and gyro data
	  		ICM_ReadAccelGyro();
 80067cc:	f7fe fd50 	bl	8005270 <ICM_ReadAccelGyro>

	  		// Obtain magnetometer data
	  		int16_t mag_data[3];
	  		moveArm(accel_data, gyro_data, mag_data);
 80067d0:	463b      	mov	r3, r7
 80067d2:	461a      	mov	r2, r3
 80067d4:	4909      	ldr	r1, [pc, #36]	; (80067fc <main+0x104>)
 80067d6:	480a      	ldr	r0, [pc, #40]	; (8006800 <main+0x108>)
 80067d8:	f000 f816 	bl	8006808 <moveArm>
  {
 80067dc:	e7f0      	b.n	80067c0 <main+0xc8>
 80067de:	bf00      	nop
 80067e0:	48000400 	.word	0x48000400
 80067e4:	20000428 	.word	0x20000428
 80067e8:	48000800 	.word	0x48000800
 80067ec:	20000324 	.word	0x20000324
 80067f0:	20000008 	.word	0x20000008
 80067f4:	080082bc 	.word	0x080082bc
 80067f8:	200004a0 	.word	0x200004a0
 80067fc:	200001b0 	.word	0x200001b0
 8006800:	200001a8 	.word	0x200001a8
 8006804:	00000000 	.word	0x00000000

08006808 <moveArm>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void moveArm(int16_t accel[3], int16_t gyro[3], int16_t mag[3]){
 8006808:	b5b0      	push	{r4, r5, r7, lr}
 800680a:	b092      	sub	sp, #72	; 0x48
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]

	//ICM_20948_AGMT_t agmt;
	float accx = accel[0];
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006822:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float accy = accel[1];
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3302      	adds	r3, #2
 800682a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006836:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float accz = accel[2];
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3304      	adds	r3, #4
 800683e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006842:	ee07 3a90 	vmov	s15, r3
 8006846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800684a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	float gyrx = gyro[0];
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006854:	ee07 3a90 	vmov	s15, r3
 8006858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800685c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float gyry = gyro[1];
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3302      	adds	r3, #2
 8006864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006870:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float gyrz = gyro[2];
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	3304      	adds	r3, #4
 8006878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800687c:	ee07 3a90 	vmov	s15, r3
 8006880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006884:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float magx = mag[0];
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006896:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float magy = mag[1];
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3302      	adds	r3, #2
 800689e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068aa:	edc7 7a08 	vstr	s15, [r7, #32]
	float magz = mag[2];
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3304      	adds	r3, #4
 80068b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068be:	edc7 7a07 	vstr	s15, [r7, #28]

	posR=posR+gyrz*rate/1000;
 80068c2:	4b31      	ldr	r3, [pc, #196]	; (8006988 <moveArm+0x180>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800698c <moveArm+0x184>
 80068da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80068de:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <moveArm+0x188>)
 80068e0:	edd3 7a00 	vldr	s15, [r3]
 80068e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <moveArm+0x188>)
 80068ea:	edc3 7a00 	vstr	s15, [r3]

	//int iposR = round(posR);
	if (posR>180){
 80068ee:	4b28      	ldr	r3, [pc, #160]	; (8006990 <moveArm+0x188>)
 80068f0:	edd3 7a00 	vldr	s15, [r3]
 80068f4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8006994 <moveArm+0x18c>
 80068f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006900:	dd03      	ble.n	800690a <moveArm+0x102>
		posR = 180;
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <moveArm+0x188>)
 8006904:	4a24      	ldr	r2, [pc, #144]	; (8006998 <moveArm+0x190>)
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	e00b      	b.n	8006922 <moveArm+0x11a>
	}else if (posR<0){
 800690a:	4b21      	ldr	r3, [pc, #132]	; (8006990 <moveArm+0x188>)
 800690c:	edd3 7a00 	vldr	s15, [r3]
 8006910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006918:	d503      	bpl.n	8006922 <moveArm+0x11a>
		posR = 0;
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <moveArm+0x188>)
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
	}

	posS= 300 - accy * 0.6;
 8006922:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006924:	f7f9 fe10 	bl	8000548 <__aeabi_f2d>
 8006928:	a313      	add	r3, pc, #76	; (adr r3, 8006978 <moveArm+0x170>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7f9 fe63 	bl	80005f8 <__aeabi_dmul>
 8006932:	4603      	mov	r3, r0
 8006934:	460c      	mov	r4, r1
 8006936:	461a      	mov	r2, r3
 8006938:	4623      	mov	r3, r4
 800693a:	a111      	add	r1, pc, #68	; (adr r1, 8006980 <moveArm+0x178>)
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	f7f9 fca2 	bl	8000288 <__aeabi_dsub>
 8006944:	4603      	mov	r3, r0
 8006946:	460c      	mov	r4, r1
 8006948:	4618      	mov	r0, r3
 800694a:	4621      	mov	r1, r4
 800694c:	f7fa f88e 	bl	8000a6c <__aeabi_d2f>
 8006950:	4602      	mov	r2, r0
 8006952:	4b12      	ldr	r3, [pc, #72]	; (800699c <moveArm+0x194>)
 8006954:	601a      	str	r2, [r3, #0]
	//int iposS = round(posS);

	if (posS>300){
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <moveArm+0x194>)
 8006958:	edd3 7a00 	vldr	s15, [r3]
 800695c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80069a0 <moveArm+0x198>
 8006960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006968:	dd1e      	ble.n	80069a8 <moveArm+0x1a0>
		posS = 300;
 800696a:	4b0c      	ldr	r3, [pc, #48]	; (800699c <moveArm+0x194>)
 800696c:	4a0d      	ldr	r2, [pc, #52]	; (80069a4 <moveArm+0x19c>)
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	e027      	b.n	80069c2 <moveArm+0x1ba>
 8006972:	bf00      	nop
 8006974:	f3af 8000 	nop.w
 8006978:	33333333 	.word	0x33333333
 800697c:	3fe33333 	.word	0x3fe33333
 8006980:	00000000 	.word	0x00000000
 8006984:	4072c000 	.word	0x4072c000
 8006988:	20000018 	.word	0x20000018
 800698c:	447a0000 	.word	0x447a0000
 8006990:	20000014 	.word	0x20000014
 8006994:	43340000 	.word	0x43340000
 8006998:	43340000 	.word	0x43340000
 800699c:	20000010 	.word	0x20000010
 80069a0:	43960000 	.word	0x43960000
 80069a4:	43960000 	.word	0x43960000
	}else if (posS<10){
 80069a8:	4bc4      	ldr	r3, [pc, #784]	; (8006cbc <moveArm+0x4b4>)
 80069aa:	edd3 7a00 	vldr	s15, [r3]
 80069ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80069b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ba:	d502      	bpl.n	80069c2 <moveArm+0x1ba>
		posS = 10;
 80069bc:	4bbf      	ldr	r3, [pc, #764]	; (8006cbc <moveArm+0x4b4>)
 80069be:	4ac0      	ldr	r2, [pc, #768]	; (8006cc0 <moveArm+0x4b8>)
 80069c0:	601a      	str	r2, [r3, #0]
	}

	posR1=posR;
 80069c2:	4bc0      	ldr	r3, [pc, #768]	; (8006cc4 <moveArm+0x4bc>)
 80069c4:	edd3 7a00 	vldr	s15, [r3]
 80069c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069cc:	ee17 3a90 	vmov	r3, s15
 80069d0:	b21a      	sxth	r2, r3
 80069d2:	4bbd      	ldr	r3, [pc, #756]	; (8006cc8 <moveArm+0x4c0>)
 80069d4:	801a      	strh	r2, [r3, #0]
	posS1=posS1+posS;
 80069d6:	4bbd      	ldr	r3, [pc, #756]	; (8006ccc <moveArm+0x4c4>)
 80069d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069e4:	4bb5      	ldr	r3, [pc, #724]	; (8006cbc <moveArm+0x4b4>)
 80069e6:	edd3 7a00 	vldr	s15, [r3]
 80069ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069f2:	ee17 3a90 	vmov	r3, s15
 80069f6:	b21a      	sxth	r2, r3
 80069f8:	4bb4      	ldr	r3, [pc, #720]	; (8006ccc <moveArm+0x4c4>)
 80069fa:	801a      	strh	r2, [r3, #0]

	n=n+1;
 80069fc:	4bb4      	ldr	r3, [pc, #720]	; (8006cd0 <moveArm+0x4c8>)
 80069fe:	f993 3000 	ldrsb.w	r3, [r3]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	3301      	adds	r3, #1
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	b25a      	sxtb	r2, r3
 8006a0a:	4bb1      	ldr	r3, [pc, #708]	; (8006cd0 <moveArm+0x4c8>)
 8006a0c:	701a      	strb	r2, [r3, #0]

	if (n==5){
 8006a0e:	4bb0      	ldr	r3, [pc, #704]	; (8006cd0 <moveArm+0x4c8>)
 8006a10:	f993 3000 	ldrsb.w	r3, [r3]
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	f040 8180 	bne.w	8006d1a <moveArm+0x512>

		posS1=posS1/6;
 8006a1a:	4bac      	ldr	r3, [pc, #688]	; (8006ccc <moveArm+0x4c4>)
 8006a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a20:	4aac      	ldr	r2, [pc, #688]	; (8006cd4 <moveArm+0x4cc>)
 8006a22:	fb82 1203 	smull	r1, r2, r2, r3
 8006a26:	17db      	asrs	r3, r3, #31
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	4ba7      	ldr	r3, [pc, #668]	; (8006ccc <moveArm+0x4c4>)
 8006a2e:	801a      	strh	r2, [r3, #0]
		posH1=posH1/6;
 8006a30:	4ba9      	ldr	r3, [pc, #676]	; (8006cd8 <moveArm+0x4d0>)
 8006a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a36:	4aa7      	ldr	r2, [pc, #668]	; (8006cd4 <moveArm+0x4cc>)
 8006a38:	fb82 1203 	smull	r1, r2, r2, r3
 8006a3c:	17db      	asrs	r3, r3, #31
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	b21a      	sxth	r2, r3
 8006a42:	4ba5      	ldr	r3, [pc, #660]	; (8006cd8 <moveArm+0x4d0>)
 8006a44:	801a      	strh	r2, [r3, #0]

		int16_t iposR = round(posR1);
 8006a46:	4ba0      	ldr	r3, [pc, #640]	; (8006cc8 <moveArm+0x4c0>)
 8006a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7f9 fd69 	bl	8000524 <__aeabi_i2d>
 8006a52:	4603      	mov	r3, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	4618      	mov	r0, r3
 8006a58:	4621      	mov	r1, r4
 8006a5a:	f7f9 ffdf 	bl	8000a1c <__aeabi_d2iz>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	837b      	strh	r3, [r7, #26]
		int16_t iposS = round(posS1);
 8006a62:	4b9a      	ldr	r3, [pc, #616]	; (8006ccc <moveArm+0x4c4>)
 8006a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7f9 fd5b 	bl	8000524 <__aeabi_i2d>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	4618      	mov	r0, r3
 8006a74:	4621      	mov	r1, r4
 8006a76:	f7f9 ffd1 	bl	8000a1c <__aeabi_d2iz>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	833b      	strh	r3, [r7, #24]
		int16_t iposH = 100;
 8006a7e:	2364      	movs	r3, #100	; 0x64
 8006a80:	82fb      	strh	r3, [r7, #22]

		sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8006a82:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006a86:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8006a8a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	460b      	mov	r3, r1
 8006a92:	4992      	ldr	r1, [pc, #584]	; (8006cdc <moveArm+0x4d4>)
 8006a94:	4892      	ldr	r0, [pc, #584]	; (8006ce0 <moveArm+0x4d8>)
 8006a96:	f000 fd55 	bl	8007544 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006a9a:	4891      	ldr	r0, [pc, #580]	; (8006ce0 <moveArm+0x4d8>)
 8006a9c:	f7f9 fb98 	bl	80001d0 <strlen>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aa8:	498d      	ldr	r1, [pc, #564]	; (8006ce0 <moveArm+0x4d8>)
 8006aaa:	488e      	ldr	r0, [pc, #568]	; (8006ce4 <moveArm+0x4dc>)
 8006aac:	f7fd fc2c 	bl	8004308 <HAL_UART_Transmit>

		n=0;
 8006ab0:	4b87      	ldr	r3, [pc, #540]	; (8006cd0 <moveArm+0x4c8>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	701a      	strb	r2, [r3, #0]

		if (iposR < 52 && iposR > 38 && iposS < 250 && iposS > 200  && x == 1){
 8006ab6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006aba:	2b33      	cmp	r3, #51	; 0x33
 8006abc:	dc7d      	bgt.n	8006bba <moveArm+0x3b2>
 8006abe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006ac2:	2b26      	cmp	r3, #38	; 0x26
 8006ac4:	dd79      	ble.n	8006bba <moveArm+0x3b2>
 8006ac6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006aca:	2bf9      	cmp	r3, #249	; 0xf9
 8006acc:	dc75      	bgt.n	8006bba <moveArm+0x3b2>
 8006ace:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006ad2:	2bc8      	cmp	r3, #200	; 0xc8
 8006ad4:	dd71      	ble.n	8006bba <moveArm+0x3b2>
 8006ad6:	4b84      	ldr	r3, [pc, #528]	; (8006ce8 <moveArm+0x4e0>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d16d      	bne.n	8006bba <moveArm+0x3b2>
				sprintf(uart_buffer, "G2201 S225 R45 H45 F10000\r\n");
 8006ade:	4a80      	ldr	r2, [pc, #512]	; (8006ce0 <moveArm+0x4d8>)
 8006ae0:	4b82      	ldr	r3, [pc, #520]	; (8006cec <moveArm+0x4e4>)
 8006ae2:	4615      	mov	r5, r2
 8006ae4:	461c      	mov	r4, r3
 8006ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ae8:	6028      	str	r0, [r5, #0]
 8006aea:	6069      	str	r1, [r5, #4]
 8006aec:	60aa      	str	r2, [r5, #8]
 8006aee:	60eb      	str	r3, [r5, #12]
 8006af0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006af2:	6128      	str	r0, [r5, #16]
 8006af4:	6169      	str	r1, [r5, #20]
 8006af6:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006af8:	4879      	ldr	r0, [pc, #484]	; (8006ce0 <moveArm+0x4d8>)
 8006afa:	f7f9 fb69 	bl	80001d0 <strlen>
 8006afe:	4603      	mov	r3, r0
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b06:	4976      	ldr	r1, [pc, #472]	; (8006ce0 <moveArm+0x4d8>)
 8006b08:	4876      	ldr	r0, [pc, #472]	; (8006ce4 <moveArm+0x4dc>)
 8006b0a:	f7fd fbfd 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8006b0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006b12:	f7fa f9eb 	bl	8000eec <HAL_Delay>

				sprintf(uart_buffer, "G2201 S225 R45 H15 F10000\r\n");
 8006b16:	4a72      	ldr	r2, [pc, #456]	; (8006ce0 <moveArm+0x4d8>)
 8006b18:	4b75      	ldr	r3, [pc, #468]	; (8006cf0 <moveArm+0x4e8>)
 8006b1a:	4615      	mov	r5, r2
 8006b1c:	461c      	mov	r4, r3
 8006b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b20:	6028      	str	r0, [r5, #0]
 8006b22:	6069      	str	r1, [r5, #4]
 8006b24:	60aa      	str	r2, [r5, #8]
 8006b26:	60eb      	str	r3, [r5, #12]
 8006b28:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006b2a:	6128      	str	r0, [r5, #16]
 8006b2c:	6169      	str	r1, [r5, #20]
 8006b2e:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006b30:	486b      	ldr	r0, [pc, #428]	; (8006ce0 <moveArm+0x4d8>)
 8006b32:	f7f9 fb4d 	bl	80001d0 <strlen>
 8006b36:	4603      	mov	r3, r0
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b3e:	4968      	ldr	r1, [pc, #416]	; (8006ce0 <moveArm+0x4d8>)
 8006b40:	4868      	ldr	r0, [pc, #416]	; (8006ce4 <moveArm+0x4dc>)
 8006b42:	f7fd fbe1 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8006b46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006b4a:	f7fa f9cf 	bl	8000eec <HAL_Delay>

				sprintf(uart_buffer, "M2231 V1\r\n");
 8006b4e:	4a64      	ldr	r2, [pc, #400]	; (8006ce0 <moveArm+0x4d8>)
 8006b50:	4b68      	ldr	r3, [pc, #416]	; (8006cf4 <moveArm+0x4ec>)
 8006b52:	cb03      	ldmia	r3!, {r0, r1}
 8006b54:	6010      	str	r0, [r2, #0]
 8006b56:	6051      	str	r1, [r2, #4]
 8006b58:	8819      	ldrh	r1, [r3, #0]
 8006b5a:	789b      	ldrb	r3, [r3, #2]
 8006b5c:	8111      	strh	r1, [r2, #8]
 8006b5e:	7293      	strb	r3, [r2, #10]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006b60:	485f      	ldr	r0, [pc, #380]	; (8006ce0 <moveArm+0x4d8>)
 8006b62:	f7f9 fb35 	bl	80001d0 <strlen>
 8006b66:	4603      	mov	r3, r0
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b6e:	495c      	ldr	r1, [pc, #368]	; (8006ce0 <moveArm+0x4d8>)
 8006b70:	485c      	ldr	r0, [pc, #368]	; (8006ce4 <moveArm+0x4dc>)
 8006b72:	f7fd fbc9 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(500);
 8006b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b7a:	f7fa f9b7 	bl	8000eec <HAL_Delay>

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8006b7e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006b82:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8006b86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4953      	ldr	r1, [pc, #332]	; (8006cdc <moveArm+0x4d4>)
 8006b90:	4853      	ldr	r0, [pc, #332]	; (8006ce0 <moveArm+0x4d8>)
 8006b92:	f000 fcd7 	bl	8007544 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006b96:	4852      	ldr	r0, [pc, #328]	; (8006ce0 <moveArm+0x4d8>)
 8006b98:	f7f9 fb1a 	bl	80001d0 <strlen>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ba4:	494e      	ldr	r1, [pc, #312]	; (8006ce0 <moveArm+0x4d8>)
 8006ba6:	484f      	ldr	r0, [pc, #316]	; (8006ce4 <moveArm+0x4dc>)
 8006ba8:	f7fd fbae 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(500);
 8006bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bb0:	f7fa f99c 	bl	8000eec <HAL_Delay>

			    x = 0;
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	; (8006ce8 <moveArm+0x4e0>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	701a      	strb	r2, [r3, #0]
			 }

			if (iposR < 142 && iposR > 128 && iposS < 200 && iposS > 150 && x== 0){
 8006bba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006bbe:	2b8d      	cmp	r3, #141	; 0x8d
 8006bc0:	f300 80ab 	bgt.w	8006d1a <moveArm+0x512>
 8006bc4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006bc8:	2b80      	cmp	r3, #128	; 0x80
 8006bca:	f340 80a6 	ble.w	8006d1a <moveArm+0x512>
 8006bce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006bd2:	2bc7      	cmp	r3, #199	; 0xc7
 8006bd4:	f300 80a1 	bgt.w	8006d1a <moveArm+0x512>
 8006bd8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006bdc:	2b96      	cmp	r3, #150	; 0x96
 8006bde:	f340 809c 	ble.w	8006d1a <moveArm+0x512>
 8006be2:	4b41      	ldr	r3, [pc, #260]	; (8006ce8 <moveArm+0x4e0>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 8097 	bne.w	8006d1a <moveArm+0x512>

				sprintf(uart_buffer, "G2201 S175 R135 H45 F10000\r\n");
 8006bec:	4a3c      	ldr	r2, [pc, #240]	; (8006ce0 <moveArm+0x4d8>)
 8006bee:	4b42      	ldr	r3, [pc, #264]	; (8006cf8 <moveArm+0x4f0>)
 8006bf0:	4615      	mov	r5, r2
 8006bf2:	461c      	mov	r4, r3
 8006bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bf6:	6028      	str	r0, [r5, #0]
 8006bf8:	6069      	str	r1, [r5, #4]
 8006bfa:	60aa      	str	r2, [r5, #8]
 8006bfc:	60eb      	str	r3, [r5, #12]
 8006bfe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006c00:	6128      	str	r0, [r5, #16]
 8006c02:	6169      	str	r1, [r5, #20]
 8006c04:	61aa      	str	r2, [r5, #24]
 8006c06:	7823      	ldrb	r3, [r4, #0]
 8006c08:	772b      	strb	r3, [r5, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006c0a:	4835      	ldr	r0, [pc, #212]	; (8006ce0 <moveArm+0x4d8>)
 8006c0c:	f7f9 fae0 	bl	80001d0 <strlen>
 8006c10:	4603      	mov	r3, r0
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c18:	4931      	ldr	r1, [pc, #196]	; (8006ce0 <moveArm+0x4d8>)
 8006c1a:	4832      	ldr	r0, [pc, #200]	; (8006ce4 <moveArm+0x4dc>)
 8006c1c:	f7fd fb74 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8006c20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c24:	f7fa f962 	bl	8000eec <HAL_Delay>

				sprintf(uart_buffer, "G2201 S175 R135 H15 F10000\r\n");
 8006c28:	4a2d      	ldr	r2, [pc, #180]	; (8006ce0 <moveArm+0x4d8>)
 8006c2a:	4b34      	ldr	r3, [pc, #208]	; (8006cfc <moveArm+0x4f4>)
 8006c2c:	4615      	mov	r5, r2
 8006c2e:	461c      	mov	r4, r3
 8006c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c32:	6028      	str	r0, [r5, #0]
 8006c34:	6069      	str	r1, [r5, #4]
 8006c36:	60aa      	str	r2, [r5, #8]
 8006c38:	60eb      	str	r3, [r5, #12]
 8006c3a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8006c3c:	6128      	str	r0, [r5, #16]
 8006c3e:	6169      	str	r1, [r5, #20]
 8006c40:	61aa      	str	r2, [r5, #24]
 8006c42:	7823      	ldrb	r3, [r4, #0]
 8006c44:	772b      	strb	r3, [r5, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006c46:	4826      	ldr	r0, [pc, #152]	; (8006ce0 <moveArm+0x4d8>)
 8006c48:	f7f9 fac2 	bl	80001d0 <strlen>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c54:	4922      	ldr	r1, [pc, #136]	; (8006ce0 <moveArm+0x4d8>)
 8006c56:	4823      	ldr	r0, [pc, #140]	; (8006ce4 <moveArm+0x4dc>)
 8006c58:	f7fd fb56 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8006c5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c60:	f7fa f944 	bl	8000eec <HAL_Delay>

				sprintf(uart_buffer, "M2231 V0\r\n");
 8006c64:	4a1e      	ldr	r2, [pc, #120]	; (8006ce0 <moveArm+0x4d8>)
 8006c66:	4b26      	ldr	r3, [pc, #152]	; (8006d00 <moveArm+0x4f8>)
 8006c68:	cb03      	ldmia	r3!, {r0, r1}
 8006c6a:	6010      	str	r0, [r2, #0]
 8006c6c:	6051      	str	r1, [r2, #4]
 8006c6e:	8819      	ldrh	r1, [r3, #0]
 8006c70:	789b      	ldrb	r3, [r3, #2]
 8006c72:	8111      	strh	r1, [r2, #8]
 8006c74:	7293      	strb	r3, [r2, #10]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006c76:	481a      	ldr	r0, [pc, #104]	; (8006ce0 <moveArm+0x4d8>)
 8006c78:	f7f9 faaa 	bl	80001d0 <strlen>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c84:	4916      	ldr	r1, [pc, #88]	; (8006ce0 <moveArm+0x4d8>)
 8006c86:	4817      	ldr	r0, [pc, #92]	; (8006ce4 <moveArm+0x4dc>)
 8006c88:	f7fd fb3e 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(500);
 8006c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c90:	f7fa f92c 	bl	8000eec <HAL_Delay>

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8006c94:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006c98:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8006c9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	490d      	ldr	r1, [pc, #52]	; (8006cdc <moveArm+0x4d4>)
 8006ca6:	480e      	ldr	r0, [pc, #56]	; (8006ce0 <moveArm+0x4d8>)
 8006ca8:	f000 fc4c 	bl	8007544 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8006cac:	480c      	ldr	r0, [pc, #48]	; (8006ce0 <moveArm+0x4d8>)
 8006cae:	f7f9 fa8f 	bl	80001d0 <strlen>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cba:	e023      	b.n	8006d04 <moveArm+0x4fc>
 8006cbc:	20000010 	.word	0x20000010
 8006cc0:	41200000 	.word	0x41200000
 8006cc4:	20000014 	.word	0x20000014
 8006cc8:	20000190 	.word	0x20000190
 8006ccc:	20000192 	.word	0x20000192
 8006cd0:	20000196 	.word	0x20000196
 8006cd4:	2aaaaaab 	.word	0x2aaaaaab
 8006cd8:	20000194 	.word	0x20000194
 8006cdc:	080082bc 	.word	0x080082bc
 8006ce0:	200004a0 	.word	0x200004a0
 8006ce4:	20000324 	.word	0x20000324
 8006ce8:	20000019 	.word	0x20000019
 8006cec:	080082dc 	.word	0x080082dc
 8006cf0:	080082f8 	.word	0x080082f8
 8006cf4:	08008314 	.word	0x08008314
 8006cf8:	08008320 	.word	0x08008320
 8006cfc:	08008340 	.word	0x08008340
 8006d00:	08008360 	.word	0x08008360
 8006d04:	4907      	ldr	r1, [pc, #28]	; (8006d24 <moveArm+0x51c>)
 8006d06:	4808      	ldr	r0, [pc, #32]	; (8006d28 <moveArm+0x520>)
 8006d08:	f7fd fafe 	bl	8004308 <HAL_UART_Transmit>
				HAL_Delay(500);
 8006d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d10:	f7fa f8ec 	bl	8000eec <HAL_Delay>

				x = 1;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <moveArm+0x524>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	701a      	strb	r2, [r3, #0]

			}

  }

}
 8006d1a:	bf00      	nop
 8006d1c:	3740      	adds	r7, #64	; 0x40
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bdb0      	pop	{r4, r5, r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200004a0 	.word	0x200004a0
 8006d28:	20000324 	.word	0x20000324
 8006d2c:	20000019 	.word	0x20000019

08006d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b0b8      	sub	sp, #224	; 0xe0
 8006d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006d36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d3a:	2244      	movs	r2, #68	; 0x44
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fbf7 	bl	8007532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006d44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d54:	463b      	mov	r3, r7
 8006d56:	2288      	movs	r2, #136	; 0x88
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fbe9 	bl	8007532 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006d60:	2310      	movs	r3, #16
 8006d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006d72:	2360      	movs	r3, #96	; 0x60
 8006d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006d8a:	2328      	movs	r3, #40	; 0x28
 8006d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006d90:	2307      	movs	r3, #7
 8006d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006d96:	2302      	movs	r3, #2
 8006d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006da2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fb f94e 	bl	8002048 <HAL_RCC_OscConfig>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8006db2:	f000 f9a5 	bl	8007100 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006db6:	230f      	movs	r3, #15
 8006db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006dd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006dd8:	2104      	movs	r1, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fb fce4 	bl	80027a8 <HAL_RCC_ClockConfig>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d001      	beq.n	8006dea <SystemClock_Config+0xba>
  {
    Error_Handler();
 8006de6:	f000 f98b 	bl	8007100 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8006dea:	2341      	movs	r3, #65	; 0x41
 8006dec:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006dee:	2300      	movs	r3, #0
 8006df0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006df2:	2300      	movs	r3, #0
 8006df4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006df6:	463b      	mov	r3, r7
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fb fed9 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8006e04:	f000 f97c 	bl	8007100 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006e08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e0c:	f7fb f8c6 	bl	8001f9c <HAL_PWREx_ControlVoltageScaling>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006e16:	f000 f973 	bl	8007100 <Error_Handler>
  }
}
 8006e1a:	bf00      	nop
 8006e1c:	37e0      	adds	r7, #224	; 0xe0
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006e28:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e2a:	4a1c      	ldr	r2, [pc, #112]	; (8006e9c <MX_I2C1_Init+0x78>)
 8006e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <MX_I2C1_Init+0x7c>)
 8006e32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006e34:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e3a:	4b17      	ldr	r3, [pc, #92]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e40:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006e46:	4b14      	ldr	r3, [pc, #80]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e58:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e5e:	480e      	ldr	r0, [pc, #56]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e60:	f7fa fb9c 	bl	800159c <HAL_I2C_Init>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006e6a:	f000 f949 	bl	8007100 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4809      	ldr	r0, [pc, #36]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e72:	f7fa ffed 	bl	8001e50 <HAL_I2CEx_ConfigAnalogFilter>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006e7c:	f000 f940 	bl	8007100 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e80:	2100      	movs	r1, #0
 8006e82:	4805      	ldr	r0, [pc, #20]	; (8006e98 <MX_I2C1_Init+0x74>)
 8006e84:	f7fb f82f 	bl	8001ee6 <HAL_I2CEx_ConfigDigitalFilter>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006e8e:	f000 f937 	bl	8007100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200002a4 	.word	0x200002a4
 8006e9c:	40005400 	.word	0x40005400
 8006ea0:	10909cec 	.word	0x10909cec

08006ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <MX_SPI1_Init+0x78>)
 8006eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006eae:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006eb6:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ebc:	4b16      	ldr	r3, [pc, #88]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ebe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ec2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006ec4:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006ed0:	4b11      	ldr	r3, [pc, #68]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ed8:	4b0f      	ldr	r3, [pc, #60]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006eda:	2210      	movs	r2, #16
 8006edc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ede:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006ef0:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006ef6:	4b08      	ldr	r3, [pc, #32]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f02:	4805      	ldr	r0, [pc, #20]	; (8006f18 <MX_SPI1_Init+0x74>)
 8006f04:	f7fc fb04 	bl	8003510 <HAL_SPI_Init>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006f0e:	f000 f8f7 	bl	8007100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f12:	bf00      	nop
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	200001b8 	.word	0x200001b8
 8006f1c:	40013000 	.word	0x40013000

08006f20 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006f24:	4b1b      	ldr	r3, [pc, #108]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f26:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <MX_SPI3_Init+0x78>)
 8006f28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006f2a:	4b1a      	ldr	r3, [pc, #104]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006f32:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006f3e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f40:	4b14      	ldr	r3, [pc, #80]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f46:	4b13      	ldr	r3, [pc, #76]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f52:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006f54:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f56:	2210      	movs	r2, #16
 8006f58:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f60:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f6e:	2207      	movs	r2, #7
 8006f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f72:	4b08      	ldr	r3, [pc, #32]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006f7e:	4805      	ldr	r0, [pc, #20]	; (8006f94 <MX_SPI3_Init+0x74>)
 8006f80:	f7fc fac6 	bl	8003510 <HAL_SPI_Init>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006f8a:	f000 f8b9 	bl	8007100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000428 	.word	0x20000428
 8006f98:	40003c00 	.word	0x40003c00

08006f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006fa0:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fa2:	4a15      	ldr	r2, [pc, #84]	; (8006ff8 <MX_USART1_UART_Init+0x5c>)
 8006fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006fa6:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006fae:	4b11      	ldr	r3, [pc, #68]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006fb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fc2:	220c      	movs	r2, #12
 8006fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006fde:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <MX_USART1_UART_Init+0x58>)
 8006fe0:	f7fd f944 	bl	800426c <HAL_UART_Init>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006fea:	f000 f889 	bl	8007100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000324 	.word	0x20000324
 8006ff8:	40013800 	.word	0x40013800

08006ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	2200      	movs	r2, #0
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	605a      	str	r2, [r3, #4]
 800700c:	609a      	str	r2, [r3, #8]
 800700e:	60da      	str	r2, [r3, #12]
 8007010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007012:	4b38      	ldr	r3, [pc, #224]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007016:	4a37      	ldr	r2, [pc, #220]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800701c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800701e:	4b35      	ldr	r3, [pc, #212]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800702a:	4b32      	ldr	r3, [pc, #200]	; (80070f4 <MX_GPIO_Init+0xf8>)
 800702c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702e:	4a31      	ldr	r2, [pc, #196]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007046:	4a2b      	ldr	r2, [pc, #172]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007048:	f043 0302 	orr.w	r3, r3, #2
 800704c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800704e:	4b29      	ldr	r3, [pc, #164]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	60bb      	str	r3, [r7, #8]
 8007058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800705a:	4b26      	ldr	r3, [pc, #152]	; (80070f4 <MX_GPIO_Init+0xf8>)
 800705c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705e:	4a25      	ldr	r2, [pc, #148]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <MX_GPIO_Init+0xf8>)
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8007072:	2200      	movs	r2, #0
 8007074:	2110      	movs	r1, #16
 8007076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800707a:	f7fa fa77 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF_PWR_GPIO_Port, nRF_PWR_Pin, GPIO_PIN_RESET);
 800707e:	2200      	movs	r2, #0
 8007080:	2101      	movs	r1, #1
 8007082:	481d      	ldr	r0, [pc, #116]	; (80070f8 <MX_GPIO_Init+0xfc>)
 8007084:	f7fa fa72 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, nRF_CS_Pin|nRF_CE_Pin, GPIO_PIN_RESET);
 8007088:	2200      	movs	r2, #0
 800708a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800708e:	481b      	ldr	r0, [pc, #108]	; (80070fc <MX_GPIO_Init+0x100>)
 8007090:	f7fa fa6c 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM_CS_Pin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 8007094:	2310      	movs	r3, #16
 8007096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007098:	2301      	movs	r3, #1
 800709a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800709c:	2300      	movs	r3, #0
 800709e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	4619      	mov	r1, r3
 80070aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ae:	f7fa f8b5 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : nRF_PWR_Pin */
  GPIO_InitStruct.Pin = nRF_PWR_Pin;
 80070b2:	2301      	movs	r3, #1
 80070b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070b6:	2301      	movs	r3, #1
 80070b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070be:	2300      	movs	r3, #0
 80070c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nRF_PWR_GPIO_Port, &GPIO_InitStruct);
 80070c2:	f107 0314 	add.w	r3, r7, #20
 80070c6:	4619      	mov	r1, r3
 80070c8:	480b      	ldr	r0, [pc, #44]	; (80070f8 <MX_GPIO_Init+0xfc>)
 80070ca:	f7fa f8a7 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pins : nRF_CS_Pin nRF_CE_Pin */
  GPIO_InitStruct.Pin = nRF_CS_Pin|nRF_CE_Pin;
 80070ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80070d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070d4:	2301      	movs	r3, #1
 80070d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d8:	2300      	movs	r3, #0
 80070da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070dc:	2300      	movs	r3, #0
 80070de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070e0:	f107 0314 	add.w	r3, r7, #20
 80070e4:	4619      	mov	r1, r3
 80070e6:	4805      	ldr	r0, [pc, #20]	; (80070fc <MX_GPIO_Init+0x100>)
 80070e8:	f7fa f898 	bl	800121c <HAL_GPIO_Init>

}
 80070ec:	bf00      	nop
 80070ee:	3728      	adds	r7, #40	; 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40021000 	.word	0x40021000
 80070f8:	48000400 	.word	0x48000400
 80070fc:	48000800 	.word	0x48000800

08007100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007104:	bf00      	nop
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <HAL_MspInit+0x44>)
 8007118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711a:	4a0e      	ldr	r2, [pc, #56]	; (8007154 <HAL_MspInit+0x44>)
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	6613      	str	r3, [r2, #96]	; 0x60
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <HAL_MspInit+0x44>)
 8007124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <HAL_MspInit+0x44>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	4a08      	ldr	r2, [pc, #32]	; (8007154 <HAL_MspInit+0x44>)
 8007134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007138:	6593      	str	r3, [r2, #88]	; 0x58
 800713a:	4b06      	ldr	r3, [pc, #24]	; (8007154 <HAL_MspInit+0x44>)
 800713c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40021000 	.word	0x40021000

08007158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a17      	ldr	r2, [pc, #92]	; (80071d4 <HAL_I2C_MspInit+0x7c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d127      	bne.n	80071ca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800717a:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <HAL_I2C_MspInit+0x80>)
 800717c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <HAL_I2C_MspInit+0x80>)
 8007180:	f043 0302 	orr.w	r3, r3, #2
 8007184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <HAL_I2C_MspInit+0x80>)
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007192:	23c0      	movs	r3, #192	; 0xc0
 8007194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007196:	2312      	movs	r3, #18
 8007198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800719a:	2301      	movs	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800719e:	2303      	movs	r3, #3
 80071a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80071a2:	2304      	movs	r3, #4
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071a6:	f107 0314 	add.w	r3, r7, #20
 80071aa:	4619      	mov	r1, r3
 80071ac:	480b      	ldr	r0, [pc, #44]	; (80071dc <HAL_I2C_MspInit+0x84>)
 80071ae:	f7fa f835 	bl	800121c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <HAL_I2C_MspInit+0x80>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b6:	4a08      	ldr	r2, [pc, #32]	; (80071d8 <HAL_I2C_MspInit+0x80>)
 80071b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071bc:	6593      	str	r3, [r2, #88]	; 0x58
 80071be:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <HAL_I2C_MspInit+0x80>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80071ca:	bf00      	nop
 80071cc:	3728      	adds	r7, #40	; 0x28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	40005400 	.word	0x40005400
 80071d8:	40021000 	.word	0x40021000
 80071dc:	48000400 	.word	0x48000400

080071e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08c      	sub	sp, #48	; 0x30
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e8:	f107 031c 	add.w	r3, r7, #28
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	609a      	str	r2, [r3, #8]
 80071f4:	60da      	str	r2, [r3, #12]
 80071f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2f      	ldr	r2, [pc, #188]	; (80072bc <HAL_SPI_MspInit+0xdc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d129      	bne.n	8007256 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007202:	4b2f      	ldr	r3, [pc, #188]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007206:	4a2e      	ldr	r2, [pc, #184]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800720c:	6613      	str	r3, [r2, #96]	; 0x60
 800720e:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007212:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800721a:	4b29      	ldr	r3, [pc, #164]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	4a28      	ldr	r2, [pc, #160]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007226:	4b26      	ldr	r3, [pc, #152]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007232:	23e0      	movs	r3, #224	; 0xe0
 8007234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007236:	2302      	movs	r3, #2
 8007238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723a:	2300      	movs	r3, #0
 800723c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800723e:	2303      	movs	r3, #3
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007242:	2305      	movs	r3, #5
 8007244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007246:	f107 031c 	add.w	r3, r7, #28
 800724a:	4619      	mov	r1, r3
 800724c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007250:	f7f9 ffe4 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007254:	e02d      	b.n	80072b2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a1a      	ldr	r2, [pc, #104]	; (80072c4 <HAL_SPI_MspInit+0xe4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d128      	bne.n	80072b2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007260:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007264:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726a:	6593      	str	r3, [r2, #88]	; 0x58
 800726c:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 800726e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007278:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 800727a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727c:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 800727e:	f043 0304 	orr.w	r3, r3, #4
 8007282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <HAL_SPI_MspInit+0xe0>)
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007290:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007296:	2302      	movs	r3, #2
 8007298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729a:	2300      	movs	r3, #0
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800729e:	2303      	movs	r3, #3
 80072a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80072a2:	2306      	movs	r3, #6
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a6:	f107 031c 	add.w	r3, r7, #28
 80072aa:	4619      	mov	r1, r3
 80072ac:	4806      	ldr	r0, [pc, #24]	; (80072c8 <HAL_SPI_MspInit+0xe8>)
 80072ae:	f7f9 ffb5 	bl	800121c <HAL_GPIO_Init>
}
 80072b2:	bf00      	nop
 80072b4:	3730      	adds	r7, #48	; 0x30
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	40013000 	.word	0x40013000
 80072c0:	40021000 	.word	0x40021000
 80072c4:	40003c00 	.word	0x40003c00
 80072c8:	48000800 	.word	0x48000800

080072cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	; 0x28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d4:	f107 0314 	add.w	r3, r7, #20
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	605a      	str	r2, [r3, #4]
 80072de:	609a      	str	r2, [r3, #8]
 80072e0:	60da      	str	r2, [r3, #12]
 80072e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a18      	ldr	r2, [pc, #96]	; (800734c <HAL_UART_MspInit+0x80>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d129      	bne.n	8007342 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <HAL_UART_MspInit+0x84>)
 80072f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f2:	4a17      	ldr	r2, [pc, #92]	; (8007350 <HAL_UART_MspInit+0x84>)
 80072f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072f8:	6613      	str	r3, [r2, #96]	; 0x60
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <HAL_UART_MspInit+0x84>)
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007306:	4b12      	ldr	r3, [pc, #72]	; (8007350 <HAL_UART_MspInit+0x84>)
 8007308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730a:	4a11      	ldr	r2, [pc, #68]	; (8007350 <HAL_UART_MspInit+0x84>)
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007312:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <HAL_UART_MspInit+0x84>)
 8007314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800731e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007324:	2302      	movs	r3, #2
 8007326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007328:	2300      	movs	r3, #0
 800732a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800732c:	2303      	movs	r3, #3
 800732e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007330:	2307      	movs	r3, #7
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007334:	f107 0314 	add.w	r3, r7, #20
 8007338:	4619      	mov	r1, r3
 800733a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800733e:	f7f9 ff6d 	bl	800121c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007342:	bf00      	nop
 8007344:	3728      	adds	r7, #40	; 0x28
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40013800 	.word	0x40013800
 8007350:	40021000 	.word	0x40021000

08007354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007362:	b480      	push	{r7}
 8007364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007366:	e7fe      	b.n	8007366 <HardFault_Handler+0x4>

08007368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800736c:	e7fe      	b.n	800736c <MemManage_Handler+0x4>

0800736e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800736e:	b480      	push	{r7}
 8007370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007372:	e7fe      	b.n	8007372 <BusFault_Handler+0x4>

08007374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007378:	e7fe      	b.n	8007378 <UsageFault_Handler+0x4>

0800737a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800737a:	b480      	push	{r7}
 800737c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800737e:	bf00      	nop
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007396:	b480      	push	{r7}
 8007398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800739a:	bf00      	nop
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073a8:	f7f9 fd82 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073ac:	bf00      	nop
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80073b8:	4b11      	ldr	r3, [pc, #68]	; (8007400 <_sbrk+0x50>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <_sbrk+0x16>
		heap_end = &end;
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <_sbrk+0x50>)
 80073c2:	4a10      	ldr	r2, [pc, #64]	; (8007404 <_sbrk+0x54>)
 80073c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80073c6:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <_sbrk+0x50>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80073cc:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <_sbrk+0x50>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	466a      	mov	r2, sp
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d907      	bls.n	80073ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80073da:	f000 f875 	bl	80074c8 <__errno>
 80073de:	4602      	mov	r2, r0
 80073e0:	230c      	movs	r3, #12
 80073e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295
 80073e8:	e006      	b.n	80073f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <_sbrk+0x50>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4413      	add	r3, r2
 80073f2:	4a03      	ldr	r2, [pc, #12]	; (8007400 <_sbrk+0x50>)
 80073f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000198 	.word	0x20000198
 8007404:	20000508 	.word	0x20000508

08007408 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800740c:	4b17      	ldr	r3, [pc, #92]	; (800746c <SystemInit+0x64>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	4a16      	ldr	r2, [pc, #88]	; (800746c <SystemInit+0x64>)
 8007414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800741c:	4b14      	ldr	r3, [pc, #80]	; (8007470 <SystemInit+0x68>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a13      	ldr	r2, [pc, #76]	; (8007470 <SystemInit+0x68>)
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007428:	4b11      	ldr	r3, [pc, #68]	; (8007470 <SystemInit+0x68>)
 800742a:	2200      	movs	r2, #0
 800742c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <SystemInit+0x68>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <SystemInit+0x68>)
 8007434:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007438:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800743c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800743e:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <SystemInit+0x68>)
 8007440:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007444:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007446:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <SystemInit+0x68>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a09      	ldr	r2, [pc, #36]	; (8007470 <SystemInit+0x68>)
 800744c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007450:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <SystemInit+0x68>)
 8007454:	2200      	movs	r2, #0
 8007456:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <SystemInit+0x64>)
 800745a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800745e:	609a      	str	r2, [r3, #8]
#endif
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	e000ed00 	.word	0xe000ed00
 8007470:	40021000 	.word	0x40021000

08007474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007478:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800747a:	e003      	b.n	8007484 <LoopCopyDataInit>

0800747c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800747e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007480:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007482:	3104      	adds	r1, #4

08007484 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007484:	480b      	ldr	r0, [pc, #44]	; (80074b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007488:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800748a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800748c:	d3f6      	bcc.n	800747c <CopyDataInit>
	ldr	r2, =_sbss
 800748e:	4a0b      	ldr	r2, [pc, #44]	; (80074bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8007490:	e002      	b.n	8007498 <LoopFillZerobss>

08007492 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007492:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007494:	f842 3b04 	str.w	r3, [r2], #4

08007498 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <LoopForever+0x16>)
	cmp	r2, r3
 800749a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800749c:	d3f9      	bcc.n	8007492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800749e:	f7ff ffb3 	bl	8007408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074a2:	f000 f817 	bl	80074d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80074a6:	f7ff f927 	bl	80066f8 <main>

080074aa <LoopForever>:

LoopForever:
    b LoopForever
 80074aa:	e7fe      	b.n	80074aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80074ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80074b0:	080083f8 	.word	0x080083f8
	ldr	r0, =_sdata
 80074b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80074b8:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80074bc:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80074c0:	20000508 	.word	0x20000508

080074c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80074c4:	e7fe      	b.n	80074c4 <ADC1_2_IRQHandler>
	...

080074c8 <__errno>:
 80074c8:	4b01      	ldr	r3, [pc, #4]	; (80074d0 <__errno+0x8>)
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000020 	.word	0x20000020

080074d4 <__libc_init_array>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4e0d      	ldr	r6, [pc, #52]	; (800750c <__libc_init_array+0x38>)
 80074d8:	4c0d      	ldr	r4, [pc, #52]	; (8007510 <__libc_init_array+0x3c>)
 80074da:	1ba4      	subs	r4, r4, r6
 80074dc:	10a4      	asrs	r4, r4, #2
 80074de:	2500      	movs	r5, #0
 80074e0:	42a5      	cmp	r5, r4
 80074e2:	d109      	bne.n	80074f8 <__libc_init_array+0x24>
 80074e4:	4e0b      	ldr	r6, [pc, #44]	; (8007514 <__libc_init_array+0x40>)
 80074e6:	4c0c      	ldr	r4, [pc, #48]	; (8007518 <__libc_init_array+0x44>)
 80074e8:	f000 fc28 	bl	8007d3c <_init>
 80074ec:	1ba4      	subs	r4, r4, r6
 80074ee:	10a4      	asrs	r4, r4, #2
 80074f0:	2500      	movs	r5, #0
 80074f2:	42a5      	cmp	r5, r4
 80074f4:	d105      	bne.n	8007502 <__libc_init_array+0x2e>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074fc:	4798      	blx	r3
 80074fe:	3501      	adds	r5, #1
 8007500:	e7ee      	b.n	80074e0 <__libc_init_array+0xc>
 8007502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007506:	4798      	blx	r3
 8007508:	3501      	adds	r5, #1
 800750a:	e7f2      	b.n	80074f2 <__libc_init_array+0x1e>
 800750c:	080083f0 	.word	0x080083f0
 8007510:	080083f0 	.word	0x080083f0
 8007514:	080083f0 	.word	0x080083f0
 8007518:	080083f4 	.word	0x080083f4

0800751c <memcpy>:
 800751c:	b510      	push	{r4, lr}
 800751e:	1e43      	subs	r3, r0, #1
 8007520:	440a      	add	r2, r1
 8007522:	4291      	cmp	r1, r2
 8007524:	d100      	bne.n	8007528 <memcpy+0xc>
 8007526:	bd10      	pop	{r4, pc}
 8007528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007530:	e7f7      	b.n	8007522 <memcpy+0x6>

08007532 <memset>:
 8007532:	4402      	add	r2, r0
 8007534:	4603      	mov	r3, r0
 8007536:	4293      	cmp	r3, r2
 8007538:	d100      	bne.n	800753c <memset+0xa>
 800753a:	4770      	bx	lr
 800753c:	f803 1b01 	strb.w	r1, [r3], #1
 8007540:	e7f9      	b.n	8007536 <memset+0x4>
	...

08007544 <siprintf>:
 8007544:	b40e      	push	{r1, r2, r3}
 8007546:	b500      	push	{lr}
 8007548:	b09c      	sub	sp, #112	; 0x70
 800754a:	ab1d      	add	r3, sp, #116	; 0x74
 800754c:	9002      	str	r0, [sp, #8]
 800754e:	9006      	str	r0, [sp, #24]
 8007550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007554:	4809      	ldr	r0, [pc, #36]	; (800757c <siprintf+0x38>)
 8007556:	9107      	str	r1, [sp, #28]
 8007558:	9104      	str	r1, [sp, #16]
 800755a:	4909      	ldr	r1, [pc, #36]	; (8007580 <siprintf+0x3c>)
 800755c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007560:	9105      	str	r1, [sp, #20]
 8007562:	6800      	ldr	r0, [r0, #0]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	a902      	add	r1, sp, #8
 8007568:	f000 f866 	bl	8007638 <_svfiprintf_r>
 800756c:	9b02      	ldr	r3, [sp, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	b01c      	add	sp, #112	; 0x70
 8007574:	f85d eb04 	ldr.w	lr, [sp], #4
 8007578:	b003      	add	sp, #12
 800757a:	4770      	bx	lr
 800757c:	20000020 	.word	0x20000020
 8007580:	ffff0208 	.word	0xffff0208

08007584 <__ssputs_r>:
 8007584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	688e      	ldr	r6, [r1, #8]
 800758a:	429e      	cmp	r6, r3
 800758c:	4682      	mov	sl, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4690      	mov	r8, r2
 8007592:	4699      	mov	r9, r3
 8007594:	d837      	bhi.n	8007606 <__ssputs_r+0x82>
 8007596:	898a      	ldrh	r2, [r1, #12]
 8007598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800759c:	d031      	beq.n	8007602 <__ssputs_r+0x7e>
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	6909      	ldr	r1, [r1, #16]
 80075a2:	1a6f      	subs	r7, r5, r1
 80075a4:	6965      	ldr	r5, [r4, #20]
 80075a6:	2302      	movs	r3, #2
 80075a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80075b0:	f109 0301 	add.w	r3, r9, #1
 80075b4:	443b      	add	r3, r7
 80075b6:	429d      	cmp	r5, r3
 80075b8:	bf38      	it	cc
 80075ba:	461d      	movcc	r5, r3
 80075bc:	0553      	lsls	r3, r2, #21
 80075be:	d530      	bpl.n	8007622 <__ssputs_r+0x9e>
 80075c0:	4629      	mov	r1, r5
 80075c2:	f000 fb21 	bl	8007c08 <_malloc_r>
 80075c6:	4606      	mov	r6, r0
 80075c8:	b950      	cbnz	r0, 80075e0 <__ssputs_r+0x5c>
 80075ca:	230c      	movs	r3, #12
 80075cc:	f8ca 3000 	str.w	r3, [sl]
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d6:	81a3      	strh	r3, [r4, #12]
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	463a      	mov	r2, r7
 80075e2:	6921      	ldr	r1, [r4, #16]
 80075e4:	f7ff ff9a 	bl	800751c <memcpy>
 80075e8:	89a3      	ldrh	r3, [r4, #12]
 80075ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	6126      	str	r6, [r4, #16]
 80075f6:	6165      	str	r5, [r4, #20]
 80075f8:	443e      	add	r6, r7
 80075fa:	1bed      	subs	r5, r5, r7
 80075fc:	6026      	str	r6, [r4, #0]
 80075fe:	60a5      	str	r5, [r4, #8]
 8007600:	464e      	mov	r6, r9
 8007602:	454e      	cmp	r6, r9
 8007604:	d900      	bls.n	8007608 <__ssputs_r+0x84>
 8007606:	464e      	mov	r6, r9
 8007608:	4632      	mov	r2, r6
 800760a:	4641      	mov	r1, r8
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	f000 fa93 	bl	8007b38 <memmove>
 8007612:	68a3      	ldr	r3, [r4, #8]
 8007614:	1b9b      	subs	r3, r3, r6
 8007616:	60a3      	str	r3, [r4, #8]
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	441e      	add	r6, r3
 800761c:	6026      	str	r6, [r4, #0]
 800761e:	2000      	movs	r0, #0
 8007620:	e7dc      	b.n	80075dc <__ssputs_r+0x58>
 8007622:	462a      	mov	r2, r5
 8007624:	f000 fb4a 	bl	8007cbc <_realloc_r>
 8007628:	4606      	mov	r6, r0
 800762a:	2800      	cmp	r0, #0
 800762c:	d1e2      	bne.n	80075f4 <__ssputs_r+0x70>
 800762e:	6921      	ldr	r1, [r4, #16]
 8007630:	4650      	mov	r0, sl
 8007632:	f000 fa9b 	bl	8007b6c <_free_r>
 8007636:	e7c8      	b.n	80075ca <__ssputs_r+0x46>

08007638 <_svfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	461d      	mov	r5, r3
 800763e:	898b      	ldrh	r3, [r1, #12]
 8007640:	061f      	lsls	r7, r3, #24
 8007642:	b09d      	sub	sp, #116	; 0x74
 8007644:	4680      	mov	r8, r0
 8007646:	460c      	mov	r4, r1
 8007648:	4616      	mov	r6, r2
 800764a:	d50f      	bpl.n	800766c <_svfiprintf_r+0x34>
 800764c:	690b      	ldr	r3, [r1, #16]
 800764e:	b96b      	cbnz	r3, 800766c <_svfiprintf_r+0x34>
 8007650:	2140      	movs	r1, #64	; 0x40
 8007652:	f000 fad9 	bl	8007c08 <_malloc_r>
 8007656:	6020      	str	r0, [r4, #0]
 8007658:	6120      	str	r0, [r4, #16]
 800765a:	b928      	cbnz	r0, 8007668 <_svfiprintf_r+0x30>
 800765c:	230c      	movs	r3, #12
 800765e:	f8c8 3000 	str.w	r3, [r8]
 8007662:	f04f 30ff 	mov.w	r0, #4294967295
 8007666:	e0c8      	b.n	80077fa <_svfiprintf_r+0x1c2>
 8007668:	2340      	movs	r3, #64	; 0x40
 800766a:	6163      	str	r3, [r4, #20]
 800766c:	2300      	movs	r3, #0
 800766e:	9309      	str	r3, [sp, #36]	; 0x24
 8007670:	2320      	movs	r3, #32
 8007672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007676:	2330      	movs	r3, #48	; 0x30
 8007678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800767c:	9503      	str	r5, [sp, #12]
 800767e:	f04f 0b01 	mov.w	fp, #1
 8007682:	4637      	mov	r7, r6
 8007684:	463d      	mov	r5, r7
 8007686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800768a:	b10b      	cbz	r3, 8007690 <_svfiprintf_r+0x58>
 800768c:	2b25      	cmp	r3, #37	; 0x25
 800768e:	d13e      	bne.n	800770e <_svfiprintf_r+0xd6>
 8007690:	ebb7 0a06 	subs.w	sl, r7, r6
 8007694:	d00b      	beq.n	80076ae <_svfiprintf_r+0x76>
 8007696:	4653      	mov	r3, sl
 8007698:	4632      	mov	r2, r6
 800769a:	4621      	mov	r1, r4
 800769c:	4640      	mov	r0, r8
 800769e:	f7ff ff71 	bl	8007584 <__ssputs_r>
 80076a2:	3001      	adds	r0, #1
 80076a4:	f000 80a4 	beq.w	80077f0 <_svfiprintf_r+0x1b8>
 80076a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076aa:	4453      	add	r3, sl
 80076ac:	9309      	str	r3, [sp, #36]	; 0x24
 80076ae:	783b      	ldrb	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 809d 	beq.w	80077f0 <_svfiprintf_r+0x1b8>
 80076b6:	2300      	movs	r3, #0
 80076b8:	f04f 32ff 	mov.w	r2, #4294967295
 80076bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076c8:	931a      	str	r3, [sp, #104]	; 0x68
 80076ca:	462f      	mov	r7, r5
 80076cc:	2205      	movs	r2, #5
 80076ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076d2:	4850      	ldr	r0, [pc, #320]	; (8007814 <_svfiprintf_r+0x1dc>)
 80076d4:	f7f8 fd84 	bl	80001e0 <memchr>
 80076d8:	9b04      	ldr	r3, [sp, #16]
 80076da:	b9d0      	cbnz	r0, 8007712 <_svfiprintf_r+0xda>
 80076dc:	06d9      	lsls	r1, r3, #27
 80076de:	bf44      	itt	mi
 80076e0:	2220      	movmi	r2, #32
 80076e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076e6:	071a      	lsls	r2, r3, #28
 80076e8:	bf44      	itt	mi
 80076ea:	222b      	movmi	r2, #43	; 0x2b
 80076ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076f0:	782a      	ldrb	r2, [r5, #0]
 80076f2:	2a2a      	cmp	r2, #42	; 0x2a
 80076f4:	d015      	beq.n	8007722 <_svfiprintf_r+0xea>
 80076f6:	9a07      	ldr	r2, [sp, #28]
 80076f8:	462f      	mov	r7, r5
 80076fa:	2000      	movs	r0, #0
 80076fc:	250a      	movs	r5, #10
 80076fe:	4639      	mov	r1, r7
 8007700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007704:	3b30      	subs	r3, #48	; 0x30
 8007706:	2b09      	cmp	r3, #9
 8007708:	d94d      	bls.n	80077a6 <_svfiprintf_r+0x16e>
 800770a:	b1b8      	cbz	r0, 800773c <_svfiprintf_r+0x104>
 800770c:	e00f      	b.n	800772e <_svfiprintf_r+0xf6>
 800770e:	462f      	mov	r7, r5
 8007710:	e7b8      	b.n	8007684 <_svfiprintf_r+0x4c>
 8007712:	4a40      	ldr	r2, [pc, #256]	; (8007814 <_svfiprintf_r+0x1dc>)
 8007714:	1a80      	subs	r0, r0, r2
 8007716:	fa0b f000 	lsl.w	r0, fp, r0
 800771a:	4318      	orrs	r0, r3
 800771c:	9004      	str	r0, [sp, #16]
 800771e:	463d      	mov	r5, r7
 8007720:	e7d3      	b.n	80076ca <_svfiprintf_r+0x92>
 8007722:	9a03      	ldr	r2, [sp, #12]
 8007724:	1d11      	adds	r1, r2, #4
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	9103      	str	r1, [sp, #12]
 800772a:	2a00      	cmp	r2, #0
 800772c:	db01      	blt.n	8007732 <_svfiprintf_r+0xfa>
 800772e:	9207      	str	r2, [sp, #28]
 8007730:	e004      	b.n	800773c <_svfiprintf_r+0x104>
 8007732:	4252      	negs	r2, r2
 8007734:	f043 0302 	orr.w	r3, r3, #2
 8007738:	9207      	str	r2, [sp, #28]
 800773a:	9304      	str	r3, [sp, #16]
 800773c:	783b      	ldrb	r3, [r7, #0]
 800773e:	2b2e      	cmp	r3, #46	; 0x2e
 8007740:	d10c      	bne.n	800775c <_svfiprintf_r+0x124>
 8007742:	787b      	ldrb	r3, [r7, #1]
 8007744:	2b2a      	cmp	r3, #42	; 0x2a
 8007746:	d133      	bne.n	80077b0 <_svfiprintf_r+0x178>
 8007748:	9b03      	ldr	r3, [sp, #12]
 800774a:	1d1a      	adds	r2, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	9203      	str	r2, [sp, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	bfb8      	it	lt
 8007754:	f04f 33ff 	movlt.w	r3, #4294967295
 8007758:	3702      	adds	r7, #2
 800775a:	9305      	str	r3, [sp, #20]
 800775c:	4d2e      	ldr	r5, [pc, #184]	; (8007818 <_svfiprintf_r+0x1e0>)
 800775e:	7839      	ldrb	r1, [r7, #0]
 8007760:	2203      	movs	r2, #3
 8007762:	4628      	mov	r0, r5
 8007764:	f7f8 fd3c 	bl	80001e0 <memchr>
 8007768:	b138      	cbz	r0, 800777a <_svfiprintf_r+0x142>
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	1b40      	subs	r0, r0, r5
 800776e:	fa03 f000 	lsl.w	r0, r3, r0
 8007772:	9b04      	ldr	r3, [sp, #16]
 8007774:	4303      	orrs	r3, r0
 8007776:	3701      	adds	r7, #1
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	7839      	ldrb	r1, [r7, #0]
 800777c:	4827      	ldr	r0, [pc, #156]	; (800781c <_svfiprintf_r+0x1e4>)
 800777e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007782:	2206      	movs	r2, #6
 8007784:	1c7e      	adds	r6, r7, #1
 8007786:	f7f8 fd2b 	bl	80001e0 <memchr>
 800778a:	2800      	cmp	r0, #0
 800778c:	d038      	beq.n	8007800 <_svfiprintf_r+0x1c8>
 800778e:	4b24      	ldr	r3, [pc, #144]	; (8007820 <_svfiprintf_r+0x1e8>)
 8007790:	bb13      	cbnz	r3, 80077d8 <_svfiprintf_r+0x1a0>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	3307      	adds	r3, #7
 8007796:	f023 0307 	bic.w	r3, r3, #7
 800779a:	3308      	adds	r3, #8
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a0:	444b      	add	r3, r9
 80077a2:	9309      	str	r3, [sp, #36]	; 0x24
 80077a4:	e76d      	b.n	8007682 <_svfiprintf_r+0x4a>
 80077a6:	fb05 3202 	mla	r2, r5, r2, r3
 80077aa:	2001      	movs	r0, #1
 80077ac:	460f      	mov	r7, r1
 80077ae:	e7a6      	b.n	80076fe <_svfiprintf_r+0xc6>
 80077b0:	2300      	movs	r3, #0
 80077b2:	3701      	adds	r7, #1
 80077b4:	9305      	str	r3, [sp, #20]
 80077b6:	4619      	mov	r1, r3
 80077b8:	250a      	movs	r5, #10
 80077ba:	4638      	mov	r0, r7
 80077bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c0:	3a30      	subs	r2, #48	; 0x30
 80077c2:	2a09      	cmp	r2, #9
 80077c4:	d903      	bls.n	80077ce <_svfiprintf_r+0x196>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0c8      	beq.n	800775c <_svfiprintf_r+0x124>
 80077ca:	9105      	str	r1, [sp, #20]
 80077cc:	e7c6      	b.n	800775c <_svfiprintf_r+0x124>
 80077ce:	fb05 2101 	mla	r1, r5, r1, r2
 80077d2:	2301      	movs	r3, #1
 80077d4:	4607      	mov	r7, r0
 80077d6:	e7f0      	b.n	80077ba <_svfiprintf_r+0x182>
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4622      	mov	r2, r4
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <_svfiprintf_r+0x1ec>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4640      	mov	r0, r8
 80077e4:	f3af 8000 	nop.w
 80077e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077ec:	4681      	mov	r9, r0
 80077ee:	d1d6      	bne.n	800779e <_svfiprintf_r+0x166>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	065b      	lsls	r3, r3, #25
 80077f4:	f53f af35 	bmi.w	8007662 <_svfiprintf_r+0x2a>
 80077f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fa:	b01d      	add	sp, #116	; 0x74
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	4622      	mov	r2, r4
 8007806:	4b07      	ldr	r3, [pc, #28]	; (8007824 <_svfiprintf_r+0x1ec>)
 8007808:	a904      	add	r1, sp, #16
 800780a:	4640      	mov	r0, r8
 800780c:	f000 f882 	bl	8007914 <_printf_i>
 8007810:	e7ea      	b.n	80077e8 <_svfiprintf_r+0x1b0>
 8007812:	bf00      	nop
 8007814:	080083b4 	.word	0x080083b4
 8007818:	080083ba 	.word	0x080083ba
 800781c:	080083be 	.word	0x080083be
 8007820:	00000000 	.word	0x00000000
 8007824:	08007585 	.word	0x08007585

08007828 <_printf_common>:
 8007828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	4691      	mov	r9, r2
 800782e:	461f      	mov	r7, r3
 8007830:	688a      	ldr	r2, [r1, #8]
 8007832:	690b      	ldr	r3, [r1, #16]
 8007834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007838:	4293      	cmp	r3, r2
 800783a:	bfb8      	it	lt
 800783c:	4613      	movlt	r3, r2
 800783e:	f8c9 3000 	str.w	r3, [r9]
 8007842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	b112      	cbz	r2, 8007852 <_printf_common+0x2a>
 800784c:	3301      	adds	r3, #1
 800784e:	f8c9 3000 	str.w	r3, [r9]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	0699      	lsls	r1, r3, #26
 8007856:	bf42      	ittt	mi
 8007858:	f8d9 3000 	ldrmi.w	r3, [r9]
 800785c:	3302      	addmi	r3, #2
 800785e:	f8c9 3000 	strmi.w	r3, [r9]
 8007862:	6825      	ldr	r5, [r4, #0]
 8007864:	f015 0506 	ands.w	r5, r5, #6
 8007868:	d107      	bne.n	800787a <_printf_common+0x52>
 800786a:	f104 0a19 	add.w	sl, r4, #25
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	f8d9 2000 	ldr.w	r2, [r9]
 8007874:	1a9b      	subs	r3, r3, r2
 8007876:	42ab      	cmp	r3, r5
 8007878:	dc28      	bgt.n	80078cc <_printf_common+0xa4>
 800787a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800787e:	6822      	ldr	r2, [r4, #0]
 8007880:	3300      	adds	r3, #0
 8007882:	bf18      	it	ne
 8007884:	2301      	movne	r3, #1
 8007886:	0692      	lsls	r2, r2, #26
 8007888:	d42d      	bmi.n	80078e6 <_printf_common+0xbe>
 800788a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800788e:	4639      	mov	r1, r7
 8007890:	4630      	mov	r0, r6
 8007892:	47c0      	blx	r8
 8007894:	3001      	adds	r0, #1
 8007896:	d020      	beq.n	80078da <_printf_common+0xb2>
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	68e5      	ldr	r5, [r4, #12]
 800789c:	f8d9 2000 	ldr.w	r2, [r9]
 80078a0:	f003 0306 	and.w	r3, r3, #6
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	bf08      	it	eq
 80078a8:	1aad      	subeq	r5, r5, r2
 80078aa:	68a3      	ldr	r3, [r4, #8]
 80078ac:	6922      	ldr	r2, [r4, #16]
 80078ae:	bf0c      	ite	eq
 80078b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078b4:	2500      	movne	r5, #0
 80078b6:	4293      	cmp	r3, r2
 80078b8:	bfc4      	itt	gt
 80078ba:	1a9b      	subgt	r3, r3, r2
 80078bc:	18ed      	addgt	r5, r5, r3
 80078be:	f04f 0900 	mov.w	r9, #0
 80078c2:	341a      	adds	r4, #26
 80078c4:	454d      	cmp	r5, r9
 80078c6:	d11a      	bne.n	80078fe <_printf_common+0xd6>
 80078c8:	2000      	movs	r0, #0
 80078ca:	e008      	b.n	80078de <_printf_common+0xb6>
 80078cc:	2301      	movs	r3, #1
 80078ce:	4652      	mov	r2, sl
 80078d0:	4639      	mov	r1, r7
 80078d2:	4630      	mov	r0, r6
 80078d4:	47c0      	blx	r8
 80078d6:	3001      	adds	r0, #1
 80078d8:	d103      	bne.n	80078e2 <_printf_common+0xba>
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e2:	3501      	adds	r5, #1
 80078e4:	e7c3      	b.n	800786e <_printf_common+0x46>
 80078e6:	18e1      	adds	r1, r4, r3
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	2030      	movs	r0, #48	; 0x30
 80078ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078f0:	4422      	add	r2, r4
 80078f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078fa:	3302      	adds	r3, #2
 80078fc:	e7c5      	b.n	800788a <_printf_common+0x62>
 80078fe:	2301      	movs	r3, #1
 8007900:	4622      	mov	r2, r4
 8007902:	4639      	mov	r1, r7
 8007904:	4630      	mov	r0, r6
 8007906:	47c0      	blx	r8
 8007908:	3001      	adds	r0, #1
 800790a:	d0e6      	beq.n	80078da <_printf_common+0xb2>
 800790c:	f109 0901 	add.w	r9, r9, #1
 8007910:	e7d8      	b.n	80078c4 <_printf_common+0x9c>
	...

08007914 <_printf_i>:
 8007914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007918:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800791c:	460c      	mov	r4, r1
 800791e:	7e09      	ldrb	r1, [r1, #24]
 8007920:	b085      	sub	sp, #20
 8007922:	296e      	cmp	r1, #110	; 0x6e
 8007924:	4617      	mov	r7, r2
 8007926:	4606      	mov	r6, r0
 8007928:	4698      	mov	r8, r3
 800792a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800792c:	f000 80b3 	beq.w	8007a96 <_printf_i+0x182>
 8007930:	d822      	bhi.n	8007978 <_printf_i+0x64>
 8007932:	2963      	cmp	r1, #99	; 0x63
 8007934:	d036      	beq.n	80079a4 <_printf_i+0x90>
 8007936:	d80a      	bhi.n	800794e <_printf_i+0x3a>
 8007938:	2900      	cmp	r1, #0
 800793a:	f000 80b9 	beq.w	8007ab0 <_printf_i+0x19c>
 800793e:	2958      	cmp	r1, #88	; 0x58
 8007940:	f000 8083 	beq.w	8007a4a <_printf_i+0x136>
 8007944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007948:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800794c:	e032      	b.n	80079b4 <_printf_i+0xa0>
 800794e:	2964      	cmp	r1, #100	; 0x64
 8007950:	d001      	beq.n	8007956 <_printf_i+0x42>
 8007952:	2969      	cmp	r1, #105	; 0x69
 8007954:	d1f6      	bne.n	8007944 <_printf_i+0x30>
 8007956:	6820      	ldr	r0, [r4, #0]
 8007958:	6813      	ldr	r3, [r2, #0]
 800795a:	0605      	lsls	r5, r0, #24
 800795c:	f103 0104 	add.w	r1, r3, #4
 8007960:	d52a      	bpl.n	80079b8 <_printf_i+0xa4>
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6011      	str	r1, [r2, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	da03      	bge.n	8007972 <_printf_i+0x5e>
 800796a:	222d      	movs	r2, #45	; 0x2d
 800796c:	425b      	negs	r3, r3
 800796e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007972:	486f      	ldr	r0, [pc, #444]	; (8007b30 <_printf_i+0x21c>)
 8007974:	220a      	movs	r2, #10
 8007976:	e039      	b.n	80079ec <_printf_i+0xd8>
 8007978:	2973      	cmp	r1, #115	; 0x73
 800797a:	f000 809d 	beq.w	8007ab8 <_printf_i+0x1a4>
 800797e:	d808      	bhi.n	8007992 <_printf_i+0x7e>
 8007980:	296f      	cmp	r1, #111	; 0x6f
 8007982:	d020      	beq.n	80079c6 <_printf_i+0xb2>
 8007984:	2970      	cmp	r1, #112	; 0x70
 8007986:	d1dd      	bne.n	8007944 <_printf_i+0x30>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	f043 0320 	orr.w	r3, r3, #32
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	e003      	b.n	800799a <_printf_i+0x86>
 8007992:	2975      	cmp	r1, #117	; 0x75
 8007994:	d017      	beq.n	80079c6 <_printf_i+0xb2>
 8007996:	2978      	cmp	r1, #120	; 0x78
 8007998:	d1d4      	bne.n	8007944 <_printf_i+0x30>
 800799a:	2378      	movs	r3, #120	; 0x78
 800799c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079a0:	4864      	ldr	r0, [pc, #400]	; (8007b34 <_printf_i+0x220>)
 80079a2:	e055      	b.n	8007a50 <_printf_i+0x13c>
 80079a4:	6813      	ldr	r3, [r2, #0]
 80079a6:	1d19      	adds	r1, r3, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6011      	str	r1, [r2, #0]
 80079ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079b4:	2301      	movs	r3, #1
 80079b6:	e08c      	b.n	8007ad2 <_printf_i+0x1be>
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6011      	str	r1, [r2, #0]
 80079bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079c0:	bf18      	it	ne
 80079c2:	b21b      	sxthne	r3, r3
 80079c4:	e7cf      	b.n	8007966 <_printf_i+0x52>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	6825      	ldr	r5, [r4, #0]
 80079ca:	1d18      	adds	r0, r3, #4
 80079cc:	6010      	str	r0, [r2, #0]
 80079ce:	0628      	lsls	r0, r5, #24
 80079d0:	d501      	bpl.n	80079d6 <_printf_i+0xc2>
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	e002      	b.n	80079dc <_printf_i+0xc8>
 80079d6:	0668      	lsls	r0, r5, #25
 80079d8:	d5fb      	bpl.n	80079d2 <_printf_i+0xbe>
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	4854      	ldr	r0, [pc, #336]	; (8007b30 <_printf_i+0x21c>)
 80079de:	296f      	cmp	r1, #111	; 0x6f
 80079e0:	bf14      	ite	ne
 80079e2:	220a      	movne	r2, #10
 80079e4:	2208      	moveq	r2, #8
 80079e6:	2100      	movs	r1, #0
 80079e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079ec:	6865      	ldr	r5, [r4, #4]
 80079ee:	60a5      	str	r5, [r4, #8]
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	f2c0 8095 	blt.w	8007b20 <_printf_i+0x20c>
 80079f6:	6821      	ldr	r1, [r4, #0]
 80079f8:	f021 0104 	bic.w	r1, r1, #4
 80079fc:	6021      	str	r1, [r4, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d13d      	bne.n	8007a7e <_printf_i+0x16a>
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	f040 808e 	bne.w	8007b24 <_printf_i+0x210>
 8007a08:	4665      	mov	r5, ip
 8007a0a:	2a08      	cmp	r2, #8
 8007a0c:	d10b      	bne.n	8007a26 <_printf_i+0x112>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	07db      	lsls	r3, r3, #31
 8007a12:	d508      	bpl.n	8007a26 <_printf_i+0x112>
 8007a14:	6923      	ldr	r3, [r4, #16]
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	bfde      	ittt	le
 8007a1c:	2330      	movle	r3, #48	; 0x30
 8007a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a26:	ebac 0305 	sub.w	r3, ip, r5
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	f8cd 8000 	str.w	r8, [sp]
 8007a30:	463b      	mov	r3, r7
 8007a32:	aa03      	add	r2, sp, #12
 8007a34:	4621      	mov	r1, r4
 8007a36:	4630      	mov	r0, r6
 8007a38:	f7ff fef6 	bl	8007828 <_printf_common>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d14d      	bne.n	8007adc <_printf_i+0x1c8>
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	b005      	add	sp, #20
 8007a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a4a:	4839      	ldr	r0, [pc, #228]	; (8007b30 <_printf_i+0x21c>)
 8007a4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	6821      	ldr	r1, [r4, #0]
 8007a54:	1d1d      	adds	r5, r3, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6015      	str	r5, [r2, #0]
 8007a5a:	060a      	lsls	r2, r1, #24
 8007a5c:	d50b      	bpl.n	8007a76 <_printf_i+0x162>
 8007a5e:	07ca      	lsls	r2, r1, #31
 8007a60:	bf44      	itt	mi
 8007a62:	f041 0120 	orrmi.w	r1, r1, #32
 8007a66:	6021      	strmi	r1, [r4, #0]
 8007a68:	b91b      	cbnz	r3, 8007a72 <_printf_i+0x15e>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	f022 0220 	bic.w	r2, r2, #32
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	2210      	movs	r2, #16
 8007a74:	e7b7      	b.n	80079e6 <_printf_i+0xd2>
 8007a76:	064d      	lsls	r5, r1, #25
 8007a78:	bf48      	it	mi
 8007a7a:	b29b      	uxthmi	r3, r3
 8007a7c:	e7ef      	b.n	8007a5e <_printf_i+0x14a>
 8007a7e:	4665      	mov	r5, ip
 8007a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a84:	fb02 3311 	mls	r3, r2, r1, r3
 8007a88:	5cc3      	ldrb	r3, [r0, r3]
 8007a8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a8e:	460b      	mov	r3, r1
 8007a90:	2900      	cmp	r1, #0
 8007a92:	d1f5      	bne.n	8007a80 <_printf_i+0x16c>
 8007a94:	e7b9      	b.n	8007a0a <_printf_i+0xf6>
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	6825      	ldr	r5, [r4, #0]
 8007a9a:	6961      	ldr	r1, [r4, #20]
 8007a9c:	1d18      	adds	r0, r3, #4
 8007a9e:	6010      	str	r0, [r2, #0]
 8007aa0:	0628      	lsls	r0, r5, #24
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	d501      	bpl.n	8007aaa <_printf_i+0x196>
 8007aa6:	6019      	str	r1, [r3, #0]
 8007aa8:	e002      	b.n	8007ab0 <_printf_i+0x19c>
 8007aaa:	066a      	lsls	r2, r5, #25
 8007aac:	d5fb      	bpl.n	8007aa6 <_printf_i+0x192>
 8007aae:	8019      	strh	r1, [r3, #0]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6123      	str	r3, [r4, #16]
 8007ab4:	4665      	mov	r5, ip
 8007ab6:	e7b9      	b.n	8007a2c <_printf_i+0x118>
 8007ab8:	6813      	ldr	r3, [r2, #0]
 8007aba:	1d19      	adds	r1, r3, #4
 8007abc:	6011      	str	r1, [r2, #0]
 8007abe:	681d      	ldr	r5, [r3, #0]
 8007ac0:	6862      	ldr	r2, [r4, #4]
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f7f8 fb8b 	bl	80001e0 <memchr>
 8007aca:	b108      	cbz	r0, 8007ad0 <_printf_i+0x1bc>
 8007acc:	1b40      	subs	r0, r0, r5
 8007ace:	6060      	str	r0, [r4, #4]
 8007ad0:	6863      	ldr	r3, [r4, #4]
 8007ad2:	6123      	str	r3, [r4, #16]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ada:	e7a7      	b.n	8007a2c <_printf_i+0x118>
 8007adc:	6923      	ldr	r3, [r4, #16]
 8007ade:	462a      	mov	r2, r5
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	47c0      	blx	r8
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d0aa      	beq.n	8007a40 <_printf_i+0x12c>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	079b      	lsls	r3, r3, #30
 8007aee:	d413      	bmi.n	8007b18 <_printf_i+0x204>
 8007af0:	68e0      	ldr	r0, [r4, #12]
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	4298      	cmp	r0, r3
 8007af6:	bfb8      	it	lt
 8007af8:	4618      	movlt	r0, r3
 8007afa:	e7a3      	b.n	8007a44 <_printf_i+0x130>
 8007afc:	2301      	movs	r3, #1
 8007afe:	464a      	mov	r2, r9
 8007b00:	4639      	mov	r1, r7
 8007b02:	4630      	mov	r0, r6
 8007b04:	47c0      	blx	r8
 8007b06:	3001      	adds	r0, #1
 8007b08:	d09a      	beq.n	8007a40 <_printf_i+0x12c>
 8007b0a:	3501      	adds	r5, #1
 8007b0c:	68e3      	ldr	r3, [r4, #12]
 8007b0e:	9a03      	ldr	r2, [sp, #12]
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	42ab      	cmp	r3, r5
 8007b14:	dcf2      	bgt.n	8007afc <_printf_i+0x1e8>
 8007b16:	e7eb      	b.n	8007af0 <_printf_i+0x1dc>
 8007b18:	2500      	movs	r5, #0
 8007b1a:	f104 0919 	add.w	r9, r4, #25
 8007b1e:	e7f5      	b.n	8007b0c <_printf_i+0x1f8>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1ac      	bne.n	8007a7e <_printf_i+0x16a>
 8007b24:	7803      	ldrb	r3, [r0, #0]
 8007b26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b2e:	e76c      	b.n	8007a0a <_printf_i+0xf6>
 8007b30:	080083c5 	.word	0x080083c5
 8007b34:	080083d6 	.word	0x080083d6

08007b38 <memmove>:
 8007b38:	4288      	cmp	r0, r1
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	eb01 0302 	add.w	r3, r1, r2
 8007b40:	d807      	bhi.n	8007b52 <memmove+0x1a>
 8007b42:	1e42      	subs	r2, r0, #1
 8007b44:	4299      	cmp	r1, r3
 8007b46:	d00a      	beq.n	8007b5e <memmove+0x26>
 8007b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b4c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b50:	e7f8      	b.n	8007b44 <memmove+0xc>
 8007b52:	4283      	cmp	r3, r0
 8007b54:	d9f5      	bls.n	8007b42 <memmove+0xa>
 8007b56:	1881      	adds	r1, r0, r2
 8007b58:	1ad2      	subs	r2, r2, r3
 8007b5a:	42d3      	cmn	r3, r2
 8007b5c:	d100      	bne.n	8007b60 <memmove+0x28>
 8007b5e:	bd10      	pop	{r4, pc}
 8007b60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b68:	e7f7      	b.n	8007b5a <memmove+0x22>
	...

08007b6c <_free_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4605      	mov	r5, r0
 8007b70:	2900      	cmp	r1, #0
 8007b72:	d045      	beq.n	8007c00 <_free_r+0x94>
 8007b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b78:	1f0c      	subs	r4, r1, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bfb8      	it	lt
 8007b7e:	18e4      	addlt	r4, r4, r3
 8007b80:	f000 f8d2 	bl	8007d28 <__malloc_lock>
 8007b84:	4a1f      	ldr	r2, [pc, #124]	; (8007c04 <_free_r+0x98>)
 8007b86:	6813      	ldr	r3, [r2, #0]
 8007b88:	4610      	mov	r0, r2
 8007b8a:	b933      	cbnz	r3, 8007b9a <_free_r+0x2e>
 8007b8c:	6063      	str	r3, [r4, #4]
 8007b8e:	6014      	str	r4, [r2, #0]
 8007b90:	4628      	mov	r0, r5
 8007b92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b96:	f000 b8c8 	b.w	8007d2a <__malloc_unlock>
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	d90c      	bls.n	8007bb8 <_free_r+0x4c>
 8007b9e:	6821      	ldr	r1, [r4, #0]
 8007ba0:	1862      	adds	r2, r4, r1
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	bf04      	itt	eq
 8007ba6:	681a      	ldreq	r2, [r3, #0]
 8007ba8:	685b      	ldreq	r3, [r3, #4]
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	bf04      	itt	eq
 8007bae:	1852      	addeq	r2, r2, r1
 8007bb0:	6022      	streq	r2, [r4, #0]
 8007bb2:	6004      	str	r4, [r0, #0]
 8007bb4:	e7ec      	b.n	8007b90 <_free_r+0x24>
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	b10a      	cbz	r2, 8007bc0 <_free_r+0x54>
 8007bbc:	42a2      	cmp	r2, r4
 8007bbe:	d9fa      	bls.n	8007bb6 <_free_r+0x4a>
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	1858      	adds	r0, r3, r1
 8007bc4:	42a0      	cmp	r0, r4
 8007bc6:	d10b      	bne.n	8007be0 <_free_r+0x74>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	4401      	add	r1, r0
 8007bcc:	1858      	adds	r0, r3, r1
 8007bce:	4282      	cmp	r2, r0
 8007bd0:	6019      	str	r1, [r3, #0]
 8007bd2:	d1dd      	bne.n	8007b90 <_free_r+0x24>
 8007bd4:	6810      	ldr	r0, [r2, #0]
 8007bd6:	6852      	ldr	r2, [r2, #4]
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	4401      	add	r1, r0
 8007bdc:	6019      	str	r1, [r3, #0]
 8007bde:	e7d7      	b.n	8007b90 <_free_r+0x24>
 8007be0:	d902      	bls.n	8007be8 <_free_r+0x7c>
 8007be2:	230c      	movs	r3, #12
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	e7d3      	b.n	8007b90 <_free_r+0x24>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	1821      	adds	r1, r4, r0
 8007bec:	428a      	cmp	r2, r1
 8007bee:	bf04      	itt	eq
 8007bf0:	6811      	ldreq	r1, [r2, #0]
 8007bf2:	6852      	ldreq	r2, [r2, #4]
 8007bf4:	6062      	str	r2, [r4, #4]
 8007bf6:	bf04      	itt	eq
 8007bf8:	1809      	addeq	r1, r1, r0
 8007bfa:	6021      	streq	r1, [r4, #0]
 8007bfc:	605c      	str	r4, [r3, #4]
 8007bfe:	e7c7      	b.n	8007b90 <_free_r+0x24>
 8007c00:	bd38      	pop	{r3, r4, r5, pc}
 8007c02:	bf00      	nop
 8007c04:	2000019c 	.word	0x2000019c

08007c08 <_malloc_r>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	1ccd      	adds	r5, r1, #3
 8007c0c:	f025 0503 	bic.w	r5, r5, #3
 8007c10:	3508      	adds	r5, #8
 8007c12:	2d0c      	cmp	r5, #12
 8007c14:	bf38      	it	cc
 8007c16:	250c      	movcc	r5, #12
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	db01      	blt.n	8007c22 <_malloc_r+0x1a>
 8007c1e:	42a9      	cmp	r1, r5
 8007c20:	d903      	bls.n	8007c2a <_malloc_r+0x22>
 8007c22:	230c      	movs	r3, #12
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	2000      	movs	r0, #0
 8007c28:	bd70      	pop	{r4, r5, r6, pc}
 8007c2a:	f000 f87d 	bl	8007d28 <__malloc_lock>
 8007c2e:	4a21      	ldr	r2, [pc, #132]	; (8007cb4 <_malloc_r+0xac>)
 8007c30:	6814      	ldr	r4, [r2, #0]
 8007c32:	4621      	mov	r1, r4
 8007c34:	b991      	cbnz	r1, 8007c5c <_malloc_r+0x54>
 8007c36:	4c20      	ldr	r4, [pc, #128]	; (8007cb8 <_malloc_r+0xb0>)
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	b91b      	cbnz	r3, 8007c44 <_malloc_r+0x3c>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f000 f863 	bl	8007d08 <_sbrk_r>
 8007c42:	6020      	str	r0, [r4, #0]
 8007c44:	4629      	mov	r1, r5
 8007c46:	4630      	mov	r0, r6
 8007c48:	f000 f85e 	bl	8007d08 <_sbrk_r>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d124      	bne.n	8007c9a <_malloc_r+0x92>
 8007c50:	230c      	movs	r3, #12
 8007c52:	6033      	str	r3, [r6, #0]
 8007c54:	4630      	mov	r0, r6
 8007c56:	f000 f868 	bl	8007d2a <__malloc_unlock>
 8007c5a:	e7e4      	b.n	8007c26 <_malloc_r+0x1e>
 8007c5c:	680b      	ldr	r3, [r1, #0]
 8007c5e:	1b5b      	subs	r3, r3, r5
 8007c60:	d418      	bmi.n	8007c94 <_malloc_r+0x8c>
 8007c62:	2b0b      	cmp	r3, #11
 8007c64:	d90f      	bls.n	8007c86 <_malloc_r+0x7e>
 8007c66:	600b      	str	r3, [r1, #0]
 8007c68:	50cd      	str	r5, [r1, r3]
 8007c6a:	18cc      	adds	r4, r1, r3
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f000 f85c 	bl	8007d2a <__malloc_unlock>
 8007c72:	f104 000b 	add.w	r0, r4, #11
 8007c76:	1d23      	adds	r3, r4, #4
 8007c78:	f020 0007 	bic.w	r0, r0, #7
 8007c7c:	1ac3      	subs	r3, r0, r3
 8007c7e:	d0d3      	beq.n	8007c28 <_malloc_r+0x20>
 8007c80:	425a      	negs	r2, r3
 8007c82:	50e2      	str	r2, [r4, r3]
 8007c84:	e7d0      	b.n	8007c28 <_malloc_r+0x20>
 8007c86:	428c      	cmp	r4, r1
 8007c88:	684b      	ldr	r3, [r1, #4]
 8007c8a:	bf16      	itet	ne
 8007c8c:	6063      	strne	r3, [r4, #4]
 8007c8e:	6013      	streq	r3, [r2, #0]
 8007c90:	460c      	movne	r4, r1
 8007c92:	e7eb      	b.n	8007c6c <_malloc_r+0x64>
 8007c94:	460c      	mov	r4, r1
 8007c96:	6849      	ldr	r1, [r1, #4]
 8007c98:	e7cc      	b.n	8007c34 <_malloc_r+0x2c>
 8007c9a:	1cc4      	adds	r4, r0, #3
 8007c9c:	f024 0403 	bic.w	r4, r4, #3
 8007ca0:	42a0      	cmp	r0, r4
 8007ca2:	d005      	beq.n	8007cb0 <_malloc_r+0xa8>
 8007ca4:	1a21      	subs	r1, r4, r0
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f82e 	bl	8007d08 <_sbrk_r>
 8007cac:	3001      	adds	r0, #1
 8007cae:	d0cf      	beq.n	8007c50 <_malloc_r+0x48>
 8007cb0:	6025      	str	r5, [r4, #0]
 8007cb2:	e7db      	b.n	8007c6c <_malloc_r+0x64>
 8007cb4:	2000019c 	.word	0x2000019c
 8007cb8:	200001a0 	.word	0x200001a0

08007cbc <_realloc_r>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	b921      	cbnz	r1, 8007cd0 <_realloc_r+0x14>
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ccc:	f7ff bf9c 	b.w	8007c08 <_malloc_r>
 8007cd0:	b922      	cbnz	r2, 8007cdc <_realloc_r+0x20>
 8007cd2:	f7ff ff4b 	bl	8007b6c <_free_r>
 8007cd6:	4625      	mov	r5, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cdc:	f000 f826 	bl	8007d2c <_malloc_usable_size_r>
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	d20f      	bcs.n	8007d04 <_realloc_r+0x48>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff8e 	bl	8007c08 <_malloc_r>
 8007cec:	4605      	mov	r5, r0
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d0f2      	beq.n	8007cd8 <_realloc_r+0x1c>
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	f7ff fc11 	bl	800751c <memcpy>
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff ff35 	bl	8007b6c <_free_r>
 8007d02:	e7e9      	b.n	8007cd8 <_realloc_r+0x1c>
 8007d04:	4635      	mov	r5, r6
 8007d06:	e7e7      	b.n	8007cd8 <_realloc_r+0x1c>

08007d08 <_sbrk_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4c06      	ldr	r4, [pc, #24]	; (8007d24 <_sbrk_r+0x1c>)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	4605      	mov	r5, r0
 8007d10:	4608      	mov	r0, r1
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	f7ff fb4c 	bl	80073b0 <_sbrk>
 8007d18:	1c43      	adds	r3, r0, #1
 8007d1a:	d102      	bne.n	8007d22 <_sbrk_r+0x1a>
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	b103      	cbz	r3, 8007d22 <_sbrk_r+0x1a>
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	20000504 	.word	0x20000504

08007d28 <__malloc_lock>:
 8007d28:	4770      	bx	lr

08007d2a <__malloc_unlock>:
 8007d2a:	4770      	bx	lr

08007d2c <_malloc_usable_size_r>:
 8007d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d30:	1f18      	subs	r0, r3, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bfbc      	itt	lt
 8007d36:	580b      	ldrlt	r3, [r1, r0]
 8007d38:	18c0      	addlt	r0, r0, r3
 8007d3a:	4770      	bx	lr

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
