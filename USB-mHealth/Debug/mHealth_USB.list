
mHealth_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000934c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b20  08009b20  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009b20  08009b20  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b20  08009b20  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  200001e0  08009d08  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  08009d08  00020be0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159c5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032cd  00000000  00000000  00035bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  00038ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e78  00000000  00000000  00039ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001775d  00000000  00000000  0003ad18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec8e  00000000  00000000  00052475  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072095  00000000  00000000  00061103  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000464c  00000000  00000000  000d3214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009444 	.word	0x08009444

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009444 	.word	0x08009444

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000aa8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aac:	d1ed      	bne.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2iz>:
 8000f94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30f      	bcc.n	8000fbe <__aeabi_f2iz+0x2a>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d90d      	bls.n	8000fc4 <__aeabi_f2iz+0x30>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	bf18      	it	ne
 8000fba:	4240      	negne	r0, r0
 8000fbc:	4770      	bx	lr
 8000fbe:	f04f 0000 	mov.w	r0, #0
 8000fc2:	4770      	bx	lr
 8000fc4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc8:	d101      	bne.n	8000fce <__aeabi_f2iz+0x3a>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	d105      	bne.n	8000fda <__aeabi_f2iz+0x46>
 8000fce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fd2:	bf08      	it	eq
 8000fd4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fd8:	4770      	bx	lr
 8000fda:	f04f 0000 	mov.w	r0, #0
 8000fde:	4770      	bx	lr

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x28>)
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f945 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f007 f880 	bl	8008100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f95d 	bl	80012ea <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f925 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200000f8 	.word	0x200000f8
 8001064:	20000004 	.word	0x20000004
 8001068:	20000000 	.word	0x20000000

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x1c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x20>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <HAL_IncTick+0x20>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000004 	.word	0x20000004
 800108c:	20000318 	.word	0x20000318

08001090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <HAL_GetTick+0x10>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000318 	.word	0x20000318

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff fff0 	bl	8001090 <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_Delay+0x40>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffe0 	bl	8001090 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000004 	.word	0x20000004

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff42 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff35 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e127      	b.n	8001568 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001318:	2201      	movs	r2, #1
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 8116 	bne.w	8001562 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b12      	cmp	r3, #18
 800133c:	d034      	beq.n	80013a8 <HAL_GPIO_Init+0xa4>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d80d      	bhi.n	800135e <HAL_GPIO_Init+0x5a>
 8001342:	2b02      	cmp	r3, #2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x9a>
 8001346:	2b02      	cmp	r3, #2
 8001348:	d804      	bhi.n	8001354 <HAL_GPIO_Init+0x50>
 800134a:	2b00      	cmp	r3, #0
 800134c:	d031      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
 800134e:	2b01      	cmp	r3, #1
 8001350:	d01c      	beq.n	800138c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001352:	e048      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001354:	2b03      	cmp	r3, #3
 8001356:	d043      	beq.n	80013e0 <HAL_GPIO_Init+0xdc>
 8001358:	2b11      	cmp	r3, #17
 800135a:	d01b      	beq.n	8001394 <HAL_GPIO_Init+0x90>
          break;
 800135c:	e043      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800135e:	4a89      	ldr	r2, [pc, #548]	; (8001584 <HAL_GPIO_Init+0x280>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d026      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
 8001364:	4a87      	ldr	r2, [pc, #540]	; (8001584 <HAL_GPIO_Init+0x280>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d806      	bhi.n	8001378 <HAL_GPIO_Init+0x74>
 800136a:	4a87      	ldr	r2, [pc, #540]	; (8001588 <HAL_GPIO_Init+0x284>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d020      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
 8001370:	4a86      	ldr	r2, [pc, #536]	; (800158c <HAL_GPIO_Init+0x288>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01d      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
          break;
 8001376:	e036      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001378:	4a85      	ldr	r2, [pc, #532]	; (8001590 <HAL_GPIO_Init+0x28c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
 800137e:	4a85      	ldr	r2, [pc, #532]	; (8001594 <HAL_GPIO_Init+0x290>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d016      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
 8001384:	4a84      	ldr	r2, [pc, #528]	; (8001598 <HAL_GPIO_Init+0x294>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0xae>
          break;
 800138a:	e02c      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e028      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	3304      	adds	r3, #4
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e023      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	3308      	adds	r3, #8
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e01e      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	330c      	adds	r3, #12
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e019      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ba:	2304      	movs	r3, #4
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e012      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	611a      	str	r2, [r3, #16]
          break;
 80013d2:	e008      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d4:	2308      	movs	r3, #8
 80013d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	615a      	str	r2, [r3, #20]
          break;
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2bff      	cmp	r3, #255	; 0xff
 80013ea:	d801      	bhi.n	80013f0 <HAL_GPIO_Init+0xec>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	e001      	b.n	80013f4 <HAL_GPIO_Init+0xf0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d802      	bhi.n	8001402 <HAL_GPIO_Init+0xfe>
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x104>
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	3b08      	subs	r3, #8
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	210f      	movs	r1, #15
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	6a39      	ldr	r1, [r7, #32]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	431a      	orrs	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8096 	beq.w	8001562 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4b59      	ldr	r3, [pc, #356]	; (800159c <HAL_GPIO_Init+0x298>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a58      	ldr	r2, [pc, #352]	; (800159c <HAL_GPIO_Init+0x298>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_GPIO_Init+0x298>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800144e:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <HAL_GPIO_Init+0x29c>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_GPIO_Init+0x2a0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x19e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x19a>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a49      	ldr	r2, [pc, #292]	; (80015ac <HAL_GPIO_Init+0x2a8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x196>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <HAL_GPIO_Init+0x2ac>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x192>
 8001492:	2303      	movs	r3, #3
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x1a0>
 8001496:	2304      	movs	r3, #4
 8001498:	e004      	b.n	80014a4 <HAL_GPIO_Init+0x1a0>
 800149a:	2302      	movs	r3, #2
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_Init+0x1a0>
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_GPIO_Init+0x1a0>
 80014a2:	2300      	movs	r3, #0
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4093      	lsls	r3, r2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b4:	493a      	ldr	r1, [pc, #232]	; (80015a0 <HAL_GPIO_Init+0x29c>)
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4938      	ldr	r1, [pc, #224]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
 80014da:	e006      	b.n	80014ea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014dc:	4b35      	ldr	r3, [pc, #212]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4933      	ldr	r1, [pc, #204]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d006      	beq.n	8001504 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	492e      	ldr	r1, [pc, #184]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
 8001502:	e006      	b.n	8001512 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	43db      	mvns	r3, r3
 800150c:	4929      	ldr	r1, [pc, #164]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 800150e:	4013      	ands	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	4924      	ldr	r1, [pc, #144]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	43db      	mvns	r3, r3
 8001534:	491f      	ldr	r1, [pc, #124]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001536:	4013      	ands	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	491a      	ldr	r1, [pc, #104]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	60cb      	str	r3, [r1, #12]
 8001552:	e006      	b.n	8001562 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	43db      	mvns	r3, r3
 800155c:	4915      	ldr	r1, [pc, #84]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 800155e:	4013      	ands	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	3301      	adds	r3, #1
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	fa22 f303 	lsr.w	r3, r2, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	f47f aed0 	bne.w	8001318 <HAL_GPIO_Init+0x14>
  }
}
 8001578:	bf00      	nop
 800157a:	372c      	adds	r7, #44	; 0x2c
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	10210000 	.word	0x10210000
 8001588:	10110000 	.word	0x10110000
 800158c:	10120000 	.word	0x10120000
 8001590:	10310000 	.word	0x10310000
 8001594:	10320000 	.word	0x10320000
 8001598:	10220000 	.word	0x10220000
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	40010800 	.word	0x40010800
 80015a8:	40010c00 	.word	0x40010c00
 80015ac:	40011000 	.word	0x40011000
 80015b0:	40011400 	.word	0x40011400
 80015b4:	40010400 	.word	0x40010400

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	611a      	str	r2, [r3, #16]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af06      	add	r7, sp, #24
 80015ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0d3      	b.n	80017a2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f006 ff02 	bl	8008418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2203      	movs	r2, #3
 8001618:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f002 facc 	bl	8003bbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	687e      	ldr	r6, [r7, #4]
 800162e:	466d      	mov	r5, sp
 8001630:	f106 0410 	add.w	r4, r6, #16
 8001634:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001638:	6823      	ldr	r3, [r4, #0]
 800163a:	602b      	str	r3, [r5, #0]
 800163c:	1d33      	adds	r3, r6, #4
 800163e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f002 fa95 	bl	8003b70 <USB_CoreInit>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0a4      	b.n	80017a2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fac9 	bl	8003bf6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e035      	b.n	80016d6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	015b      	lsls	r3, r3, #5
 8001670:	4413      	add	r3, r2
 8001672:	3329      	adds	r3, #41	; 0x29
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	015b      	lsls	r3, r3, #5
 800167e:	4413      	add	r3, r2
 8001680:	3328      	adds	r3, #40	; 0x28
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	b291      	uxth	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4413      	add	r3, r2
 8001692:	3336      	adds	r3, #54	; 0x36
 8001694:	460a      	mov	r2, r1
 8001696:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	015b      	lsls	r3, r3, #5
 800169e:	4413      	add	r3, r2
 80016a0:	332b      	adds	r3, #43	; 0x2b
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4413      	add	r3, r2
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	015b      	lsls	r3, r3, #5
 80016ba:	4413      	add	r3, r2
 80016bc:	333c      	adds	r3, #60	; 0x3c
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	3302      	adds	r3, #2
 80016c8:	015b      	lsls	r3, r3, #5
 80016ca:	4413      	add	r3, r2
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	3301      	adds	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d3c4      	bcc.n	800166a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e031      	b.n	800174a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	015b      	lsls	r3, r3, #5
 80016ec:	4413      	add	r3, r2
 80016ee:	f203 1329 	addw	r3, r3, #297	; 0x129
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	015b      	lsls	r3, r3, #5
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	015b      	lsls	r3, r3, #5
 800170c:	4413      	add	r3, r2
 800170e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	4413      	add	r3, r2
 800171e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	015b      	lsls	r3, r3, #5
 800172c:	4413      	add	r3, r2
 800172e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	330a      	adds	r3, #10
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	4413      	add	r3, r2
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	3301      	adds	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3c8      	bcc.n	80016e6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	687e      	ldr	r6, [r7, #4]
 800175c:	466d      	mov	r5, sp
 800175e:	f106 0410 	add.w	r4, r6, #16
 8001762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	602b      	str	r3, [r5, #0]
 800176a:	1d33      	adds	r3, r6, #4
 800176c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f002 fa4d 	bl	8003c0e <USB_DevInit>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2202      	movs	r2, #2
 800177e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00d      	b.n	80017a2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fa8b 	bl	8004cb6 <USB_DevDisconnect>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_PCD_Start+0x16>
 80017bc:	2302      	movs	r3, #2
 80017be:	e016      	b.n	80017ee <HAL_PCD_Start+0x44>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017c8:	2101      	movs	r1, #1
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f007 f86d 	bl	80088aa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fa64 	bl	8004ca2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 f9d6 	bl	8003b90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fa61 	bl	8004cca <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001812:	d102      	bne.n	800181a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fadf 	bl	8001dd8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fa53 	bl	8004cca <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182e:	d112      	bne.n	8001856 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001838:	b29a      	uxth	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001842:	b292      	uxth	r2, r2
 8001844:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f006 fe5a 	bl	8008502 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f8de 	bl	8001a12 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fa35 	bl	8004cca <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186a:	d10b      	bne.n	8001884 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800187e:	b292      	uxth	r2, r2
 8001880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fa1e 	bl	8004cca <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001898:	d10b      	bne.n	80018b2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fa07 	bl	8004cca <USB_ReadInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c6:	d126      	bne.n	8001916 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0204 	bic.w	r2, r2, #4
 80018da:	b292      	uxth	r2, r2
 80018dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0208 	bic.w	r2, r2, #8
 80018f2:	b292      	uxth	r2, r2
 80018f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f006 fe3b 	bl	8008574 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f9d5 	bl	8004cca <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192a:	d13d      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0208 	orr.w	r2, r2, #8
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001956:	b292      	uxth	r2, r2
 8001958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0204 	orr.w	r2, r2, #4
 800196e:	b292      	uxth	r2, r2
 8001970:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 f9a6 	bl	8004cca <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001988:	d10b      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800199c:	b292      	uxth	r2, r2
 800199e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f006 fdcc 	bl	8008540 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 f98c 	bl	8004cca <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019bc:	d10e      	bne.n	80019dc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d0:	b292      	uxth	r2, r2
 80019d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f006 fd85 	bl	80084e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f972 	bl	8004cca <USB_ReadInterrupts>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f0:	d10b      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a04:	b292      	uxth	r2, r2
 8001a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_PCD_SetAddress+0x1a>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e013      	b.n	8001a54 <HAL_PCD_SetAddress+0x42>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	78fa      	ldrb	r2, [r7, #3]
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f003 f919 	bl	8004c7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	70fb      	strb	r3, [r7, #3]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	803b      	strh	r3, [r7, #0]
 8001a72:	4613      	mov	r3, r2
 8001a74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da0b      	bge.n	8001a9a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	015b      	lsls	r3, r3, #5
 8001a8a:	3328      	adds	r3, #40	; 0x28
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
 8001a98:	e00b      	b.n	8001ab2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001abe:	883a      	ldrh	r2, [r7, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	78ba      	ldrb	r2, [r7, #2]
 8001ac8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001adc:	78bb      	ldrb	r3, [r7, #2]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_PCD_EP_Open+0x9a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e00e      	b.n	8001b14 <HAL_PCD_EP_Open+0xb8>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68f9      	ldr	r1, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 f8a7 	bl	8003c58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001b12:	7afb      	ldrb	r3, [r7, #11]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	da0b      	bge.n	8001b48 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	3328      	adds	r3, #40	; 0x28
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
 8001b46:	e00b      	b.n	8001b60 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	015b      	lsls	r3, r3, #5
 8001b50:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_Close+0x5e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00e      	b.n	8001b98 <HAL_PCD_EP_Close+0x7c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 fb53 	bl	8004234 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bda:	7afb      	ldrb	r3, [r7, #11]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be6:	7afb      	ldrb	r3, [r7, #11]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d106      	bne.n	8001bfe <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fcb2 	bl	8004560 <USB_EPStartXfer>
 8001bfc:	e005      	b.n	8001c0a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fcab 	bl	8004560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	015b      	lsls	r3, r3, #5
 8001c2c:	3328      	adds	r3, #40	; 0x28
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4413      	add	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6979      	ldr	r1, [r7, #20]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f002 fc79 	bl	8004560 <USB_EPStartXfer>
 8001c6e:	e005      	b.n	8001c7c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6979      	ldr	r1, [r7, #20]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 fc72 	bl	8004560 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0207 	and.w	r2, r3, #7
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d901      	bls.n	8001ca4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e046      	b.n	8001d32 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da0b      	bge.n	8001cc4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	3328      	adds	r3, #40	; 0x28
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	705a      	strb	r2, [r3, #1]
 8001cc2:	e009      	b.n	8001cd8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	015b      	lsls	r3, r3, #5
 8001cc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_EP_SetStall+0x72>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e01c      	b.n	8001d32 <HAL_PCD_EP_SetStall+0xac>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68f9      	ldr	r1, [r7, #12]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fee2 	bl	8004ad0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d108      	bne.n	8001d28 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f002 ffe0 	bl	8004ce8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	f003 020f 	and.w	r2, r3, #15
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d901      	bls.n	8001d58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e03a      	b.n	8001dce <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da0b      	bge.n	8001d78 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	015b      	lsls	r3, r3, #5
 8001d68:	3328      	adds	r3, #40	; 0x28
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	705a      	strb	r2, [r3, #1]
 8001d76:	e00b      	b.n	8001d90 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	015b      	lsls	r3, r3, #5
 8001d80:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_PCD_EP_ClrStall+0x76>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e00e      	b.n	8001dce <HAL_PCD_EP_ClrStall+0x94>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fec8 	bl	8004b54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001de0:	e282      	b.n	80022e8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dea:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001dec:	8afb      	ldrh	r3, [r7, #22]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001df6:	7d7b      	ldrb	r3, [r7, #21]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 8142 	bne.w	8002082 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001dfe:	8afb      	ldrh	r3, [r7, #22]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d151      	bne.n	8001eac <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e18:	b29c      	uxth	r4, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3328      	adds	r3, #40	; 0x28
 8001e2e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	3302      	adds	r3, #2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	441a      	add	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f006 fb23 	bl	80084b8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8234 	beq.w	80022e8 <PCD_EP_ISR_Handler+0x510>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f040 822f 	bne.w	80022e8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001eaa:	e21d      	b.n	80022e8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001eb2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ebc:	8a7b      	ldrh	r3, [r7, #18]
 8001ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d033      	beq.n	8001f2e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3306      	adds	r3, #6
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	f002 ff3e 	bl	8004d86 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f16:	4013      	ands	r3, r2
 8001f18:	b29c      	uxth	r4, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f22:	b292      	uxth	r2, r2
 8001f24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f006 fa9c 	bl	8008464 <HAL_PCD_SetupStageCallback>
 8001f2c:	e1dc      	b.n	80022e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f280 81d8 	bge.w	80022e8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f44:	4013      	ands	r3, r2
 8001f46:	b29c      	uxth	r4, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001f50:	b292      	uxth	r2, r2
 8001f52:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	3306      	adds	r3, #6
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d019      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x1e4>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6959      	ldr	r1, [r3, #20]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	f002 fef0 	bl	8004d86 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	441a      	add	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f006 fa66 	bl	8008488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461c      	mov	r4, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	441c      	add	r4, r3
 8001fce:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10e      	bne.n	8001ffa <PCD_EP_ISR_Handler+0x222>
 8001fdc:	8823      	ldrh	r3, [r4, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	8023      	strh	r3, [r4, #0]
 8001fe8:	8823      	ldrh	r3, [r4, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	8023      	strh	r3, [r4, #0]
 8001ff8:	e02d      	b.n	8002056 <PCD_EP_ISR_Handler+0x27e>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b3e      	cmp	r3, #62	; 0x3e
 8002000:	d812      	bhi.n	8002028 <PCD_EP_ISR_Handler+0x250>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <PCD_EP_ISR_Handler+0x244>
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	3301      	adds	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	b29b      	uxth	r3, r3
 8002020:	029b      	lsls	r3, r3, #10
 8002022:	b29b      	uxth	r3, r3
 8002024:	8023      	strh	r3, [r4, #0]
 8002026:	e016      	b.n	8002056 <PCD_EP_ISR_Handler+0x27e>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <PCD_EP_ISR_Handler+0x26a>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3b01      	subs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	b29b      	uxth	r3, r3
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	b29b      	uxth	r3, r3
 800204a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800204e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002052:	b29b      	uxth	r3, r3
 8002054:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	b29c      	uxth	r4, r3
 8002068:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800206c:	b29c      	uxth	r4, r3
 800206e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002072:	b29c      	uxth	r4, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4ba2      	ldr	r3, [pc, #648]	; (8002304 <PCD_EP_ISR_Handler+0x52c>)
 800207a:	4323      	orrs	r3, r4
 800207c:	b29b      	uxth	r3, r3
 800207e:	8013      	strh	r3, [r2, #0]
 8002080:	e132      	b.n	80022e8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	7d7b      	ldrb	r3, [r7, #21]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002092:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f280 80d1 	bge.w	800223e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	7d7b      	ldrb	r3, [r7, #21]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020b0:	4013      	ands	r3, r2
 80020b2:	b29c      	uxth	r4, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	7d7b      	ldrb	r3, [r7, #21]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80020c4:	b292      	uxth	r2, r2
 80020c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020c8:	7d7b      	ldrb	r3, [r7, #21]
 80020ca:	015b      	lsls	r3, r3, #5
 80020cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	7b1b      	ldrb	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d121      	bne.n	8002122 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	3306      	adds	r3, #6
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002106:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d072      	beq.n	80021f4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6959      	ldr	r1, [r3, #20]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88da      	ldrh	r2, [r3, #6]
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	f002 fe33 	bl	8004d86 <USB_ReadPMA>
 8002120:	e068      	b.n	80021f4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d021      	beq.n	8002180 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	3302      	adds	r3, #2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002164:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002166:	8bfb      	ldrh	r3, [r7, #30]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02a      	beq.n	80021c2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6959      	ldr	r1, [r3, #20]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	891a      	ldrh	r2, [r3, #8]
 8002178:	8bfb      	ldrh	r3, [r7, #30]
 800217a:	f002 fe04 	bl	8004d86 <USB_ReadPMA>
 800217e:	e020      	b.n	80021c2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	3306      	adds	r3, #6
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80021aa:	8bfb      	ldrh	r3, [r7, #30]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6959      	ldr	r1, [r3, #20]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	895a      	ldrh	r2, [r3, #10]
 80021bc:	8bfb      	ldrh	r3, [r7, #30]
 80021be:	f002 fde2 	bl	8004d86 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021dc:	b29c      	uxth	r4, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	441a      	add	r2, r3
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <PCD_EP_ISR_Handler+0x530>)
 80021ee:	4323      	orrs	r3, r4
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	441a      	add	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	8bfb      	ldrh	r3, [r7, #30]
 8002206:	441a      	add	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d004      	beq.n	800221e <PCD_EP_ISR_Handler+0x446>
 8002214:	8bfa      	ldrh	r2, [r7, #30]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d206      	bcs.n	800222c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f006 f92f 	bl	8008488 <HAL_PCD_DataOutStageCallback>
 800222a:	e008      	b.n	800223e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	7819      	ldrb	r1, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fcb1 	bl	8001ba0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800223e:	8a7b      	ldrh	r3, [r7, #18]
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d04f      	beq.n	80022e8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002248:	7d7b      	ldrb	r3, [r7, #21]
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	3328      	adds	r3, #40	; 0x28
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	7d7b      	ldrb	r3, [r7, #21]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	b29c      	uxth	r4, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	7d7b      	ldrb	r3, [r7, #21]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	441a      	add	r2, r3
 800227a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800227e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002282:	b29b      	uxth	r3, r3
 8002284:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3302      	adds	r3, #2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	441a      	add	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f006 f8f2 	bl	80084b8 <HAL_PCD_DataInStageCallback>
 80022d4:	e008      	b.n	80022e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	7819      	ldrb	r1, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fc96 	bl	8001c14 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f6ff ad74 	blt.w	8001de2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3724      	adds	r7, #36	; 0x24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}
 8002304:	ffff8080 	.word	0xffff8080
 8002308:	ffff80c0 	.word	0xffff80c0

0800230c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	4613      	mov	r3, r2
 800231c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800231e:	897b      	ldrh	r3, [r7, #10]
 8002320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	015b      	lsls	r3, r3, #5
 8002332:	3328      	adds	r3, #40	; 0x28
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e006      	b.n	800234a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800233c:	897b      	ldrh	r3, [r7, #10]
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800234a:	893b      	ldrh	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2200      	movs	r2, #0
 8002354:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b29a      	uxth	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	80da      	strh	r2, [r3, #6]
 800235e:	e00b      	b.n	8002378 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2201      	movs	r2, #1
 8002364:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	b29a      	uxth	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e26c      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8087 	beq.w	80024b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d00c      	beq.n	80023ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b0:	4b8f      	ldr	r3, [pc, #572]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d112      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5e>
 80023bc:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d10b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d06c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x12c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d168      	bne.n	80024b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e246      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x76>
 80023ec:	4b80      	ldr	r3, [pc, #512]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7f      	ldr	r2, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e02e      	b.n	8002458 <HAL_RCC_OscConfig+0xd4>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x98>
 8002402:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7a      	ldr	r2, [pc, #488]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b78      	ldr	r3, [pc, #480]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a77      	ldr	r2, [pc, #476]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xd4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0xbc>
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a71      	ldr	r2, [pc, #452]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xd4>
 8002440:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6a      	ldr	r2, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b68      	ldr	r3, [pc, #416]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a67      	ldr	r2, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fe16 	bl	8001090 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe fe12 	bl	8001090 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1fa      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xe4>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fe02 	bl	8001090 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe fdfe 	bl	8001090 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1e6      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x10c>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d063      	beq.n	8002586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d11c      	bne.n	8002510 <HAL_RCC_OscConfig+0x18c>
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x176>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1ba      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4939      	ldr	r1, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	e03a      	b.n	8002586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x270>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7fe fdb7 	bl	8001090 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe fdb3 	bl	8001090 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e19b      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4927      	ldr	r1, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x270>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fd96 	bl	8001090 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7fe fd92 	bl	8001090 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e17a      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d03a      	beq.n	8002608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_RCC_OscConfig+0x274>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fd76 	bl	8001090 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe fd72 	bl	8001090 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e15a      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f000 fada 	bl	8002b80 <RCC_Delay>
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_OscConfig+0x274>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7fe fd5c 	bl	8001090 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025da:	e00f      	b.n	80025fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7fe fd58 	bl	8001090 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d908      	bls.n	80025fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e140      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	42420000 	.word	0x42420000
 80025f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	4b9e      	ldr	r3, [pc, #632]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e9      	bne.n	80025dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a6 	beq.w	8002762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b97      	ldr	r3, [pc, #604]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10d      	bne.n	8002642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b94      	ldr	r3, [pc, #592]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a93      	ldr	r2, [pc, #588]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b91      	ldr	r3, [pc, #580]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b8e      	ldr	r3, [pc, #568]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264e:	4b8b      	ldr	r3, [pc, #556]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a8a      	ldr	r2, [pc, #552]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265a:	f7fe fd19 	bl	8001090 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7fe fd15 	bl	8001090 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b64      	cmp	r3, #100	; 0x64
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0fd      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	4b81      	ldr	r3, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x312>
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	e02d      	b.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x334>
 800269e:	4b76      	ldr	r3, [pc, #472]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a75      	ldr	r2, [pc, #468]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6213      	str	r3, [r2, #32]
 80026aa:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a72      	ldr	r2, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	e01c      	b.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x356>
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a6c      	ldr	r2, [pc, #432]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a69      	ldr	r2, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	e00b      	b.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a66      	ldr	r2, [pc, #408]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a63      	ldr	r2, [pc, #396]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d015      	beq.n	8002726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fcc9 	bl	8001090 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fcc5 	bl	8001090 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0ab      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ee      	beq.n	8002702 <HAL_RCC_OscConfig+0x37e>
 8002724:	e014      	b.n	8002750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7fe fcb3 	bl	8001090 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe fcaf 	bl	8001090 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e095      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ee      	bne.n	800272e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b48      	ldr	r3, [pc, #288]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8081 	beq.w	800286e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276c:	4b42      	ldr	r3, [pc, #264]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d061      	beq.n	800283c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d146      	bne.n	800280e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <HAL_RCC_OscConfig+0x4fc>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fc83 	bl	8001090 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fc7f 	bl	8001090 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e067      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d108      	bne.n	80027c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	492d      	ldr	r1, [pc, #180]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a19      	ldr	r1, [r3, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	430b      	orrs	r3, r1
 80027da:	4927      	ldr	r1, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x4fc>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fc53 	bl	8001090 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fc4f 	bl	8001090 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e037      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x46a>
 800280c:	e02f      	b.n	800286e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCC_OscConfig+0x4fc>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fc3c 	bl	8001090 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fc38 	bl	8001090 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e020      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x498>
 800283a:	e018      	b.n	800286e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e013      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	429a      	cmp	r2, r3
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	42420060 	.word	0x42420060

08002884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d0      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4965      	ldr	r1, [pc, #404]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d040      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e073      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4936      	ldr	r1, [pc, #216]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7fe fb8c 	bl	8001090 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7fe fb88 	bl	8001090 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e053      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d210      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4922      	ldr	r1, [pc, #136]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	fa21 f303 	lsr.w	r3, r1, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1cc>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1d0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe faea 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08009ad4 	.word	0x08009ad4
 8002a50:	200000f8 	.word	0x200000f8
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b490      	push	{r4, r7}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a60:	1d3c      	adds	r4, r7, #4
 8002a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x40>
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x46>
 8002a96:	e02d      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9a:	623b      	str	r3, [r7, #32]
      break;
 8002a9c:	e02d      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	0c9b      	lsrs	r3, r3, #18
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aaa:	4413      	add	r3, r2
 8002aac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ab0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	0c5b      	lsrs	r3, r3, #17
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aca:	4413      	add	r3, r2
 8002acc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad6:	fb02 f203 	mul.w	r2, r2, r3
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e004      	b.n	8002aee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	623b      	str	r3, [r7, #32]
      break;
 8002af2:	e002      	b.n	8002afa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc90      	pop	{r4, r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	0800945c 	.word	0x0800945c
 8002b0c:	0800946c 	.word	0x0800946c
 8002b10:	40021000 	.word	0x40021000
 8002b14:	007a1200 	.word	0x007a1200
 8002b18:	003d0900 	.word	0x003d0900

08002b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b02      	ldr	r3, [pc, #8]	; (8002b2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	200000f8 	.word	0x200000f8

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b34:	f7ff fff2 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08009ae4 	.word	0x08009ae4

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b60:	4601      	mov	r1, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0adb      	lsrs	r3, r3, #11
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4a03      	ldr	r2, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6e:	5cd3      	ldrb	r3, [r2, r3]
 8002b70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08009ae4 	.word	0x08009ae4

08002b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <RCC_Delay+0x34>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <RCC_Delay+0x38>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	0a5b      	lsrs	r3, r3, #9
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b9c:	bf00      	nop
  }
  while (Delay --);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	60fa      	str	r2, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f9      	bne.n	8002b9c <RCC_Delay+0x1c>
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	200000f8 	.word	0x200000f8
 8002bb8:	10624dd3 	.word	0x10624dd3

08002bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d07d      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	4a4b      	ldr	r2, [pc, #300]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	61d3      	str	r3, [r2, #28]
 8002bf4:	4b49      	ldr	r3, [pc, #292]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c04:	4b46      	ldr	r3, [pc, #280]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d118      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c10:	4b43      	ldr	r3, [pc, #268]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a42      	ldr	r2, [pc, #264]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fa38 	bl	8001090 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	e008      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c24:	f7fe fa34 	bl	8001090 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e06d      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c36:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d02e      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d027      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c6a:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c70:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c76:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d014      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fa03 	bl	8001090 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe f9ff 	bl	8001090 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e036      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ee      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4917      	ldr	r1, [pc, #92]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	490b      	ldr	r1, [pc, #44]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cfe:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	4904      	ldr	r1, [pc, #16]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
 8002d24:	42420440 	.word	0x42420440

08002d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e053      	b.n	8002de2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f005 fa05 	bl	8008164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	ea42 0103 	orr.w	r1, r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	0c1a      	lsrs	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f002 0204 	and.w	r2, r2, #4
 8002dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b088      	sub	sp, #32
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_SPI_Transmit+0x22>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e11e      	b.n	800304a <HAL_SPI_Transmit+0x260>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e14:	f7fe f93c 	bl	8001090 <HAL_GetTick>
 8002e18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d002      	beq.n	8002e30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e2e:	e103      	b.n	8003038 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_SPI_Transmit+0x52>
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e40:	e0fa      	b.n	8003038 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2203      	movs	r2, #3
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e88:	d107      	bne.n	8002e9a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d007      	beq.n	8002eb8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec0:	d14b      	bne.n	8002f5a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HAL_SPI_Transmit+0xe6>
 8002eca:	8afb      	ldrh	r3, [r7, #22]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d13e      	bne.n	8002f4e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ef4:	e02b      	b.n	8002f4e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d112      	bne.n	8002f2a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f28:	e011      	b.n	8002f4e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2a:	f7fe f8b1 	bl	8001090 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d803      	bhi.n	8002f42 <HAL_SPI_Transmit+0x158>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d102      	bne.n	8002f48 <HAL_SPI_Transmit+0x15e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f4c:	e074      	b.n	8003038 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ce      	bne.n	8002ef6 <HAL_SPI_Transmit+0x10c>
 8002f58:	e04c      	b.n	8002ff4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_SPI_Transmit+0x17e>
 8002f62:	8afb      	ldrh	r3, [r7, #22]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d140      	bne.n	8002fea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	330c      	adds	r3, #12
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f8e:	e02c      	b.n	8002fea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d113      	bne.n	8002fc6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fc4:	e011      	b.n	8002fea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc6:	f7fe f863 	bl	8001090 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d803      	bhi.n	8002fde <HAL_SPI_Transmit+0x1f4>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d102      	bne.n	8002fe4 <HAL_SPI_Transmit+0x1fa>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fe8:	e026      	b.n	8003038 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1cd      	bne.n	8002f90 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	6839      	ldr	r1, [r7, #0]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb91 	bl	8003720 <SPI_EndRxTxTransaction>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	77fb      	strb	r3, [r7, #31]
 8003034:	e000      	b.n	8003038 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003048:	7ffb      	ldrb	r3, [r7, #31]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b088      	sub	sp, #32
 8003056:	af02      	add	r7, sp, #8
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306e:	d112      	bne.n	8003096 <HAL_SPI_Receive+0x44>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10e      	bne.n	8003096 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2204      	movs	r2, #4
 800307c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	4613      	mov	r3, r2
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f8e9 	bl	8003264 <HAL_SPI_TransmitReceive>
 8003092:	4603      	mov	r3, r0
 8003094:	e0e2      	b.n	800325c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_SPI_Receive+0x52>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0db      	b.n	800325c <HAL_SPI_Receive+0x20a>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ac:	f7fd fff0 	bl	8001090 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030be:	2302      	movs	r3, #2
 80030c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030c2:	e0c2      	b.n	800324a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Receive+0x7e>
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030d4:	e0b9      	b.n	800324a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2204      	movs	r2, #4
 80030da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800311c:	d107      	bne.n	800312e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d007      	beq.n	800314c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d162      	bne.n	800321a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003154:	e02e      	b.n	80031b4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d115      	bne.n	8003190 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f103 020c 	add.w	r2, r3, #12
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800318e:	e011      	b.n	80031b4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003190:	f7fd ff7e 	bl	8001090 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d803      	bhi.n	80031a8 <HAL_SPI_Receive+0x156>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d102      	bne.n	80031ae <HAL_SPI_Receive+0x15c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031b2:	e04a      	b.n	800324a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1cb      	bne.n	8003156 <HAL_SPI_Receive+0x104>
 80031be:	e031      	b.n	8003224 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d113      	bne.n	80031f6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	b292      	uxth	r2, r2
 80031da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	1c9a      	adds	r2, r3, #2
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031f4:	e011      	b.n	800321a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031f6:	f7fd ff4b 	bl	8001090 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d803      	bhi.n	800320e <HAL_SPI_Receive+0x1bc>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d102      	bne.n	8003214 <HAL_SPI_Receive+0x1c2>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003218:	e017      	b.n	800324a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1cd      	bne.n	80031c0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fa27 	bl	800367c <SPI_EndRxTransaction>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	75fb      	strb	r3, [r7, #23]
 8003246:	e000      	b.n	800324a <HAL_SPI_Receive+0x1f8>
  }

error :
 8003248:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003272:	2301      	movs	r3, #1
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_SPI_TransmitReceive+0x26>
 8003286:	2302      	movs	r3, #2
 8003288:	e18a      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x33c>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003292:	f7fd fefd 	bl	8001090 <HAL_GetTick>
 8003296:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d00f      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x70>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ba:	d107      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <HAL_SPI_TransmitReceive+0x68>
 80032c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d003      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032d2:	e15b      	b.n	800358c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x82>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0x82>
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032ec:	e14e      	b.n	800358c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d003      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2205      	movs	r2, #5
 80032fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	887a      	ldrh	r2, [r7, #2]
 8003312:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b40      	cmp	r3, #64	; 0x40
 8003344:	d007      	beq.n	8003356 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335e:	d178      	bne.n	8003452 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_SPI_TransmitReceive+0x10a>
 8003368:	8b7b      	ldrh	r3, [r7, #26]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d166      	bne.n	800343c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	881a      	ldrh	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	1c9a      	adds	r2, r3, #2
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003392:	e053      	b.n	800343c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d11b      	bne.n	80033da <HAL_SPI_TransmitReceive+0x176>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d016      	beq.n	80033da <HAL_SPI_TransmitReceive+0x176>
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d113      	bne.n	80033da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d119      	bne.n	800341c <HAL_SPI_TransmitReceive+0x1b8>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d014      	beq.n	800341c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	b292      	uxth	r2, r2
 80033fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003418:	2301      	movs	r3, #1
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800341c:	f7fd fe38 	bl	8001090 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003428:	429a      	cmp	r2, r3
 800342a:	d807      	bhi.n	800343c <HAL_SPI_TransmitReceive+0x1d8>
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d003      	beq.n	800343c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800343a:	e0a7      	b.n	800358c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1a6      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x130>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1a1      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x130>
 8003450:	e07c      	b.n	800354c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x1fc>
 800345a:	8b7b      	ldrh	r3, [r7, #26]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d16b      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	7812      	ldrb	r2, [r2, #0]
 800346c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003486:	e057      	b.n	8003538 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d11c      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x26c>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d017      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x26c>
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d114      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	7812      	ldrb	r2, [r2, #0]
 80034b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d119      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x2ae>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d014      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800350e:	2301      	movs	r3, #1
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003512:	f7fd fdbd 	bl	8001090 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800351e:	429a      	cmp	r2, r3
 8003520:	d803      	bhi.n	800352a <HAL_SPI_TransmitReceive+0x2c6>
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d102      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x2cc>
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003536:	e029      	b.n	800358c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1a2      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x224>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d19d      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f8e5 	bl	8003720 <SPI_EndRxTxTransaction>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003568:	e010      	b.n	800358c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10b      	bne.n	800358a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	617b      	str	r3, [r7, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	e000      	b.n	800358c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800358a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800359c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3730      	adds	r7, #48	; 0x30
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b8:	e04c      	b.n	8003654 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d048      	beq.n	8003654 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035c2:	f7fd fd65 	bl	8001090 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d902      	bls.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d13d      	bne.n	8003654 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f0:	d111      	bne.n	8003616 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035fa:	d004      	beq.n	8003606 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d107      	bne.n	8003616 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	d10f      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800363e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e00f      	b.n	8003674 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	429a      	cmp	r2, r3
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d1a3      	bne.n	80035ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003690:	d111      	bne.n	80036b6 <SPI_EndRxTransaction+0x3a>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d004      	beq.n	80036a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d107      	bne.n	80036b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d117      	bne.n	80036f0 <SPI_EndRxTransaction+0x74>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	d112      	bne.n	80036f0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ff67 	bl	80035a8 <SPI_WaitFlagStateUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01a      	beq.n	8003716 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e013      	b.n	8003718 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2200      	movs	r2, #0
 80036f8:	2180      	movs	r1, #128	; 0x80
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff ff54 	bl	80035a8 <SPI_WaitFlagStateUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e000      	b.n	8003718 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2200      	movs	r2, #0
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff ff36 	bl	80035a8 <SPI_WaitFlagStateUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e000      	b.n	8003754 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e03f      	b.n	80037ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f004 fd38 	bl	80081f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f90b 	bl	80039bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b088      	sub	sp, #32
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 8083 	bne.w	800391e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_UART_Transmit+0x2e>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e07b      	b.n	8003920 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_UART_Transmit+0x40>
 8003832:	2302      	movs	r3, #2
 8003834:	e074      	b.n	8003920 <HAL_UART_Transmit+0x12a>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2221      	movs	r2, #33	; 0x21
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800384c:	f7fd fc20 	bl	8001090 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800385e:	e042      	b.n	80038e6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003876:	d122      	bne.n	80038be <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f850 	bl	8003928 <UART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e046      	b.n	8003920 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	3302      	adds	r3, #2
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	e017      	b.n	80038e6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3301      	adds	r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	e013      	b.n	80038e6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	; 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f82d 	bl	8003928 <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e023      	b.n	8003920 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	60ba      	str	r2, [r7, #8]
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1b7      	bne.n	8003860 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f814 	bl	8003928 <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00a      	b.n	8003920 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003938:	e02c      	b.n	8003994 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d028      	beq.n	8003994 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <UART_WaitOnFlagUntilTimeout+0x30>
 8003948:	f7fd fba2 	bl	8001090 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	429a      	cmp	r2, r3
 8003956:	d21d      	bcs.n	8003994 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003966:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e00f      	b.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4013      	ands	r3, r2
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	bf0c      	ite	eq
 80039a4:	2301      	moveq	r3, #1
 80039a6:	2300      	movne	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d0c3      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039f6:	f023 030c 	bic.w	r3, r3, #12
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a52      	ldr	r2, [pc, #328]	; (8003b68 <UART_SetConfig+0x1ac>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d14e      	bne.n	8003ac2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7ff f898 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8003a28:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009a      	lsls	r2, r3, #2
 8003a34:	441a      	add	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	4a4a      	ldr	r2, [pc, #296]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	0119      	lsls	r1, r3, #4
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a60:	4b42      	ldr	r3, [pc, #264]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003a62:	fba3 0302 	umull	r0, r3, r3, r2
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	2064      	movs	r0, #100	; 0x64
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	3332      	adds	r3, #50	; 0x32
 8003a74:	4a3d      	ldr	r2, [pc, #244]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a80:	4419      	add	r1, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	009a      	lsls	r2, r3, #2
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a98:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003a9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	2064      	movs	r0, #100	; 0x64
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	3332      	adds	r3, #50	; 0x32
 8003aac:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	f003 020f 	and.w	r2, r3, #15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	440a      	add	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003ac0:	e04d      	b.n	8003b5e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7ff f835 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009a      	lsls	r2, r3, #2
 8003ad2:	441a      	add	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ade:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	0119      	lsls	r1, r3, #4
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	441a      	add	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003b00:	fba3 0302 	umull	r0, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2064      	movs	r0, #100	; 0x64
 8003b08:	fb00 f303 	mul.w	r3, r0, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3332      	adds	r3, #50	; 0x32
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1e:	4419      	add	r1, r3
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009a      	lsls	r2, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003b38:	fba3 0302 	umull	r0, r3, r3, r2
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	2064      	movs	r0, #100	; 0x64
 8003b40:	fb00 f303 	mul.w	r3, r0, r3
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	3332      	adds	r3, #50	; 0x32
 8003b4a:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <UART_SetConfig+0x1b0>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	f003 020f 	and.w	r2, r3, #15
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	51eb851f 	.word	0x51eb851f

08003b70 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b70:	b084      	sub	sp, #16
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	f107 0014 	add.w	r0, r7, #20
 8003b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	b004      	add	sp, #16
 8003b8e:	4770      	bx	lr

08003b90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b9c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr

08003bbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003bc6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003bca:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	b21a      	sxth	r2, r3
 8003bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	4013      	ands	r3, r2
 8003be0:	b21b      	sxth	r3, r3
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c0e:	b084      	sub	sp, #16
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	f107 0014 	add.w	r0, r7, #20
 8003c1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffa5 	bl	8003b90 <USB_EnableGlobalInt>

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c52:	b004      	add	sp, #16
 8003c54:	4770      	bx	lr
	...

08003c58 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c58:	b490      	push	{r4, r7}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	78db      	ldrb	r3, [r3, #3]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d819      	bhi.n	8003cba <USB_ActivateEndpoint+0x62>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <USB_ActivateEndpoint+0x34>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cb1 	.word	0x08003cb1
 8003c94:	08003cc1 	.word	0x08003cc1
 8003c98:	08003ca7 	.word	0x08003ca7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c9c:	89bb      	ldrh	r3, [r7, #12]
 8003c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca2:	81bb      	strh	r3, [r7, #12]
      break;
 8003ca4:	e00d      	b.n	8003cc2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ca6:	89bb      	ldrh	r3, [r7, #12]
 8003ca8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003cac:	81bb      	strh	r3, [r7, #12]
      break;
 8003cae:	e008      	b.n	8003cc2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003cb0:	89bb      	ldrh	r3, [r7, #12]
 8003cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb6:	81bb      	strh	r3, [r7, #12]
      break;
 8003cb8:	e003      	b.n	8003cc2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbe:	e000      	b.n	8003cc2 <USB_ActivateEndpoint+0x6a>
      break;
 8003cc0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	441a      	add	r2, r3
 8003ccc:	89bb      	ldrh	r3, [r7, #12]
 8003cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29c      	uxth	r4, r3
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	441a      	add	r2, r3
 8003d0e:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <USB_ActivateEndpoint+0x2e0>)
 8003d10:	4323      	orrs	r3, r4
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	7b1b      	ldrb	r3, [r3, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f040 8112 	bne.w	8003f44 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d067      	beq.n	8003df8 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d28:	687c      	ldr	r4, [r7, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	441c      	add	r4, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	4423      	add	r3, r4
 8003d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d40:	461c      	mov	r4, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	88db      	ldrh	r3, [r3, #6]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29c      	uxth	r4, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d014      	beq.n	8003d92 <USB_ActivateEndpoint+0x13a>
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	b29c      	uxth	r4, r3
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	4b6c      	ldr	r3, [pc, #432]	; (8003f3c <USB_ActivateEndpoint+0x2e4>)
 8003d8c:	4323      	orrs	r3, r4
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	78db      	ldrb	r3, [r3, #3]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d018      	beq.n	8003dcc <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db0:	b29c      	uxth	r4, r3
 8003db2:	f084 0320 	eor.w	r3, r4, #32
 8003db6:	b29c      	uxth	r4, r3
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <USB_ActivateEndpoint+0x2e0>)
 8003dc4:	4323      	orrs	r3, r4
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8013      	strh	r3, [r2, #0]
 8003dca:	e22b      	b.n	8004224 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de2:	b29c      	uxth	r4, r3
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <USB_ActivateEndpoint+0x2e0>)
 8003df0:	4323      	orrs	r3, r4
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	8013      	strh	r3, [r2, #0]
 8003df6:	e215      	b.n	8004224 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003df8:	687c      	ldr	r4, [r7, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	441c      	add	r4, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4423      	add	r3, r4
 8003e0c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e10:	461c      	mov	r4, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	88db      	ldrh	r3, [r3, #6]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e20:	687c      	ldr	r4, [r7, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	441c      	add	r4, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4423      	add	r3, r4
 8003e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e38:	461c      	mov	r4, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10e      	bne.n	8003e60 <USB_ActivateEndpoint+0x208>
 8003e42:	8823      	ldrh	r3, [r4, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8023      	strh	r3, [r4, #0]
 8003e4e:	8823      	ldrh	r3, [r4, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8023      	strh	r3, [r4, #0]
 8003e5e:	e02d      	b.n	8003ebc <USB_ActivateEndpoint+0x264>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	2b3e      	cmp	r3, #62	; 0x3e
 8003e66:	d812      	bhi.n	8003e8e <USB_ActivateEndpoint+0x236>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	60bb      	str	r3, [r7, #8]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <USB_ActivateEndpoint+0x22a>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	029b      	lsls	r3, r3, #10
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8023      	strh	r3, [r4, #0]
 8003e8c:	e016      	b.n	8003ebc <USB_ActivateEndpoint+0x264>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <USB_ActivateEndpoint+0x250>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29c      	uxth	r4, r3
 8003eca:	4623      	mov	r3, r4
 8003ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d014      	beq.n	8003efe <USB_ActivateEndpoint+0x2a6>
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	b29c      	uxth	r4, r3
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <USB_ActivateEndpoint+0x2e8>)
 8003ef8:	4323      	orrs	r3, r4
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f14:	b29c      	uxth	r4, r3
 8003f16:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003f1a:	b29c      	uxth	r4, r3
 8003f1c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003f20:	b29c      	uxth	r4, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	4b02      	ldr	r3, [pc, #8]	; (8003f38 <USB_ActivateEndpoint+0x2e0>)
 8003f2e:	4323      	orrs	r3, r4
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	8013      	strh	r3, [r2, #0]
 8003f34:	e176      	b.n	8004224 <USB_ActivateEndpoint+0x5cc>
 8003f36:	bf00      	nop
 8003f38:	ffff8080 	.word	0xffff8080
 8003f3c:	ffff80c0 	.word	0xffff80c0
 8003f40:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5a:	b29c      	uxth	r4, r3
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	4b96      	ldr	r3, [pc, #600]	; (80041c0 <USB_ActivateEndpoint+0x568>)
 8003f68:	4323      	orrs	r3, r4
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f6e:	687c      	ldr	r4, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	441c      	add	r4, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4423      	add	r3, r4
 8003f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f86:	461c      	mov	r4, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	891b      	ldrh	r3, [r3, #8]
 8003f8c:	085b      	lsrs	r3, r3, #1
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8023      	strh	r3, [r4, #0]
 8003f96:	687c      	ldr	r4, [r7, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	441c      	add	r4, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4423      	add	r3, r4
 8003faa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fae:	461c      	mov	r4, r3
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	895b      	ldrh	r3, [r3, #10]
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 8088 	bne.w	80040d8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	b29c      	uxth	r4, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d014      	beq.n	800400a <USB_ActivateEndpoint+0x3b2>
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff6:	b29c      	uxth	r4, r3
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	4b70      	ldr	r3, [pc, #448]	; (80041c4 <USB_ActivateEndpoint+0x56c>)
 8004004:	4323      	orrs	r3, r4
 8004006:	b29b      	uxth	r3, r3
 8004008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29c      	uxth	r4, r3
 8004018:	4623      	mov	r3, r4
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d014      	beq.n	800404c <USB_ActivateEndpoint+0x3f4>
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	b29c      	uxth	r4, r3
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	4b60      	ldr	r3, [pc, #384]	; (80041c8 <USB_ActivateEndpoint+0x570>)
 8004046:	4323      	orrs	r3, r4
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	b29c      	uxth	r4, r3
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	4b56      	ldr	r3, [pc, #344]	; (80041c8 <USB_ActivateEndpoint+0x570>)
 8004070:	4323      	orrs	r3, r4
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408c:	b29c      	uxth	r4, r3
 800408e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004092:	b29c      	uxth	r4, r3
 8004094:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004098:	b29c      	uxth	r4, r3
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	4b49      	ldr	r3, [pc, #292]	; (80041cc <USB_ActivateEndpoint+0x574>)
 80040a6:	4323      	orrs	r3, r4
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c2:	b29c      	uxth	r4, r3
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	441a      	add	r2, r3
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <USB_ActivateEndpoint+0x574>)
 80040d0:	4323      	orrs	r3, r4
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	8013      	strh	r3, [r2, #0]
 80040d6:	e0a5      	b.n	8004224 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29c      	uxth	r4, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d014      	beq.n	800411a <USB_ActivateEndpoint+0x4c2>
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	b29c      	uxth	r4, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <USB_ActivateEndpoint+0x56c>)
 8004114:	4323      	orrs	r3, r4
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29c      	uxth	r4, r3
 8004128:	4623      	mov	r3, r4
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d014      	beq.n	800415c <USB_ActivateEndpoint+0x504>
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	b29c      	uxth	r4, r3
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	441a      	add	r2, r3
 8004154:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <USB_ActivateEndpoint+0x570>)
 8004156:	4323      	orrs	r3, r4
 8004158:	b29b      	uxth	r3, r3
 800415a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	b29c      	uxth	r4, r3
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	441a      	add	r2, r3
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <USB_ActivateEndpoint+0x56c>)
 8004180:	4323      	orrs	r3, r4
 8004182:	b29b      	uxth	r3, r3
 8004184:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	78db      	ldrb	r3, [r3, #3]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d020      	beq.n	80041d0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	b29c      	uxth	r4, r3
 80041a6:	f084 0320 	eor.w	r3, r4, #32
 80041aa:	b29c      	uxth	r4, r3
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <USB_ActivateEndpoint+0x574>)
 80041b8:	4323      	orrs	r3, r4
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	8013      	strh	r3, [r2, #0]
 80041be:	e01c      	b.n	80041fa <USB_ActivateEndpoint+0x5a2>
 80041c0:	ffff8180 	.word	0xffff8180
 80041c4:	ffffc080 	.word	0xffffc080
 80041c8:	ffff80c0 	.word	0xffff80c0
 80041cc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e6:	b29c      	uxth	r4, r3
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <USB_ActivateEndpoint+0x5d8>)
 80041f4:	4323      	orrs	r3, r4
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004210:	b29c      	uxth	r4, r3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	441a      	add	r2, r3
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <USB_ActivateEndpoint+0x5d8>)
 800421e:	4323      	orrs	r3, r4
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bc90      	pop	{r4, r7}
 800422e:	4770      	bx	lr
 8004230:	ffff8080 	.word	0xffff8080

08004234 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004234:	b490      	push	{r4, r7}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	7b1b      	ldrb	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d171      	bne.n	800432a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d036      	beq.n	80042bc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29c      	uxth	r4, r3
 800425c:	4623      	mov	r3, r4
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d014      	beq.n	8004290 <USB_DeactivateEndpoint+0x5c>
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427c:	b29c      	uxth	r4, r3
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	441a      	add	r2, r3
 8004288:	4b6b      	ldr	r3, [pc, #428]	; (8004438 <USB_DeactivateEndpoint+0x204>)
 800428a:	4323      	orrs	r3, r4
 800428c:	b29b      	uxth	r3, r3
 800428e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a6:	b29c      	uxth	r4, r3
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	4b62      	ldr	r3, [pc, #392]	; (800443c <USB_DeactivateEndpoint+0x208>)
 80042b4:	4323      	orrs	r3, r4
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8013      	strh	r3, [r2, #0]
 80042ba:	e144      	b.n	8004546 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29c      	uxth	r4, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d014      	beq.n	80042fe <USB_DeactivateEndpoint+0xca>
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	b29c      	uxth	r4, r3
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	4b52      	ldr	r3, [pc, #328]	; (8004440 <USB_DeactivateEndpoint+0x20c>)
 80042f8:	4323      	orrs	r3, r4
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004314:	b29c      	uxth	r4, r3
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	4b46      	ldr	r3, [pc, #280]	; (800443c <USB_DeactivateEndpoint+0x208>)
 8004322:	4323      	orrs	r3, r4
 8004324:	b29b      	uxth	r3, r3
 8004326:	8013      	strh	r3, [r2, #0]
 8004328:	e10d      	b.n	8004546 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	785b      	ldrb	r3, [r3, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 8088 	bne.w	8004444 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29c      	uxth	r4, r3
 8004342:	4623      	mov	r3, r4
 8004344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d014      	beq.n	8004376 <USB_DeactivateEndpoint+0x142>
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	b29c      	uxth	r4, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	4b34      	ldr	r3, [pc, #208]	; (8004440 <USB_DeactivateEndpoint+0x20c>)
 8004370:	4323      	orrs	r3, r4
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29c      	uxth	r4, r3
 8004384:	4623      	mov	r3, r4
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d014      	beq.n	80043b8 <USB_DeactivateEndpoint+0x184>
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a4:	b29c      	uxth	r4, r3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	4b21      	ldr	r3, [pc, #132]	; (8004438 <USB_DeactivateEndpoint+0x204>)
 80043b2:	4323      	orrs	r3, r4
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ce:	b29c      	uxth	r4, r3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <USB_DeactivateEndpoint+0x204>)
 80043dc:	4323      	orrs	r3, r4
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	b29c      	uxth	r4, r3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <USB_DeactivateEndpoint+0x208>)
 8004406:	4323      	orrs	r3, r4
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004422:	b29c      	uxth	r4, r3
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	441a      	add	r2, r3
 800442e:	4b03      	ldr	r3, [pc, #12]	; (800443c <USB_DeactivateEndpoint+0x208>)
 8004430:	4323      	orrs	r3, r4
 8004432:	b29b      	uxth	r3, r3
 8004434:	8013      	strh	r3, [r2, #0]
 8004436:	e086      	b.n	8004546 <USB_DeactivateEndpoint+0x312>
 8004438:	ffff80c0 	.word	0xffff80c0
 800443c:	ffff8080 	.word	0xffff8080
 8004440:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29c      	uxth	r4, r3
 8004452:	4623      	mov	r3, r4
 8004454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d014      	beq.n	8004486 <USB_DeactivateEndpoint+0x252>
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	b29c      	uxth	r4, r3
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	4b35      	ldr	r3, [pc, #212]	; (8004554 <USB_DeactivateEndpoint+0x320>)
 8004480:	4323      	orrs	r3, r4
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29c      	uxth	r4, r3
 8004494:	4623      	mov	r3, r4
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d014      	beq.n	80044c8 <USB_DeactivateEndpoint+0x294>
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b4:	b29c      	uxth	r4, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <USB_DeactivateEndpoint+0x324>)
 80044c2:	4323      	orrs	r3, r4
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	b29c      	uxth	r4, r3
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	441a      	add	r2, r3
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <USB_DeactivateEndpoint+0x320>)
 80044ec:	4323      	orrs	r3, r4
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004508:	b29c      	uxth	r4, r3
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <USB_DeactivateEndpoint+0x328>)
 8004516:	4323      	orrs	r3, r4
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	b29c      	uxth	r4, r3
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	441a      	add	r2, r3
 800453e:	4b07      	ldr	r3, [pc, #28]	; (800455c <USB_DeactivateEndpoint+0x328>)
 8004540:	4323      	orrs	r3, r4
 8004542:	b29b      	uxth	r3, r3
 8004544:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bc90      	pop	{r4, r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	ffffc080 	.word	0xffffc080
 8004558:	ffff80c0 	.word	0xffff80c0
 800455c:	ffff8080 	.word	0xffff8080

08004560 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b08d      	sub	sp, #52	; 0x34
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	785b      	ldrb	r3, [r3, #1]
 800456e:	2b01      	cmp	r3, #1
 8004570:	f040 8160 	bne.w	8004834 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d909      	bls.n	8004594 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	1ad2      	subs	r2, r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	619a      	str	r2, [r3, #24]
 8004592:	e005      	b.n	80045a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2200      	movs	r2, #0
 800459e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	7b1b      	ldrb	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d119      	bne.n	80045dc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6959      	ldr	r1, [r3, #20]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	88da      	ldrh	r2, [r3, #6]
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fba2 	bl	8004cfe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045ba:	687c      	ldr	r4, [r7, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	441c      	add	r4, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	4423      	add	r3, r4
 80045ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045d2:	461c      	mov	r4, r3
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	8023      	strh	r3, [r4, #0]
 80045da:	e10f      	b.n	80047fc <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d065      	beq.n	80046be <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045f2:	687c      	ldr	r4, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d148      	bne.n	800468e <USB_EPStartXfer+0x12e>
 80045fc:	687c      	ldr	r4, [r7, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004604:	b29b      	uxth	r3, r3
 8004606:	441c      	add	r4, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4423      	add	r3, r4
 8004610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004614:	461c      	mov	r4, r3
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10e      	bne.n	800463a <USB_EPStartXfer+0xda>
 800461c:	8823      	ldrh	r3, [r4, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004624:	b29b      	uxth	r3, r3
 8004626:	8023      	strh	r3, [r4, #0]
 8004628:	8823      	ldrh	r3, [r4, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004634:	b29b      	uxth	r3, r3
 8004636:	8023      	strh	r3, [r4, #0]
 8004638:	e03d      	b.n	80046b6 <USB_EPStartXfer+0x156>
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	2b3e      	cmp	r3, #62	; 0x3e
 800463e:	d810      	bhi.n	8004662 <USB_EPStartXfer+0x102>
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <USB_EPStartXfer+0xf6>
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	3301      	adds	r3, #1
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	b29b      	uxth	r3, r3
 800465a:	029b      	lsls	r3, r3, #10
 800465c:	b29b      	uxth	r3, r3
 800465e:	8023      	strh	r3, [r4, #0]
 8004660:	e029      	b.n	80046b6 <USB_EPStartXfer+0x156>
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <USB_EPStartXfer+0x118>
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	3b01      	subs	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	b29b      	uxth	r3, r3
 800467c:	029b      	lsls	r3, r3, #10
 800467e:	b29b      	uxth	r3, r3
 8004680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004688:	b29b      	uxth	r3, r3
 800468a:	8023      	strh	r3, [r4, #0]
 800468c:	e013      	b.n	80046b6 <USB_EPStartXfer+0x156>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d10f      	bne.n	80046b6 <USB_EPStartXfer+0x156>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469c:	b29b      	uxth	r3, r3
 800469e:	441c      	add	r4, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	4423      	add	r3, r4
 80046a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	895b      	ldrh	r3, [r3, #10]
 80046ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046bc:	e063      	b.n	8004786 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d148      	bne.n	8004758 <USB_EPStartXfer+0x1f8>
 80046c6:	687c      	ldr	r4, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	441c      	add	r4, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	4423      	add	r3, r4
 80046da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046de:	461c      	mov	r4, r3
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10e      	bne.n	8004704 <USB_EPStartXfer+0x1a4>
 80046e6:	8823      	ldrh	r3, [r4, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8023      	strh	r3, [r4, #0]
 80046f2:	8823      	ldrh	r3, [r4, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fe:	b29b      	uxth	r3, r3
 8004700:	8023      	strh	r3, [r4, #0]
 8004702:	e03d      	b.n	8004780 <USB_EPStartXfer+0x220>
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	2b3e      	cmp	r3, #62	; 0x3e
 8004708:	d810      	bhi.n	800472c <USB_EPStartXfer+0x1cc>
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	623b      	str	r3, [r7, #32]
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <USB_EPStartXfer+0x1c0>
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	3301      	adds	r3, #1
 800471e:	623b      	str	r3, [r7, #32]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	b29b      	uxth	r3, r3
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	b29b      	uxth	r3, r3
 8004728:	8023      	strh	r3, [r4, #0]
 800472a:	e029      	b.n	8004780 <USB_EPStartXfer+0x220>
 800472c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	623b      	str	r3, [r7, #32]
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <USB_EPStartXfer+0x1e2>
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	3b01      	subs	r3, #1
 8004740:	623b      	str	r3, [r7, #32]
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	b29b      	uxth	r3, r3
 8004746:	029b      	lsls	r3, r3, #10
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004752:	b29b      	uxth	r3, r3
 8004754:	8023      	strh	r3, [r4, #0]
 8004756:	e013      	b.n	8004780 <USB_EPStartXfer+0x220>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10f      	bne.n	8004780 <USB_EPStartXfer+0x220>
 8004760:	687c      	ldr	r4, [r7, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004768:	b29b      	uxth	r3, r3
 800476a:	441c      	add	r4, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	4423      	add	r3, r4
 8004774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004778:	461c      	mov	r4, r3
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	b29b      	uxth	r3, r3
 800477e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	891b      	ldrh	r3, [r3, #8]
 8004784:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6959      	ldr	r1, [r3, #20]
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	b29b      	uxth	r3, r3
 800478e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fab4 	bl	8004cfe <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d115      	bne.n	80047ca <USB_EPStartXfer+0x26a>
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	b29c      	uxth	r4, r3
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	441a      	add	r2, r3
 80047c0:	4b9a      	ldr	r3, [pc, #616]	; (8004a2c <USB_EPStartXfer+0x4cc>)
 80047c2:	4323      	orrs	r3, r4
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	8013      	strh	r3, [r2, #0]
 80047c8:	e018      	b.n	80047fc <USB_EPStartXfer+0x29c>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d114      	bne.n	80047fc <USB_EPStartXfer+0x29c>
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e8:	b29c      	uxth	r4, r3
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <USB_EPStartXfer+0x4d0>)
 80047f6:	4323      	orrs	r3, r4
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	b29c      	uxth	r4, r3
 8004814:	f084 0310 	eor.w	r3, r4, #16
 8004818:	b29c      	uxth	r4, r3
 800481a:	f084 0320 	eor.w	r3, r4, #32
 800481e:	b29c      	uxth	r4, r3
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	4b82      	ldr	r3, [pc, #520]	; (8004a34 <USB_EPStartXfer+0x4d4>)
 800482c:	4323      	orrs	r3, r4
 800482e:	b29b      	uxth	r3, r3
 8004830:	8013      	strh	r3, [r2, #0]
 8004832:	e146      	b.n	8004ac2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	429a      	cmp	r2, r3
 800483e:	d909      	bls.n	8004854 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	1ad2      	subs	r2, r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	619a      	str	r2, [r3, #24]
 8004852:	e005      	b.n	8004860 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2200      	movs	r2, #0
 800485e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	7b1b      	ldrb	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d148      	bne.n	80048fa <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004868:	687c      	ldr	r4, [r7, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004870:	b29b      	uxth	r3, r3
 8004872:	441c      	add	r4, r3
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4423      	add	r3, r4
 800487c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004880:	461c      	mov	r4, r3
 8004882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10e      	bne.n	80048a6 <USB_EPStartXfer+0x346>
 8004888:	8823      	ldrh	r3, [r4, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004890:	b29b      	uxth	r3, r3
 8004892:	8023      	strh	r3, [r4, #0]
 8004894:	8823      	ldrh	r3, [r4, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8023      	strh	r3, [r4, #0]
 80048a4:	e0f2      	b.n	8004a8c <USB_EPStartXfer+0x52c>
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	2b3e      	cmp	r3, #62	; 0x3e
 80048aa:	d810      	bhi.n	80048ce <USB_EPStartXfer+0x36e>
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d002      	beq.n	80048c2 <USB_EPStartXfer+0x362>
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	3301      	adds	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8023      	strh	r3, [r4, #0]
 80048cc:	e0de      	b.n	8004a8c <USB_EPStartXfer+0x52c>
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <USB_EPStartXfer+0x384>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	8023      	strh	r3, [r4, #0]
 80048f8:	e0c8      	b.n	8004a8c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d148      	bne.n	8004994 <USB_EPStartXfer+0x434>
 8004902:	687c      	ldr	r4, [r7, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490a:	b29b      	uxth	r3, r3
 800490c:	441c      	add	r4, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	4423      	add	r3, r4
 8004916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800491a:	461c      	mov	r4, r3
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10e      	bne.n	8004940 <USB_EPStartXfer+0x3e0>
 8004922:	8823      	ldrh	r3, [r4, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800492a:	b29b      	uxth	r3, r3
 800492c:	8023      	strh	r3, [r4, #0]
 800492e:	8823      	ldrh	r3, [r4, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493a:	b29b      	uxth	r3, r3
 800493c:	8023      	strh	r3, [r4, #0]
 800493e:	e03d      	b.n	80049bc <USB_EPStartXfer+0x45c>
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	2b3e      	cmp	r3, #62	; 0x3e
 8004944:	d810      	bhi.n	8004968 <USB_EPStartXfer+0x408>
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <USB_EPStartXfer+0x3fc>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	3301      	adds	r3, #1
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	b29b      	uxth	r3, r3
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	b29b      	uxth	r3, r3
 8004964:	8023      	strh	r3, [r4, #0]
 8004966:	e029      	b.n	80049bc <USB_EPStartXfer+0x45c>
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	f003 031f 	and.w	r3, r3, #31
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <USB_EPStartXfer+0x41e>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	3b01      	subs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	b29b      	uxth	r3, r3
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498e:	b29b      	uxth	r3, r3
 8004990:	8023      	strh	r3, [r4, #0]
 8004992:	e013      	b.n	80049bc <USB_EPStartXfer+0x45c>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10f      	bne.n	80049bc <USB_EPStartXfer+0x45c>
 800499c:	687c      	ldr	r4, [r7, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	441c      	add	r4, r3
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4423      	add	r3, r4
 80049b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049b4:	461c      	mov	r4, r3
 80049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8023      	strh	r3, [r4, #0]
 80049bc:	687c      	ldr	r4, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d14e      	bne.n	8004a64 <USB_EPStartXfer+0x504>
 80049c6:	687c      	ldr	r4, [r7, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	441c      	add	r4, r3
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	4423      	add	r3, r4
 80049da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049de:	461c      	mov	r4, r3
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <USB_EPStartXfer+0x4a4>
 80049e6:	8823      	ldrh	r3, [r4, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8023      	strh	r3, [r4, #0]
 80049f2:	8823      	ldrh	r3, [r4, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8023      	strh	r3, [r4, #0]
 8004a02:	e043      	b.n	8004a8c <USB_EPStartXfer+0x52c>
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	2b3e      	cmp	r3, #62	; 0x3e
 8004a08:	d816      	bhi.n	8004a38 <USB_EPStartXfer+0x4d8>
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <USB_EPStartXfer+0x4c0>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	8023      	strh	r3, [r4, #0]
 8004a2a:	e02f      	b.n	8004a8c <USB_EPStartXfer+0x52c>
 8004a2c:	ffff80c0 	.word	0xffff80c0
 8004a30:	ffffc080 	.word	0xffffc080
 8004a34:	ffff8080 	.word	0xffff8080
 8004a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <USB_EPStartXfer+0x4ee>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8023      	strh	r3, [r4, #0]
 8004a62:	e013      	b.n	8004a8c <USB_EPStartXfer+0x52c>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10f      	bne.n	8004a8c <USB_EPStartXfer+0x52c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	441c      	add	r4, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	4423      	add	r3, r4
 8004a7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa2:	b29c      	uxth	r4, r3
 8004aa4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004aa8:	b29c      	uxth	r4, r3
 8004aaa:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004aae:	b29c      	uxth	r4, r3
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <USB_EPStartXfer+0x56c>)
 8004abc:	4323      	orrs	r3, r4
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3734      	adds	r7, #52	; 0x34
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	ffff8080 	.word	0xffff8080

08004ad0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad0:	b490      	push	{r4, r7}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	785b      	ldrb	r3, [r3, #1]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	b29c      	uxth	r4, r3
 8004afa:	f084 0310 	eor.w	r3, r4, #16
 8004afe:	b29c      	uxth	r4, r3
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	441a      	add	r2, r3
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <USB_EPSetStall+0x80>)
 8004b0c:	4323      	orrs	r3, r4
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8013      	strh	r3, [r2, #0]
 8004b12:	e017      	b.n	8004b44 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	b29c      	uxth	r4, r3
 8004b2c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004b30:	b29c      	uxth	r4, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	441a      	add	r2, r3
 8004b3c:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <USB_EPSetStall+0x80>)
 8004b3e:	4323      	orrs	r3, r4
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc90      	pop	{r4, r7}
 8004b4e:	4770      	bx	lr
 8004b50:	ffff8080 	.word	0xffff8080

08004b54 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b54:	b490      	push	{r4, r7}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	7b1b      	ldrb	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d17d      	bne.n	8004c62 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	785b      	ldrb	r3, [r3, #1]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d03d      	beq.n	8004bea <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29c      	uxth	r4, r3
 8004b7c:	4623      	mov	r3, r4
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <USB_EPClearStall+0x5c>
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	b29c      	uxth	r4, r3
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <USB_EPClearStall+0x11c>)
 8004baa:	4323      	orrs	r3, r4
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	78db      	ldrb	r3, [r3, #3]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d054      	beq.n	8004c62 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bce:	b29c      	uxth	r4, r3
 8004bd0:	f084 0320 	eor.w	r3, r4, #32
 8004bd4:	b29c      	uxth	r4, r3
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <USB_EPClearStall+0x120>)
 8004be2:	4323      	orrs	r3, r4
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]
 8004be8:	e03b      	b.n	8004c62 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b29c      	uxth	r4, r3
 8004bf8:	4623      	mov	r3, r4
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d014      	beq.n	8004c2c <USB_EPClearStall+0xd8>
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	b29c      	uxth	r4, r3
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <USB_EPClearStall+0x124>)
 8004c26:	4323      	orrs	r3, r4
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	881b      	ldrh	r3, [r3, #0]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	b29c      	uxth	r4, r3
 8004c44:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004c48:	b29c      	uxth	r4, r3
 8004c4a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004c4e:	b29c      	uxth	r4, r3
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <USB_EPClearStall+0x120>)
 8004c5c:	4323      	orrs	r3, r4
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc90      	pop	{r4, r7}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	ffff80c0 	.word	0xffff80c0
 8004c74:	ffff8080 	.word	0xffff8080
 8004c78:	ffffc080 	.word	0xffffc080

08004c7c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2280      	movs	r2, #128	; 0x80
 8004c92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b08d      	sub	sp, #52	; 0x34
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	4611      	mov	r1, r2
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	80fb      	strh	r3, [r7, #6]
 8004d10:	4613      	mov	r3, r2
 8004d12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d14:	88bb      	ldrh	r3, [r7, #4]
 8004d16:	3301      	adds	r3, #1
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	005a      	lsls	r2, r3, #1
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	e01e      	b.n	8004d76 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	3301      	adds	r3, #1
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	3302      	adds	r3, #2
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	3302      	adds	r3, #2
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	3b01      	subs	r3, #1
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1dd      	bne.n	8004d38 <USB_WritePMA+0x3a>
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3734      	adds	r7, #52	; 0x34
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b08b      	sub	sp, #44	; 0x2c
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	4611      	mov	r1, r2
 8004d92:	461a      	mov	r2, r3
 8004d94:	460b      	mov	r3, r1
 8004d96:	80fb      	strh	r3, [r7, #6]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d9c:	88bb      	ldrh	r3, [r7, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	005a      	lsls	r2, r3, #1
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004db8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbe:	e01b      	b.n	8004df8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	3302      	adds	r3, #2
 8004dcc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	3302      	adds	r3, #2
 8004df0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	3b01      	subs	r3, #1
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e0      	bne.n	8004dc0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004dfe:	88bb      	ldrh	r3, [r7, #4]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	701a      	strb	r2, [r3, #0]
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	372c      	adds	r7, #44	; 0x2c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004e34:	2340      	movs	r3, #64	; 0x40
 8004e36:	2203      	movs	r2, #3
 8004e38:	2181      	movs	r1, #129	; 0x81
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f003 fc13 	bl	8008666 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	2203      	movs	r2, #3
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f003 fc0a 	bl	8008666 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004e5a:	2054      	movs	r0, #84	; 0x54
 8004e5c:	f003 fd10 	bl	8008880 <USBD_static_malloc>
 8004e60:	4602      	mov	r2, r0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
 8004e76:	e012      	b.n	8004e9e <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e7e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	2340      	movs	r3, #64	; 0x40
 8004e96:	2101      	movs	r1, #1
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f003 fcce 	bl	800883a <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004eb4:	2181      	movs	r1, #129	; 0x81
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f003 fbfb 	bl	80086b2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f003 fbf4 	bl	80086b2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00e      	beq.n	8004efa <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 fcd3 	bl	8008898 <USBD_static_free>
    pdev->pClassData = NULL;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f14:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d051      	beq.n	8004fd6 <USBD_CUSTOM_HID_Setup+0xd2>
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	f040 80d8 	bne.w	80050e8 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	3b02      	subs	r3, #2
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	d841      	bhi.n	8004fc6 <USBD_CUSTOM_HID_Setup+0xc2>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <USBD_CUSTOM_HID_Setup+0x44>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004fa1 	.word	0x08004fa1
 8004f4c:	08004f7f 	.word	0x08004f7f
 8004f50:	08004fc7 	.word	0x08004fc7
 8004f54:	08004fc7 	.word	0x08004fc7
 8004f58:	08004fc7 	.word	0x08004fc7
 8004f5c:	08004fc7 	.word	0x08004fc7
 8004f60:	08004fc7 	.word	0x08004fc7
 8004f64:	08004fb1 	.word	0x08004fb1
 8004f68:	08004f8f 	.word	0x08004f8f
 8004f6c:	08004f71 	.word	0x08004f71
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	885b      	ldrh	r3, [r3, #2]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8004f7c:	e02a      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	3340      	adds	r3, #64	; 0x40
 8004f82:	2201      	movs	r2, #1
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 f96a 	bl	8006260 <USBD_CtlSendData>
          break;
 8004f8c:	e022      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	885b      	ldrh	r3, [r3, #2]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8004f9e:	e019      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	3344      	adds	r3, #68	; 0x44
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 f959 	bl	8006260 <USBD_CtlSendData>
          break;
 8004fae:	e011      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004fb6:	6939      	ldr	r1, [r7, #16]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	88db      	ldrh	r3, [r3, #6]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f001 f97c 	bl	80062bc <USBD_CtlPrepareRx>
          break;
 8004fc4:	e006      	b.n	8004fd4 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f001 f8df 	bl	800618c <USBD_CtlError>
          ret = USBD_FAIL;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd2:	bf00      	nop
      }
      break;
 8004fd4:	e08f      	b.n	80050f6 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b0b      	cmp	r3, #11
 8004fdc:	d87c      	bhi.n	80050d8 <USBD_CUSTOM_HID_Setup+0x1d4>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	080050d9 	.word	0x080050d9
 8004fec:	080050d9 	.word	0x080050d9
 8004ff0:	080050d9 	.word	0x080050d9
 8004ff4:	080050d9 	.word	0x080050d9
 8004ff8:	080050d9 	.word	0x080050d9
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	080050d9 	.word	0x080050d9
 8005004:	080050d9 	.word	0x080050d9
 8005008:	080050d9 	.word	0x080050d9
 800500c:	0800508b 	.word	0x0800508b
 8005010:	080050b3 	.word	0x080050b3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501a:	2b03      	cmp	r3, #3
 800501c:	d107      	bne.n	800502e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800501e:	f107 030e 	add.w	r3, r7, #14
 8005022:	2202      	movs	r2, #2
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 f91a 	bl	8006260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800502c:	e05b      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 f8ab 	bl	800618c <USBD_CtlError>
            ret = USBD_FAIL;
 8005036:	2302      	movs	r3, #2
 8005038:	75fb      	strb	r3, [r7, #23]
          break;
 800503a:	e054      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	885b      	ldrh	r3, [r3, #2]
 8005040:	0a1b      	lsrs	r3, r3, #8
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b22      	cmp	r3, #34	; 0x22
 8005046:	d10b      	bne.n	8005060 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	88db      	ldrh	r3, [r3, #6]
 800504c:	2b20      	cmp	r3, #32
 800504e:	bf28      	it	cs
 8005050:	2320      	movcs	r3, #32
 8005052:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	e00d      	b.n	800507c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	885b      	ldrh	r3, [r3, #2]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b21      	cmp	r3, #33	; 0x21
 800506a:	d107      	bne.n	800507c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800506c:	4b24      	ldr	r3, [pc, #144]	; (8005100 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800506e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	88db      	ldrh	r3, [r3, #6]
 8005074:	2b09      	cmp	r3, #9
 8005076:	bf28      	it	cs
 8005078:	2309      	movcs	r3, #9
 800507a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800507c:	8bfb      	ldrh	r3, [r7, #30]
 800507e:	461a      	mov	r2, r3
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 f8ec 	bl	8006260 <USBD_CtlSendData>
          break;
 8005088:	e02d      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005090:	2b03      	cmp	r3, #3
 8005092:	d107      	bne.n	80050a4 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	3348      	adds	r3, #72	; 0x48
 8005098:	2201      	movs	r2, #1
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 f8df 	bl	8006260 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050a2:	e020      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80050a4:	6839      	ldr	r1, [r7, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f001 f870 	bl	800618c <USBD_CtlError>
            ret = USBD_FAIL;
 80050ac:	2302      	movs	r3, #2
 80050ae:	75fb      	strb	r3, [r7, #23]
          break;
 80050b0:	e019      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d106      	bne.n	80050ca <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	885b      	ldrh	r3, [r3, #2]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050c8:	e00d      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 f85d 	bl	800618c <USBD_CtlError>
            ret = USBD_FAIL;
 80050d2:	2302      	movs	r3, #2
 80050d4:	75fb      	strb	r3, [r7, #23]
          break;
 80050d6:	e006      	b.n	80050e6 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 f856 	bl	800618c <USBD_CtlError>
          ret = USBD_FAIL;
 80050e0:	2302      	movs	r3, #2
 80050e2:	75fb      	strb	r3, [r7, #23]
          break;
 80050e4:	bf00      	nop
      }
      break;
 80050e6:	e006      	b.n	80050f6 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 f84e 	bl	800618c <USBD_CtlError>
      ret = USBD_FAIL;
 80050f0:	2302      	movs	r3, #2
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	bf00      	nop
  }
  return ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	200000c4 	.word	0x200000c4

08005104 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2229      	movs	r2, #41	; 0x29
 8005110:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8005112:	4b03      	ldr	r3, [pc, #12]	; (8005120 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000040 	.word	0x20000040

08005124 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2229      	movs	r2, #41	; 0x29
 8005130:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	2000006c 	.word	0x2000006c

08005144 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2229      	movs	r2, #41	; 0x29
 8005150:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000098 	.word	0x20000098

08005164 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519a:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	7810      	ldrb	r0, [r2, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	7852      	ldrb	r2, [r2, #1]
 80051ac:	4611      	mov	r1, r2
 80051ae:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	2340      	movs	r3, #64	; 0x40
 80051b4:	2101      	movs	r1, #1
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f003 fb3f 	bl	800883a <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d4:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d10c      	bne.n	80051f8 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	7810      	ldrb	r0, [r2, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	7852      	ldrb	r2, [r2, #1]
 80051ee:	4611      	mov	r1, r2
 80051f0:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	220a      	movs	r2, #10
 8005210:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	200000d0 	.word	0x200000d0

08005224 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800522e:	2302      	movs	r3, #2
 8005230:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005264:	2302      	movs	r3, #2
 8005266:	e01a      	b.n	800529e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	79fa      	ldrb	r2, [r7, #7]
 8005294:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f003 f97a 	bl	8008590 <USBD_LL_Init>

  return USBD_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
 80052c6:	e001      	b.n	80052cc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80052c8:	2302      	movs	r3, #2
 80052ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr

080052d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f003 f9a5 	bl	8008630 <USBD_LL_Start>

  return USBD_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005310:	2302      	movs	r3, #2
 8005312:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	4611      	mov	r1, r2
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	78fa      	ldrb	r2, [r7, #3]
 8005358:	4611      	mov	r1, r2
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	4798      	blx	r3

  return USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 feca 	bl	8006114 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d00c      	beq.n	80053be <USBD_LL_SetupStage+0x56>
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d302      	bcc.n	80053ae <USBD_LL_SetupStage+0x46>
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d010      	beq.n	80053ce <USBD_LL_SetupStage+0x66>
 80053ac:	e017      	b.n	80053de <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f9ca 	bl	8005750 <USBD_StdDevReq>
      break;
 80053bc:	e01a      	b.n	80053f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fa2c 	bl	8005824 <USBD_StdItfReq>
      break;
 80053cc:	e012      	b.n	80053f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa6a 	bl	80058b0 <USBD_StdEPReq>
      break;
 80053dc:	e00a      	b.n	80053f4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f003 f97f 	bl	80086f0 <USBD_LL_StallEP>
      break;
 80053f2:	bf00      	nop
  }

  return USBD_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	460b      	mov	r3, r1
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800540c:	7afb      	ldrb	r3, [r7, #11]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d14b      	bne.n	80054aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005418:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005420:	2b03      	cmp	r3, #3
 8005422:	d134      	bne.n	800548e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	429a      	cmp	r2, r3
 800542e:	d919      	bls.n	8005464 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	1ad2      	subs	r2, r2, r3
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005446:	429a      	cmp	r2, r3
 8005448:	d203      	bcs.n	8005452 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800544e:	b29b      	uxth	r3, r3
 8005450:	e002      	b.n	8005458 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005456:	b29b      	uxth	r3, r3
 8005458:	461a      	mov	r2, r3
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 ff4b 	bl	80062f8 <USBD_CtlContinueRx>
 8005462:	e038      	b.n	80054d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005476:	2b03      	cmp	r3, #3
 8005478:	d105      	bne.n	8005486 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 ff48 	bl	800631c <USBD_CtlSendStatus>
 800548c:	e023      	b.n	80054d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005494:	2b05      	cmp	r3, #5
 8005496:	d11e      	bne.n	80054d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80054a0:	2100      	movs	r1, #0
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f003 f924 	bl	80086f0 <USBD_LL_StallEP>
 80054a8:	e015      	b.n	80054d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d108      	bne.n	80054d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	7afa      	ldrb	r2, [r7, #11]
 80054ca:	4611      	mov	r1, r2
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	4798      	blx	r3
 80054d0:	e001      	b.n	80054d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054d2:	2302      	movs	r3, #2
 80054d4:	e000      	b.n	80054d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	460b      	mov	r3, r1
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054ee:	7afb      	ldrb	r3, [r7, #11]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d17f      	bne.n	80055f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3314      	adds	r3, #20
 80054f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005500:	2b02      	cmp	r3, #2
 8005502:	d15c      	bne.n	80055be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d915      	bls.n	800553c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	1ad2      	subs	r2, r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 feb5 	bl	8006298 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800552e:	2300      	movs	r3, #0
 8005530:	2200      	movs	r2, #0
 8005532:	2100      	movs	r1, #0
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f003 f980 	bl	800883a <USBD_LL_PrepareReceive>
 800553a:	e04e      	b.n	80055da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	6912      	ldr	r2, [r2, #16]
 8005544:	fbb3 f1f2 	udiv	r1, r3, r2
 8005548:	fb02 f201 	mul.w	r2, r2, r1
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d11c      	bne.n	800558c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800555a:	429a      	cmp	r2, r3
 800555c:	d316      	bcc.n	800558c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005568:	429a      	cmp	r2, r3
 800556a:	d20f      	bcs.n	800558c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800556c:	2200      	movs	r2, #0
 800556e:	2100      	movs	r1, #0
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fe91 	bl	8006298 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800557e:	2300      	movs	r3, #0
 8005580:	2200      	movs	r2, #0
 8005582:	2100      	movs	r1, #0
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f003 f958 	bl	800883a <USBD_LL_PrepareReceive>
 800558a:	e026      	b.n	80055da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d105      	bne.n	80055ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f003 f89d 	bl	80086f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 fec3 	bl	8006342 <USBD_CtlReceiveStatus>
 80055bc:	e00d      	b.n	80055da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d004      	beq.n	80055d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80055d2:	2180      	movs	r1, #128	; 0x80
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f003 f88b 	bl	80086f0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d11d      	bne.n	8005620 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fe83 	bl	80052f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80055f2:	e015      	b.n	8005620 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00d      	beq.n	800561c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005606:	2b03      	cmp	r3, #3
 8005608:	d108      	bne.n	800561c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	7afa      	ldrb	r2, [r7, #11]
 8005614:	4611      	mov	r1, r2
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	4798      	blx	r3
 800561a:	e001      	b.n	8005620 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800561c:	2302      	movs	r3, #2
 800561e:	e000      	b.n	8005622 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f003 f814 	bl	8008666 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f003 f806 	bl	8008666 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d009      	beq.n	80056a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6852      	ldr	r2, [r2, #4]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	4611      	mov	r1, r2
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	4798      	blx	r3
  }

  return USBD_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2204      	movs	r2, #4
 80056e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr

080056f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005700:	2b04      	cmp	r3, #4
 8005702:	d105      	bne.n	8005710 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800572a:	2b03      	cmp	r3, #3
 800572c:	d10b      	bne.n	8005746 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005766:	2b20      	cmp	r3, #32
 8005768:	d004      	beq.n	8005774 <USBD_StdDevReq+0x24>
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d002      	beq.n	8005774 <USBD_StdDevReq+0x24>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <USBD_StdDevReq+0x34>
 8005772:	e04c      	b.n	800580e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
      break;
 8005782:	e049      	b.n	8005818 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b09      	cmp	r3, #9
 800578a:	d83a      	bhi.n	8005802 <USBD_StdDevReq+0xb2>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <USBD_StdDevReq+0x44>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057e5 	.word	0x080057e5
 8005798:	080057f9 	.word	0x080057f9
 800579c:	08005803 	.word	0x08005803
 80057a0:	080057ef 	.word	0x080057ef
 80057a4:	08005803 	.word	0x08005803
 80057a8:	080057c7 	.word	0x080057c7
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	08005803 	.word	0x08005803
 80057b4:	080057db 	.word	0x080057db
 80057b8:	080057d1 	.word	0x080057d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9d4 	bl	8005b6c <USBD_GetDescriptor>
          break;
 80057c4:	e022      	b.n	800580c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fb37 	bl	8005e3c <USBD_SetAddress>
          break;
 80057ce:	e01d      	b.n	800580c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fb74 	bl	8005ec0 <USBD_SetConfig>
          break;
 80057d8:	e018      	b.n	800580c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fbfd 	bl	8005fdc <USBD_GetConfig>
          break;
 80057e2:	e013      	b.n	800580c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fc2c 	bl	8006044 <USBD_GetStatus>
          break;
 80057ec:	e00e      	b.n	800580c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 fc5a 	bl	80060aa <USBD_SetFeature>
          break;
 80057f6:	e009      	b.n	800580c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fc69 	bl	80060d2 <USBD_ClrFeature>
          break;
 8005800:	e004      	b.n	800580c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005802:	6839      	ldr	r1, [r7, #0]
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 fcc1 	bl	800618c <USBD_CtlError>
          break;
 800580a:	bf00      	nop
      }
      break;
 800580c:	e004      	b.n	8005818 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fcbb 	bl	800618c <USBD_CtlError>
      break;
 8005816:	bf00      	nop
  }

  return ret;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop

08005824 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800583a:	2b20      	cmp	r3, #32
 800583c:	d003      	beq.n	8005846 <USBD_StdItfReq+0x22>
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d001      	beq.n	8005846 <USBD_StdItfReq+0x22>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d12a      	bne.n	800589c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800584c:	3b01      	subs	r3, #1
 800584e:	2b02      	cmp	r3, #2
 8005850:	d81d      	bhi.n	800588e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	889b      	ldrh	r3, [r3, #4]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d813      	bhi.n	8005884 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	88db      	ldrh	r3, [r3, #6]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d110      	bne.n	8005898 <USBD_StdItfReq+0x74>
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10d      	bne.n	8005898 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fd4d 	bl	800631c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005882:	e009      	b.n	8005898 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fc80 	bl	800618c <USBD_CtlError>
          break;
 800588c:	e004      	b.n	8005898 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800588e:	6839      	ldr	r1, [r7, #0]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fc7b 	bl	800618c <USBD_CtlError>
          break;
 8005896:	e000      	b.n	800589a <USBD_StdItfReq+0x76>
          break;
 8005898:	bf00      	nop
      }
      break;
 800589a:	e004      	b.n	80058a6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fc74 	bl	800618c <USBD_CtlError>
      break;
 80058a4:	bf00      	nop
  }

  return USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	889b      	ldrh	r3, [r3, #4]
 80058c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d004      	beq.n	80058da <USBD_StdEPReq+0x2a>
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d002      	beq.n	80058da <USBD_StdEPReq+0x2a>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <USBD_StdEPReq+0x3a>
 80058d8:	e13d      	b.n	8005b56 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
      break;
 80058e8:	e13a      	b.n	8005b60 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d10a      	bne.n	800590c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	e12a      	b.n	8005b62 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	785b      	ldrb	r3, [r3, #1]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d03e      	beq.n	8005992 <USBD_StdEPReq+0xe2>
 8005914:	2b03      	cmp	r3, #3
 8005916:	d002      	beq.n	800591e <USBD_StdEPReq+0x6e>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d070      	beq.n	80059fe <USBD_StdEPReq+0x14e>
 800591c:	e115      	b.n	8005b4a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	2b02      	cmp	r3, #2
 8005926:	d002      	beq.n	800592e <USBD_StdEPReq+0x7e>
 8005928:	2b03      	cmp	r3, #3
 800592a:	d015      	beq.n	8005958 <USBD_StdEPReq+0xa8>
 800592c:	e02b      	b.n	8005986 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <USBD_StdEPReq+0x9e>
 8005934:	7bbb      	ldrb	r3, [r7, #14]
 8005936:	2b80      	cmp	r3, #128	; 0x80
 8005938:	d009      	beq.n	800594e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f002 fed6 	bl	80086f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005944:	2180      	movs	r1, #128	; 0x80
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f002 fed2 	bl	80086f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800594c:	e020      	b.n	8005990 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fc1b 	bl	800618c <USBD_CtlError>
              break;
 8005956:	e01b      	b.n	8005990 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	885b      	ldrh	r3, [r3, #2]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10e      	bne.n	800597e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <USBD_StdEPReq+0xce>
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	2b80      	cmp	r3, #128	; 0x80
 800596a:	d008      	beq.n	800597e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	88db      	ldrh	r3, [r3, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f002 feb9 	bl	80086f0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fccc 	bl	800631c <USBD_CtlSendStatus>

              break;
 8005984:	e004      	b.n	8005990 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fbff 	bl	800618c <USBD_CtlError>
              break;
 800598e:	bf00      	nop
          }
          break;
 8005990:	e0e0      	b.n	8005b54 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005998:	2b02      	cmp	r3, #2
 800599a:	d002      	beq.n	80059a2 <USBD_StdEPReq+0xf2>
 800599c:	2b03      	cmp	r3, #3
 800599e:	d015      	beq.n	80059cc <USBD_StdEPReq+0x11c>
 80059a0:	e026      	b.n	80059f0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <USBD_StdEPReq+0x112>
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	d009      	beq.n	80059c2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f002 fe9c 	bl	80086f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f002 fe98 	bl	80086f0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059c0:	e01c      	b.n	80059fc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fbe1 	bl	800618c <USBD_CtlError>
              break;
 80059ca:	e017      	b.n	80059fc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	885b      	ldrh	r3, [r3, #2]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d112      	bne.n	80059fa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d004      	beq.n	80059e8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f002 fea3 	bl	800872e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fc97 	bl	800631c <USBD_CtlSendStatus>
              }
              break;
 80059ee:	e004      	b.n	80059fa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fbca 	bl	800618c <USBD_CtlError>
              break;
 80059f8:	e000      	b.n	80059fc <USBD_StdEPReq+0x14c>
              break;
 80059fa:	bf00      	nop
          }
          break;
 80059fc:	e0aa      	b.n	8005b54 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d002      	beq.n	8005a0e <USBD_StdEPReq+0x15e>
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d032      	beq.n	8005a72 <USBD_StdEPReq+0x1c2>
 8005a0c:	e097      	b.n	8005b3e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <USBD_StdEPReq+0x174>
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d004      	beq.n	8005a24 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fbb5 	bl	800618c <USBD_CtlError>
                break;
 8005a22:	e091      	b.n	8005b48 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da0b      	bge.n	8005a44 <USBD_StdEPReq+0x194>
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	3310      	adds	r3, #16
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	4413      	add	r3, r2
 8005a40:	3304      	adds	r3, #4
 8005a42:	e00b      	b.n	8005a5c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2202      	movs	r2, #2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fbf8 	bl	8006260 <USBD_CtlSendData>
              break;
 8005a70:	e06a      	b.n	8005b48 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005a72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da11      	bge.n	8005a9e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005a7a:	7bbb      	ldrb	r3, [r7, #14]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d117      	bne.n	8005ac4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fb78 	bl	800618c <USBD_CtlError>
                  break;
 8005a9c:	e054      	b.n	8005b48 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	f003 020f 	and.w	r2, r3, #15
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fb65 	bl	800618c <USBD_CtlError>
                  break;
 8005ac2:	e041      	b.n	8005b48 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da0b      	bge.n	8005ae4 <USBD_StdEPReq+0x234>
 8005acc:	7bbb      	ldrb	r3, [r7, #14]
 8005ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	3310      	adds	r3, #16
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4413      	add	r3, r2
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	e00b      	b.n	8005afc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ae4:	7bbb      	ldrb	r3, [r7, #14]
 8005ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	3304      	adds	r3, #4
 8005afc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <USBD_StdEPReq+0x25a>
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d103      	bne.n	8005b12 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e00e      	b.n	8005b30 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f002 fe28 	bl	800876c <USBD_LL_IsStallEP>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e002      	b.n	8005b30 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2202      	movs	r2, #2
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb92 	bl	8006260 <USBD_CtlSendData>
              break;
 8005b3c:	e004      	b.n	8005b48 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb23 	bl	800618c <USBD_CtlError>
              break;
 8005b46:	bf00      	nop
          }
          break;
 8005b48:	e004      	b.n	8005b54 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005b4a:	6839      	ldr	r1, [r7, #0]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fb1d 	bl	800618c <USBD_CtlError>
          break;
 8005b52:	bf00      	nop
      }
      break;
 8005b54:	e004      	b.n	8005b60 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb17 	bl	800618c <USBD_CtlError>
      break;
 8005b5e:	bf00      	nop
  }

  return ret;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	885b      	ldrh	r3, [r3, #2]
 8005b86:	0a1b      	lsrs	r3, r3, #8
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	f200 8128 	bhi.w	8005de2 <USBD_GetDescriptor+0x276>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <USBD_GetDescriptor+0x2c>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bcd 	.word	0x08005bcd
 8005ba0:	08005c0d 	.word	0x08005c0d
 8005ba4:	08005de3 	.word	0x08005de3
 8005ba8:	08005de3 	.word	0x08005de3
 8005bac:	08005d83 	.word	0x08005d83
 8005bb0:	08005daf 	.word	0x08005daf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	7c12      	ldrb	r2, [r2, #16]
 8005bc0:	f107 0108 	add.w	r1, r7, #8
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4798      	blx	r3
 8005bc8:	60f8      	str	r0, [r7, #12]
      break;
 8005bca:	e112      	b.n	8005df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	7c1b      	ldrb	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10d      	bne.n	8005bf0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f107 0208 	add.w	r2, r7, #8
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	2202      	movs	r2, #2
 8005bec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005bee:	e100      	b.n	8005df2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	f107 0208 	add.w	r2, r7, #8
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4798      	blx	r3
 8005c00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3301      	adds	r3, #1
 8005c06:	2202      	movs	r2, #2
 8005c08:	701a      	strb	r2, [r3, #0]
      break;
 8005c0a:	e0f2      	b.n	8005df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	885b      	ldrh	r3, [r3, #2]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b05      	cmp	r3, #5
 8005c14:	f200 80ac 	bhi.w	8005d70 <USBD_GetDescriptor+0x204>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <USBD_GetDescriptor+0xb4>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c39 	.word	0x08005c39
 8005c24:	08005c6d 	.word	0x08005c6d
 8005c28:	08005ca1 	.word	0x08005ca1
 8005c2c:	08005cd5 	.word	0x08005cd5
 8005c30:	08005d09 	.word	0x08005d09
 8005c34:	08005d3d 	.word	0x08005d3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	7c12      	ldrb	r2, [r2, #16]
 8005c50:	f107 0108 	add.w	r1, r7, #8
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c5a:	e091      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa94 	bl	800618c <USBD_CtlError>
            err++;
 8005c64:	7afb      	ldrb	r3, [r7, #11]
 8005c66:	3301      	adds	r3, #1
 8005c68:	72fb      	strb	r3, [r7, #11]
          break;
 8005c6a:	e089      	b.n	8005d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7c12      	ldrb	r2, [r2, #16]
 8005c84:	f107 0108 	add.w	r1, r7, #8
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8e:	e077      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa7a 	bl	800618c <USBD_CtlError>
            err++;
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9e:	e06f      	b.n	8005d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	7c12      	ldrb	r2, [r2, #16]
 8005cb8:	f107 0108 	add.w	r1, r7, #8
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cc2:	e05d      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa60 	bl	800618c <USBD_CtlError>
            err++;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005cd2:	e055      	b.n	8005d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	7c12      	ldrb	r2, [r2, #16]
 8005cec:	f107 0108 	add.w	r1, r7, #8
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cf6:	e043      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa46 	bl	800618c <USBD_CtlError>
            err++;
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	3301      	adds	r3, #1
 8005d04:	72fb      	strb	r3, [r7, #11]
          break;
 8005d06:	e03b      	b.n	8005d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	7c12      	ldrb	r2, [r2, #16]
 8005d20:	f107 0108 	add.w	r1, r7, #8
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d2a:	e029      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa2c 	bl	800618c <USBD_CtlError>
            err++;
 8005d34:	7afb      	ldrb	r3, [r7, #11]
 8005d36:	3301      	adds	r3, #1
 8005d38:	72fb      	strb	r3, [r7, #11]
          break;
 8005d3a:	e021      	b.n	8005d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	7c12      	ldrb	r2, [r2, #16]
 8005d54:	f107 0108 	add.w	r1, r7, #8
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d5e:	e00f      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa12 	bl	800618c <USBD_CtlError>
            err++;
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d6e:	e007      	b.n	8005d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa0a 	bl	800618c <USBD_CtlError>
          err++;
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005d7e:	e038      	b.n	8005df2 <USBD_GetDescriptor+0x286>
 8005d80:	e037      	b.n	8005df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	7c1b      	ldrb	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	f107 0208 	add.w	r2, r7, #8
 8005d96:	4610      	mov	r0, r2
 8005d98:	4798      	blx	r3
 8005d9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d9c:	e029      	b.n	8005df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d9e:	6839      	ldr	r1, [r7, #0]
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f9f3 	bl	800618c <USBD_CtlError>
        err++;
 8005da6:	7afb      	ldrb	r3, [r7, #11]
 8005da8:	3301      	adds	r3, #1
 8005daa:	72fb      	strb	r3, [r7, #11]
      break;
 8005dac:	e021      	b.n	8005df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	7c1b      	ldrb	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10d      	bne.n	8005dd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4798      	blx	r3
 8005dc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	2207      	movs	r2, #7
 8005dce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dd0:	e00f      	b.n	8005df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f9d9 	bl	800618c <USBD_CtlError>
        err++;
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	72fb      	strb	r3, [r7, #11]
      break;
 8005de0:	e007      	b.n	8005df2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9d1 	bl	800618c <USBD_CtlError>
      err++;
 8005dea:	7afb      	ldrb	r3, [r7, #11]
 8005dec:	3301      	adds	r3, #1
 8005dee:	72fb      	strb	r3, [r7, #11]
      break;
 8005df0:	bf00      	nop
  }

  if (err != 0U)
 8005df2:	7afb      	ldrb	r3, [r7, #11]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11c      	bne.n	8005e32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005df8:	893b      	ldrh	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d011      	beq.n	8005e22 <USBD_GetDescriptor+0x2b6>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	88db      	ldrh	r3, [r3, #6]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	88da      	ldrh	r2, [r3, #6]
 8005e0a:	893b      	ldrh	r3, [r7, #8]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bf28      	it	cs
 8005e10:	4613      	movcs	r3, r2
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e16:	893b      	ldrh	r3, [r7, #8]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa1f 	bl	8006260 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	88db      	ldrh	r3, [r3, #6]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa76 	bl	800631c <USBD_CtlSendStatus>
 8005e30:	e000      	b.n	8005e34 <USBD_GetDescriptor+0x2c8>
    return;
 8005e32:	bf00      	nop
    }
  }
}
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop

08005e3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	889b      	ldrh	r3, [r3, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d130      	bne.n	8005eb0 <USBD_SetAddress+0x74>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	88db      	ldrh	r3, [r3, #6]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d12c      	bne.n	8005eb0 <USBD_SetAddress+0x74>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	885b      	ldrh	r3, [r3, #2]
 8005e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e5c:	d828      	bhi.n	8005eb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	885b      	ldrh	r3, [r3, #2]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d104      	bne.n	8005e7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f988 	bl	800618c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7c:	e01c      	b.n	8005eb8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f002 fc93 	bl	80087b6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa43 	bl	800631c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea4:	e008      	b.n	8005eb8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eae:	e003      	b.n	8005eb8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f96a 	bl	800618c <USBD_CtlError>
  }
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	885b      	ldrh	r3, [r3, #2]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b41      	ldr	r3, [pc, #260]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005ed2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ed4:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d904      	bls.n	8005ee6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f954 	bl	800618c <USBD_CtlError>
 8005ee4:	e075      	b.n	8005fd2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d002      	beq.n	8005ef6 <USBD_SetConfig+0x36>
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d023      	beq.n	8005f3c <USBD_SetConfig+0x7c>
 8005ef4:	e062      	b.n	8005fbc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005ef6:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01a      	beq.n	8005f34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005efe:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2203      	movs	r2, #3
 8005f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f10:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff f9f4 	bl	8005304 <USBD_SetClassConfig>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d104      	bne.n	8005f2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f931 	bl	800618c <USBD_CtlError>
            return;
 8005f2a:	e052      	b.n	8005fd2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f9f5 	bl	800631c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f32:	e04e      	b.n	8005fd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f9f1 	bl	800631c <USBD_CtlSendStatus>
        break;
 8005f3a:	e04a      	b.n	8005fd2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005f3c:	4b26      	ldr	r3, [pc, #152]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d112      	bne.n	8005f6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005f4c:	4b22      	ldr	r3, [pc, #136]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005f56:	4b20      	ldr	r3, [pc, #128]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff f9f0 	bl	8005342 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9da 	bl	800631c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f68:	e033      	b.n	8005fd2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d01d      	beq.n	8005fb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	4619      	mov	r1, r3
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff f9de 	bl	8005342 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005f86:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f90:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff f9b4 	bl	8005304 <USBD_SetClassConfig>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d104      	bne.n	8005fac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f8f1 	bl	800618c <USBD_CtlError>
            return;
 8005faa:	e012      	b.n	8005fd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f9b5 	bl	800631c <USBD_CtlSendStatus>
        break;
 8005fb2:	e00e      	b.n	8005fd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f9b1 	bl	800631c <USBD_CtlSendStatus>
        break;
 8005fba:	e00a      	b.n	8005fd2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005fbc:	6839      	ldr	r1, [r7, #0]
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f8e4 	bl	800618c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <USBD_SetConfig+0x118>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff f9b9 	bl	8005342 <USBD_ClrClassConfig>
        break;
 8005fd0:	bf00      	nop
    }
  }
}
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200001fc 	.word	0x200001fc

08005fdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	88db      	ldrh	r3, [r3, #6]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d004      	beq.n	8005ff8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8cb 	bl	800618c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005ff6:	e021      	b.n	800603c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	db17      	blt.n	8006032 <USBD_GetConfig+0x56>
 8006002:	2b02      	cmp	r3, #2
 8006004:	dd02      	ble.n	800600c <USBD_GetConfig+0x30>
 8006006:	2b03      	cmp	r3, #3
 8006008:	d00b      	beq.n	8006022 <USBD_GetConfig+0x46>
 800600a:	e012      	b.n	8006032 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3308      	adds	r3, #8
 8006016:	2201      	movs	r2, #1
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f920 	bl	8006260 <USBD_CtlSendData>
        break;
 8006020:	e00c      	b.n	800603c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3304      	adds	r3, #4
 8006026:	2201      	movs	r2, #1
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f918 	bl	8006260 <USBD_CtlSendData>
        break;
 8006030:	e004      	b.n	800603c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8a9 	bl	800618c <USBD_CtlError>
        break;
 800603a:	bf00      	nop
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006054:	3b01      	subs	r3, #1
 8006056:	2b02      	cmp	r3, #2
 8006058:	d81e      	bhi.n	8006098 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	88db      	ldrh	r3, [r3, #6]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d004      	beq.n	800606c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f891 	bl	800618c <USBD_CtlError>
        break;
 800606a:	e01a      	b.n	80060a2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f043 0202 	orr.w	r2, r3, #2
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	330c      	adds	r3, #12
 800608c:	2202      	movs	r2, #2
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f8e5 	bl	8006260 <USBD_CtlSendData>
      break;
 8006096:	e004      	b.n	80060a2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f876 	bl	800618c <USBD_CtlError>
      break;
 80060a0:	bf00      	nop
  }
}
 80060a2:	bf00      	nop
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b082      	sub	sp, #8
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	885b      	ldrh	r3, [r3, #2]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d106      	bne.n	80060ca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f929 	bl	800631c <USBD_CtlSendStatus>
  }
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e2:	3b01      	subs	r3, #1
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d80b      	bhi.n	8006100 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	885b      	ldrh	r3, [r3, #2]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10c      	bne.n	800610a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f90f 	bl	800631c <USBD_CtlSendStatus>
      }
      break;
 80060fe:	e004      	b.n	800610a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f842 	bl	800618c <USBD_CtlError>
      break;
 8006108:	e000      	b.n	800610c <USBD_ClrFeature+0x3a>
      break;
 800610a:	bf00      	nop
  }
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	785a      	ldrb	r2, [r3, #1]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	3302      	adds	r3, #2
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	b29a      	uxth	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	3303      	adds	r3, #3
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	b29b      	uxth	r3, r3
 8006142:	4413      	add	r3, r2
 8006144:	b29a      	uxth	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	3304      	adds	r3, #4
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b29a      	uxth	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	3305      	adds	r3, #5
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	b29b      	uxth	r3, r3
 800615e:	4413      	add	r3, r2
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	3306      	adds	r3, #6
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	3307      	adds	r3, #7
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	b29b      	uxth	r3, r3
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	b29b      	uxth	r3, r3
 800617a:	4413      	add	r3, r2
 800617c:	b29a      	uxth	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	80da      	strh	r2, [r3, #6]

}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006196:	2180      	movs	r1, #128	; 0x80
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f002 faa9 	bl	80086f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800619e:	2100      	movs	r1, #0
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f002 faa5 	bl	80086f0 <USBD_LL_StallEP>
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d032      	beq.n	800622a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f834 	bl	8006232 <USBD_GetLen>
 80061ca:	4603      	mov	r3, r0
 80061cc:	3301      	adds	r3, #1
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	75fa      	strb	r2, [r7, #23]
 80061de:	461a      	mov	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4413      	add	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	7812      	ldrb	r2, [r2, #0]
 80061e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	75fa      	strb	r2, [r7, #23]
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4413      	add	r3, r2
 80061f6:	2203      	movs	r2, #3
 80061f8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80061fa:	e012      	b.n	8006222 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	60fa      	str	r2, [r7, #12]
 8006202:	7dfa      	ldrb	r2, [r7, #23]
 8006204:	1c51      	adds	r1, r2, #1
 8006206:	75f9      	strb	r1, [r7, #23]
 8006208:	4611      	mov	r1, r2
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	440a      	add	r2, r1
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	75fa      	strb	r2, [r7, #23]
 8006218:	461a      	mov	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e8      	bne.n	80061fc <USBD_GetString+0x4e>
    }
  }
}
 800622a:	bf00      	nop
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800623e:	e005      	b.n	800624c <USBD_GetLen+0x1a>
  {
    len++;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	3301      	adds	r3, #1
 8006244:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3301      	adds	r3, #1
 800624a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f5      	bne.n	8006240 <USBD_GetLen+0xe>
  }

  return len;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr

08006260 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2202      	movs	r2, #2
 8006272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006276:	88fa      	ldrh	r2, [r7, #6]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	2100      	movs	r1, #0
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f002 fab3 	bl	80087f4 <USBD_LL_Transmit>

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	2100      	movs	r1, #0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f002 faa1 	bl	80087f4 <USBD_LL_Transmit>

  return USBD_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2203      	movs	r2, #3
 80062ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80062da:	88fa      	ldrh	r2, [r7, #6]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	2100      	movs	r1, #0
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f002 faa6 	bl	800883a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	4613      	mov	r3, r2
 8006304:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	2100      	movs	r1, #0
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f002 fa94 	bl	800883a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2204      	movs	r2, #4
 8006328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800632c:	2300      	movs	r3, #0
 800632e:	2200      	movs	r2, #0
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f002 fa5e 	bl	80087f4 <USBD_LL_Transmit>

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2205      	movs	r2, #5
 800634e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006352:	2300      	movs	r3, #0
 8006354:	2200      	movs	r2, #0
 8006356:	2100      	movs	r1, #0
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 fa6e 	bl	800883a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8006374:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <NRF24_DelayMicroSeconds+0x38>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a0a      	ldr	r2, [pc, #40]	; (80063a4 <NRF24_DelayMicroSeconds+0x3c>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	0c9a      	lsrs	r2, r3, #18
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8006388:	bf00      	nop
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1e5a      	subs	r2, r3, #1
 800638e:	60fa      	str	r2, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1fa      	bne.n	800638a <NRF24_DelayMicroSeconds+0x22>
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	200000f8 	.word	0x200000f8
 80063a4:	165e9f81 	.word	0x165e9f81

080063a8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d008      	beq.n	80063c8 <NRF24_csn+0x20>
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <NRF24_csn+0x38>)
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <NRF24_csn+0x3c>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	2201      	movs	r2, #1
 80063c0:	4619      	mov	r1, r3
 80063c2:	f7fb f8f9 	bl	80015b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80063c6:	e007      	b.n	80063d8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <NRF24_csn+0x38>)
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <NRF24_csn+0x3c>)
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	4619      	mov	r1, r3
 80063d4:	f7fb f8f0 	bl	80015b8 <HAL_GPIO_WritePin>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	2000020c 	.word	0x2000020c
 80063e4:	20000210 	.word	0x20000210

080063e8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <NRF24_ce+0x20>
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <NRF24_ce+0x38>)
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <NRF24_ce+0x3c>)
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	2201      	movs	r2, #1
 8006400:	4619      	mov	r1, r3
 8006402:	f7fb f8d9 	bl	80015b8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8006406:	e007      	b.n	8006418 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <NRF24_ce+0x38>)
 800640a:	6818      	ldr	r0, [r3, #0]
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <NRF24_ce+0x3c>)
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	2200      	movs	r2, #0
 8006412:	4619      	mov	r1, r3
 8006414:	f7fb f8d0 	bl	80015b8 <HAL_GPIO_WritePin>
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	2000020c 	.word	0x2000020c
 8006424:	20000212 	.word	0x20000212

08006428 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8006432:	2000      	movs	r0, #0
 8006434:	f7ff ffb8 	bl	80063a8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	b2db      	uxtb	r3, r3
 8006440:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006442:	f107 010c 	add.w	r1, r7, #12
 8006446:	2364      	movs	r3, #100	; 0x64
 8006448:	2201      	movs	r2, #1
 800644a:	480a      	ldr	r0, [pc, #40]	; (8006474 <NRF24_read_register+0x4c>)
 800644c:	f7fc fccd 	bl	8002dea <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8006450:	f107 030c 	add.w	r3, r7, #12
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	2364      	movs	r3, #100	; 0x64
 8006458:	2201      	movs	r2, #1
 800645a:	4806      	ldr	r0, [pc, #24]	; (8006474 <NRF24_read_register+0x4c>)
 800645c:	f7fc fdf9 	bl	8003052 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8006460:	7b7b      	ldrb	r3, [r7, #13]
 8006462:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8006464:	2001      	movs	r0, #1
 8006466:	f7ff ff9f 	bl	80063a8 <NRF24_csn>
	return retData;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000214 	.word	0x20000214

08006478 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	71fb      	strb	r3, [r7, #7]
 8006484:	4613      	mov	r3, r2
 8006486:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8006488:	2000      	movs	r0, #0
 800648a:	f7ff ff8d 	bl	80063a8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	b2db      	uxtb	r3, r3
 8006496:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8006498:	f107 010c 	add.w	r1, r7, #12
 800649c:	2364      	movs	r3, #100	; 0x64
 800649e:	2201      	movs	r2, #1
 80064a0:	4808      	ldr	r0, [pc, #32]	; (80064c4 <NRF24_read_registerN+0x4c>)
 80064a2:	f7fc fca2 	bl	8002dea <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80064a6:	79bb      	ldrb	r3, [r7, #6]
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	2364      	movs	r3, #100	; 0x64
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <NRF24_read_registerN+0x4c>)
 80064b0:	f7fc fdcf 	bl	8003052 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f7ff ff77 	bl	80063a8 <NRF24_csn>
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000214 	.word	0x20000214

080064c8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	460a      	mov	r2, r1
 80064d2:	71fb      	strb	r3, [r7, #7]
 80064d4:	4613      	mov	r3, r2
 80064d6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80064d8:	2000      	movs	r0, #0
 80064da:	f7ff ff65 	bl	80063a8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	f043 0320 	orr.w	r3, r3, #32
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80064e8:	79bb      	ldrb	r3, [r7, #6]
 80064ea:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80064ec:	f107 010c 	add.w	r1, r7, #12
 80064f0:	2364      	movs	r3, #100	; 0x64
 80064f2:	2202      	movs	r2, #2
 80064f4:	4804      	ldr	r0, [pc, #16]	; (8006508 <NRF24_write_register+0x40>)
 80064f6:	f7fc fc78 	bl	8002dea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80064fa:	2001      	movs	r0, #1
 80064fc:	f7ff ff54 	bl	80063a8 <NRF24_csn>
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	20000214 	.word	0x20000214

0800650c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	6039      	str	r1, [r7, #0]
 8006516:	71fb      	strb	r3, [r7, #7]
 8006518:	4613      	mov	r3, r2
 800651a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800651c:	2000      	movs	r0, #0
 800651e:	f7ff ff43 	bl	80063a8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	f043 0320 	orr.w	r3, r3, #32
 8006528:	b2db      	uxtb	r3, r3
 800652a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800652c:	f107 010c 	add.w	r1, r7, #12
 8006530:	2364      	movs	r3, #100	; 0x64
 8006532:	2201      	movs	r2, #1
 8006534:	4808      	ldr	r0, [pc, #32]	; (8006558 <NRF24_write_registerN+0x4c>)
 8006536:	f7fc fc58 	bl	8002dea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800653a:	79bb      	ldrb	r3, [r7, #6]
 800653c:	b29a      	uxth	r2, r3
 800653e:	2364      	movs	r3, #100	; 0x64
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	4805      	ldr	r0, [pc, #20]	; (8006558 <NRF24_write_registerN+0x4c>)
 8006544:	f7fc fc51 	bl	8002dea <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8006548:	2001      	movs	r0, #1
 800654a:	f7ff ff2d 	bl	80063a8 <NRF24_csn>
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000214 	.word	0x20000214

0800655c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8006568:	f000 fa06 	bl	8006978 <NRF24_getPayloadSize>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	4293      	cmp	r3, r2
 8006574:	d303      	bcc.n	800657e <NRF24_read_payload+0x22>
 8006576:	f000 f9ff 	bl	8006978 <NRF24_getPayloadSize>
 800657a:	4603      	mov	r3, r0
 800657c:	e000      	b.n	8006580 <NRF24_read_payload+0x24>
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8006582:	2000      	movs	r0, #0
 8006584:	f7ff ff10 	bl	80063a8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8006588:	2361      	movs	r3, #97	; 0x61
 800658a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800658c:	f107 010e 	add.w	r1, r7, #14
 8006590:	2364      	movs	r3, #100	; 0x64
 8006592:	2201      	movs	r2, #1
 8006594:	4808      	ldr	r0, [pc, #32]	; (80065b8 <NRF24_read_payload+0x5c>)
 8006596:	f7fc fc28 	bl	8002dea <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	b29a      	uxth	r2, r3
 800659e:	2364      	movs	r3, #100	; 0x64
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4805      	ldr	r0, [pc, #20]	; (80065b8 <NRF24_read_payload+0x5c>)
 80065a4:	f7fc fd55 	bl	8003052 <HAL_SPI_Receive>
	NRF24_csn(1);
 80065a8:	2001      	movs	r0, #1
 80065aa:	f7ff fefd 	bl	80063a8 <NRF24_csn>
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000214 	.word	0x20000214

080065bc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80065c0:	21ff      	movs	r1, #255	; 0xff
 80065c2:	20e1      	movs	r0, #225	; 0xe1
 80065c4:	f7ff ff80 	bl	80064c8 <NRF24_write_register>
}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}

080065cc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80065d0:	21ff      	movs	r1, #255	; 0xff
 80065d2:	20e2      	movs	r0, #226	; 0xe2
 80065d4:	f7ff ff78 	bl	80064c8 <NRF24_write_register>
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}

080065dc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80065e2:	2007      	movs	r0, #7
 80065e4:	f7ff ff20 	bl	8006428 <NRF24_read_register>
 80065e8:	4603      	mov	r3, r0
 80065ea:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80065ec:	79fb      	ldrb	r3, [r7, #7]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80065f8:	b082      	sub	sp, #8
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
 8006608:	4613      	mov	r3, r2
 800660a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800660c:	4b66      	ldr	r3, [pc, #408]	; (80067a8 <NRF24_begin+0x1b0>)
 800660e:	4618      	mov	r0, r3
 8006610:	f107 031c 	add.w	r3, r7, #28
 8006614:	2258      	movs	r2, #88	; 0x58
 8006616:	4619      	mov	r1, r3
 8006618:	f002 faf8 	bl	8008c0c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800661c:	4a63      	ldr	r2, [pc, #396]	; (80067ac <NRF24_begin+0x1b4>)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8006622:	4a63      	ldr	r2, [pc, #396]	; (80067b0 <NRF24_begin+0x1b8>)
 8006624:	887b      	ldrh	r3, [r7, #2]
 8006626:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8006628:	4a62      	ldr	r2, [pc, #392]	; (80067b4 <NRF24_begin+0x1bc>)
 800662a:	883b      	ldrh	r3, [r7, #0]
 800662c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800662e:	2001      	movs	r0, #1
 8006630:	f7ff feba 	bl	80063a8 <NRF24_csn>
	NRF24_ce(0);
 8006634:	2000      	movs	r0, #0
 8006636:	f7ff fed7 	bl	80063e8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800663a:	2005      	movs	r0, #5
 800663c:	f7fa fd32 	bl	80010a4 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8006640:	2108      	movs	r1, #8
 8006642:	2000      	movs	r0, #0
 8006644:	f7ff ff40 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8006648:	213f      	movs	r1, #63	; 0x3f
 800664a:	2001      	movs	r0, #1
 800664c:	f7ff ff3c 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8006650:	2103      	movs	r1, #3
 8006652:	2002      	movs	r0, #2
 8006654:	f7ff ff38 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8006658:	2103      	movs	r1, #3
 800665a:	2003      	movs	r0, #3
 800665c:	f7ff ff34 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8006660:	2103      	movs	r1, #3
 8006662:	2004      	movs	r0, #4
 8006664:	f7ff ff30 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8006668:	2102      	movs	r1, #2
 800666a:	2005      	movs	r0, #5
 800666c:	f7ff ff2c 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8006670:	210f      	movs	r1, #15
 8006672:	2006      	movs	r0, #6
 8006674:	f7ff ff28 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8006678:	210e      	movs	r1, #14
 800667a:	2007      	movs	r0, #7
 800667c:	f7ff ff24 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8006680:	2100      	movs	r1, #0
 8006682:	2008      	movs	r0, #8
 8006684:	f7ff ff20 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8006688:	2100      	movs	r1, #0
 800668a:	2009      	movs	r0, #9
 800668c:	f7ff ff1c 	bl	80064c8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8006690:	23e7      	movs	r3, #231	; 0xe7
 8006692:	733b      	strb	r3, [r7, #12]
 8006694:	23e7      	movs	r3, #231	; 0xe7
 8006696:	72fb      	strb	r3, [r7, #11]
 8006698:	23e7      	movs	r3, #231	; 0xe7
 800669a:	72bb      	strb	r3, [r7, #10]
 800669c:	23e7      	movs	r3, #231	; 0xe7
 800669e:	727b      	strb	r3, [r7, #9]
 80066a0:	23e7      	movs	r3, #231	; 0xe7
 80066a2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80066a4:	f107 0308 	add.w	r3, r7, #8
 80066a8:	2205      	movs	r2, #5
 80066aa:	4619      	mov	r1, r3
 80066ac:	200a      	movs	r0, #10
 80066ae:	f7ff ff2d 	bl	800650c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80066b2:	23c2      	movs	r3, #194	; 0xc2
 80066b4:	733b      	strb	r3, [r7, #12]
 80066b6:	23c2      	movs	r3, #194	; 0xc2
 80066b8:	72fb      	strb	r3, [r7, #11]
 80066ba:	23c2      	movs	r3, #194	; 0xc2
 80066bc:	72bb      	strb	r3, [r7, #10]
 80066be:	23c2      	movs	r3, #194	; 0xc2
 80066c0:	727b      	strb	r3, [r7, #9]
 80066c2:	23c2      	movs	r3, #194	; 0xc2
 80066c4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	2205      	movs	r2, #5
 80066cc:	4619      	mov	r1, r3
 80066ce:	200b      	movs	r0, #11
 80066d0:	f7ff ff1c 	bl	800650c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80066d4:	21c3      	movs	r1, #195	; 0xc3
 80066d6:	200c      	movs	r0, #12
 80066d8:	f7ff fef6 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80066dc:	21c4      	movs	r1, #196	; 0xc4
 80066de:	200d      	movs	r0, #13
 80066e0:	f7ff fef2 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80066e4:	21c5      	movs	r1, #197	; 0xc5
 80066e6:	200e      	movs	r0, #14
 80066e8:	f7ff feee 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80066ec:	21c6      	movs	r1, #198	; 0xc6
 80066ee:	200f      	movs	r0, #15
 80066f0:	f7ff feea 	bl	80064c8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80066f4:	23e7      	movs	r3, #231	; 0xe7
 80066f6:	733b      	strb	r3, [r7, #12]
 80066f8:	23e7      	movs	r3, #231	; 0xe7
 80066fa:	72fb      	strb	r3, [r7, #11]
 80066fc:	23e7      	movs	r3, #231	; 0xe7
 80066fe:	72bb      	strb	r3, [r7, #10]
 8006700:	23e7      	movs	r3, #231	; 0xe7
 8006702:	727b      	strb	r3, [r7, #9]
 8006704:	23e7      	movs	r3, #231	; 0xe7
 8006706:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	2205      	movs	r2, #5
 800670e:	4619      	mov	r1, r3
 8006710:	2010      	movs	r0, #16
 8006712:	f7ff fefb 	bl	800650c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8006716:	2100      	movs	r1, #0
 8006718:	2011      	movs	r0, #17
 800671a:	f7ff fed5 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800671e:	2100      	movs	r1, #0
 8006720:	2012      	movs	r0, #18
 8006722:	f7ff fed1 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8006726:	2100      	movs	r1, #0
 8006728:	2013      	movs	r0, #19
 800672a:	f7ff fecd 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800672e:	2100      	movs	r1, #0
 8006730:	2014      	movs	r0, #20
 8006732:	f7ff fec9 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8006736:	2100      	movs	r1, #0
 8006738:	2015      	movs	r0, #21
 800673a:	f7ff fec5 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800673e:	2100      	movs	r1, #0
 8006740:	2016      	movs	r0, #22
 8006742:	f7ff fec1 	bl	80064c8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8006746:	f000 faa5 	bl	8006c94 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800674a:	2100      	movs	r1, #0
 800674c:	201c      	movs	r0, #28
 800674e:	f7ff febb 	bl	80064c8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8006752:	2100      	movs	r1, #0
 8006754:	201d      	movs	r0, #29
 8006756:	f7ff feb7 	bl	80064c8 <NRF24_write_register>
	printRadioSettings();
 800675a:	f000 fab5 	bl	8006cc8 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800675e:	210f      	movs	r1, #15
 8006760:	200f      	movs	r0, #15
 8006762:	f000 f8c3 	bl	80068ec <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8006766:	2003      	movs	r0, #3
 8006768:	f000 f9a5 	bl	8006ab6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800676c:	2001      	movs	r0, #1
 800676e:	f000 f9db 	bl	8006b28 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8006772:	2002      	movs	r0, #2
 8006774:	f000 fa1e 	bl	8006bb4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8006778:	f000 f970 	bl	8006a5c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800677c:	2020      	movs	r0, #32
 800677e:	f000 f8e5 	bl	800694c <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8006782:	f000 fa7e 	bl	8006c82 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8006786:	204c      	movs	r0, #76	; 0x4c
 8006788:	f000 f8cb 	bl	8006922 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800678c:	f7ff ff16 	bl	80065bc <NRF24_flush_tx>
	NRF24_flush_rx();
 8006790:	f7ff ff1c 	bl	80065cc <NRF24_flush_rx>

	NRF24_powerDown();
 8006794:	f000 fa36 	bl	8006c04 <NRF24_powerDown>

}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067a2:	b002      	add	sp, #8
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000214 	.word	0x20000214
 80067ac:	2000020c 	.word	0x2000020c
 80067b0:	20000210 	.word	0x20000210
 80067b4:	20000212 	.word	0x20000212

080067b8 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80067b8:	b598      	push	{r3, r4, r7, lr}
 80067ba:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80067bc:	2000      	movs	r0, #0
 80067be:	f7ff fe33 	bl	8006428 <NRF24_read_register>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f043 0303 	orr.w	r3, r3, #3
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	4619      	mov	r1, r3
 80067cc:	2000      	movs	r0, #0
 80067ce:	f7ff fe7b 	bl	80064c8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <NRF24_startListening+0x44>)
 80067d4:	cb18      	ldmia	r3, {r3, r4}
 80067d6:	4323      	orrs	r3, r4
 80067d8:	d004      	beq.n	80067e4 <NRF24_startListening+0x2c>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80067da:	2205      	movs	r2, #5
 80067dc:	4907      	ldr	r1, [pc, #28]	; (80067fc <NRF24_startListening+0x44>)
 80067de:	200a      	movs	r0, #10
 80067e0:	f7ff fe94 	bl	800650c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80067e4:	f7ff feea 	bl	80065bc <NRF24_flush_tx>
	NRF24_flush_rx();
 80067e8:	f7ff fef0 	bl	80065cc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80067ec:	2001      	movs	r0, #1
 80067ee:	f7ff fdfb 	bl	80063e8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80067f2:	2096      	movs	r0, #150	; 0x96
 80067f4:	f7ff fdb8 	bl	8006368 <NRF24_DelayMicroSeconds>
}
 80067f8:	bf00      	nop
 80067fa:	bd98      	pop	{r3, r4, r7, pc}
 80067fc:	20000200 	.word	0x20000200

08006800 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8006804:	2000      	movs	r0, #0
 8006806:	f000 fa0c 	bl	8006c22 <NRF24_availablePipe>
 800680a:	4603      	mov	r3, r0
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}

08006810 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff fe9b 	bl	800655c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8006826:	2017      	movs	r0, #23
 8006828:	f7ff fdfe 	bl	8006428 <NRF24_read_register>
 800682c:	4603      	mov	r3, r0
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8006834:	f7ff feca 	bl	80065cc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8006838:	f000 f8a8 	bl	800698c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf14      	ite	ne
 8006842:	2301      	movne	r3, #1
 8006844:	2300      	moveq	r3, #0
 8006846:	b2db      	uxtb	r3, r3
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	4601      	mov	r1, r0
 8006858:	e9c7 2300 	strd	r2, r3, [r7]
 800685c:	460b      	mov	r3, r1
 800685e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8006866:	e9d7 3400 	ldrd	r3, r4, [r7]
 800686a:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <NRF24_openReadingPipe+0x8c>)
 800686c:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b06      	cmp	r3, #6
 8006874:	d82d      	bhi.n	80068d2 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d808      	bhi.n	800688e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <NRF24_openReadingPipe+0x90>)
 8006880:	5cd3      	ldrb	r3, [r2, r3]
 8006882:	4639      	mov	r1, r7
 8006884:	2205      	movs	r2, #5
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fe40 	bl	800650c <NRF24_write_registerN>
 800688c:	e007      	b.n	800689e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <NRF24_openReadingPipe+0x90>)
 8006892:	5cd3      	ldrb	r3, [r2, r3]
 8006894:	4639      	mov	r1, r7
 8006896:	2201      	movs	r2, #1
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fe37 	bl	800650c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	4a10      	ldr	r2, [pc, #64]	; (80068e4 <NRF24_openReadingPipe+0x94>)
 80068a2:	5cd2      	ldrb	r2, [r2, r3]
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <NRF24_openReadingPipe+0x98>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7ff fe0c 	bl	80064c8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80068b0:	2002      	movs	r0, #2
 80068b2:	f7ff fdb9 	bl	8006428 <NRF24_read_register>
 80068b6:	4603      	mov	r3, r0
 80068b8:	b25a      	sxtb	r2, r3
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b25b      	sxtb	r3, r3
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	4619      	mov	r1, r3
 80068cc:	2002      	movs	r0, #2
 80068ce:	f7ff fdfb 	bl	80064c8 <NRF24_write_register>
	}

}
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000200 	.word	0x20000200
 80068e0:	08009ac4 	.word	0x08009ac4
 80068e4:	08009acc 	.word	0x08009acc
 80068e8:	20000208 	.word	0x20000208

080068ec <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	460a      	mov	r2, r1
 80068f6:	71fb      	strb	r3, [r7, #7]
 80068f8:	4613      	mov	r3, r2
 80068fa:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	b25a      	sxtb	r2, r3
 8006902:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	b25b      	sxtb	r3, r3
 800690c:	4313      	orrs	r3, r2
 800690e:	b25b      	sxtb	r3, r3
 8006910:	b2db      	uxtb	r3, r3
 8006912:	4619      	mov	r1, r3
 8006914:	2004      	movs	r0, #4
 8006916:	f7ff fdd7 	bl	80064c8 <NRF24_write_register>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	4603      	mov	r3, r0
 800692a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 800692c:	237f      	movs	r3, #127	; 0x7f
 800692e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8006930:	7bfa      	ldrb	r2, [r7, #15]
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	4293      	cmp	r3, r2
 8006936:	bf28      	it	cs
 8006938:	4613      	movcs	r3, r2
 800693a:	b2db      	uxtb	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	2005      	movs	r0, #5
 8006940:	f7ff fdc2 	bl	80064c8 <NRF24_write_register>
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8006956:	2320      	movs	r3, #32
 8006958:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800695a:	7bfa      	ldrb	r2, [r7, #15]
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	4293      	cmp	r3, r2
 8006960:	bf28      	it	cs
 8006962:	4613      	movcs	r3, r2
 8006964:	b2da      	uxtb	r2, r3
 8006966:	4b03      	ldr	r3, [pc, #12]	; (8006974 <NRF24_setPayloadSize+0x28>)
 8006968:	701a      	strb	r2, [r3, #0]
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr
 8006974:	20000208 	.word	0x20000208

08006978 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	return payload_size;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <NRF24_getPayloadSize+0x10>)
 800697e:	781b      	ldrb	r3, [r3, #0]
}
 8006980:	4618      	mov	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	20000208 	.word	0x20000208

0800698c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8006990:	2060      	movs	r0, #96	; 0x60
 8006992:	f7ff fd49 	bl	8006428 <NRF24_read_register>
 8006996:	4603      	mov	r3, r0
}
 8006998:	4618      	mov	r0, r3
 800699a:	bd80      	pop	{r7, pc}

0800699c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80069a0:	201d      	movs	r0, #29
 80069a2:	f7ff fd41 	bl	8006428 <NRF24_read_register>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f043 0306 	orr.w	r3, r3, #6
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	4619      	mov	r1, r3
 80069b0:	201d      	movs	r0, #29
 80069b2:	f7ff fd89 	bl	80064c8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80069b6:	201d      	movs	r0, #29
 80069b8:	f7ff fd36 	bl	8006428 <NRF24_read_register>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10c      	bne.n	80069dc <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80069c2:	f000 f967 	bl	8006c94 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80069c6:	201d      	movs	r0, #29
 80069c8:	f7ff fd2e 	bl	8006428 <NRF24_read_register>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f043 0306 	orr.w	r3, r3, #6
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4619      	mov	r1, r3
 80069d6:	201d      	movs	r0, #29
 80069d8:	f7ff fd76 	bl	80064c8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80069dc:	201c      	movs	r0, #28
 80069de:	f7ff fd23 	bl	8006428 <NRF24_read_register>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f043 0303 	orr.w	r3, r3, #3
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	4619      	mov	r1, r3
 80069ec:	201c      	movs	r0, #28
 80069ee:	f7ff fd6b 	bl	80064c8 <NRF24_write_register>
}
 80069f2:	bf00      	nop
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80069fc:	201d      	movs	r0, #29
 80069fe:	f7ff fd13 	bl	8006428 <NRF24_read_register>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f043 0304 	orr.w	r3, r3, #4
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	201d      	movs	r0, #29
 8006a0e:	f7ff fd5b 	bl	80064c8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8006a12:	201d      	movs	r0, #29
 8006a14:	f7ff fd08 	bl	8006428 <NRF24_read_register>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8006a1e:	f000 f939 	bl	8006c94 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8006a22:	201d      	movs	r0, #29
 8006a24:	f7ff fd00 	bl	8006428 <NRF24_read_register>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f043 0304 	orr.w	r3, r3, #4
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	201d      	movs	r0, #29
 8006a34:	f7ff fd48 	bl	80064c8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8006a38:	201c      	movs	r0, #28
 8006a3a:	f7ff fcf5 	bl	8006428 <NRF24_read_register>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	4619      	mov	r1, r3
 8006a48:	201c      	movs	r0, #28
 8006a4a:	f7ff fd3d 	bl	80064c8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8006a4e:	4b02      	ldr	r3, [pc, #8]	; (8006a58 <NRF24_enableDynamicPayloads+0x60>)
 8006a50:	2201      	movs	r2, #1
 8006a52:	701a      	strb	r2, [r3, #0]

}
 8006a54:	bf00      	nop
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000209 	.word	0x20000209

08006a5c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8006a60:	201d      	movs	r0, #29
 8006a62:	f7ff fce1 	bl	8006428 <NRF24_read_register>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f023 0304 	bic.w	r3, r3, #4
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	4619      	mov	r1, r3
 8006a70:	201d      	movs	r0, #29
 8006a72:	f7ff fd29 	bl	80064c8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8006a76:	2100      	movs	r1, #0
 8006a78:	201c      	movs	r0, #28
 8006a7a:	f7ff fd25 	bl	80064c8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8006a7e:	4b02      	ldr	r3, [pc, #8]	; (8006a88 <NRF24_disableDynamicPayloads+0x2c>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	701a      	strb	r2, [r3, #0]
}
 8006a84:	bf00      	nop
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000209 	.word	0x20000209

08006a8c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8006a9c:	213f      	movs	r1, #63	; 0x3f
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	f7ff fd12 	bl	80064c8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8006aa4:	e003      	b.n	8006aae <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f7ff fd0d 	bl	80064c8 <NRF24_write_register>
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	4603      	mov	r3, r0
 8006abe:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8006ac0:	2006      	movs	r0, #6
 8006ac2:	f7ff fcb1 	bl	8006428 <NRF24_read_register>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	f023 0306 	bic.w	r3, r3, #6
 8006ad0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d104      	bne.n	8006ae2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	f043 0306 	orr.w	r3, r3, #6
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e019      	b.n	8006b16 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d104      	bne.n	8006af2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e011      	b.n	8006b16 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d104      	bne.n	8006b02 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	f043 0302 	orr.w	r3, r3, #2
 8006afe:	73fb      	strb	r3, [r7, #15]
 8006b00:	e009      	b.n	8006b16 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8006b08:	79fb      	ldrb	r3, [r7, #7]
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d103      	bne.n	8006b16 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	f043 0306 	orr.w	r3, r3, #6
 8006b14:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	2006      	movs	r0, #6
 8006b1c:	f7ff fcd4 	bl	80064c8 <NRF24_write_register>
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8006b36:	2006      	movs	r0, #6
 8006b38:	f7ff fc76 	bl	8006428 <NRF24_read_register>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8006b40:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <NRF24_setDataRate+0x88>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006b4c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d107      	bne.n	8006b64 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8006b54:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <NRF24_setDataRate+0x88>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8006b5a:	7bbb      	ldrb	r3, [r7, #14]
 8006b5c:	f043 0320 	orr.w	r3, r3, #32
 8006b60:	73bb      	strb	r3, [r7, #14]
 8006b62:	e00d      	b.n	8006b80 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d107      	bne.n	8006b7a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <NRF24_setDataRate+0x88>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	f043 0308 	orr.w	r3, r3, #8
 8006b76:	73bb      	strb	r3, [r7, #14]
 8006b78:	e002      	b.n	8006b80 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <NRF24_setDataRate+0x88>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	4619      	mov	r1, r3
 8006b84:	2006      	movs	r0, #6
 8006b86:	f7ff fc9f 	bl	80064c8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8006b8a:	2006      	movs	r0, #6
 8006b8c:	f7ff fc4c 	bl	8006428 <NRF24_read_register>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d102      	bne.n	8006ba0 <NRF24_setDataRate+0x78>
  {
    result = true;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
 8006b9e:	e002      	b.n	8006ba6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <NRF24_setDataRate+0x88>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	2000020a 	.word	0x2000020a

08006bb4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7ff fc32 	bl	8006428 <NRF24_read_register>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f023 030c 	bic.w	r3, r3, #12
 8006bca:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00f      	beq.n	8006bf2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d104      	bne.n	8006be2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	f043 0308 	orr.w	r3, r3, #8
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	e007      	b.n	8006bf2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	f043 0304 	orr.w	r3, r3, #4
 8006bf0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	f7ff fc66 	bl	80064c8 <NRF24_write_register>
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f7ff fc0d 	bl	8006428 <NRF24_read_register>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f023 0302 	bic.w	r3, r3, #2
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	4619      	mov	r1, r3
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f7ff fc55 	bl	80064c8 <NRF24_write_register>
}
 8006c1e:	bf00      	nop
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8006c2a:	f7ff fcd7 	bl	80065dc <NRF24_get_status>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	73bb      	strb	r3, [r7, #14]

  if (result)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d017      	beq.n	8006c78 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8006c5e:	2140      	movs	r1, #64	; 0x40
 8006c60:	2007      	movs	r0, #7
 8006c62:	f7ff fc31 	bl	80064c8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8006c70:	2120      	movs	r1, #32
 8006c72:	2007      	movs	r0, #7
 8006c74:	f7ff fc28 	bl	80064c8 <NRF24_write_register>
    }
  }
  return result;
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8006c86:	2170      	movs	r1, #112	; 0x70
 8006c88:	2007      	movs	r0, #7
 8006c8a:	f7ff fc1d 	bl	80064c8 <NRF24_write_register>
}
 8006c8e:	bf00      	nop
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7ff fb84 	bl	80063a8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8006ca0:	2350      	movs	r3, #80	; 0x50
 8006ca2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8006ca4:	2373      	movs	r3, #115	; 0x73
 8006ca6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8006ca8:	1d39      	adds	r1, r7, #4
 8006caa:	2364      	movs	r3, #100	; 0x64
 8006cac:	2202      	movs	r2, #2
 8006cae:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <NRF24_ACTIVATE_cmd+0x30>)
 8006cb0:	f7fc f89b 	bl	8002dea <HAL_SPI_Transmit>
	NRF24_csn(1);
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f7ff fb77 	bl	80063a8 <NRF24_csn>
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000214 	.word	0x20000214

08006cc8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8006cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cca:	b0a1      	sub	sp, #132	; 0x84
 8006ccc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8006cce:	f107 0308 	add.w	r3, r7, #8
 8006cd2:	4ab6      	ldr	r2, [pc, #728]	; (8006fac <printRadioSettings+0x2e4>)
 8006cd4:	461c      	mov	r4, r3
 8006cd6:	4615      	mov	r5, r2
 8006cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	8022      	strh	r2, [r4, #0]
 8006cea:	3402      	adds	r4, #2
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7f9 fa2b 	bl	8000150 <strlen>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f107 0108 	add.w	r1, r7, #8
 8006d02:	230a      	movs	r3, #10
 8006d04:	48aa      	ldr	r0, [pc, #680]	; (8006fb0 <printRadioSettings+0x2e8>)
 8006d06:	f7fc fd76 	bl	80037f6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f7ff fb8c 	bl	8006428 <NRF24_read_register>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8006d16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d020      	beq.n	8006d64 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8006d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <printRadioSettings+0x7e>
 8006d2e:	f107 0308 	add.w	r3, r7, #8
 8006d32:	4aa0      	ldr	r2, [pc, #640]	; (8006fb4 <printRadioSettings+0x2ec>)
 8006d34:	461c      	mov	r4, r3
 8006d36:	4615      	mov	r5, r2
 8006d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d44:	e017      	b.n	8006d76 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4a9b      	ldr	r2, [pc, #620]	; (8006fb8 <printRadioSettings+0x2f0>)
 8006d4c:	461c      	mov	r4, r3
 8006d4e:	4615      	mov	r5, r2
 8006d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d58:	c403      	stmia	r4!, {r0, r1}
 8006d5a:	8022      	strh	r2, [r4, #0]
 8006d5c:	3402      	adds	r4, #2
 8006d5e:	0c13      	lsrs	r3, r2, #16
 8006d60:	7023      	strb	r3, [r4, #0]
 8006d62:	e008      	b.n	8006d76 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8006d64:	f107 0308 	add.w	r3, r7, #8
 8006d68:	4a94      	ldr	r2, [pc, #592]	; (8006fbc <printRadioSettings+0x2f4>)
 8006d6a:	461c      	mov	r4, r3
 8006d6c:	4615      	mov	r5, r2
 8006d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7f9 f9e8 	bl	8000150 <strlen>
 8006d80:	4603      	mov	r3, r0
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	230a      	movs	r3, #10
 8006d8a:	4889      	ldr	r0, [pc, #548]	; (8006fb0 <printRadioSettings+0x2e8>)
 8006d8c:	f7fc fd33 	bl	80037f6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8006d90:	2001      	movs	r0, #1
 8006d92:	f7ff fb49 	bl	8006428 <NRF24_read_register>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006da0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bfcc      	ite	gt
 8006da8:	2301      	movgt	r3, #1
 8006daa:	2300      	movle	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006db0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006db4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfcc      	ite	gt
 8006dbc:	2301      	movgt	r3, #1
 8006dbe:	2300      	movle	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006dc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006dc8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	bfcc      	ite	gt
 8006dd0:	2301      	movgt	r3, #1
 8006dd2:	2300      	movle	r3, #0
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006dd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006ddc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bfcc      	ite	gt
 8006de4:	2301      	movgt	r3, #1
 8006de6:	2300      	movle	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006dec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006df0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bfcc      	ite	gt
 8006df8:	2301      	movgt	r3, #1
 8006dfa:	2300      	movle	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006e00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e04:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bfcc      	ite	gt
 8006e0c:	2301      	movgt	r3, #1
 8006e0e:	2300      	movle	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f107 0008 	add.w	r0, r7, #8
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	9402      	str	r4, [sp, #8]
 8006e1a:	9101      	str	r1, [sp, #4]
 8006e1c:	9200      	str	r2, [sp, #0]
 8006e1e:	4633      	mov	r3, r6
 8006e20:	462a      	mov	r2, r5
 8006e22:	4967      	ldr	r1, [pc, #412]	; (8006fc0 <printRadioSettings+0x2f8>)
 8006e24:	f001 ff06 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006e28:	f107 0308 	add.w	r3, r7, #8
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7f9 f98f 	bl	8000150 <strlen>
 8006e32:	4603      	mov	r3, r0
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	f107 0108 	add.w	r1, r7, #8
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	485c      	ldr	r0, [pc, #368]	; (8006fb0 <printRadioSettings+0x2e8>)
 8006e3e:	f7fc fcda 	bl	80037f6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8006e42:	2002      	movs	r0, #2
 8006e44:	f7ff faf0 	bl	8006428 <NRF24_read_register>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006e4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e52:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	bfcc      	ite	gt
 8006e5a:	2301      	movgt	r3, #1
 8006e5c:	2300      	movle	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006e62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e66:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	bfcc      	ite	gt
 8006e6e:	2301      	movgt	r3, #1
 8006e70:	2300      	movle	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006e76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e7a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bfcc      	ite	gt
 8006e82:	2301      	movgt	r3, #1
 8006e84:	2300      	movle	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006e8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006e8e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfcc      	ite	gt
 8006e96:	2301      	movgt	r3, #1
 8006e98:	2300      	movle	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006e9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006ea2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfcc      	ite	gt
 8006eaa:	2301      	movgt	r3, #1
 8006eac:	2300      	movle	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006eb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006eb6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfcc      	ite	gt
 8006ebe:	2301      	movgt	r3, #1
 8006ec0:	2300      	movle	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f107 0008 	add.w	r0, r7, #8
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	9402      	str	r4, [sp, #8]
 8006ecc:	9101      	str	r1, [sp, #4]
 8006ece:	9200      	str	r2, [sp, #0]
 8006ed0:	4633      	mov	r3, r6
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	493b      	ldr	r1, [pc, #236]	; (8006fc4 <printRadioSettings+0x2fc>)
 8006ed6:	f001 fead 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 f936 	bl	8000150 <strlen>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f107 0108 	add.w	r1, r7, #8
 8006eec:	230a      	movs	r3, #10
 8006eee:	4830      	ldr	r0, [pc, #192]	; (8006fb0 <printRadioSettings+0x2e8>)
 8006ef0:	f7fc fc81 	bl	80037f6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8006ef4:	2003      	movs	r0, #3
 8006ef6:	f7ff fa97 	bl	8006428 <NRF24_read_register>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f003 0303 	and.w	r3, r3, #3
 8006f00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8006f04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006f08:	3302      	adds	r3, #2
 8006f0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8006f0e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8006f12:	f107 0308 	add.w	r3, r7, #8
 8006f16:	492c      	ldr	r1, [pc, #176]	; (8006fc8 <printRadioSettings+0x300>)
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fe8b 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7f9 f914 	bl	8000150 <strlen>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f107 0108 	add.w	r1, r7, #8
 8006f30:	230a      	movs	r3, #10
 8006f32:	481f      	ldr	r0, [pc, #124]	; (8006fb0 <printRadioSettings+0x2e8>)
 8006f34:	f7fc fc5f 	bl	80037f6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8006f38:	2005      	movs	r0, #5
 8006f3a:	f7ff fa75 	bl	8006428 <NRF24_read_register>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8006f44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f4c:	f107 0308 	add.w	r3, r7, #8
 8006f50:	491e      	ldr	r1, [pc, #120]	; (8006fcc <printRadioSettings+0x304>)
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 fe6e 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7f9 f8f7 	bl	8000150 <strlen>
 8006f62:	4603      	mov	r3, r0
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	f107 0108 	add.w	r1, r7, #8
 8006f6a:	230a      	movs	r3, #10
 8006f6c:	4810      	ldr	r0, [pc, #64]	; (8006fb0 <printRadioSettings+0x2e8>)
 8006f6e:	f7fc fc42 	bl	80037f6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8006f72:	2006      	movs	r0, #6
 8006f74:	f7ff fa58 	bl	8006428 <NRF24_read_register>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8006f7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d024      	beq.n	8006fd4 <printRadioSettings+0x30c>
 8006f8a:	f107 0308 	add.w	r3, r7, #8
 8006f8e:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <printRadioSettings+0x308>)
 8006f90:	461c      	mov	r4, r3
 8006f92:	4615      	mov	r5, r2
 8006f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006f9c:	6020      	str	r0, [r4, #0]
 8006f9e:	3404      	adds	r4, #4
 8006fa0:	8021      	strh	r1, [r4, #0]
 8006fa2:	3402      	adds	r4, #2
 8006fa4:	0c0b      	lsrs	r3, r1, #16
 8006fa6:	7023      	strb	r3, [r4, #0]
 8006fa8:	e023      	b.n	8006ff2 <printRadioSettings+0x32a>
 8006faa:	bf00      	nop
 8006fac:	08009470 	.word	0x08009470
 8006fb0:	2000026c 	.word	0x2000026c
 8006fb4:	080094a4 	.word	0x080094a4
 8006fb8:	080094c0 	.word	0x080094c0
 8006fbc:	080094dc 	.word	0x080094dc
 8006fc0:	080094f0 	.word	0x080094f0
 8006fc4:	08009534 	.word	0x08009534
 8006fc8:	08009580 	.word	0x08009580
 8006fcc:	0800959c 	.word	0x0800959c
 8006fd0:	080095b0 	.word	0x080095b0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8006fd4:	f107 0308 	add.w	r3, r7, #8
 8006fd8:	4a29      	ldr	r2, [pc, #164]	; (8007080 <printRadioSettings+0x3b8>)
 8006fda:	461c      	mov	r4, r3
 8006fdc:	4615      	mov	r5, r2
 8006fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006fe6:	6020      	str	r0, [r4, #0]
 8006fe8:	3404      	adds	r4, #4
 8006fea:	8021      	strh	r1, [r4, #0]
 8006fec:	3402      	adds	r4, #2
 8006fee:	0c0b      	lsrs	r3, r1, #16
 8006ff0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006ff2:	f107 0308 	add.w	r3, r7, #8
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7f9 f8aa 	bl	8000150 <strlen>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f107 0108 	add.w	r1, r7, #8
 8007004:	230a      	movs	r3, #10
 8007006:	481f      	ldr	r0, [pc, #124]	; (8007084 <printRadioSettings+0x3bc>)
 8007008:	f7fc fbf5 	bl	80037f6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800700c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007010:	f003 0306 	and.w	r3, r3, #6
 8007014:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8007018:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800701c:	085b      	lsrs	r3, r3, #1
 800701e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8007022:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <printRadioSettings+0x376>
 800702a:	f107 0308 	add.w	r3, r7, #8
 800702e:	4a16      	ldr	r2, [pc, #88]	; (8007088 <printRadioSettings+0x3c0>)
 8007030:	461c      	mov	r4, r3
 8007032:	4615      	mov	r5, r2
 8007034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007038:	682b      	ldr	r3, [r5, #0]
 800703a:	6023      	str	r3, [r4, #0]
 800703c:	e037      	b.n	80070ae <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800703e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007042:	2b01      	cmp	r3, #1
 8007044:	d109      	bne.n	800705a <printRadioSettings+0x392>
 8007046:	f107 0308 	add.w	r3, r7, #8
 800704a:	4a10      	ldr	r2, [pc, #64]	; (800708c <printRadioSettings+0x3c4>)
 800704c:	461c      	mov	r4, r3
 800704e:	4615      	mov	r5, r2
 8007050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	6023      	str	r3, [r4, #0]
 8007058:	e029      	b.n	80070ae <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800705a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800705e:	2b02      	cmp	r3, #2
 8007060:	d118      	bne.n	8007094 <printRadioSettings+0x3cc>
 8007062:	f107 0308 	add.w	r3, r7, #8
 8007066:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <printRadioSettings+0x3c8>)
 8007068:	461c      	mov	r4, r3
 800706a:	4615      	mov	r5, r2
 800706c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800706e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	8022      	strh	r2, [r4, #0]
 8007076:	3402      	adds	r4, #2
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	7023      	strb	r3, [r4, #0]
 800707c:	e017      	b.n	80070ae <printRadioSettings+0x3e6>
 800707e:	bf00      	nop
 8007080:	080095c8 	.word	0x080095c8
 8007084:	2000026c 	.word	0x2000026c
 8007088:	080095e0 	.word	0x080095e0
 800708c:	080095f4 	.word	0x080095f4
 8007090:	08009608 	.word	0x08009608
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8007094:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007098:	2b03      	cmp	r3, #3
 800709a:	d108      	bne.n	80070ae <printRadioSettings+0x3e6>
 800709c:	f107 0308 	add.w	r3, r7, #8
 80070a0:	4ad7      	ldr	r2, [pc, #860]	; (8007400 <printRadioSettings+0x738>)
 80070a2:	461c      	mov	r4, r3
 80070a4:	4615      	mov	r5, r2
 80070a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80070ae:	f107 0308 	add.w	r3, r7, #8
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 f84c 	bl	8000150 <strlen>
 80070b8:	4603      	mov	r3, r0
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	f107 0108 	add.w	r1, r7, #8
 80070c0:	230a      	movs	r3, #10
 80070c2:	48d0      	ldr	r0, [pc, #832]	; (8007404 <printRadioSettings+0x73c>)
 80070c4:	f7fc fb97 	bl	80037f6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80070c8:	463b      	mov	r3, r7
 80070ca:	2205      	movs	r2, #5
 80070cc:	4619      	mov	r1, r3
 80070ce:	200a      	movs	r0, #10
 80070d0:	f7ff f9d2 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80070d4:	793b      	ldrb	r3, [r7, #4]
 80070d6:	461c      	mov	r4, r3
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	461d      	mov	r5, r3
 80070dc:	78bb      	ldrb	r3, [r7, #2]
 80070de:	787a      	ldrb	r2, [r7, #1]
 80070e0:	7839      	ldrb	r1, [r7, #0]
 80070e2:	f107 0008 	add.w	r0, r7, #8
 80070e6:	9102      	str	r1, [sp, #8]
 80070e8:	9201      	str	r2, [sp, #4]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	462b      	mov	r3, r5
 80070ee:	4622      	mov	r2, r4
 80070f0:	49c5      	ldr	r1, [pc, #788]	; (8007408 <printRadioSettings+0x740>)
 80070f2:	f001 fd9f 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80070f6:	f107 0308 	add.w	r3, r7, #8
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7f9 f828 	bl	8000150 <strlen>
 8007100:	4603      	mov	r3, r0
 8007102:	b29a      	uxth	r2, r3
 8007104:	f107 0108 	add.w	r1, r7, #8
 8007108:	230a      	movs	r3, #10
 800710a:	48be      	ldr	r0, [pc, #760]	; (8007404 <printRadioSettings+0x73c>)
 800710c:	f7fc fb73 	bl	80037f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8007110:	463b      	mov	r3, r7
 8007112:	2205      	movs	r2, #5
 8007114:	4619      	mov	r1, r3
 8007116:	200b      	movs	r0, #11
 8007118:	f7ff f9ae 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800711c:	793b      	ldrb	r3, [r7, #4]
 800711e:	461c      	mov	r4, r3
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	461d      	mov	r5, r3
 8007124:	78bb      	ldrb	r3, [r7, #2]
 8007126:	787a      	ldrb	r2, [r7, #1]
 8007128:	7839      	ldrb	r1, [r7, #0]
 800712a:	f107 0008 	add.w	r0, r7, #8
 800712e:	9102      	str	r1, [sp, #8]
 8007130:	9201      	str	r2, [sp, #4]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	462b      	mov	r3, r5
 8007136:	4622      	mov	r2, r4
 8007138:	49b4      	ldr	r1, [pc, #720]	; (800740c <printRadioSettings+0x744>)
 800713a:	f001 fd7b 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f7f9 f804 	bl	8000150 <strlen>
 8007148:	4603      	mov	r3, r0
 800714a:	b29a      	uxth	r2, r3
 800714c:	f107 0108 	add.w	r1, r7, #8
 8007150:	230a      	movs	r3, #10
 8007152:	48ac      	ldr	r0, [pc, #688]	; (8007404 <printRadioSettings+0x73c>)
 8007154:	f7fc fb4f 	bl	80037f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8007158:	463b      	mov	r3, r7
 800715a:	2201      	movs	r2, #1
 800715c:	4619      	mov	r1, r3
 800715e:	200c      	movs	r0, #12
 8007160:	f7ff f98a 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007164:	783b      	ldrb	r3, [r7, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	49a8      	ldr	r1, [pc, #672]	; (8007410 <printRadioSettings+0x748>)
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fd60 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007174:	f107 0308 	add.w	r3, r7, #8
 8007178:	4618      	mov	r0, r3
 800717a:	f7f8 ffe9 	bl	8000150 <strlen>
 800717e:	4603      	mov	r3, r0
 8007180:	b29a      	uxth	r2, r3
 8007182:	f107 0108 	add.w	r1, r7, #8
 8007186:	230a      	movs	r3, #10
 8007188:	489e      	ldr	r0, [pc, #632]	; (8007404 <printRadioSettings+0x73c>)
 800718a:	f7fc fb34 	bl	80037f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800718e:	463b      	mov	r3, r7
 8007190:	2201      	movs	r2, #1
 8007192:	4619      	mov	r1, r3
 8007194:	200d      	movs	r0, #13
 8007196:	f7ff f96f 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800719a:	783b      	ldrb	r3, [r7, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	f107 0308 	add.w	r3, r7, #8
 80071a2:	499c      	ldr	r1, [pc, #624]	; (8007414 <printRadioSettings+0x74c>)
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 fd45 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80071aa:	f107 0308 	add.w	r3, r7, #8
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f8 ffce 	bl	8000150 <strlen>
 80071b4:	4603      	mov	r3, r0
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	f107 0108 	add.w	r1, r7, #8
 80071bc:	230a      	movs	r3, #10
 80071be:	4891      	ldr	r0, [pc, #580]	; (8007404 <printRadioSettings+0x73c>)
 80071c0:	f7fc fb19 	bl	80037f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80071c4:	463b      	mov	r3, r7
 80071c6:	2201      	movs	r2, #1
 80071c8:	4619      	mov	r1, r3
 80071ca:	200e      	movs	r0, #14
 80071cc:	f7ff f954 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80071d0:	783b      	ldrb	r3, [r7, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f107 0308 	add.w	r3, r7, #8
 80071d8:	498f      	ldr	r1, [pc, #572]	; (8007418 <printRadioSettings+0x750>)
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fd2a 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80071e0:	f107 0308 	add.w	r3, r7, #8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7f8 ffb3 	bl	8000150 <strlen>
 80071ea:	4603      	mov	r3, r0
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	f107 0108 	add.w	r1, r7, #8
 80071f2:	230a      	movs	r3, #10
 80071f4:	4883      	ldr	r0, [pc, #524]	; (8007404 <printRadioSettings+0x73c>)
 80071f6:	f7fc fafe 	bl	80037f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80071fa:	463b      	mov	r3, r7
 80071fc:	2201      	movs	r2, #1
 80071fe:	4619      	mov	r1, r3
 8007200:	200f      	movs	r0, #15
 8007202:	f7ff f939 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8007206:	783b      	ldrb	r3, [r7, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	4983      	ldr	r1, [pc, #524]	; (800741c <printRadioSettings+0x754>)
 8007210:	4618      	mov	r0, r3
 8007212:	f001 fd0f 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007216:	f107 0308 	add.w	r3, r7, #8
 800721a:	4618      	mov	r0, r3
 800721c:	f7f8 ff98 	bl	8000150 <strlen>
 8007220:	4603      	mov	r3, r0
 8007222:	b29a      	uxth	r2, r3
 8007224:	f107 0108 	add.w	r1, r7, #8
 8007228:	230a      	movs	r3, #10
 800722a:	4876      	ldr	r0, [pc, #472]	; (8007404 <printRadioSettings+0x73c>)
 800722c:	f7fc fae3 	bl	80037f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8007230:	463b      	mov	r3, r7
 8007232:	2205      	movs	r2, #5
 8007234:	4619      	mov	r1, r3
 8007236:	2010      	movs	r0, #16
 8007238:	f7ff f91e 	bl	8006478 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800723c:	793b      	ldrb	r3, [r7, #4]
 800723e:	461c      	mov	r4, r3
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	461d      	mov	r5, r3
 8007244:	78bb      	ldrb	r3, [r7, #2]
 8007246:	787a      	ldrb	r2, [r7, #1]
 8007248:	7839      	ldrb	r1, [r7, #0]
 800724a:	f107 0008 	add.w	r0, r7, #8
 800724e:	9102      	str	r1, [sp, #8]
 8007250:	9201      	str	r2, [sp, #4]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	462b      	mov	r3, r5
 8007256:	4622      	mov	r2, r4
 8007258:	4971      	ldr	r1, [pc, #452]	; (8007420 <printRadioSettings+0x758>)
 800725a:	f001 fceb 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800725e:	f107 0308 	add.w	r3, r7, #8
 8007262:	4618      	mov	r0, r3
 8007264:	f7f8 ff74 	bl	8000150 <strlen>
 8007268:	4603      	mov	r3, r0
 800726a:	b29a      	uxth	r2, r3
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	230a      	movs	r3, #10
 8007272:	4864      	ldr	r0, [pc, #400]	; (8007404 <printRadioSettings+0x73c>)
 8007274:	f7fc fabf 	bl	80037f6 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8007278:	2011      	movs	r0, #17
 800727a:	f7ff f8d5 	bl	8006428 <NRF24_read_register>
 800727e:	4603      	mov	r3, r0
 8007280:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007284:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800728c:	f107 0308 	add.w	r3, r7, #8
 8007290:	4964      	ldr	r1, [pc, #400]	; (8007424 <printRadioSettings+0x75c>)
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fcce 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007298:	f107 0308 	add.w	r3, r7, #8
 800729c:	4618      	mov	r0, r3
 800729e:	f7f8 ff57 	bl	8000150 <strlen>
 80072a2:	4603      	mov	r3, r0
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f107 0108 	add.w	r1, r7, #8
 80072aa:	230a      	movs	r3, #10
 80072ac:	4855      	ldr	r0, [pc, #340]	; (8007404 <printRadioSettings+0x73c>)
 80072ae:	f7fc faa2 	bl	80037f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80072b2:	2012      	movs	r0, #18
 80072b4:	f7ff f8b8 	bl	8006428 <NRF24_read_register>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80072be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	4957      	ldr	r1, [pc, #348]	; (8007428 <printRadioSettings+0x760>)
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fcb1 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7f8 ff3a 	bl	8000150 <strlen>
 80072dc:	4603      	mov	r3, r0
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	230a      	movs	r3, #10
 80072e6:	4847      	ldr	r0, [pc, #284]	; (8007404 <printRadioSettings+0x73c>)
 80072e8:	f7fc fa85 	bl	80037f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80072ec:	2013      	movs	r0, #19
 80072ee:	f7ff f89b 	bl	8006428 <NRF24_read_register>
 80072f2:	4603      	mov	r3, r0
 80072f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80072f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80072fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007300:	f107 0308 	add.w	r3, r7, #8
 8007304:	4949      	ldr	r1, [pc, #292]	; (800742c <printRadioSettings+0x764>)
 8007306:	4618      	mov	r0, r3
 8007308:	f001 fc94 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800730c:	f107 0308 	add.w	r3, r7, #8
 8007310:	4618      	mov	r0, r3
 8007312:	f7f8 ff1d 	bl	8000150 <strlen>
 8007316:	4603      	mov	r3, r0
 8007318:	b29a      	uxth	r2, r3
 800731a:	f107 0108 	add.w	r1, r7, #8
 800731e:	230a      	movs	r3, #10
 8007320:	4838      	ldr	r0, [pc, #224]	; (8007404 <printRadioSettings+0x73c>)
 8007322:	f7fc fa68 	bl	80037f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8007326:	2014      	movs	r0, #20
 8007328:	f7ff f87e 	bl	8006428 <NRF24_read_register>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8007332:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	493c      	ldr	r1, [pc, #240]	; (8007430 <printRadioSettings+0x768>)
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fc77 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007346:	f107 0308 	add.w	r3, r7, #8
 800734a:	4618      	mov	r0, r3
 800734c:	f7f8 ff00 	bl	8000150 <strlen>
 8007350:	4603      	mov	r3, r0
 8007352:	b29a      	uxth	r2, r3
 8007354:	f107 0108 	add.w	r1, r7, #8
 8007358:	230a      	movs	r3, #10
 800735a:	482a      	ldr	r0, [pc, #168]	; (8007404 <printRadioSettings+0x73c>)
 800735c:	f7fc fa4b 	bl	80037f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8007360:	2015      	movs	r0, #21
 8007362:	f7ff f861 	bl	8006428 <NRF24_read_register>
 8007366:	4603      	mov	r3, r0
 8007368:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800736c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007374:	f107 0308 	add.w	r3, r7, #8
 8007378:	492e      	ldr	r1, [pc, #184]	; (8007434 <printRadioSettings+0x76c>)
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fc5a 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007380:	f107 0308 	add.w	r3, r7, #8
 8007384:	4618      	mov	r0, r3
 8007386:	f7f8 fee3 	bl	8000150 <strlen>
 800738a:	4603      	mov	r3, r0
 800738c:	b29a      	uxth	r2, r3
 800738e:	f107 0108 	add.w	r1, r7, #8
 8007392:	230a      	movs	r3, #10
 8007394:	481b      	ldr	r0, [pc, #108]	; (8007404 <printRadioSettings+0x73c>)
 8007396:	f7fc fa2e 	bl	80037f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800739a:	2016      	movs	r0, #22
 800739c:	f7ff f844 	bl	8006428 <NRF24_read_register>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80073a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80073aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073ae:	f107 0308 	add.w	r3, r7, #8
 80073b2:	4921      	ldr	r1, [pc, #132]	; (8007438 <printRadioSettings+0x770>)
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fc3d 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	4618      	mov	r0, r3
 80073c0:	f7f8 fec6 	bl	8000150 <strlen>
 80073c4:	4603      	mov	r3, r0
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	f107 0108 	add.w	r1, r7, #8
 80073cc:	230a      	movs	r3, #10
 80073ce:	480d      	ldr	r0, [pc, #52]	; (8007404 <printRadioSettings+0x73c>)
 80073d0:	f7fc fa11 	bl	80037f6 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80073d4:	201c      	movs	r0, #28
 80073d6:	f7ff f827 	bl	8006428 <NRF24_read_register>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80073e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80073e4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bfcc      	ite	gt
 80073ec:	2301      	movgt	r3, #1
 80073ee:	2300      	movle	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80073f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	e01e      	b.n	800743c <printRadioSettings+0x774>
 80073fe:	bf00      	nop
 8007400:	0800961c 	.word	0x0800961c
 8007404:	2000026c 	.word	0x2000026c
 8007408:	08009630 	.word	0x08009630
 800740c:	08009660 	.word	0x08009660
 8007410:	08009690 	.word	0x08009690
 8007414:	080096b8 	.word	0x080096b8
 8007418:	080096e0 	.word	0x080096e0
 800741c:	08009708 	.word	0x08009708
 8007420:	08009730 	.word	0x08009730
 8007424:	0800975c 	.word	0x0800975c
 8007428:	08009778 	.word	0x08009778
 800742c:	08009794 	.word	0x08009794
 8007430:	080097b0 	.word	0x080097b0
 8007434:	080097cc 	.word	0x080097cc
 8007438:	080097e8 	.word	0x080097e8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfcc      	ite	gt
 8007440:	2301      	movgt	r3, #1
 8007442:	2300      	movle	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007448:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800744c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007450:	2b00      	cmp	r3, #0
 8007452:	bfcc      	ite	gt
 8007454:	2301      	movgt	r3, #1
 8007456:	2300      	movle	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800745c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007460:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007464:	2b00      	cmp	r3, #0
 8007466:	bfcc      	ite	gt
 8007468:	2301      	movgt	r3, #1
 800746a:	2300      	movle	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007474:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8007478:	2b00      	cmp	r3, #0
 800747a:	bfcc      	ite	gt
 800747c:	2301      	movgt	r3, #1
 800747e:	2300      	movle	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8007484:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007488:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800748c:	2b00      	cmp	r3, #0
 800748e:	bfcc      	ite	gt
 8007490:	2301      	movgt	r3, #1
 8007492:	2300      	movle	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f107 0008 	add.w	r0, r7, #8
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	9402      	str	r4, [sp, #8]
 800749e:	9101      	str	r1, [sp, #4]
 80074a0:	9200      	str	r2, [sp, #0]
 80074a2:	4633      	mov	r3, r6
 80074a4:	462a      	mov	r2, r5
 80074a6:	494a      	ldr	r1, [pc, #296]	; (80075d0 <printRadioSettings+0x908>)
 80074a8:	f001 fbc4 	bl	8008c34 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7f8 fe4d 	bl	8000150 <strlen>
 80074b6:	4603      	mov	r3, r0
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	f107 0108 	add.w	r1, r7, #8
 80074be:	230a      	movs	r3, #10
 80074c0:	4844      	ldr	r0, [pc, #272]	; (80075d4 <printRadioSettings+0x90c>)
 80074c2:	f7fc f998 	bl	80037f6 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80074c6:	201d      	movs	r0, #29
 80074c8:	f7fe ffae 	bl	8006428 <NRF24_read_register>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80074d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00c      	beq.n	80074f8 <printRadioSettings+0x830>
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	4a3d      	ldr	r2, [pc, #244]	; (80075d8 <printRadioSettings+0x910>)
 80074e4:	461c      	mov	r4, r3
 80074e6:	4615      	mov	r5, r2
 80074e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80074f0:	6020      	str	r0, [r4, #0]
 80074f2:	3404      	adds	r4, #4
 80074f4:	8021      	strh	r1, [r4, #0]
 80074f6:	e00e      	b.n	8007516 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80074f8:	f107 0308 	add.w	r3, r7, #8
 80074fc:	4a37      	ldr	r2, [pc, #220]	; (80075dc <printRadioSettings+0x914>)
 80074fe:	461c      	mov	r4, r3
 8007500:	4615      	mov	r5, r2
 8007502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007506:	e895 0003 	ldmia.w	r5, {r0, r1}
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	3404      	adds	r4, #4
 800750e:	8021      	strh	r1, [r4, #0]
 8007510:	3402      	adds	r4, #2
 8007512:	0c0b      	lsrs	r3, r1, #16
 8007514:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	4618      	mov	r0, r3
 800751c:	f7f8 fe18 	bl	8000150 <strlen>
 8007520:	4603      	mov	r3, r0
 8007522:	b29a      	uxth	r2, r3
 8007524:	f107 0108 	add.w	r1, r7, #8
 8007528:	230a      	movs	r3, #10
 800752a:	482a      	ldr	r0, [pc, #168]	; (80075d4 <printRadioSettings+0x90c>)
 800752c:	f7fc f963 	bl	80037f6 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8007530:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <printRadioSettings+0x88c>
 800753c:	f107 0308 	add.w	r3, r7, #8
 8007540:	4a27      	ldr	r2, [pc, #156]	; (80075e0 <printRadioSettings+0x918>)
 8007542:	461c      	mov	r4, r3
 8007544:	4615      	mov	r5, r2
 8007546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800754e:	c403      	stmia	r4!, {r0, r1}
 8007550:	8022      	strh	r2, [r4, #0]
 8007552:	e00d      	b.n	8007570 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8007554:	f107 0308 	add.w	r3, r7, #8
 8007558:	4a22      	ldr	r2, [pc, #136]	; (80075e4 <printRadioSettings+0x91c>)
 800755a:	461c      	mov	r4, r3
 800755c:	4615      	mov	r5, r2
 800755e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007566:	c403      	stmia	r4!, {r0, r1}
 8007568:	8022      	strh	r2, [r4, #0]
 800756a:	3402      	adds	r4, #2
 800756c:	0c13      	lsrs	r3, r2, #16
 800756e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8007570:	f107 0308 	add.w	r3, r7, #8
 8007574:	4618      	mov	r0, r3
 8007576:	f7f8 fdeb 	bl	8000150 <strlen>
 800757a:	4603      	mov	r3, r0
 800757c:	b29a      	uxth	r2, r3
 800757e:	f107 0108 	add.w	r1, r7, #8
 8007582:	230a      	movs	r3, #10
 8007584:	4813      	ldr	r0, [pc, #76]	; (80075d4 <printRadioSettings+0x90c>)
 8007586:	f7fc f936 	bl	80037f6 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800758a:	f107 0308 	add.w	r3, r7, #8
 800758e:	4a16      	ldr	r2, [pc, #88]	; (80075e8 <printRadioSettings+0x920>)
 8007590:	461c      	mov	r4, r3
 8007592:	4615      	mov	r5, r2
 8007594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800759a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800759c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	8022      	strh	r2, [r4, #0]
 80075a6:	3402      	adds	r4, #2
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7f8 fdcd 	bl	8000150 <strlen>
 80075b6:	4603      	mov	r3, r0
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f107 0108 	add.w	r1, r7, #8
 80075be:	230a      	movs	r3, #10
 80075c0:	4804      	ldr	r0, [pc, #16]	; (80075d4 <printRadioSettings+0x90c>)
 80075c2:	f7fc f918 	bl	80037f6 <HAL_UART_Transmit>
}
 80075c6:	bf00      	nop
 80075c8:	3774      	adds	r7, #116	; 0x74
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	08009804 	.word	0x08009804
 80075d4:	2000026c 	.word	0x2000026c
 80075d8:	08009850 	.word	0x08009850
 80075dc:	08009868 	.word	0x08009868
 80075e0:	08009880 	.word	0x08009880
 80075e4:	0800989c 	.word	0x0800989c
 80075e8:	08009470 	.word	0x08009470

080075ec <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80075ec:	b084      	sub	sp, #16
 80075ee:	b4b0      	push	{r4, r5, r7}
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	f107 040c 	add.w	r4, r7, #12
 80075f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <nrf24_DebugUART_Init+0x34>)
 80075fc:	461c      	mov	r4, r3
 80075fe:	f107 050c 	add.w	r5, r7, #12
 8007602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800760c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8007616:	bf00      	nop
 8007618:	46bd      	mov	sp, r7
 800761a:	bcb0      	pop	{r4, r5, r7}
 800761c:	b004      	add	sp, #16
 800761e:	4770      	bx	lr
 8007620:	2000026c 	.word	0x2000026c

08007624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007626:	b097      	sub	sp, #92	; 0x5c
 8007628:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800762a:	f7f9 fcd9 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800762e:	f000 fc69 	bl	8007f04 <SystemClock_Config>
   *  BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007632:	f000 fd21 	bl	8008078 <MX_GPIO_Init>
  MX_SPI1_Init();
 8007636:	f000 fcbf 	bl	8007fb8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800763a:	f000 fcf3 	bl	8008024 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800763e:	f000 febb 	bl	80083b8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, CE_Pin_Pin, hspi1);
 8007642:	4c36      	ldr	r4, [pc, #216]	; (800771c <main+0xf8>)
 8007644:	4668      	mov	r0, sp
 8007646:	1d23      	adds	r3, r4, #4
 8007648:	2254      	movs	r2, #84	; 0x54
 800764a:	4619      	mov	r1, r3
 800764c:	f001 fade 	bl	8008c0c <memcpy>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	2208      	movs	r2, #8
 8007654:	2110      	movs	r1, #16
 8007656:	4832      	ldr	r0, [pc, #200]	; (8007720 <main+0xfc>)
 8007658:	f7fe ffce 	bl	80065f8 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 800765c:	4e31      	ldr	r6, [pc, #196]	; (8007724 <main+0x100>)
 800765e:	466d      	mov	r5, sp
 8007660:	f106 0410 	add.w	r4, r6, #16
 8007664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800766a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800766c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007670:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007674:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007678:	f7ff ffb8 	bl	80075ec <nrf24_DebugUART_Init>

  //**** TRANSMIT - ACK ****//
  NRF24_setAutoAck(true);
 800767c:	2001      	movs	r0, #1
 800767e:	f7ff fa05 	bl	8006a8c <NRF24_setAutoAck>
	NRF24_setChannel(52);
 8007682:	2034      	movs	r0, #52	; 0x34
 8007684:	f7ff f94d 	bl	8006922 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8007688:	2020      	movs	r0, #32
 800768a:	f7ff f95f 	bl	800694c <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 800768e:	4b26      	ldr	r3, [pc, #152]	; (8007728 <main+0x104>)
 8007690:	cb18      	ldmia	r3, {r3, r4}
 8007692:	461a      	mov	r2, r3
 8007694:	4623      	mov	r3, r4
 8007696:	2001      	movs	r0, #1
 8007698:	f7ff f8da 	bl	8006850 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 800769c:	f7ff f9ac 	bl	80069f8 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 80076a0:	f7ff f97c 	bl	800699c <NRF24_enableAckPayload>

	NRF24_startListening();
 80076a4:	f7ff f888 	bl	80067b8 <NRF24_startListening>
  printRadioSettings();
 80076a8:	f7ff fb0e 	bl	8006cc8 <printRadioSettings>

  sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", 300, 90, 100);
 80076ac:	2364      	movs	r3, #100	; 0x64
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	235a      	movs	r3, #90	; 0x5a
 80076b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076b6:	491d      	ldr	r1, [pc, #116]	; (800772c <main+0x108>)
 80076b8:	481d      	ldr	r0, [pc, #116]	; (8007730 <main+0x10c>)
 80076ba:	f001 fabb 	bl	8008c34 <siprintf>
 HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80076be:	481c      	ldr	r0, [pc, #112]	; (8007730 <main+0x10c>)
 80076c0:	f7f8 fd46 	bl	8000150 <strlen>
 80076c4:	4603      	mov	r3, r0
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076cc:	4918      	ldr	r1, [pc, #96]	; (8007730 <main+0x10c>)
 80076ce:	4815      	ldr	r0, [pc, #84]	; (8007724 <main+0x100>)
 80076d0:	f7fc f891 	bl	80037f6 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(NRF24_available())
 80076d4:	f7ff f894 	bl	8006800 <NRF24_available>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0fa      	beq.n	80076d4 <main+0xb0>
	{
		NRF24_read(rx_buffer, sizeof(rx_buffer));
 80076de:	2114      	movs	r1, #20
 80076e0:	4814      	ldr	r0, [pc, #80]	; (8007734 <main+0x110>)
 80076e2:	f7ff f895 	bl	8006810 <NRF24_read>
//		HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10);

		memcpy(accel, rx_buffer, sizeof(accel));
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <main+0x114>)
 80076e8:	4a12      	ldr	r2, [pc, #72]	; (8007734 <main+0x110>)
 80076ea:	6811      	ldr	r1, [r2, #0]
 80076ec:	6019      	str	r1, [r3, #0]
 80076ee:	8892      	ldrh	r2, [r2, #4]
 80076f0:	809a      	strh	r2, [r3, #4]
		memcpy(gyro, &rx_buffer[3], sizeof(gyro));
 80076f2:	4a12      	ldr	r2, [pc, #72]	; (800773c <main+0x118>)
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <main+0x110>)
 80076f6:	3306      	adds	r3, #6
 80076f8:	6819      	ldr	r1, [r3, #0]
 80076fa:	6011      	str	r1, [r2, #0]
 80076fc:	889b      	ldrh	r3, [r3, #4]
 80076fe:	8093      	strh	r3, [r2, #4]
		memcpy(mag, &rx_buffer[6], sizeof(mag));
 8007700:	4a0f      	ldr	r2, [pc, #60]	; (8007740 <main+0x11c>)
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <main+0x110>)
 8007704:	330c      	adds	r3, #12
 8007706:	6819      	ldr	r1, [r3, #0]
 8007708:	6011      	str	r1, [r2, #0]
 800770a:	889b      	ldrh	r3, [r3, #4]
 800770c:	8093      	strh	r3, [r2, #4]
//		sprintf(uart_buffer, "\1(Ax: %i, Ay: %i, Az: %i)\t(Gx: %i, Gy: %i, Gz: %i)\t(Mx: %i, My: %i, Mz: %i)\n\r",
//			accel[0], accel[1], accel[2],
//			gyro[0], gyro[1], gyro[2],
//			mag[0], mag[1], mag[2]);
//		HAL_UART_Transmit(&huart1, uart_buffer, sizeof(uart_buffer), 10);
		moveArm(accel, gyro, mag);
 800770e:	4a0c      	ldr	r2, [pc, #48]	; (8007740 <main+0x11c>)
 8007710:	490a      	ldr	r1, [pc, #40]	; (800773c <main+0x118>)
 8007712:	4809      	ldr	r0, [pc, #36]	; (8007738 <main+0x114>)
 8007714:	f000 f818 	bl	8007748 <moveArm>
	if(NRF24_available())
 8007718:	e7dc      	b.n	80076d4 <main+0xb0>
 800771a:	bf00      	nop
 800771c:	2000044c 	.word	0x2000044c
 8007720:	40010800 	.word	0x40010800
 8007724:	2000040c 	.word	0x2000040c
 8007728:	200000e0 	.word	0x200000e0
 800772c:	080099b4 	.word	0x080099b4
 8007730:	200003a8 	.word	0x200003a8
 8007734:	20000328 	.word	0x20000328
 8007738:	20000320 	.word	0x20000320
 800773c:	200003a0 	.word	0x200003a0
 8007740:	200004a4 	.word	0x200004a4
 8007744:	00000000 	.word	0x00000000

08007748 <moveArm>:
  }
  }
  /* USER CODE END 3 */
}

void moveArm(int16_t accel[3], int16_t gyro[3], int16_t mag[3]){
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b092      	sub	sp, #72	; 0x48
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]

	//ICM_20948_AGMT_t agmt;
	float accx = accel[0];
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800775a:	4618      	mov	r0, r3
 800775c:	f7f9 fa00 	bl	8000b60 <__aeabi_i2f>
 8007760:	4603      	mov	r3, r0
 8007762:	63fb      	str	r3, [r7, #60]	; 0x3c
	float accy = accel[1];
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3302      	adds	r3, #2
 8007768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800776c:	4618      	mov	r0, r3
 800776e:	f7f9 f9f7 	bl	8000b60 <__aeabi_i2f>
 8007772:	4603      	mov	r3, r0
 8007774:	63bb      	str	r3, [r7, #56]	; 0x38
	float accz = accel[2];
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3304      	adds	r3, #4
 800777a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800777e:	4618      	mov	r0, r3
 8007780:	f7f9 f9ee 	bl	8000b60 <__aeabi_i2f>
 8007784:	4603      	mov	r3, r0
 8007786:	637b      	str	r3, [r7, #52]	; 0x34

	float gyrx = gyro[0];
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800778e:	4618      	mov	r0, r3
 8007790:	f7f9 f9e6 	bl	8000b60 <__aeabi_i2f>
 8007794:	4603      	mov	r3, r0
 8007796:	633b      	str	r3, [r7, #48]	; 0x30
	float gyry = gyro[1];
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	3302      	adds	r3, #2
 800779c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7f9 f9dd 	bl	8000b60 <__aeabi_i2f>
 80077a6:	4603      	mov	r3, r0
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float gyrz = gyro[2];
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3304      	adds	r3, #4
 80077ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f9 f9d4 	bl	8000b60 <__aeabi_i2f>
 80077b8:	4603      	mov	r3, r0
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28

	float magx = mag[0];
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f9 f9cc 	bl	8000b60 <__aeabi_i2f>
 80077c8:	4603      	mov	r3, r0
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
	float magy = mag[1];
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3302      	adds	r3, #2
 80077d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7f9 f9c3 	bl	8000b60 <__aeabi_i2f>
 80077da:	4603      	mov	r3, r0
 80077dc:	623b      	str	r3, [r7, #32]
	float magz = mag[2];
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	3304      	adds	r3, #4
 80077e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7f9 f9ba 	bl	8000b60 <__aeabi_i2f>
 80077ec:	4603      	mov	r3, r0
 80077ee:	61fb      	str	r3, [r7, #28]

	posR=posR+gyrz*rate/250;
 80077f0:	4b33      	ldr	r3, [pc, #204]	; (80078c0 <moveArm+0x178>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7f9 f9b3 	bl	8000b60 <__aeabi_i2f>
 80077fa:	4603      	mov	r3, r0
 80077fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fe:	4618      	mov	r0, r3
 8007800:	f7f9 fa02 	bl	8000c08 <__aeabi_fmul>
 8007804:	4603      	mov	r3, r0
 8007806:	492f      	ldr	r1, [pc, #188]	; (80078c4 <moveArm+0x17c>)
 8007808:	4618      	mov	r0, r3
 800780a:	f7f9 fab1 	bl	8000d70 <__aeabi_fdiv>
 800780e:	4603      	mov	r3, r0
 8007810:	461a      	mov	r2, r3
 8007812:	4b2d      	ldr	r3, [pc, #180]	; (80078c8 <moveArm+0x180>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	4610      	mov	r0, r2
 800781a:	f7f9 f8ed 	bl	80009f8 <__addsf3>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <moveArm+0x180>)
 8007824:	601a      	str	r2, [r3, #0]

	//int iposR = round(posR);
	if (posR>180){
 8007826:	4b28      	ldr	r3, [pc, #160]	; (80078c8 <moveArm+0x180>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4928      	ldr	r1, [pc, #160]	; (80078cc <moveArm+0x184>)
 800782c:	4618      	mov	r0, r3
 800782e:	f7f9 fba7 	bl	8000f80 <__aeabi_fcmpgt>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <moveArm+0xf8>
		posR = 180;
 8007838:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <moveArm+0x180>)
 800783a:	4a24      	ldr	r2, [pc, #144]	; (80078cc <moveArm+0x184>)
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	e00d      	b.n	800785c <moveArm+0x114>
	}else if (posR<0){
 8007840:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <moveArm+0x180>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f7f9 fb7b 	bl	8000f44 <__aeabi_fcmplt>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <moveArm+0x114>
		posR = 0;
 8007854:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <moveArm+0x180>)
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
	}

	posS= 300 - accx * 0.8;
 800785c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800785e:	f7f8 fde3 	bl	8000428 <__aeabi_f2d>
 8007862:	a313      	add	r3, pc, #76	; (adr r3, 80078b0 <moveArm+0x168>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f8 fe36 	bl	80004d8 <__aeabi_dmul>
 800786c:	4603      	mov	r3, r0
 800786e:	460c      	mov	r4, r1
 8007870:	461a      	mov	r2, r3
 8007872:	4623      	mov	r3, r4
 8007874:	a110      	add	r1, pc, #64	; (adr r1, 80078b8 <moveArm+0x170>)
 8007876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800787a:	f7f8 fc75 	bl	8000168 <__aeabi_dsub>
 800787e:	4603      	mov	r3, r0
 8007880:	460c      	mov	r4, r1
 8007882:	4618      	mov	r0, r3
 8007884:	4621      	mov	r1, r4
 8007886:	f7f9 f861 	bl	800094c <__aeabi_d2f>
 800788a:	4602      	mov	r2, r0
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <moveArm+0x188>)
 800788e:	601a      	str	r2, [r3, #0]
	//int iposS = round(posS);

	if (posS>300){
 8007890:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <moveArm+0x188>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	490f      	ldr	r1, [pc, #60]	; (80078d4 <moveArm+0x18c>)
 8007896:	4618      	mov	r0, r3
 8007898:	f7f9 fb72 	bl	8000f80 <__aeabi_fcmpgt>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d01a      	beq.n	80078d8 <moveArm+0x190>
		posS = 300;
 80078a2:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <moveArm+0x188>)
 80078a4:	4a0b      	ldr	r2, [pc, #44]	; (80078d4 <moveArm+0x18c>)
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	e022      	b.n	80078f0 <moveArm+0x1a8>
 80078aa:	bf00      	nop
 80078ac:	f3af 8000 	nop.w
 80078b0:	9999999a 	.word	0x9999999a
 80078b4:	3fe99999 	.word	0x3fe99999
 80078b8:	00000000 	.word	0x00000000
 80078bc:	4072c000 	.word	0x4072c000
 80078c0:	200000f4 	.word	0x200000f4
 80078c4:	437a0000 	.word	0x437a0000
 80078c8:	200000ec 	.word	0x200000ec
 80078cc:	43340000 	.word	0x43340000
 80078d0:	200000e8 	.word	0x200000e8
 80078d4:	43960000 	.word	0x43960000
	}else if (posS<10){
 80078d8:	4bc0      	ldr	r3, [pc, #768]	; (8007bdc <moveArm+0x494>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	49c0      	ldr	r1, [pc, #768]	; (8007be0 <moveArm+0x498>)
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f9 fb30 	bl	8000f44 <__aeabi_fcmplt>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <moveArm+0x1a8>
		posS = 10;
 80078ea:	4bbc      	ldr	r3, [pc, #752]	; (8007bdc <moveArm+0x494>)
 80078ec:	4abc      	ldr	r2, [pc, #752]	; (8007be0 <moveArm+0x498>)
 80078ee:	601a      	str	r2, [r3, #0]
	}

	posR1=posR;
 80078f0:	4bbc      	ldr	r3, [pc, #752]	; (8007be4 <moveArm+0x49c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7f9 fb4d 	bl	8000f94 <__aeabi_f2iz>
 80078fa:	4603      	mov	r3, r0
 80078fc:	b21a      	sxth	r2, r3
 80078fe:	4bba      	ldr	r3, [pc, #744]	; (8007be8 <moveArm+0x4a0>)
 8007900:	801a      	strh	r2, [r3, #0]
	posS1=posS1+posS;
 8007902:	4bba      	ldr	r3, [pc, #744]	; (8007bec <moveArm+0x4a4>)
 8007904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007908:	4618      	mov	r0, r3
 800790a:	f7f9 f929 	bl	8000b60 <__aeabi_i2f>
 800790e:	4602      	mov	r2, r0
 8007910:	4bb2      	ldr	r3, [pc, #712]	; (8007bdc <moveArm+0x494>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f7f9 f86e 	bl	80009f8 <__addsf3>
 800791c:	4603      	mov	r3, r0
 800791e:	4618      	mov	r0, r3
 8007920:	f7f9 fb38 	bl	8000f94 <__aeabi_f2iz>
 8007924:	4603      	mov	r3, r0
 8007926:	b21a      	sxth	r2, r3
 8007928:	4bb0      	ldr	r3, [pc, #704]	; (8007bec <moveArm+0x4a4>)
 800792a:	801a      	strh	r2, [r3, #0]

	n=n+1;
 800792c:	4bb0      	ldr	r3, [pc, #704]	; (8007bf0 <moveArm+0x4a8>)
 800792e:	f993 3000 	ldrsb.w	r3, [r3]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	3301      	adds	r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	b25a      	sxtb	r2, r3
 800793a:	4bad      	ldr	r3, [pc, #692]	; (8007bf0 <moveArm+0x4a8>)
 800793c:	701a      	strb	r2, [r3, #0]

	if (n==5){
 800793e:	4bac      	ldr	r3, [pc, #688]	; (8007bf0 <moveArm+0x4a8>)
 8007940:	f993 3000 	ldrsb.w	r3, [r3]
 8007944:	2b05      	cmp	r3, #5
 8007946:	f040 82b2 	bne.w	8007eae <moveArm+0x766>

		posS1=posS1/6;
 800794a:	4ba8      	ldr	r3, [pc, #672]	; (8007bec <moveArm+0x4a4>)
 800794c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007950:	4aa8      	ldr	r2, [pc, #672]	; (8007bf4 <moveArm+0x4ac>)
 8007952:	fb82 1203 	smull	r1, r2, r2, r3
 8007956:	17db      	asrs	r3, r3, #31
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	b21a      	sxth	r2, r3
 800795c:	4ba3      	ldr	r3, [pc, #652]	; (8007bec <moveArm+0x4a4>)
 800795e:	801a      	strh	r2, [r3, #0]
		posH1=posH1/6;
 8007960:	4ba5      	ldr	r3, [pc, #660]	; (8007bf8 <moveArm+0x4b0>)
 8007962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007966:	4aa3      	ldr	r2, [pc, #652]	; (8007bf4 <moveArm+0x4ac>)
 8007968:	fb82 1203 	smull	r1, r2, r2, r3
 800796c:	17db      	asrs	r3, r3, #31
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	b21a      	sxth	r2, r3
 8007972:	4ba1      	ldr	r3, [pc, #644]	; (8007bf8 <moveArm+0x4b0>)
 8007974:	801a      	strh	r2, [r3, #0]

		int16_t iposR = round(posR1);
 8007976:	4b9c      	ldr	r3, [pc, #624]	; (8007be8 <moveArm+0x4a0>)
 8007978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800797c:	4618      	mov	r0, r3
 800797e:	f7f8 fd41 	bl	8000404 <__aeabi_i2d>
 8007982:	4603      	mov	r3, r0
 8007984:	460c      	mov	r4, r1
 8007986:	4618      	mov	r0, r3
 8007988:	4621      	mov	r1, r4
 800798a:	f7f8 ffb7 	bl	80008fc <__aeabi_d2iz>
 800798e:	4603      	mov	r3, r0
 8007990:	837b      	strh	r3, [r7, #26]
		int16_t iposS = round(posS1);
 8007992:	4b96      	ldr	r3, [pc, #600]	; (8007bec <moveArm+0x4a4>)
 8007994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007998:	4618      	mov	r0, r3
 800799a:	f7f8 fd33 	bl	8000404 <__aeabi_i2d>
 800799e:	4603      	mov	r3, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	4618      	mov	r0, r3
 80079a4:	4621      	mov	r1, r4
 80079a6:	f7f8 ffa9 	bl	80008fc <__aeabi_d2iz>
 80079aa:	4603      	mov	r3, r0
 80079ac:	833b      	strh	r3, [r7, #24]
		int16_t iposH = 100;
 80079ae:	2364      	movs	r3, #100	; 0x64
 80079b0:	82fb      	strh	r3, [r7, #22]

		sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 80079b2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80079b6:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80079ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	460b      	mov	r3, r1
 80079c2:	498e      	ldr	r1, [pc, #568]	; (8007bfc <moveArm+0x4b4>)
 80079c4:	488e      	ldr	r0, [pc, #568]	; (8007c00 <moveArm+0x4b8>)
 80079c6:	f001 f935 	bl	8008c34 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80079ca:	488d      	ldr	r0, [pc, #564]	; (8007c00 <moveArm+0x4b8>)
 80079cc:	f7f8 fbc0 	bl	8000150 <strlen>
 80079d0:	4603      	mov	r3, r0
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079d8:	4989      	ldr	r1, [pc, #548]	; (8007c00 <moveArm+0x4b8>)
 80079da:	488a      	ldr	r0, [pc, #552]	; (8007c04 <moveArm+0x4bc>)
 80079dc:	f7fb ff0b 	bl	80037f6 <HAL_UART_Transmit>
		HAL_Delay(50);
 80079e0:	2032      	movs	r0, #50	; 0x32
 80079e2:	f7f9 fb5f 	bl	80010a4 <HAL_Delay>

		n=0;
 80079e6:	4b82      	ldr	r3, [pc, #520]	; (8007bf0 <moveArm+0x4a8>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	701a      	strb	r2, [r3, #0]

		if (iposR < 52 && iposR > 38 && iposS < 250 && iposS > 200  && x == 0){
 80079ec:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80079f0:	2b33      	cmp	r3, #51	; 0x33
 80079f2:	dc7d      	bgt.n	8007af0 <moveArm+0x3a8>
 80079f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80079f8:	2b26      	cmp	r3, #38	; 0x26
 80079fa:	dd79      	ble.n	8007af0 <moveArm+0x3a8>
 80079fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007a00:	2bf9      	cmp	r3, #249	; 0xf9
 8007a02:	dc75      	bgt.n	8007af0 <moveArm+0x3a8>
 8007a04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007a08:	2bc8      	cmp	r3, #200	; 0xc8
 8007a0a:	dd71      	ble.n	8007af0 <moveArm+0x3a8>
 8007a0c:	4b7e      	ldr	r3, [pc, #504]	; (8007c08 <moveArm+0x4c0>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d16d      	bne.n	8007af0 <moveArm+0x3a8>
				sprintf(uart_buffer, "G2201 S225 R45 H45 F10000\r\n");
 8007a14:	4a7a      	ldr	r2, [pc, #488]	; (8007c00 <moveArm+0x4b8>)
 8007a16:	4b7d      	ldr	r3, [pc, #500]	; (8007c0c <moveArm+0x4c4>)
 8007a18:	4615      	mov	r5, r2
 8007a1a:	461c      	mov	r4, r3
 8007a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a1e:	6028      	str	r0, [r5, #0]
 8007a20:	6069      	str	r1, [r5, #4]
 8007a22:	60aa      	str	r2, [r5, #8]
 8007a24:	60eb      	str	r3, [r5, #12]
 8007a26:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007a28:	6128      	str	r0, [r5, #16]
 8007a2a:	6169      	str	r1, [r5, #20]
 8007a2c:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007a2e:	4874      	ldr	r0, [pc, #464]	; (8007c00 <moveArm+0x4b8>)
 8007a30:	f7f8 fb8e 	bl	8000150 <strlen>
 8007a34:	4603      	mov	r3, r0
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a3c:	4970      	ldr	r1, [pc, #448]	; (8007c00 <moveArm+0x4b8>)
 8007a3e:	4871      	ldr	r0, [pc, #452]	; (8007c04 <moveArm+0x4bc>)
 8007a40:	f7fb fed9 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007a44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007a48:	f7f9 fb2c 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S225 R45 H30 F10000\r\n");
 8007a4c:	4a6c      	ldr	r2, [pc, #432]	; (8007c00 <moveArm+0x4b8>)
 8007a4e:	4b70      	ldr	r3, [pc, #448]	; (8007c10 <moveArm+0x4c8>)
 8007a50:	4615      	mov	r5, r2
 8007a52:	461c      	mov	r4, r3
 8007a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a56:	6028      	str	r0, [r5, #0]
 8007a58:	6069      	str	r1, [r5, #4]
 8007a5a:	60aa      	str	r2, [r5, #8]
 8007a5c:	60eb      	str	r3, [r5, #12]
 8007a5e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007a60:	6128      	str	r0, [r5, #16]
 8007a62:	6169      	str	r1, [r5, #20]
 8007a64:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007a66:	4866      	ldr	r0, [pc, #408]	; (8007c00 <moveArm+0x4b8>)
 8007a68:	f7f8 fb72 	bl	8000150 <strlen>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a74:	4962      	ldr	r1, [pc, #392]	; (8007c00 <moveArm+0x4b8>)
 8007a76:	4863      	ldr	r0, [pc, #396]	; (8007c04 <moveArm+0x4bc>)
 8007a78:	f7fb febd 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007a7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007a80:	f7f9 fb10 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "M2231 V1\r\n");
 8007a84:	4a5e      	ldr	r2, [pc, #376]	; (8007c00 <moveArm+0x4b8>)
 8007a86:	4b63      	ldr	r3, [pc, #396]	; (8007c14 <moveArm+0x4cc>)
 8007a88:	cb03      	ldmia	r3!, {r0, r1}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	6051      	str	r1, [r2, #4]
 8007a8e:	8819      	ldrh	r1, [r3, #0]
 8007a90:	789b      	ldrb	r3, [r3, #2]
 8007a92:	8111      	strh	r1, [r2, #8]
 8007a94:	7293      	strb	r3, [r2, #10]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007a96:	485a      	ldr	r0, [pc, #360]	; (8007c00 <moveArm+0x4b8>)
 8007a98:	f7f8 fb5a 	bl	8000150 <strlen>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007aa4:	4956      	ldr	r1, [pc, #344]	; (8007c00 <moveArm+0x4b8>)
 8007aa6:	4857      	ldr	r0, [pc, #348]	; (8007c04 <moveArm+0x4bc>)
 8007aa8:	f7fb fea5 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ab0:	f7f9 faf8 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8007ab4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007ab8:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8007abc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	494d      	ldr	r1, [pc, #308]	; (8007bfc <moveArm+0x4b4>)
 8007ac6:	484e      	ldr	r0, [pc, #312]	; (8007c00 <moveArm+0x4b8>)
 8007ac8:	f001 f8b4 	bl	8008c34 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007acc:	484c      	ldr	r0, [pc, #304]	; (8007c00 <moveArm+0x4b8>)
 8007ace:	f7f8 fb3f 	bl	8000150 <strlen>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ada:	4949      	ldr	r1, [pc, #292]	; (8007c00 <moveArm+0x4b8>)
 8007adc:	4849      	ldr	r0, [pc, #292]	; (8007c04 <moveArm+0x4bc>)
 8007ade:	f7fb fe8a 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ae6:	f7f9 fadd 	bl	80010a4 <HAL_Delay>

			    x = 1;
 8007aea:	4b47      	ldr	r3, [pc, #284]	; (8007c08 <moveArm+0x4c0>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
			 }

			if (iposR < 142 && iposR > 128 && iposS < 200 && iposS > 150 && x== 1){
 8007af0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007af4:	2b8d      	cmp	r3, #141	; 0x8d
 8007af6:	f300 80d1 	bgt.w	8007c9c <moveArm+0x554>
 8007afa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007afe:	2b80      	cmp	r3, #128	; 0x80
 8007b00:	f340 80cc 	ble.w	8007c9c <moveArm+0x554>
 8007b04:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007b08:	2bc7      	cmp	r3, #199	; 0xc7
 8007b0a:	f300 80c7 	bgt.w	8007c9c <moveArm+0x554>
 8007b0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007b12:	2b96      	cmp	r3, #150	; 0x96
 8007b14:	f340 80c2 	ble.w	8007c9c <moveArm+0x554>
 8007b18:	4b3b      	ldr	r3, [pc, #236]	; (8007c08 <moveArm+0x4c0>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	f040 80bd 	bne.w	8007c9c <moveArm+0x554>

				sprintf(uart_buffer, "G2201 S175 R135 H45 F10000\r\n");
 8007b22:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <moveArm+0x4b8>)
 8007b24:	4b3c      	ldr	r3, [pc, #240]	; (8007c18 <moveArm+0x4d0>)
 8007b26:	4615      	mov	r5, r2
 8007b28:	461c      	mov	r4, r3
 8007b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b2c:	6028      	str	r0, [r5, #0]
 8007b2e:	6069      	str	r1, [r5, #4]
 8007b30:	60aa      	str	r2, [r5, #8]
 8007b32:	60eb      	str	r3, [r5, #12]
 8007b34:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007b36:	6128      	str	r0, [r5, #16]
 8007b38:	6169      	str	r1, [r5, #20]
 8007b3a:	61aa      	str	r2, [r5, #24]
 8007b3c:	7823      	ldrb	r3, [r4, #0]
 8007b3e:	772b      	strb	r3, [r5, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007b40:	482f      	ldr	r0, [pc, #188]	; (8007c00 <moveArm+0x4b8>)
 8007b42:	f7f8 fb05 	bl	8000150 <strlen>
 8007b46:	4603      	mov	r3, r0
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b4e:	492c      	ldr	r1, [pc, #176]	; (8007c00 <moveArm+0x4b8>)
 8007b50:	482c      	ldr	r0, [pc, #176]	; (8007c04 <moveArm+0x4bc>)
 8007b52:	f7fb fe50 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007b56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b5a:	f7f9 faa3 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S175 R135 H30 F10000\r\n");
 8007b5e:	4a28      	ldr	r2, [pc, #160]	; (8007c00 <moveArm+0x4b8>)
 8007b60:	4b2e      	ldr	r3, [pc, #184]	; (8007c1c <moveArm+0x4d4>)
 8007b62:	4615      	mov	r5, r2
 8007b64:	461c      	mov	r4, r3
 8007b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b68:	6028      	str	r0, [r5, #0]
 8007b6a:	6069      	str	r1, [r5, #4]
 8007b6c:	60aa      	str	r2, [r5, #8]
 8007b6e:	60eb      	str	r3, [r5, #12]
 8007b70:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007b72:	6128      	str	r0, [r5, #16]
 8007b74:	6169      	str	r1, [r5, #20]
 8007b76:	61aa      	str	r2, [r5, #24]
 8007b78:	7823      	ldrb	r3, [r4, #0]
 8007b7a:	772b      	strb	r3, [r5, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007b7c:	4820      	ldr	r0, [pc, #128]	; (8007c00 <moveArm+0x4b8>)
 8007b7e:	f7f8 fae7 	bl	8000150 <strlen>
 8007b82:	4603      	mov	r3, r0
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b8a:	491d      	ldr	r1, [pc, #116]	; (8007c00 <moveArm+0x4b8>)
 8007b8c:	481d      	ldr	r0, [pc, #116]	; (8007c04 <moveArm+0x4bc>)
 8007b8e:	f7fb fe32 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007b92:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b96:	f7f9 fa85 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "M2231 V0\r\n");
 8007b9a:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <moveArm+0x4b8>)
 8007b9c:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <moveArm+0x4d8>)
 8007b9e:	cb03      	ldmia	r3!, {r0, r1}
 8007ba0:	6010      	str	r0, [r2, #0]
 8007ba2:	6051      	str	r1, [r2, #4]
 8007ba4:	8819      	ldrh	r1, [r3, #0]
 8007ba6:	789b      	ldrb	r3, [r3, #2]
 8007ba8:	8111      	strh	r1, [r2, #8]
 8007baa:	7293      	strb	r3, [r2, #10]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007bac:	4814      	ldr	r0, [pc, #80]	; (8007c00 <moveArm+0x4b8>)
 8007bae:	f7f8 facf 	bl	8000150 <strlen>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bba:	4911      	ldr	r1, [pc, #68]	; (8007c00 <moveArm+0x4b8>)
 8007bbc:	4811      	ldr	r0, [pc, #68]	; (8007c04 <moveArm+0x4bc>)
 8007bbe:	f7fb fe1a 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007bc6:	f7f9 fa6d 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8007bca:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007bce:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8007bd2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	e023      	b.n	8007c24 <moveArm+0x4dc>
 8007bdc:	200000e8 	.word	0x200000e8
 8007be0:	41200000 	.word	0x41200000
 8007be4:	200000ec 	.word	0x200000ec
 8007be8:	200002ac 	.word	0x200002ac
 8007bec:	200002ae 	.word	0x200002ae
 8007bf0:	200002b2 	.word	0x200002b2
 8007bf4:	2aaaaaab 	.word	0x2aaaaaab
 8007bf8:	200002b0 	.word	0x200002b0
 8007bfc:	080099b4 	.word	0x080099b4
 8007c00:	200003a8 	.word	0x200003a8
 8007c04:	2000040c 	.word	0x2000040c
 8007c08:	200002b3 	.word	0x200002b3
 8007c0c:	080099d4 	.word	0x080099d4
 8007c10:	080099f0 	.word	0x080099f0
 8007c14:	08009a0c 	.word	0x08009a0c
 8007c18:	08009a18 	.word	0x08009a18
 8007c1c:	08009a38 	.word	0x08009a38
 8007c20:	08009a58 	.word	0x08009a58
 8007c24:	49a4      	ldr	r1, [pc, #656]	; (8007eb8 <moveArm+0x770>)
 8007c26:	48a5      	ldr	r0, [pc, #660]	; (8007ebc <moveArm+0x774>)
 8007c28:	f001 f804 	bl	8008c34 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007c2c:	48a3      	ldr	r0, [pc, #652]	; (8007ebc <moveArm+0x774>)
 8007c2e:	f7f8 fa8f 	bl	8000150 <strlen>
 8007c32:	4603      	mov	r3, r0
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c3a:	49a0      	ldr	r1, [pc, #640]	; (8007ebc <moveArm+0x774>)
 8007c3c:	48a0      	ldr	r0, [pc, #640]	; (8007ec0 <moveArm+0x778>)
 8007c3e:	f7fb fdda 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c46:	f7f9 fa2d 	bl	80010a4 <HAL_Delay>

				x = 2;
 8007c4a:	4b9e      	ldr	r3, [pc, #632]	; (8007ec4 <moveArm+0x77c>)
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	701a      	strb	r2, [r3, #0]

				posS = 100;
 8007c50:	4b9d      	ldr	r3, [pc, #628]	; (8007ec8 <moveArm+0x780>)
 8007c52:	4a9e      	ldr	r2, [pc, #632]	; (8007ecc <moveArm+0x784>)
 8007c54:	601a      	str	r2, [r3, #0]
				posR = 90;
 8007c56:	4b9e      	ldr	r3, [pc, #632]	; (8007ed0 <moveArm+0x788>)
 8007c58:	4a9e      	ldr	r2, [pc, #632]	; (8007ed4 <moveArm+0x78c>)
 8007c5a:	601a      	str	r2, [r3, #0]
				posH = 50;
 8007c5c:	4b9e      	ldr	r3, [pc, #632]	; (8007ed8 <moveArm+0x790>)
 8007c5e:	4a9f      	ldr	r2, [pc, #636]	; (8007edc <moveArm+0x794>)
 8007c60:	601a      	str	r2, [r3, #0]
				posR1 = 0;
 8007c62:	4b9f      	ldr	r3, [pc, #636]	; (8007ee0 <moveArm+0x798>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	801a      	strh	r2, [r3, #0]
				posS1 = 0;
 8007c68:	4b9e      	ldr	r3, [pc, #632]	; (8007ee4 <moveArm+0x79c>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	801a      	strh	r2, [r3, #0]
				posH1 = 0;
 8007c6e:	4b9e      	ldr	r3, [pc, #632]	; (8007ee8 <moveArm+0x7a0>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	801a      	strh	r2, [r3, #0]

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", 300, 90, 100);
 8007c74:	2364      	movs	r3, #100	; 0x64
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	235a      	movs	r3, #90	; 0x5a
 8007c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c7e:	498e      	ldr	r1, [pc, #568]	; (8007eb8 <moveArm+0x770>)
 8007c80:	488e      	ldr	r0, [pc, #568]	; (8007ebc <moveArm+0x774>)
 8007c82:	f000 ffd7 	bl	8008c34 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007c86:	488d      	ldr	r0, [pc, #564]	; (8007ebc <moveArm+0x774>)
 8007c88:	f7f8 fa62 	bl	8000150 <strlen>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c94:	4989      	ldr	r1, [pc, #548]	; (8007ebc <moveArm+0x774>)
 8007c96:	488a      	ldr	r0, [pc, #552]	; (8007ec0 <moveArm+0x778>)
 8007c98:	f7fb fdad 	bl	80037f6 <HAL_UART_Transmit>


			}

			if (iposR < 142 && iposR > 128 && iposS < 200 && iposS > 150 && x== 2){
 8007c9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007ca0:	2b8d      	cmp	r3, #141	; 0x8d
 8007ca2:	f300 8082 	bgt.w	8007daa <moveArm+0x662>
 8007ca6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007caa:	2b80      	cmp	r3, #128	; 0x80
 8007cac:	dd7d      	ble.n	8007daa <moveArm+0x662>
 8007cae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007cb2:	2bc7      	cmp	r3, #199	; 0xc7
 8007cb4:	dc79      	bgt.n	8007daa <moveArm+0x662>
 8007cb6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007cba:	2b96      	cmp	r3, #150	; 0x96
 8007cbc:	dd75      	ble.n	8007daa <moveArm+0x662>
 8007cbe:	4b81      	ldr	r3, [pc, #516]	; (8007ec4 <moveArm+0x77c>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d171      	bne.n	8007daa <moveArm+0x662>

				sprintf(uart_buffer, "G2201 S175 R135 H45 F10000\r\n");
 8007cc6:	4a7d      	ldr	r2, [pc, #500]	; (8007ebc <moveArm+0x774>)
 8007cc8:	4b88      	ldr	r3, [pc, #544]	; (8007eec <moveArm+0x7a4>)
 8007cca:	4615      	mov	r5, r2
 8007ccc:	461c      	mov	r4, r3
 8007cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cd0:	6028      	str	r0, [r5, #0]
 8007cd2:	6069      	str	r1, [r5, #4]
 8007cd4:	60aa      	str	r2, [r5, #8]
 8007cd6:	60eb      	str	r3, [r5, #12]
 8007cd8:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007cda:	6128      	str	r0, [r5, #16]
 8007cdc:	6169      	str	r1, [r5, #20]
 8007cde:	61aa      	str	r2, [r5, #24]
 8007ce0:	7823      	ldrb	r3, [r4, #0]
 8007ce2:	772b      	strb	r3, [r5, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007ce4:	4875      	ldr	r0, [pc, #468]	; (8007ebc <moveArm+0x774>)
 8007ce6:	f7f8 fa33 	bl	8000150 <strlen>
 8007cea:	4603      	mov	r3, r0
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cf2:	4972      	ldr	r1, [pc, #456]	; (8007ebc <moveArm+0x774>)
 8007cf4:	4872      	ldr	r0, [pc, #456]	; (8007ec0 <moveArm+0x778>)
 8007cf6:	f7fb fd7e 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007cfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007cfe:	f7f9 f9d1 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S175 R135 H30 F10000\r\n");
 8007d02:	4a6e      	ldr	r2, [pc, #440]	; (8007ebc <moveArm+0x774>)
 8007d04:	4b7a      	ldr	r3, [pc, #488]	; (8007ef0 <moveArm+0x7a8>)
 8007d06:	4615      	mov	r5, r2
 8007d08:	461c      	mov	r4, r3
 8007d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d0c:	6028      	str	r0, [r5, #0]
 8007d0e:	6069      	str	r1, [r5, #4]
 8007d10:	60aa      	str	r2, [r5, #8]
 8007d12:	60eb      	str	r3, [r5, #12]
 8007d14:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007d16:	6128      	str	r0, [r5, #16]
 8007d18:	6169      	str	r1, [r5, #20]
 8007d1a:	61aa      	str	r2, [r5, #24]
 8007d1c:	7823      	ldrb	r3, [r4, #0]
 8007d1e:	772b      	strb	r3, [r5, #28]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007d20:	4866      	ldr	r0, [pc, #408]	; (8007ebc <moveArm+0x774>)
 8007d22:	f7f8 fa15 	bl	8000150 <strlen>
 8007d26:	4603      	mov	r3, r0
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d2e:	4963      	ldr	r1, [pc, #396]	; (8007ebc <moveArm+0x774>)
 8007d30:	4863      	ldr	r0, [pc, #396]	; (8007ec0 <moveArm+0x778>)
 8007d32:	f7fb fd60 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007d36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007d3a:	f7f9 f9b3 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "M2231 V1\r\n");
 8007d3e:	4a5f      	ldr	r2, [pc, #380]	; (8007ebc <moveArm+0x774>)
 8007d40:	4b6c      	ldr	r3, [pc, #432]	; (8007ef4 <moveArm+0x7ac>)
 8007d42:	cb03      	ldmia	r3!, {r0, r1}
 8007d44:	6010      	str	r0, [r2, #0]
 8007d46:	6051      	str	r1, [r2, #4]
 8007d48:	8819      	ldrh	r1, [r3, #0]
 8007d4a:	789b      	ldrb	r3, [r3, #2]
 8007d4c:	8111      	strh	r1, [r2, #8]
 8007d4e:	7293      	strb	r3, [r2, #10]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007d50:	485a      	ldr	r0, [pc, #360]	; (8007ebc <moveArm+0x774>)
 8007d52:	f7f8 f9fd 	bl	8000150 <strlen>
 8007d56:	4603      	mov	r3, r0
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d5e:	4957      	ldr	r1, [pc, #348]	; (8007ebc <moveArm+0x774>)
 8007d60:	4857      	ldr	r0, [pc, #348]	; (8007ec0 <moveArm+0x778>)
 8007d62:	f7fb fd48 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007d66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d6a:	f7f9 f99b 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8007d6e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007d72:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8007d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	494e      	ldr	r1, [pc, #312]	; (8007eb8 <moveArm+0x770>)
 8007d80:	484e      	ldr	r0, [pc, #312]	; (8007ebc <moveArm+0x774>)
 8007d82:	f000 ff57 	bl	8008c34 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007d86:	484d      	ldr	r0, [pc, #308]	; (8007ebc <moveArm+0x774>)
 8007d88:	f7f8 f9e2 	bl	8000150 <strlen>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d94:	4949      	ldr	r1, [pc, #292]	; (8007ebc <moveArm+0x774>)
 8007d96:	484a      	ldr	r0, [pc, #296]	; (8007ec0 <moveArm+0x778>)
 8007d98:	f7fb fd2d 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007d9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007da0:	f7f9 f980 	bl	80010a4 <HAL_Delay>

				x = 3;
 8007da4:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <moveArm+0x77c>)
 8007da6:	2203      	movs	r2, #3
 8007da8:	701a      	strb	r2, [r3, #0]


			}

			if (iposR < 52 && iposR > 38 && iposS < 250 && iposS > 200  && x == 3){
 8007daa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007dae:	2b33      	cmp	r3, #51	; 0x33
 8007db0:	dc7d      	bgt.n	8007eae <moveArm+0x766>
 8007db2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007db6:	2b26      	cmp	r3, #38	; 0x26
 8007db8:	dd79      	ble.n	8007eae <moveArm+0x766>
 8007dba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007dbe:	2bf9      	cmp	r3, #249	; 0xf9
 8007dc0:	dc75      	bgt.n	8007eae <moveArm+0x766>
 8007dc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007dc6:	2bc8      	cmp	r3, #200	; 0xc8
 8007dc8:	dd71      	ble.n	8007eae <moveArm+0x766>
 8007dca:	4b3e      	ldr	r3, [pc, #248]	; (8007ec4 <moveArm+0x77c>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d16d      	bne.n	8007eae <moveArm+0x766>
				sprintf(uart_buffer, "G2201 S225 R45 H45 F10000\r\n");
 8007dd2:	4a3a      	ldr	r2, [pc, #232]	; (8007ebc <moveArm+0x774>)
 8007dd4:	4b48      	ldr	r3, [pc, #288]	; (8007ef8 <moveArm+0x7b0>)
 8007dd6:	4615      	mov	r5, r2
 8007dd8:	461c      	mov	r4, r3
 8007dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ddc:	6028      	str	r0, [r5, #0]
 8007dde:	6069      	str	r1, [r5, #4]
 8007de0:	60aa      	str	r2, [r5, #8]
 8007de2:	60eb      	str	r3, [r5, #12]
 8007de4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007de6:	6128      	str	r0, [r5, #16]
 8007de8:	6169      	str	r1, [r5, #20]
 8007dea:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007dec:	4833      	ldr	r0, [pc, #204]	; (8007ebc <moveArm+0x774>)
 8007dee:	f7f8 f9af 	bl	8000150 <strlen>
 8007df2:	4603      	mov	r3, r0
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dfa:	4930      	ldr	r1, [pc, #192]	; (8007ebc <moveArm+0x774>)
 8007dfc:	4830      	ldr	r0, [pc, #192]	; (8007ec0 <moveArm+0x778>)
 8007dfe:	f7fb fcfa 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007e02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007e06:	f7f9 f94d 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S225 R45 H30 F10000\r\n");
 8007e0a:	4a2c      	ldr	r2, [pc, #176]	; (8007ebc <moveArm+0x774>)
 8007e0c:	4b3b      	ldr	r3, [pc, #236]	; (8007efc <moveArm+0x7b4>)
 8007e0e:	4615      	mov	r5, r2
 8007e10:	461c      	mov	r4, r3
 8007e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e14:	6028      	str	r0, [r5, #0]
 8007e16:	6069      	str	r1, [r5, #4]
 8007e18:	60aa      	str	r2, [r5, #8]
 8007e1a:	60eb      	str	r3, [r5, #12]
 8007e1c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007e1e:	6128      	str	r0, [r5, #16]
 8007e20:	6169      	str	r1, [r5, #20]
 8007e22:	61aa      	str	r2, [r5, #24]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007e24:	4825      	ldr	r0, [pc, #148]	; (8007ebc <moveArm+0x774>)
 8007e26:	f7f8 f993 	bl	8000150 <strlen>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e32:	4922      	ldr	r1, [pc, #136]	; (8007ebc <moveArm+0x774>)
 8007e34:	4822      	ldr	r0, [pc, #136]	; (8007ec0 <moveArm+0x778>)
 8007e36:	f7fb fcde 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(2000);
 8007e3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007e3e:	f7f9 f931 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "M2231 V0\r\n");
 8007e42:	4a1e      	ldr	r2, [pc, #120]	; (8007ebc <moveArm+0x774>)
 8007e44:	4b2e      	ldr	r3, [pc, #184]	; (8007f00 <moveArm+0x7b8>)
 8007e46:	cb03      	ldmia	r3!, {r0, r1}
 8007e48:	6010      	str	r0, [r2, #0]
 8007e4a:	6051      	str	r1, [r2, #4]
 8007e4c:	8819      	ldrh	r1, [r3, #0]
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	8111      	strh	r1, [r2, #8]
 8007e52:	7293      	strb	r3, [r2, #10]
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007e54:	4819      	ldr	r0, [pc, #100]	; (8007ebc <moveArm+0x774>)
 8007e56:	f7f8 f97b 	bl	8000150 <strlen>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e62:	4916      	ldr	r1, [pc, #88]	; (8007ebc <moveArm+0x774>)
 8007e64:	4816      	ldr	r0, [pc, #88]	; (8007ec0 <moveArm+0x778>)
 8007e66:	f7fb fcc6 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007e6e:	f7f9 f919 	bl	80010a4 <HAL_Delay>

				sprintf(uart_buffer, "G2201 S%i R%i H%i F1000000\r\n", iposS, iposR, iposH);
 8007e72:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007e76:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8007e7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	460b      	mov	r3, r1
 8007e82:	490d      	ldr	r1, [pc, #52]	; (8007eb8 <moveArm+0x770>)
 8007e84:	480d      	ldr	r0, [pc, #52]	; (8007ebc <moveArm+0x774>)
 8007e86:	f000 fed5 	bl	8008c34 <siprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 8007e8a:	480c      	ldr	r0, [pc, #48]	; (8007ebc <moveArm+0x774>)
 8007e8c:	f7f8 f960 	bl	8000150 <strlen>
 8007e90:	4603      	mov	r3, r0
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e98:	4908      	ldr	r1, [pc, #32]	; (8007ebc <moveArm+0x774>)
 8007e9a:	4809      	ldr	r0, [pc, #36]	; (8007ec0 <moveArm+0x778>)
 8007e9c:	f7fb fcab 	bl	80037f6 <HAL_UART_Transmit>
				HAL_Delay(500);
 8007ea0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007ea4:	f7f9 f8fe 	bl	80010a4 <HAL_Delay>

				x = 4;
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <moveArm+0x77c>)
 8007eaa:	2204      	movs	r2, #4
 8007eac:	701a      	strb	r2, [r3, #0]
			 }

  }

}
 8007eae:	bf00      	nop
 8007eb0:	3740      	adds	r7, #64	; 0x40
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	080099b4 	.word	0x080099b4
 8007ebc:	200003a8 	.word	0x200003a8
 8007ec0:	2000040c 	.word	0x2000040c
 8007ec4:	200002b3 	.word	0x200002b3
 8007ec8:	200000e8 	.word	0x200000e8
 8007ecc:	42c80000 	.word	0x42c80000
 8007ed0:	200000ec 	.word	0x200000ec
 8007ed4:	42b40000 	.word	0x42b40000
 8007ed8:	200000f0 	.word	0x200000f0
 8007edc:	42480000 	.word	0x42480000
 8007ee0:	200002ac 	.word	0x200002ac
 8007ee4:	200002ae 	.word	0x200002ae
 8007ee8:	200002b0 	.word	0x200002b0
 8007eec:	08009a18 	.word	0x08009a18
 8007ef0:	08009a38 	.word	0x08009a38
 8007ef4:	08009a0c 	.word	0x08009a0c
 8007ef8:	080099d4 	.word	0x080099d4
 8007efc:	080099f0 	.word	0x080099f0
 8007f00:	08009a58 	.word	0x08009a58

08007f04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b094      	sub	sp, #80	; 0x50
 8007f08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f0e:	2228      	movs	r2, #40	; 0x28
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fe85 	bl	8008c22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	605a      	str	r2, [r3, #4]
 8007f22:	609a      	str	r2, [r3, #8]
 8007f24:	60da      	str	r2, [r3, #12]
 8007f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f28:	1d3b      	adds	r3, r7, #4
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
 8007f2e:	605a      	str	r2, [r3, #4]
 8007f30:	609a      	str	r2, [r3, #8]
 8007f32:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f42:	2301      	movs	r3, #1
 8007f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007f46:	2302      	movs	r3, #2
 8007f48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007f4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007f50:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fa fa12 	bl	8002384 <HAL_RCC_OscConfig>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8007f66:	f000 f8c5 	bl	80080f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f6a:	230f      	movs	r3, #15
 8007f6c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f6e:	2302      	movs	r3, #2
 8007f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f72:	2300      	movs	r3, #0
 8007f74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007f80:	f107 0314 	add.w	r3, r7, #20
 8007f84:	2102      	movs	r1, #2
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fa fc7c 	bl	8002884 <HAL_RCC_ClockConfig>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8007f92:	f000 f8af 	bl	80080f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007f96:	2310      	movs	r3, #16
 8007f98:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f9e:	1d3b      	adds	r3, r7, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fa fe0b 	bl	8002bbc <HAL_RCCEx_PeriphCLKConfig>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8007fac:	f000 f8a2 	bl	80080f4 <Error_Handler>
  }
}
 8007fb0:	bf00      	nop
 8007fb2:	3750      	adds	r7, #80	; 0x50
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007fbc:	4b17      	ldr	r3, [pc, #92]	; (800801c <MX_SPI1_Init+0x64>)
 8007fbe:	4a18      	ldr	r2, [pc, #96]	; (8008020 <MX_SPI1_Init+0x68>)
 8007fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007fc2:	4b16      	ldr	r3, [pc, #88]	; (800801c <MX_SPI1_Init+0x64>)
 8007fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007fca:	4b14      	ldr	r3, [pc, #80]	; (800801c <MX_SPI1_Init+0x64>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007fd0:	4b12      	ldr	r3, [pc, #72]	; (800801c <MX_SPI1_Init+0x64>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fd6:	4b11      	ldr	r3, [pc, #68]	; (800801c <MX_SPI1_Init+0x64>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	; (800801c <MX_SPI1_Init+0x64>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	; (800801c <MX_SPI1_Init+0x64>)
 8007fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <MX_SPI1_Init+0x64>)
 8007fec:	2210      	movs	r2, #16
 8007fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <MX_SPI1_Init+0x64>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <MX_SPI1_Init+0x64>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <MX_SPI1_Init+0x64>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <MX_SPI1_Init+0x64>)
 8008004:	220a      	movs	r2, #10
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008008:	4804      	ldr	r0, [pc, #16]	; (800801c <MX_SPI1_Init+0x64>)
 800800a:	f7fa fe8d 	bl	8002d28 <HAL_SPI_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008014:	f000 f86e 	bl	80080f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008018:	bf00      	nop
 800801a:	bd80      	pop	{r7, pc}
 800801c:	2000044c 	.word	0x2000044c
 8008020:	40013000 	.word	0x40013000

08008024 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008028:	4b11      	ldr	r3, [pc, #68]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <MX_USART1_UART_Init+0x50>)
 800802c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008036:	4b0e      	ldr	r3, [pc, #56]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008038:	2200      	movs	r2, #0
 800803a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800803c:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800803e:	2200      	movs	r2, #0
 8008040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008044:	2200      	movs	r2, #0
 8008046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008048:	4b09      	ldr	r3, [pc, #36]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800804a:	220c      	movs	r2, #12
 800804c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800804e:	4b08      	ldr	r3, [pc, #32]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008050:	2200      	movs	r2, #0
 8008052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 8008056:	2200      	movs	r2, #0
 8008058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800805a:	4805      	ldr	r0, [pc, #20]	; (8008070 <MX_USART1_UART_Init+0x4c>)
 800805c:	f7fb fb7e 	bl	800375c <HAL_UART_Init>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008066:	f000 f845 	bl	80080f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800806a:	bf00      	nop
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000040c 	.word	0x2000040c
 8008074:	40013800 	.word	0x40013800

08008078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	605a      	str	r2, [r3, #4]
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800808c:	4b17      	ldr	r3, [pc, #92]	; (80080ec <MX_GPIO_Init+0x74>)
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	4a16      	ldr	r2, [pc, #88]	; (80080ec <MX_GPIO_Init+0x74>)
 8008092:	f043 0320 	orr.w	r3, r3, #32
 8008096:	6193      	str	r3, [r2, #24]
 8008098:	4b14      	ldr	r3, [pc, #80]	; (80080ec <MX_GPIO_Init+0x74>)
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f003 0320 	and.w	r3, r3, #32
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080a4:	4b11      	ldr	r3, [pc, #68]	; (80080ec <MX_GPIO_Init+0x74>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	4a10      	ldr	r2, [pc, #64]	; (80080ec <MX_GPIO_Init+0x74>)
 80080aa:	f043 0304 	orr.w	r3, r3, #4
 80080ae:	6193      	str	r3, [r2, #24]
 80080b0:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <MX_GPIO_Init+0x74>)
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	603b      	str	r3, [r7, #0]
 80080ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 80080bc:	2200      	movs	r2, #0
 80080be:	2118      	movs	r1, #24
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <MX_GPIO_Init+0x78>)
 80080c2:	f7f9 fa79 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin_Pin CSN_Pin_Pin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 80080c6:	2318      	movs	r3, #24
 80080c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80080ca:	2301      	movs	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080d2:	2302      	movs	r3, #2
 80080d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080d6:	f107 0308 	add.w	r3, r7, #8
 80080da:	4619      	mov	r1, r3
 80080dc:	4804      	ldr	r0, [pc, #16]	; (80080f0 <MX_GPIO_Init+0x78>)
 80080de:	f7f9 f911 	bl	8001304 <HAL_GPIO_Init>

}
 80080e2:	bf00      	nop
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	40021000 	.word	0x40021000
 80080f0:	40010800 	.word	0x40010800

080080f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80080f8:	bf00      	nop
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008106:	4b15      	ldr	r3, [pc, #84]	; (800815c <HAL_MspInit+0x5c>)
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	4a14      	ldr	r2, [pc, #80]	; (800815c <HAL_MspInit+0x5c>)
 800810c:	f043 0301 	orr.w	r3, r3, #1
 8008110:	6193      	str	r3, [r2, #24]
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <HAL_MspInit+0x5c>)
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	60bb      	str	r3, [r7, #8]
 800811c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	4b0f      	ldr	r3, [pc, #60]	; (800815c <HAL_MspInit+0x5c>)
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	4a0e      	ldr	r2, [pc, #56]	; (800815c <HAL_MspInit+0x5c>)
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008128:	61d3      	str	r3, [r2, #28]
 800812a:	4b0c      	ldr	r3, [pc, #48]	; (800815c <HAL_MspInit+0x5c>)
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <HAL_MspInit+0x60>)
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	4a04      	ldr	r2, [pc, #16]	; (8008160 <HAL_MspInit+0x60>)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr
 800815c:	40021000 	.word	0x40021000
 8008160:	40010000 	.word	0x40010000

08008164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800816c:	f107 0310 	add.w	r3, r7, #16
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1b      	ldr	r2, [pc, #108]	; (80081ec <HAL_SPI_MspInit+0x88>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d12f      	bne.n	80081e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008184:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <HAL_SPI_MspInit+0x8c>)
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <HAL_SPI_MspInit+0x8c>)
 800818a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800818e:	6193      	str	r3, [r2, #24]
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <HAL_SPI_MspInit+0x8c>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800819c:	4b14      	ldr	r3, [pc, #80]	; (80081f0 <HAL_SPI_MspInit+0x8c>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <HAL_SPI_MspInit+0x8c>)
 80081a2:	f043 0304 	orr.w	r3, r3, #4
 80081a6:	6193      	str	r3, [r2, #24]
 80081a8:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <HAL_SPI_MspInit+0x8c>)
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80081b4:	23a0      	movs	r3, #160	; 0xa0
 80081b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081b8:	2302      	movs	r3, #2
 80081ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081bc:	2303      	movs	r3, #3
 80081be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081c0:	f107 0310 	add.w	r3, r7, #16
 80081c4:	4619      	mov	r1, r3
 80081c6:	480b      	ldr	r0, [pc, #44]	; (80081f4 <HAL_SPI_MspInit+0x90>)
 80081c8:	f7f9 f89c 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80081cc:	2340      	movs	r3, #64	; 0x40
 80081ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081d8:	f107 0310 	add.w	r3, r7, #16
 80081dc:	4619      	mov	r1, r3
 80081de:	4805      	ldr	r0, [pc, #20]	; (80081f4 <HAL_SPI_MspInit+0x90>)
 80081e0:	f7f9 f890 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80081e4:	bf00      	nop
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	40013000 	.word	0x40013000
 80081f0:	40021000 	.word	0x40021000
 80081f4:	40010800 	.word	0x40010800

080081f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008200:	f107 0310 	add.w	r3, r7, #16
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1c      	ldr	r2, [pc, #112]	; (8008284 <HAL_UART_MspInit+0x8c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d131      	bne.n	800827c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008218:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_UART_MspInit+0x90>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <HAL_UART_MspInit+0x90>)
 800821e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008222:	6193      	str	r3, [r2, #24]
 8008224:	4b18      	ldr	r3, [pc, #96]	; (8008288 <HAL_UART_MspInit+0x90>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008230:	4b15      	ldr	r3, [pc, #84]	; (8008288 <HAL_UART_MspInit+0x90>)
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	4a14      	ldr	r2, [pc, #80]	; (8008288 <HAL_UART_MspInit+0x90>)
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6193      	str	r3, [r2, #24]
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <HAL_UART_MspInit+0x90>)
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800824c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824e:	2302      	movs	r3, #2
 8008250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008252:	2303      	movs	r3, #3
 8008254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	4619      	mov	r1, r3
 800825c:	480b      	ldr	r0, [pc, #44]	; (800828c <HAL_UART_MspInit+0x94>)
 800825e:	f7f9 f851 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826c:	2300      	movs	r3, #0
 800826e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	4619      	mov	r1, r3
 8008276:	4805      	ldr	r0, [pc, #20]	; (800828c <HAL_UART_MspInit+0x94>)
 8008278:	f7f9 f844 	bl	8001304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800827c:	bf00      	nop
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40013800 	.word	0x40013800
 8008288:	40021000 	.word	0x40021000
 800828c:	40010800 	.word	0x40010800

08008290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082a0:	e7fe      	b.n	80082a0 <HardFault_Handler+0x4>

080082a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082a2:	b480      	push	{r7}
 80082a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082a6:	e7fe      	b.n	80082a6 <MemManage_Handler+0x4>

080082a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082ac:	e7fe      	b.n	80082ac <BusFault_Handler+0x4>

080082ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082ae:	b480      	push	{r7}
 80082b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082b2:	e7fe      	b.n	80082b2 <UsageFault_Handler+0x4>

080082b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082b8:	bf00      	nop
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr

080082c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082d0:	bf00      	nop
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bc80      	pop	{r7}
 80082d6:	4770      	bx	lr

080082d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082dc:	f7f8 fec6 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082e0:	bf00      	nop
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80082e8:	4802      	ldr	r0, [pc, #8]	; (80082f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80082ea:	f7f9 fa84 	bl	80017f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80082ee:	bf00      	nop
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000770 	.word	0x20000770

080082f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <_sbrk+0x50>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <_sbrk+0x16>
		heap_end = &end;
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <_sbrk+0x50>)
 800830a:	4a10      	ldr	r2, [pc, #64]	; (800834c <_sbrk+0x54>)
 800830c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800830e:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <_sbrk+0x50>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <_sbrk+0x50>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4413      	add	r3, r2
 800831c:	466a      	mov	r2, sp
 800831e:	4293      	cmp	r3, r2
 8008320:	d907      	bls.n	8008332 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008322:	f000 fc49 	bl	8008bb8 <__errno>
 8008326:	4602      	mov	r2, r0
 8008328:	230c      	movs	r3, #12
 800832a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	e006      	b.n	8008340 <_sbrk+0x48>
	}

	heap_end += incr;
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <_sbrk+0x50>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	4a03      	ldr	r2, [pc, #12]	; (8008348 <_sbrk+0x50>)
 800833c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800833e:	68fb      	ldr	r3, [r7, #12]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	200002b4 	.word	0x200002b4
 800834c:	20000be0 	.word	0x20000be0

08008350 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008354:	4b15      	ldr	r3, [pc, #84]	; (80083ac <SystemInit+0x5c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a14      	ldr	r2, [pc, #80]	; (80083ac <SystemInit+0x5c>)
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008360:	4b12      	ldr	r3, [pc, #72]	; (80083ac <SystemInit+0x5c>)
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	4911      	ldr	r1, [pc, #68]	; (80083ac <SystemInit+0x5c>)
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <SystemInit+0x60>)
 8008368:	4013      	ands	r3, r2
 800836a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800836c:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <SystemInit+0x5c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a0e      	ldr	r2, [pc, #56]	; (80083ac <SystemInit+0x5c>)
 8008372:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <SystemInit+0x5c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <SystemInit+0x5c>)
 8008382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008386:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008388:	4b08      	ldr	r3, [pc, #32]	; (80083ac <SystemInit+0x5c>)
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4a07      	ldr	r2, [pc, #28]	; (80083ac <SystemInit+0x5c>)
 800838e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008392:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <SystemInit+0x5c>)
 8008396:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800839a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800839c:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <SystemInit+0x64>)
 800839e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	40021000 	.word	0x40021000
 80083b0:	f8ff0000 	.word	0xf8ff0000
 80083b4:	e000ed00 	.word	0xe000ed00

080083b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083bc:	2200      	movs	r2, #0
 80083be:	4912      	ldr	r1, [pc, #72]	; (8008408 <MX_USB_DEVICE_Init+0x50>)
 80083c0:	4812      	ldr	r0, [pc, #72]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083c2:	f7fc ff45 	bl	8005250 <USBD_Init>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083cc:	f7ff fe92 	bl	80080f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80083d0:	490f      	ldr	r1, [pc, #60]	; (8008410 <MX_USB_DEVICE_Init+0x58>)
 80083d2:	480e      	ldr	r0, [pc, #56]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083d4:	f7fc ff67 	bl	80052a6 <USBD_RegisterClass>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083de:	f7ff fe89 	bl	80080f4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80083e2:	490c      	ldr	r1, [pc, #48]	; (8008414 <MX_USB_DEVICE_Init+0x5c>)
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083e6:	f7fc ff1d 	bl	8005224 <USBD_CUSTOM_HID_RegisterInterface>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083f0:	f7ff fe80 	bl	80080f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083f4:	4805      	ldr	r0, [pc, #20]	; (800840c <MX_USB_DEVICE_Init+0x54>)
 80083f6:	f7fc ff6f 	bl	80052d8 <USBD_Start>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008400:	f7ff fe78 	bl	80080f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008404:	bf00      	nop
 8008406:	bd80      	pop	{r7, pc}
 8008408:	2000012c 	.word	0x2000012c
 800840c:	200004ac 	.word	0x200004ac
 8008410:	20000008 	.word	0x20000008
 8008414:	2000011c 	.word	0x2000011c

08008418 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a0d      	ldr	r2, [pc, #52]	; (800845c <HAL_PCD_MspInit+0x44>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d113      	bne.n	8008452 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800842a:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <HAL_PCD_MspInit+0x48>)
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	4a0c      	ldr	r2, [pc, #48]	; (8008460 <HAL_PCD_MspInit+0x48>)
 8008430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008434:	61d3      	str	r3, [r2, #28]
 8008436:	4b0a      	ldr	r3, [pc, #40]	; (8008460 <HAL_PCD_MspInit+0x48>)
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008442:	2200      	movs	r2, #0
 8008444:	2100      	movs	r1, #0
 8008446:	2014      	movs	r0, #20
 8008448:	f7f8 ff25 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800844c:	2014      	movs	r0, #20
 800844e:	f7f8 ff3e 	bl	80012ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	40005c00 	.word	0x40005c00
 8008460:	40021000 	.word	0x40021000

08008464 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f7fc ff74 	bl	8005368 <USBD_LL_SetupStage>
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	015b      	lsls	r3, r3, #5
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	4619      	mov	r1, r3
 80084ac:	f7fc ffa7 	bl	80053fe <USBD_LL_DataOutStage>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	015b      	lsls	r3, r3, #5
 80084d0:	4413      	add	r3, r2
 80084d2:	333c      	adds	r3, #60	; 0x3c
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	4619      	mov	r1, r3
 80084da:	f7fd f801 	bl	80054e0 <USBD_LL_DataInStage>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fd f911 	bl	800571c <USBD_LL_SOF>
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800850a:	2301      	movs	r3, #1
 800850c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d001      	beq.n	800851a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008516:	f7ff fded 	bl	80080f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008520:	7bfa      	ldrb	r2, [r7, #15]
 8008522:	4611      	mov	r1, r2
 8008524:	4618      	mov	r0, r3
 8008526:	f7fd f8c1 	bl	80056ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd f87a 	bl	800562a <USBD_LL_Reset>
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800854e:	4618      	mov	r0, r3
 8008550:	f7fd f8bb 	bl	80056ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800855c:	4b04      	ldr	r3, [pc, #16]	; (8008570 <HAL_PCD_SuspendCallback+0x30>)
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	4a03      	ldr	r2, [pc, #12]	; (8008570 <HAL_PCD_SuspendCallback+0x30>)
 8008562:	f043 0306 	orr.w	r3, r3, #6
 8008566:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	e000ed00 	.word	0xe000ed00

08008574 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008582:	4618      	mov	r0, r3
 8008584:	f7fd f8b5 	bl	80056f2 <USBD_LL_Resume>
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008598:	4a23      	ldr	r2, [pc, #140]	; (8008628 <USBD_LL_Init+0x98>)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a21      	ldr	r2, [pc, #132]	; (8008628 <USBD_LL_Init+0x98>)
 80085a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80085a8:	4b1f      	ldr	r3, [pc, #124]	; (8008628 <USBD_LL_Init+0x98>)
 80085aa:	4a20      	ldr	r2, [pc, #128]	; (800862c <USBD_LL_Init+0x9c>)
 80085ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80085ae:	4b1e      	ldr	r3, [pc, #120]	; (8008628 <USBD_LL_Init+0x98>)
 80085b0:	2208      	movs	r2, #8
 80085b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80085b4:	4b1c      	ldr	r3, [pc, #112]	; (8008628 <USBD_LL_Init+0x98>)
 80085b6:	2202      	movs	r2, #2
 80085b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80085ba:	4b1b      	ldr	r3, [pc, #108]	; (8008628 <USBD_LL_Init+0x98>)
 80085bc:	2200      	movs	r2, #0
 80085be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80085c0:	4b19      	ldr	r3, [pc, #100]	; (8008628 <USBD_LL_Init+0x98>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085c6:	4b18      	ldr	r3, [pc, #96]	; (8008628 <USBD_LL_Init+0x98>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80085cc:	4816      	ldr	r0, [pc, #88]	; (8008628 <USBD_LL_Init+0x98>)
 80085ce:	f7f9 f80b 	bl	80015e8 <HAL_PCD_Init>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80085d8:	f7ff fd8c 	bl	80080f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085e2:	2318      	movs	r3, #24
 80085e4:	2200      	movs	r2, #0
 80085e6:	2100      	movs	r1, #0
 80085e8:	f7f9 fe90 	bl	800230c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085f2:	2358      	movs	r3, #88	; 0x58
 80085f4:	2200      	movs	r2, #0
 80085f6:	2180      	movs	r1, #128	; 0x80
 80085f8:	f7f9 fe88 	bl	800230c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008602:	2398      	movs	r3, #152	; 0x98
 8008604:	2200      	movs	r2, #0
 8008606:	2181      	movs	r1, #129	; 0x81
 8008608:	f7f9 fe80 	bl	800230c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008612:	23d8      	movs	r3, #216	; 0xd8
 8008614:	2200      	movs	r2, #0
 8008616:	2101      	movs	r1, #1
 8008618:	f7f9 fe78 	bl	800230c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000770 	.word	0x20000770
 800862c:	40005c00 	.word	0x40005c00

08008630 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008646:	4618      	mov	r0, r3
 8008648:	f7f9 f8af 	bl	80017aa <HAL_PCD_Start>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f934 	bl	80088c0 <USBD_Get_USB_Status>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800865c:	7bbb      	ldrb	r3, [r7, #14]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	4608      	mov	r0, r1
 8008670:	4611      	mov	r1, r2
 8008672:	461a      	mov	r2, r3
 8008674:	4603      	mov	r3, r0
 8008676:	70fb      	strb	r3, [r7, #3]
 8008678:	460b      	mov	r3, r1
 800867a:	70bb      	strb	r3, [r7, #2]
 800867c:	4613      	mov	r3, r2
 800867e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800868e:	78bb      	ldrb	r3, [r7, #2]
 8008690:	883a      	ldrh	r2, [r7, #0]
 8008692:	78f9      	ldrb	r1, [r7, #3]
 8008694:	f7f9 f9e2 	bl	8001a5c <HAL_PCD_EP_Open>
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f90e 	bl	80088c0 <USBD_Get_USB_Status>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086be:	2300      	movs	r3, #0
 80086c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7f9 fa23 	bl	8001b1c <HAL_PCD_EP_Close>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 f8ef 	bl	80088c0 <USBD_Get_USB_Status>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	4611      	mov	r1, r2
 800870e:	4618      	mov	r0, r3
 8008710:	f7f9 fab9 	bl	8001c86 <HAL_PCD_EP_SetStall>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f8d0 	bl	80088c0 <USBD_Get_USB_Status>
 8008720:	4603      	mov	r3, r0
 8008722:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008724:	7bbb      	ldrb	r3, [r7, #14]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	4611      	mov	r1, r2
 800874c:	4618      	mov	r0, r3
 800874e:	f7f9 faf4 	bl	8001d3a <HAL_PCD_EP_ClrStall>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f8b1 	bl	80088c0 <USBD_Get_USB_Status>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008762:	7bbb      	ldrb	r3, [r7, #14]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800876c:	b480      	push	{r7}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800877e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008784:	2b00      	cmp	r3, #0
 8008786:	da08      	bge.n	800879a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	015b      	lsls	r3, r3, #5
 8008792:	4413      	add	r3, r2
 8008794:	332a      	adds	r3, #42	; 0x2a
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	e008      	b.n	80087ac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	015b      	lsls	r3, r3, #5
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80087aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bc80      	pop	{r7}
 80087b4:	4770      	bx	lr

080087b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	460b      	mov	r3, r1
 80087c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	4611      	mov	r1, r2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7f9 f91c 	bl	8001a12 <HAL_PCD_SetAddress>
 80087da:	4603      	mov	r3, r0
 80087dc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 f86d 	bl	80088c0 <USBD_Get_USB_Status>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	607a      	str	r2, [r7, #4]
 80087fe:	461a      	mov	r2, r3
 8008800:	460b      	mov	r3, r1
 8008802:	72fb      	strb	r3, [r7, #11]
 8008804:	4613      	mov	r3, r2
 8008806:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008816:	893b      	ldrh	r3, [r7, #8]
 8008818:	7af9      	ldrb	r1, [r7, #11]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	f7f9 f9fa 	bl	8001c14 <HAL_PCD_EP_Transmit>
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f84a 	bl	80088c0 <USBD_Get_USB_Status>
 800882c:	4603      	mov	r3, r0
 800882e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008830:	7dbb      	ldrb	r3, [r7, #22]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	461a      	mov	r2, r3
 8008846:	460b      	mov	r3, r1
 8008848:	72fb      	strb	r3, [r7, #11]
 800884a:	4613      	mov	r3, r2
 800884c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800885c:	893b      	ldrh	r3, [r7, #8]
 800885e:	7af9      	ldrb	r1, [r7, #11]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	f7f9 f99d 	bl	8001ba0 <HAL_PCD_EP_Receive>
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f827 	bl	80088c0 <USBD_Get_USB_Status>
 8008872:	4603      	mov	r3, r0
 8008874:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008876:	7dbb      	ldrb	r3, [r7, #22]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008888:	4b02      	ldr	r3, [pc, #8]	; (8008894 <USBD_static_malloc+0x14>)
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr
 8008894:	200002b8 	.word	0x200002b8

08008898 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]

}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr

080088aa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr

080088c0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d817      	bhi.n	8008904 <USBD_Get_USB_Status+0x44>
 80088d4:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <USBD_Get_USB_Status+0x1c>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	080088ed 	.word	0x080088ed
 80088e0:	080088f3 	.word	0x080088f3
 80088e4:	080088f9 	.word	0x080088f9
 80088e8:	080088ff 	.word	0x080088ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
    break;
 80088f0:	e00b      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088f2:	2302      	movs	r3, #2
 80088f4:	73fb      	strb	r3, [r7, #15]
    break;
 80088f6:	e008      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e005      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088fe:	2302      	movs	r3, #2
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	e002      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008904:	2302      	movs	r3, #2
 8008906:	73fb      	strb	r3, [r7, #15]
    break;
 8008908:	bf00      	nop
  }
  return usb_status;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008918:	b480      	push	{r7}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800891c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800891e:	4618      	mov	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	bc80      	pop	{r7}
 8008924:	4770      	bx	lr

08008926 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008926:	b480      	push	{r7}
 8008928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800892a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800892c:	4618      	mov	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr

08008934 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	460a      	mov	r2, r1
 800893e:	71fb      	strb	r3, [r7, #7]
 8008940:	4613      	mov	r3, r2
 8008942:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008944:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2212      	movs	r2, #18
 8008960:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008962:	4b03      	ldr	r3, [pc, #12]	; (8008970 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	bc80      	pop	{r7}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20000148 	.word	0x20000148

08008974 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	6039      	str	r1, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2204      	movs	r2, #4
 8008984:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008986:	4b03      	ldr	r3, [pc, #12]	; (8008994 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	2000015c 	.word	0x2000015c

08008998 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d105      	bne.n	80089b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	4907      	ldr	r1, [pc, #28]	; (80089cc <USBD_FS_ProductStrDescriptor+0x34>)
 80089ae:	4808      	ldr	r0, [pc, #32]	; (80089d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089b0:	f7fd fbfd 	bl	80061ae <USBD_GetString>
 80089b4:	e004      	b.n	80089c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	4904      	ldr	r1, [pc, #16]	; (80089cc <USBD_FS_ProductStrDescriptor+0x34>)
 80089ba:	4805      	ldr	r0, [pc, #20]	; (80089d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80089bc:	f7fd fbf7 	bl	80061ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c0:	4b02      	ldr	r3, [pc, #8]	; (80089cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200009dc 	.word	0x200009dc
 80089d0:	08009a64 	.word	0x08009a64

080089d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	4904      	ldr	r1, [pc, #16]	; (80089f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089e4:	4804      	ldr	r0, [pc, #16]	; (80089f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089e6:	f7fd fbe2 	bl	80061ae <USBD_GetString>
  return USBD_StrDesc;
 80089ea:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	200009dc 	.word	0x200009dc
 80089f8:	08009a84 	.word	0x08009a84

080089fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	221a      	movs	r2, #26
 8008a0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a0e:	f000 f843 	bl	8008a98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a12:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000160 	.word	0x20000160

08008a20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	4603      	mov	r3, r0
 8008a28:	6039      	str	r1, [r7, #0]
 8008a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d105      	bne.n	8008a3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	4907      	ldr	r1, [pc, #28]	; (8008a54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a36:	4808      	ldr	r0, [pc, #32]	; (8008a58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a38:	f7fd fbb9 	bl	80061ae <USBD_GetString>
 8008a3c:	e004      	b.n	8008a48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	4904      	ldr	r1, [pc, #16]	; (8008a54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a42:	4805      	ldr	r0, [pc, #20]	; (8008a58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a44:	f7fd fbb3 	bl	80061ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200009dc 	.word	0x200009dc
 8008a58:	08009a98 	.word	0x08009a98

08008a5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d105      	bne.n	8008a7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	4907      	ldr	r1, [pc, #28]	; (8008a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a72:	4808      	ldr	r0, [pc, #32]	; (8008a94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a74:	f7fd fb9b 	bl	80061ae <USBD_GetString>
 8008a78:	e004      	b.n	8008a84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	4904      	ldr	r1, [pc, #16]	; (8008a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a7e:	4805      	ldr	r0, [pc, #20]	; (8008a94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a80:	f7fd fb95 	bl	80061ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a84:	4b02      	ldr	r3, [pc, #8]	; (8008a90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	200009dc 	.word	0x200009dc
 8008a94:	08009aac 	.word	0x08009aac

08008a98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <Get_SerialNum+0x44>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008aa4:	4b0e      	ldr	r3, [pc, #56]	; (8008ae0 <Get_SerialNum+0x48>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <Get_SerialNum+0x4c>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d009      	beq.n	8008ad2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008abe:	2208      	movs	r2, #8
 8008ac0:	4909      	ldr	r1, [pc, #36]	; (8008ae8 <Get_SerialNum+0x50>)
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 f814 	bl	8008af0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ac8:	2204      	movs	r2, #4
 8008aca:	4908      	ldr	r1, [pc, #32]	; (8008aec <Get_SerialNum+0x54>)
 8008acc:	68b8      	ldr	r0, [r7, #8]
 8008ace:	f000 f80f 	bl	8008af0 <IntToUnicode>
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	1ffff7e8 	.word	0x1ffff7e8
 8008ae0:	1ffff7ec 	.word	0x1ffff7ec
 8008ae4:	1ffff7f0 	.word	0x1ffff7f0
 8008ae8:	20000162 	.word	0x20000162
 8008aec:	20000172 	.word	0x20000172

08008af0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008afe:	2300      	movs	r3, #0
 8008b00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]
 8008b06:	e027      	b.n	8008b58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	0f1b      	lsrs	r3, r3, #28
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	d80b      	bhi.n	8008b28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	0f1b      	lsrs	r3, r3, #28
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	440b      	add	r3, r1
 8008b20:	3230      	adds	r2, #48	; 0x30
 8008b22:	b2d2      	uxtb	r2, r2
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	e00a      	b.n	8008b3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	0f1b      	lsrs	r3, r3, #28
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	4619      	mov	r1, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	440b      	add	r3, r1
 8008b38:	3237      	adds	r2, #55	; 0x37
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	011b      	lsls	r3, r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	3301      	adds	r3, #1
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	2200      	movs	r2, #0
 8008b50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	3301      	adds	r3, #1
 8008b56:	75fb      	strb	r3, [r7, #23]
 8008b58:	7dfa      	ldrb	r2, [r7, #23]
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3d3      	bcc.n	8008b08 <IntToUnicode+0x18>
  }
}
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr
	...

08008b6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008b6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008b6e:	e003      	b.n	8008b78 <LoopCopyDataInit>

08008b70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008b72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008b74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008b76:	3104      	adds	r1, #4

08008b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008b78:	480a      	ldr	r0, [pc, #40]	; (8008ba4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008b7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008b7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008b7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008b80:	d3f6      	bcc.n	8008b70 <CopyDataInit>
  ldr r2, =_sbss
 8008b82:	4a0a      	ldr	r2, [pc, #40]	; (8008bac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008b84:	e002      	b.n	8008b8c <LoopFillZerobss>

08008b86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008b86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008b88:	f842 3b04 	str.w	r3, [r2], #4

08008b8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008b8c:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008b8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008b90:	d3f9      	bcc.n	8008b86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b92:	f7ff fbdd 	bl	8008350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b96:	f000 f815 	bl	8008bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008b9a:	f7fe fd43 	bl	8007624 <main>
  bx lr
 8008b9e:	4770      	bx	lr
  ldr r3, =_sidata
 8008ba0:	08009b28 	.word	0x08009b28
  ldr r0, =_sdata
 8008ba4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008ba8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8008bac:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8008bb0:	20000be0 	.word	0x20000be0

08008bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008bb4:	e7fe      	b.n	8008bb4 <ADC1_2_IRQHandler>
	...

08008bb8 <__errno>:
 8008bb8:	4b01      	ldr	r3, [pc, #4]	; (8008bc0 <__errno+0x8>)
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	2000017c 	.word	0x2000017c

08008bc4 <__libc_init_array>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	4e0c      	ldr	r6, [pc, #48]	; (8008bfc <__libc_init_array+0x38>)
 8008bca:	4c0d      	ldr	r4, [pc, #52]	; (8008c00 <__libc_init_array+0x3c>)
 8008bcc:	1ba4      	subs	r4, r4, r6
 8008bce:	10a4      	asrs	r4, r4, #2
 8008bd0:	42a5      	cmp	r5, r4
 8008bd2:	d109      	bne.n	8008be8 <__libc_init_array+0x24>
 8008bd4:	f000 fc36 	bl	8009444 <_init>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	4e0a      	ldr	r6, [pc, #40]	; (8008c04 <__libc_init_array+0x40>)
 8008bdc:	4c0a      	ldr	r4, [pc, #40]	; (8008c08 <__libc_init_array+0x44>)
 8008bde:	1ba4      	subs	r4, r4, r6
 8008be0:	10a4      	asrs	r4, r4, #2
 8008be2:	42a5      	cmp	r5, r4
 8008be4:	d105      	bne.n	8008bf2 <__libc_init_array+0x2e>
 8008be6:	bd70      	pop	{r4, r5, r6, pc}
 8008be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bec:	4798      	blx	r3
 8008bee:	3501      	adds	r5, #1
 8008bf0:	e7ee      	b.n	8008bd0 <__libc_init_array+0xc>
 8008bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bf6:	4798      	blx	r3
 8008bf8:	3501      	adds	r5, #1
 8008bfa:	e7f2      	b.n	8008be2 <__libc_init_array+0x1e>
 8008bfc:	08009b20 	.word	0x08009b20
 8008c00:	08009b20 	.word	0x08009b20
 8008c04:	08009b20 	.word	0x08009b20
 8008c08:	08009b24 	.word	0x08009b24

08008c0c <memcpy>:
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	1e43      	subs	r3, r0, #1
 8008c10:	440a      	add	r2, r1
 8008c12:	4291      	cmp	r1, r2
 8008c14:	d100      	bne.n	8008c18 <memcpy+0xc>
 8008c16:	bd10      	pop	{r4, pc}
 8008c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c20:	e7f7      	b.n	8008c12 <memcpy+0x6>

08008c22 <memset>:
 8008c22:	4603      	mov	r3, r0
 8008c24:	4402      	add	r2, r0
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d100      	bne.n	8008c2c <memset+0xa>
 8008c2a:	4770      	bx	lr
 8008c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8008c30:	e7f9      	b.n	8008c26 <memset+0x4>
	...

08008c34 <siprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c3a:	b500      	push	{lr}
 8008c3c:	b09c      	sub	sp, #112	; 0x70
 8008c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c40:	9002      	str	r0, [sp, #8]
 8008c42:	9006      	str	r0, [sp, #24]
 8008c44:	9107      	str	r1, [sp, #28]
 8008c46:	9104      	str	r1, [sp, #16]
 8008c48:	4808      	ldr	r0, [pc, #32]	; (8008c6c <siprintf+0x38>)
 8008c4a:	4909      	ldr	r1, [pc, #36]	; (8008c70 <siprintf+0x3c>)
 8008c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c50:	9105      	str	r1, [sp, #20]
 8008c52:	6800      	ldr	r0, [r0, #0]
 8008c54:	a902      	add	r1, sp, #8
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	f000 f866 	bl	8008d28 <_svfiprintf_r>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	9b02      	ldr	r3, [sp, #8]
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	b01c      	add	sp, #112	; 0x70
 8008c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c68:	b003      	add	sp, #12
 8008c6a:	4770      	bx	lr
 8008c6c:	2000017c 	.word	0x2000017c
 8008c70:	ffff0208 	.word	0xffff0208

08008c74 <__ssputs_r>:
 8008c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	688e      	ldr	r6, [r1, #8]
 8008c7a:	4682      	mov	sl, r0
 8008c7c:	429e      	cmp	r6, r3
 8008c7e:	460c      	mov	r4, r1
 8008c80:	4690      	mov	r8, r2
 8008c82:	4699      	mov	r9, r3
 8008c84:	d837      	bhi.n	8008cf6 <__ssputs_r+0x82>
 8008c86:	898a      	ldrh	r2, [r1, #12]
 8008c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c8c:	d031      	beq.n	8008cf2 <__ssputs_r+0x7e>
 8008c8e:	2302      	movs	r3, #2
 8008c90:	6825      	ldr	r5, [r4, #0]
 8008c92:	6909      	ldr	r1, [r1, #16]
 8008c94:	1a6f      	subs	r7, r5, r1
 8008c96:	6965      	ldr	r5, [r4, #20]
 8008c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008ca0:	f109 0301 	add.w	r3, r9, #1
 8008ca4:	443b      	add	r3, r7
 8008ca6:	429d      	cmp	r5, r3
 8008ca8:	bf38      	it	cc
 8008caa:	461d      	movcc	r5, r3
 8008cac:	0553      	lsls	r3, r2, #21
 8008cae:	d530      	bpl.n	8008d12 <__ssputs_r+0x9e>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f000 fb2d 	bl	8009310 <_malloc_r>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	b950      	cbnz	r0, 8008cd0 <__ssputs_r+0x5c>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	f8ca 3000 	str.w	r3, [sl]
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	463a      	mov	r2, r7
 8008cd2:	6921      	ldr	r1, [r4, #16]
 8008cd4:	f7ff ff9a 	bl	8008c0c <memcpy>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	6126      	str	r6, [r4, #16]
 8008ce6:	443e      	add	r6, r7
 8008ce8:	6026      	str	r6, [r4, #0]
 8008cea:	464e      	mov	r6, r9
 8008cec:	6165      	str	r5, [r4, #20]
 8008cee:	1bed      	subs	r5, r5, r7
 8008cf0:	60a5      	str	r5, [r4, #8]
 8008cf2:	454e      	cmp	r6, r9
 8008cf4:	d900      	bls.n	8008cf8 <__ssputs_r+0x84>
 8008cf6:	464e      	mov	r6, r9
 8008cf8:	4632      	mov	r2, r6
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	f000 faa1 	bl	8009244 <memmove>
 8008d02:	68a3      	ldr	r3, [r4, #8]
 8008d04:	2000      	movs	r0, #0
 8008d06:	1b9b      	subs	r3, r3, r6
 8008d08:	60a3      	str	r3, [r4, #8]
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	441e      	add	r6, r3
 8008d0e:	6026      	str	r6, [r4, #0]
 8008d10:	e7dc      	b.n	8008ccc <__ssputs_r+0x58>
 8008d12:	462a      	mov	r2, r5
 8008d14:	f000 fb56 	bl	80093c4 <_realloc_r>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d1e2      	bne.n	8008ce4 <__ssputs_r+0x70>
 8008d1e:	6921      	ldr	r1, [r4, #16]
 8008d20:	4650      	mov	r0, sl
 8008d22:	f000 faa9 	bl	8009278 <_free_r>
 8008d26:	e7c8      	b.n	8008cba <__ssputs_r+0x46>

08008d28 <_svfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	461d      	mov	r5, r3
 8008d2e:	898b      	ldrh	r3, [r1, #12]
 8008d30:	b09d      	sub	sp, #116	; 0x74
 8008d32:	061f      	lsls	r7, r3, #24
 8008d34:	4680      	mov	r8, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	4616      	mov	r6, r2
 8008d3a:	d50f      	bpl.n	8008d5c <_svfiprintf_r+0x34>
 8008d3c:	690b      	ldr	r3, [r1, #16]
 8008d3e:	b96b      	cbnz	r3, 8008d5c <_svfiprintf_r+0x34>
 8008d40:	2140      	movs	r1, #64	; 0x40
 8008d42:	f000 fae5 	bl	8009310 <_malloc_r>
 8008d46:	6020      	str	r0, [r4, #0]
 8008d48:	6120      	str	r0, [r4, #16]
 8008d4a:	b928      	cbnz	r0, 8008d58 <_svfiprintf_r+0x30>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	f8c8 3000 	str.w	r3, [r8]
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295
 8008d56:	e0c8      	b.n	8008eea <_svfiprintf_r+0x1c2>
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	6163      	str	r3, [r4, #20]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d60:	2320      	movs	r3, #32
 8008d62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d66:	2330      	movs	r3, #48	; 0x30
 8008d68:	f04f 0b01 	mov.w	fp, #1
 8008d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d70:	9503      	str	r5, [sp, #12]
 8008d72:	4637      	mov	r7, r6
 8008d74:	463d      	mov	r5, r7
 8008d76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d7a:	b10b      	cbz	r3, 8008d80 <_svfiprintf_r+0x58>
 8008d7c:	2b25      	cmp	r3, #37	; 0x25
 8008d7e:	d13e      	bne.n	8008dfe <_svfiprintf_r+0xd6>
 8008d80:	ebb7 0a06 	subs.w	sl, r7, r6
 8008d84:	d00b      	beq.n	8008d9e <_svfiprintf_r+0x76>
 8008d86:	4653      	mov	r3, sl
 8008d88:	4632      	mov	r2, r6
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4640      	mov	r0, r8
 8008d8e:	f7ff ff71 	bl	8008c74 <__ssputs_r>
 8008d92:	3001      	adds	r0, #1
 8008d94:	f000 80a4 	beq.w	8008ee0 <_svfiprintf_r+0x1b8>
 8008d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d9a:	4453      	add	r3, sl
 8008d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9e:	783b      	ldrb	r3, [r7, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 809d 	beq.w	8008ee0 <_svfiprintf_r+0x1b8>
 8008da6:	2300      	movs	r3, #0
 8008da8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008db0:	9304      	str	r3, [sp, #16]
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008db8:	931a      	str	r3, [sp, #104]	; 0x68
 8008dba:	462f      	mov	r7, r5
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008dc2:	4850      	ldr	r0, [pc, #320]	; (8008f04 <_svfiprintf_r+0x1dc>)
 8008dc4:	f000 fa30 	bl	8009228 <memchr>
 8008dc8:	9b04      	ldr	r3, [sp, #16]
 8008dca:	b9d0      	cbnz	r0, 8008e02 <_svfiprintf_r+0xda>
 8008dcc:	06d9      	lsls	r1, r3, #27
 8008dce:	bf44      	itt	mi
 8008dd0:	2220      	movmi	r2, #32
 8008dd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008dd6:	071a      	lsls	r2, r3, #28
 8008dd8:	bf44      	itt	mi
 8008dda:	222b      	movmi	r2, #43	; 0x2b
 8008ddc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008de0:	782a      	ldrb	r2, [r5, #0]
 8008de2:	2a2a      	cmp	r2, #42	; 0x2a
 8008de4:	d015      	beq.n	8008e12 <_svfiprintf_r+0xea>
 8008de6:	462f      	mov	r7, r5
 8008de8:	2000      	movs	r0, #0
 8008dea:	250a      	movs	r5, #10
 8008dec:	9a07      	ldr	r2, [sp, #28]
 8008dee:	4639      	mov	r1, r7
 8008df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df4:	3b30      	subs	r3, #48	; 0x30
 8008df6:	2b09      	cmp	r3, #9
 8008df8:	d94d      	bls.n	8008e96 <_svfiprintf_r+0x16e>
 8008dfa:	b1b8      	cbz	r0, 8008e2c <_svfiprintf_r+0x104>
 8008dfc:	e00f      	b.n	8008e1e <_svfiprintf_r+0xf6>
 8008dfe:	462f      	mov	r7, r5
 8008e00:	e7b8      	b.n	8008d74 <_svfiprintf_r+0x4c>
 8008e02:	4a40      	ldr	r2, [pc, #256]	; (8008f04 <_svfiprintf_r+0x1dc>)
 8008e04:	463d      	mov	r5, r7
 8008e06:	1a80      	subs	r0, r0, r2
 8008e08:	fa0b f000 	lsl.w	r0, fp, r0
 8008e0c:	4318      	orrs	r0, r3
 8008e0e:	9004      	str	r0, [sp, #16]
 8008e10:	e7d3      	b.n	8008dba <_svfiprintf_r+0x92>
 8008e12:	9a03      	ldr	r2, [sp, #12]
 8008e14:	1d11      	adds	r1, r2, #4
 8008e16:	6812      	ldr	r2, [r2, #0]
 8008e18:	9103      	str	r1, [sp, #12]
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	db01      	blt.n	8008e22 <_svfiprintf_r+0xfa>
 8008e1e:	9207      	str	r2, [sp, #28]
 8008e20:	e004      	b.n	8008e2c <_svfiprintf_r+0x104>
 8008e22:	4252      	negs	r2, r2
 8008e24:	f043 0302 	orr.w	r3, r3, #2
 8008e28:	9207      	str	r2, [sp, #28]
 8008e2a:	9304      	str	r3, [sp, #16]
 8008e2c:	783b      	ldrb	r3, [r7, #0]
 8008e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e30:	d10c      	bne.n	8008e4c <_svfiprintf_r+0x124>
 8008e32:	787b      	ldrb	r3, [r7, #1]
 8008e34:	2b2a      	cmp	r3, #42	; 0x2a
 8008e36:	d133      	bne.n	8008ea0 <_svfiprintf_r+0x178>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	3702      	adds	r7, #2
 8008e3c:	1d1a      	adds	r2, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9203      	str	r2, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfb8      	it	lt
 8008e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	4d2e      	ldr	r5, [pc, #184]	; (8008f08 <_svfiprintf_r+0x1e0>)
 8008e4e:	2203      	movs	r2, #3
 8008e50:	7839      	ldrb	r1, [r7, #0]
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 f9e8 	bl	8009228 <memchr>
 8008e58:	b138      	cbz	r0, 8008e6a <_svfiprintf_r+0x142>
 8008e5a:	2340      	movs	r3, #64	; 0x40
 8008e5c:	1b40      	subs	r0, r0, r5
 8008e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e62:	9b04      	ldr	r3, [sp, #16]
 8008e64:	3701      	adds	r7, #1
 8008e66:	4303      	orrs	r3, r0
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	7839      	ldrb	r1, [r7, #0]
 8008e6c:	2206      	movs	r2, #6
 8008e6e:	4827      	ldr	r0, [pc, #156]	; (8008f0c <_svfiprintf_r+0x1e4>)
 8008e70:	1c7e      	adds	r6, r7, #1
 8008e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e76:	f000 f9d7 	bl	8009228 <memchr>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d038      	beq.n	8008ef0 <_svfiprintf_r+0x1c8>
 8008e7e:	4b24      	ldr	r3, [pc, #144]	; (8008f10 <_svfiprintf_r+0x1e8>)
 8008e80:	bb13      	cbnz	r3, 8008ec8 <_svfiprintf_r+0x1a0>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	3307      	adds	r3, #7
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e90:	444b      	add	r3, r9
 8008e92:	9309      	str	r3, [sp, #36]	; 0x24
 8008e94:	e76d      	b.n	8008d72 <_svfiprintf_r+0x4a>
 8008e96:	fb05 3202 	mla	r2, r5, r2, r3
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	460f      	mov	r7, r1
 8008e9e:	e7a6      	b.n	8008dee <_svfiprintf_r+0xc6>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	250a      	movs	r5, #10
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	3701      	adds	r7, #1
 8008ea8:	9305      	str	r3, [sp, #20]
 8008eaa:	4638      	mov	r0, r7
 8008eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eb0:	3a30      	subs	r2, #48	; 0x30
 8008eb2:	2a09      	cmp	r2, #9
 8008eb4:	d903      	bls.n	8008ebe <_svfiprintf_r+0x196>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0c8      	beq.n	8008e4c <_svfiprintf_r+0x124>
 8008eba:	9105      	str	r1, [sp, #20]
 8008ebc:	e7c6      	b.n	8008e4c <_svfiprintf_r+0x124>
 8008ebe:	fb05 2101 	mla	r1, r5, r1, r2
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	e7f0      	b.n	8008eaa <_svfiprintf_r+0x182>
 8008ec8:	ab03      	add	r3, sp, #12
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4b11      	ldr	r3, [pc, #68]	; (8008f14 <_svfiprintf_r+0x1ec>)
 8008ed0:	a904      	add	r1, sp, #16
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008edc:	4681      	mov	r9, r0
 8008ede:	d1d6      	bne.n	8008e8e <_svfiprintf_r+0x166>
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	065b      	lsls	r3, r3, #25
 8008ee4:	f53f af35 	bmi.w	8008d52 <_svfiprintf_r+0x2a>
 8008ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eea:	b01d      	add	sp, #116	; 0x74
 8008eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef0:	ab03      	add	r3, sp, #12
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <_svfiprintf_r+0x1ec>)
 8008ef8:	a904      	add	r1, sp, #16
 8008efa:	4640      	mov	r0, r8
 8008efc:	f000 f882 	bl	8009004 <_printf_i>
 8008f00:	e7ea      	b.n	8008ed8 <_svfiprintf_r+0x1b0>
 8008f02:	bf00      	nop
 8008f04:	08009aec 	.word	0x08009aec
 8008f08:	08009af2 	.word	0x08009af2
 8008f0c:	08009af6 	.word	0x08009af6
 8008f10:	00000000 	.word	0x00000000
 8008f14:	08008c75 	.word	0x08008c75

08008f18 <_printf_common>:
 8008f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	4691      	mov	r9, r2
 8008f1e:	461f      	mov	r7, r3
 8008f20:	688a      	ldr	r2, [r1, #8]
 8008f22:	690b      	ldr	r3, [r1, #16]
 8008f24:	4606      	mov	r6, r0
 8008f26:	4293      	cmp	r3, r2
 8008f28:	bfb8      	it	lt
 8008f2a:	4613      	movlt	r3, r2
 8008f2c:	f8c9 3000 	str.w	r3, [r9]
 8008f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f34:	460c      	mov	r4, r1
 8008f36:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f3a:	b112      	cbz	r2, 8008f42 <_printf_common+0x2a>
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	f8c9 3000 	str.w	r3, [r9]
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	0699      	lsls	r1, r3, #26
 8008f46:	bf42      	ittt	mi
 8008f48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008f4c:	3302      	addmi	r3, #2
 8008f4e:	f8c9 3000 	strmi.w	r3, [r9]
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	f015 0506 	ands.w	r5, r5, #6
 8008f58:	d107      	bne.n	8008f6a <_printf_common+0x52>
 8008f5a:	f104 0a19 	add.w	sl, r4, #25
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	f8d9 2000 	ldr.w	r2, [r9]
 8008f64:	1a9b      	subs	r3, r3, r2
 8008f66:	42ab      	cmp	r3, r5
 8008f68:	dc29      	bgt.n	8008fbe <_printf_common+0xa6>
 8008f6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	3300      	adds	r3, #0
 8008f72:	bf18      	it	ne
 8008f74:	2301      	movne	r3, #1
 8008f76:	0692      	lsls	r2, r2, #26
 8008f78:	d42e      	bmi.n	8008fd8 <_printf_common+0xc0>
 8008f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f7e:	4639      	mov	r1, r7
 8008f80:	4630      	mov	r0, r6
 8008f82:	47c0      	blx	r8
 8008f84:	3001      	adds	r0, #1
 8008f86:	d021      	beq.n	8008fcc <_printf_common+0xb4>
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	68e5      	ldr	r5, [r4, #12]
 8008f8c:	f003 0306 	and.w	r3, r3, #6
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	bf18      	it	ne
 8008f94:	2500      	movne	r5, #0
 8008f96:	f8d9 2000 	ldr.w	r2, [r9]
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	bf08      	it	eq
 8008fa0:	1aad      	subeq	r5, r5, r2
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	bf08      	it	eq
 8008fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fac:	4293      	cmp	r3, r2
 8008fae:	bfc4      	itt	gt
 8008fb0:	1a9b      	subgt	r3, r3, r2
 8008fb2:	18ed      	addgt	r5, r5, r3
 8008fb4:	341a      	adds	r4, #26
 8008fb6:	454d      	cmp	r5, r9
 8008fb8:	d11a      	bne.n	8008ff0 <_printf_common+0xd8>
 8008fba:	2000      	movs	r0, #0
 8008fbc:	e008      	b.n	8008fd0 <_printf_common+0xb8>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	4639      	mov	r1, r7
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	47c0      	blx	r8
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d103      	bne.n	8008fd4 <_printf_common+0xbc>
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	e7c2      	b.n	8008f5e <_printf_common+0x46>
 8008fd8:	2030      	movs	r0, #48	; 0x30
 8008fda:	18e1      	adds	r1, r4, r3
 8008fdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fe6:	4422      	add	r2, r4
 8008fe8:	3302      	adds	r3, #2
 8008fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fee:	e7c4      	b.n	8008f7a <_printf_common+0x62>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	4639      	mov	r1, r7
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	47c0      	blx	r8
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d0e6      	beq.n	8008fcc <_printf_common+0xb4>
 8008ffe:	f109 0901 	add.w	r9, r9, #1
 8009002:	e7d8      	b.n	8008fb6 <_printf_common+0x9e>

08009004 <_printf_i>:
 8009004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009008:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800900c:	460c      	mov	r4, r1
 800900e:	7e09      	ldrb	r1, [r1, #24]
 8009010:	b085      	sub	sp, #20
 8009012:	296e      	cmp	r1, #110	; 0x6e
 8009014:	4617      	mov	r7, r2
 8009016:	4606      	mov	r6, r0
 8009018:	4698      	mov	r8, r3
 800901a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800901c:	f000 80b3 	beq.w	8009186 <_printf_i+0x182>
 8009020:	d822      	bhi.n	8009068 <_printf_i+0x64>
 8009022:	2963      	cmp	r1, #99	; 0x63
 8009024:	d036      	beq.n	8009094 <_printf_i+0x90>
 8009026:	d80a      	bhi.n	800903e <_printf_i+0x3a>
 8009028:	2900      	cmp	r1, #0
 800902a:	f000 80b9 	beq.w	80091a0 <_printf_i+0x19c>
 800902e:	2958      	cmp	r1, #88	; 0x58
 8009030:	f000 8083 	beq.w	800913a <_printf_i+0x136>
 8009034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009038:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800903c:	e032      	b.n	80090a4 <_printf_i+0xa0>
 800903e:	2964      	cmp	r1, #100	; 0x64
 8009040:	d001      	beq.n	8009046 <_printf_i+0x42>
 8009042:	2969      	cmp	r1, #105	; 0x69
 8009044:	d1f6      	bne.n	8009034 <_printf_i+0x30>
 8009046:	6820      	ldr	r0, [r4, #0]
 8009048:	6813      	ldr	r3, [r2, #0]
 800904a:	0605      	lsls	r5, r0, #24
 800904c:	f103 0104 	add.w	r1, r3, #4
 8009050:	d52a      	bpl.n	80090a8 <_printf_i+0xa4>
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6011      	str	r1, [r2, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	da03      	bge.n	8009062 <_printf_i+0x5e>
 800905a:	222d      	movs	r2, #45	; 0x2d
 800905c:	425b      	negs	r3, r3
 800905e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009062:	486f      	ldr	r0, [pc, #444]	; (8009220 <_printf_i+0x21c>)
 8009064:	220a      	movs	r2, #10
 8009066:	e039      	b.n	80090dc <_printf_i+0xd8>
 8009068:	2973      	cmp	r1, #115	; 0x73
 800906a:	f000 809d 	beq.w	80091a8 <_printf_i+0x1a4>
 800906e:	d808      	bhi.n	8009082 <_printf_i+0x7e>
 8009070:	296f      	cmp	r1, #111	; 0x6f
 8009072:	d020      	beq.n	80090b6 <_printf_i+0xb2>
 8009074:	2970      	cmp	r1, #112	; 0x70
 8009076:	d1dd      	bne.n	8009034 <_printf_i+0x30>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	f043 0320 	orr.w	r3, r3, #32
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	e003      	b.n	800908a <_printf_i+0x86>
 8009082:	2975      	cmp	r1, #117	; 0x75
 8009084:	d017      	beq.n	80090b6 <_printf_i+0xb2>
 8009086:	2978      	cmp	r1, #120	; 0x78
 8009088:	d1d4      	bne.n	8009034 <_printf_i+0x30>
 800908a:	2378      	movs	r3, #120	; 0x78
 800908c:	4865      	ldr	r0, [pc, #404]	; (8009224 <_printf_i+0x220>)
 800908e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009092:	e055      	b.n	8009140 <_printf_i+0x13c>
 8009094:	6813      	ldr	r3, [r2, #0]
 8009096:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800909a:	1d19      	adds	r1, r3, #4
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6011      	str	r1, [r2, #0]
 80090a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090a4:	2301      	movs	r3, #1
 80090a6:	e08c      	b.n	80091c2 <_printf_i+0x1be>
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090ae:	6011      	str	r1, [r2, #0]
 80090b0:	bf18      	it	ne
 80090b2:	b21b      	sxthne	r3, r3
 80090b4:	e7cf      	b.n	8009056 <_printf_i+0x52>
 80090b6:	6813      	ldr	r3, [r2, #0]
 80090b8:	6825      	ldr	r5, [r4, #0]
 80090ba:	1d18      	adds	r0, r3, #4
 80090bc:	6010      	str	r0, [r2, #0]
 80090be:	0628      	lsls	r0, r5, #24
 80090c0:	d501      	bpl.n	80090c6 <_printf_i+0xc2>
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	e002      	b.n	80090cc <_printf_i+0xc8>
 80090c6:	0668      	lsls	r0, r5, #25
 80090c8:	d5fb      	bpl.n	80090c2 <_printf_i+0xbe>
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	296f      	cmp	r1, #111	; 0x6f
 80090ce:	bf14      	ite	ne
 80090d0:	220a      	movne	r2, #10
 80090d2:	2208      	moveq	r2, #8
 80090d4:	4852      	ldr	r0, [pc, #328]	; (8009220 <_printf_i+0x21c>)
 80090d6:	2100      	movs	r1, #0
 80090d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090dc:	6865      	ldr	r5, [r4, #4]
 80090de:	2d00      	cmp	r5, #0
 80090e0:	60a5      	str	r5, [r4, #8]
 80090e2:	f2c0 8095 	blt.w	8009210 <_printf_i+0x20c>
 80090e6:	6821      	ldr	r1, [r4, #0]
 80090e8:	f021 0104 	bic.w	r1, r1, #4
 80090ec:	6021      	str	r1, [r4, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d13d      	bne.n	800916e <_printf_i+0x16a>
 80090f2:	2d00      	cmp	r5, #0
 80090f4:	f040 808e 	bne.w	8009214 <_printf_i+0x210>
 80090f8:	4665      	mov	r5, ip
 80090fa:	2a08      	cmp	r2, #8
 80090fc:	d10b      	bne.n	8009116 <_printf_i+0x112>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	07db      	lsls	r3, r3, #31
 8009102:	d508      	bpl.n	8009116 <_printf_i+0x112>
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	6862      	ldr	r2, [r4, #4]
 8009108:	429a      	cmp	r2, r3
 800910a:	bfde      	ittt	le
 800910c:	2330      	movle	r3, #48	; 0x30
 800910e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009112:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009116:	ebac 0305 	sub.w	r3, ip, r5
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	f8cd 8000 	str.w	r8, [sp]
 8009120:	463b      	mov	r3, r7
 8009122:	aa03      	add	r2, sp, #12
 8009124:	4621      	mov	r1, r4
 8009126:	4630      	mov	r0, r6
 8009128:	f7ff fef6 	bl	8008f18 <_printf_common>
 800912c:	3001      	adds	r0, #1
 800912e:	d14d      	bne.n	80091cc <_printf_i+0x1c8>
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	b005      	add	sp, #20
 8009136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913a:	4839      	ldr	r0, [pc, #228]	; (8009220 <_printf_i+0x21c>)
 800913c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009140:	6813      	ldr	r3, [r2, #0]
 8009142:	6821      	ldr	r1, [r4, #0]
 8009144:	1d1d      	adds	r5, r3, #4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6015      	str	r5, [r2, #0]
 800914a:	060a      	lsls	r2, r1, #24
 800914c:	d50b      	bpl.n	8009166 <_printf_i+0x162>
 800914e:	07ca      	lsls	r2, r1, #31
 8009150:	bf44      	itt	mi
 8009152:	f041 0120 	orrmi.w	r1, r1, #32
 8009156:	6021      	strmi	r1, [r4, #0]
 8009158:	b91b      	cbnz	r3, 8009162 <_printf_i+0x15e>
 800915a:	6822      	ldr	r2, [r4, #0]
 800915c:	f022 0220 	bic.w	r2, r2, #32
 8009160:	6022      	str	r2, [r4, #0]
 8009162:	2210      	movs	r2, #16
 8009164:	e7b7      	b.n	80090d6 <_printf_i+0xd2>
 8009166:	064d      	lsls	r5, r1, #25
 8009168:	bf48      	it	mi
 800916a:	b29b      	uxthmi	r3, r3
 800916c:	e7ef      	b.n	800914e <_printf_i+0x14a>
 800916e:	4665      	mov	r5, ip
 8009170:	fbb3 f1f2 	udiv	r1, r3, r2
 8009174:	fb02 3311 	mls	r3, r2, r1, r3
 8009178:	5cc3      	ldrb	r3, [r0, r3]
 800917a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800917e:	460b      	mov	r3, r1
 8009180:	2900      	cmp	r1, #0
 8009182:	d1f5      	bne.n	8009170 <_printf_i+0x16c>
 8009184:	e7b9      	b.n	80090fa <_printf_i+0xf6>
 8009186:	6813      	ldr	r3, [r2, #0]
 8009188:	6825      	ldr	r5, [r4, #0]
 800918a:	1d18      	adds	r0, r3, #4
 800918c:	6961      	ldr	r1, [r4, #20]
 800918e:	6010      	str	r0, [r2, #0]
 8009190:	0628      	lsls	r0, r5, #24
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	d501      	bpl.n	800919a <_printf_i+0x196>
 8009196:	6019      	str	r1, [r3, #0]
 8009198:	e002      	b.n	80091a0 <_printf_i+0x19c>
 800919a:	066a      	lsls	r2, r5, #25
 800919c:	d5fb      	bpl.n	8009196 <_printf_i+0x192>
 800919e:	8019      	strh	r1, [r3, #0]
 80091a0:	2300      	movs	r3, #0
 80091a2:	4665      	mov	r5, ip
 80091a4:	6123      	str	r3, [r4, #16]
 80091a6:	e7b9      	b.n	800911c <_printf_i+0x118>
 80091a8:	6813      	ldr	r3, [r2, #0]
 80091aa:	1d19      	adds	r1, r3, #4
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	681d      	ldr	r5, [r3, #0]
 80091b0:	6862      	ldr	r2, [r4, #4]
 80091b2:	2100      	movs	r1, #0
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 f837 	bl	8009228 <memchr>
 80091ba:	b108      	cbz	r0, 80091c0 <_printf_i+0x1bc>
 80091bc:	1b40      	subs	r0, r0, r5
 80091be:	6060      	str	r0, [r4, #4]
 80091c0:	6863      	ldr	r3, [r4, #4]
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	2300      	movs	r3, #0
 80091c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ca:	e7a7      	b.n	800911c <_printf_i+0x118>
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	462a      	mov	r2, r5
 80091d0:	4639      	mov	r1, r7
 80091d2:	4630      	mov	r0, r6
 80091d4:	47c0      	blx	r8
 80091d6:	3001      	adds	r0, #1
 80091d8:	d0aa      	beq.n	8009130 <_printf_i+0x12c>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	079b      	lsls	r3, r3, #30
 80091de:	d413      	bmi.n	8009208 <_printf_i+0x204>
 80091e0:	68e0      	ldr	r0, [r4, #12]
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	4298      	cmp	r0, r3
 80091e6:	bfb8      	it	lt
 80091e8:	4618      	movlt	r0, r3
 80091ea:	e7a3      	b.n	8009134 <_printf_i+0x130>
 80091ec:	2301      	movs	r3, #1
 80091ee:	464a      	mov	r2, r9
 80091f0:	4639      	mov	r1, r7
 80091f2:	4630      	mov	r0, r6
 80091f4:	47c0      	blx	r8
 80091f6:	3001      	adds	r0, #1
 80091f8:	d09a      	beq.n	8009130 <_printf_i+0x12c>
 80091fa:	3501      	adds	r5, #1
 80091fc:	68e3      	ldr	r3, [r4, #12]
 80091fe:	9a03      	ldr	r2, [sp, #12]
 8009200:	1a9b      	subs	r3, r3, r2
 8009202:	42ab      	cmp	r3, r5
 8009204:	dcf2      	bgt.n	80091ec <_printf_i+0x1e8>
 8009206:	e7eb      	b.n	80091e0 <_printf_i+0x1dc>
 8009208:	2500      	movs	r5, #0
 800920a:	f104 0919 	add.w	r9, r4, #25
 800920e:	e7f5      	b.n	80091fc <_printf_i+0x1f8>
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1ac      	bne.n	800916e <_printf_i+0x16a>
 8009214:	7803      	ldrb	r3, [r0, #0]
 8009216:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800921a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800921e:	e76c      	b.n	80090fa <_printf_i+0xf6>
 8009220:	08009afd 	.word	0x08009afd
 8009224:	08009b0e 	.word	0x08009b0e

08009228 <memchr>:
 8009228:	b510      	push	{r4, lr}
 800922a:	b2c9      	uxtb	r1, r1
 800922c:	4402      	add	r2, r0
 800922e:	4290      	cmp	r0, r2
 8009230:	4603      	mov	r3, r0
 8009232:	d101      	bne.n	8009238 <memchr+0x10>
 8009234:	2300      	movs	r3, #0
 8009236:	e003      	b.n	8009240 <memchr+0x18>
 8009238:	781c      	ldrb	r4, [r3, #0]
 800923a:	3001      	adds	r0, #1
 800923c:	428c      	cmp	r4, r1
 800923e:	d1f6      	bne.n	800922e <memchr+0x6>
 8009240:	4618      	mov	r0, r3
 8009242:	bd10      	pop	{r4, pc}

08009244 <memmove>:
 8009244:	4288      	cmp	r0, r1
 8009246:	b510      	push	{r4, lr}
 8009248:	eb01 0302 	add.w	r3, r1, r2
 800924c:	d807      	bhi.n	800925e <memmove+0x1a>
 800924e:	1e42      	subs	r2, r0, #1
 8009250:	4299      	cmp	r1, r3
 8009252:	d00a      	beq.n	800926a <memmove+0x26>
 8009254:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009258:	f802 4f01 	strb.w	r4, [r2, #1]!
 800925c:	e7f8      	b.n	8009250 <memmove+0xc>
 800925e:	4283      	cmp	r3, r0
 8009260:	d9f5      	bls.n	800924e <memmove+0xa>
 8009262:	1881      	adds	r1, r0, r2
 8009264:	1ad2      	subs	r2, r2, r3
 8009266:	42d3      	cmn	r3, r2
 8009268:	d100      	bne.n	800926c <memmove+0x28>
 800926a:	bd10      	pop	{r4, pc}
 800926c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009270:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009274:	e7f7      	b.n	8009266 <memmove+0x22>
	...

08009278 <_free_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	4605      	mov	r5, r0
 800927c:	2900      	cmp	r1, #0
 800927e:	d043      	beq.n	8009308 <_free_r+0x90>
 8009280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009284:	1f0c      	subs	r4, r1, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	bfb8      	it	lt
 800928a:	18e4      	addlt	r4, r4, r3
 800928c:	f000 f8d0 	bl	8009430 <__malloc_lock>
 8009290:	4a1e      	ldr	r2, [pc, #120]	; (800930c <_free_r+0x94>)
 8009292:	6813      	ldr	r3, [r2, #0]
 8009294:	4610      	mov	r0, r2
 8009296:	b933      	cbnz	r3, 80092a6 <_free_r+0x2e>
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	6014      	str	r4, [r2, #0]
 800929c:	4628      	mov	r0, r5
 800929e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092a2:	f000 b8c6 	b.w	8009432 <__malloc_unlock>
 80092a6:	42a3      	cmp	r3, r4
 80092a8:	d90b      	bls.n	80092c2 <_free_r+0x4a>
 80092aa:	6821      	ldr	r1, [r4, #0]
 80092ac:	1862      	adds	r2, r4, r1
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bf01      	itttt	eq
 80092b2:	681a      	ldreq	r2, [r3, #0]
 80092b4:	685b      	ldreq	r3, [r3, #4]
 80092b6:	1852      	addeq	r2, r2, r1
 80092b8:	6022      	streq	r2, [r4, #0]
 80092ba:	6063      	str	r3, [r4, #4]
 80092bc:	6004      	str	r4, [r0, #0]
 80092be:	e7ed      	b.n	800929c <_free_r+0x24>
 80092c0:	4613      	mov	r3, r2
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	b10a      	cbz	r2, 80092ca <_free_r+0x52>
 80092c6:	42a2      	cmp	r2, r4
 80092c8:	d9fa      	bls.n	80092c0 <_free_r+0x48>
 80092ca:	6819      	ldr	r1, [r3, #0]
 80092cc:	1858      	adds	r0, r3, r1
 80092ce:	42a0      	cmp	r0, r4
 80092d0:	d10b      	bne.n	80092ea <_free_r+0x72>
 80092d2:	6820      	ldr	r0, [r4, #0]
 80092d4:	4401      	add	r1, r0
 80092d6:	1858      	adds	r0, r3, r1
 80092d8:	4282      	cmp	r2, r0
 80092da:	6019      	str	r1, [r3, #0]
 80092dc:	d1de      	bne.n	800929c <_free_r+0x24>
 80092de:	6810      	ldr	r0, [r2, #0]
 80092e0:	6852      	ldr	r2, [r2, #4]
 80092e2:	4401      	add	r1, r0
 80092e4:	6019      	str	r1, [r3, #0]
 80092e6:	605a      	str	r2, [r3, #4]
 80092e8:	e7d8      	b.n	800929c <_free_r+0x24>
 80092ea:	d902      	bls.n	80092f2 <_free_r+0x7a>
 80092ec:	230c      	movs	r3, #12
 80092ee:	602b      	str	r3, [r5, #0]
 80092f0:	e7d4      	b.n	800929c <_free_r+0x24>
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	1821      	adds	r1, r4, r0
 80092f6:	428a      	cmp	r2, r1
 80092f8:	bf01      	itttt	eq
 80092fa:	6811      	ldreq	r1, [r2, #0]
 80092fc:	6852      	ldreq	r2, [r2, #4]
 80092fe:	1809      	addeq	r1, r1, r0
 8009300:	6021      	streq	r1, [r4, #0]
 8009302:	6062      	str	r2, [r4, #4]
 8009304:	605c      	str	r4, [r3, #4]
 8009306:	e7c9      	b.n	800929c <_free_r+0x24>
 8009308:	bd38      	pop	{r3, r4, r5, pc}
 800930a:	bf00      	nop
 800930c:	20000310 	.word	0x20000310

08009310 <_malloc_r>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	1ccd      	adds	r5, r1, #3
 8009314:	f025 0503 	bic.w	r5, r5, #3
 8009318:	3508      	adds	r5, #8
 800931a:	2d0c      	cmp	r5, #12
 800931c:	bf38      	it	cc
 800931e:	250c      	movcc	r5, #12
 8009320:	2d00      	cmp	r5, #0
 8009322:	4606      	mov	r6, r0
 8009324:	db01      	blt.n	800932a <_malloc_r+0x1a>
 8009326:	42a9      	cmp	r1, r5
 8009328:	d903      	bls.n	8009332 <_malloc_r+0x22>
 800932a:	230c      	movs	r3, #12
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	2000      	movs	r0, #0
 8009330:	bd70      	pop	{r4, r5, r6, pc}
 8009332:	f000 f87d 	bl	8009430 <__malloc_lock>
 8009336:	4a21      	ldr	r2, [pc, #132]	; (80093bc <_malloc_r+0xac>)
 8009338:	6814      	ldr	r4, [r2, #0]
 800933a:	4621      	mov	r1, r4
 800933c:	b991      	cbnz	r1, 8009364 <_malloc_r+0x54>
 800933e:	4c20      	ldr	r4, [pc, #128]	; (80093c0 <_malloc_r+0xb0>)
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	b91b      	cbnz	r3, 800934c <_malloc_r+0x3c>
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f863 	bl	8009410 <_sbrk_r>
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	4629      	mov	r1, r5
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f85e 	bl	8009410 <_sbrk_r>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d124      	bne.n	80093a2 <_malloc_r+0x92>
 8009358:	230c      	movs	r3, #12
 800935a:	4630      	mov	r0, r6
 800935c:	6033      	str	r3, [r6, #0]
 800935e:	f000 f868 	bl	8009432 <__malloc_unlock>
 8009362:	e7e4      	b.n	800932e <_malloc_r+0x1e>
 8009364:	680b      	ldr	r3, [r1, #0]
 8009366:	1b5b      	subs	r3, r3, r5
 8009368:	d418      	bmi.n	800939c <_malloc_r+0x8c>
 800936a:	2b0b      	cmp	r3, #11
 800936c:	d90f      	bls.n	800938e <_malloc_r+0x7e>
 800936e:	600b      	str	r3, [r1, #0]
 8009370:	18cc      	adds	r4, r1, r3
 8009372:	50cd      	str	r5, [r1, r3]
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f85c 	bl	8009432 <__malloc_unlock>
 800937a:	f104 000b 	add.w	r0, r4, #11
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	f020 0007 	bic.w	r0, r0, #7
 8009384:	1ac3      	subs	r3, r0, r3
 8009386:	d0d3      	beq.n	8009330 <_malloc_r+0x20>
 8009388:	425a      	negs	r2, r3
 800938a:	50e2      	str	r2, [r4, r3]
 800938c:	e7d0      	b.n	8009330 <_malloc_r+0x20>
 800938e:	684b      	ldr	r3, [r1, #4]
 8009390:	428c      	cmp	r4, r1
 8009392:	bf16      	itet	ne
 8009394:	6063      	strne	r3, [r4, #4]
 8009396:	6013      	streq	r3, [r2, #0]
 8009398:	460c      	movne	r4, r1
 800939a:	e7eb      	b.n	8009374 <_malloc_r+0x64>
 800939c:	460c      	mov	r4, r1
 800939e:	6849      	ldr	r1, [r1, #4]
 80093a0:	e7cc      	b.n	800933c <_malloc_r+0x2c>
 80093a2:	1cc4      	adds	r4, r0, #3
 80093a4:	f024 0403 	bic.w	r4, r4, #3
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d005      	beq.n	80093b8 <_malloc_r+0xa8>
 80093ac:	1a21      	subs	r1, r4, r0
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f82e 	bl	8009410 <_sbrk_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d0cf      	beq.n	8009358 <_malloc_r+0x48>
 80093b8:	6025      	str	r5, [r4, #0]
 80093ba:	e7db      	b.n	8009374 <_malloc_r+0x64>
 80093bc:	20000310 	.word	0x20000310
 80093c0:	20000314 	.word	0x20000314

080093c4 <_realloc_r>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4607      	mov	r7, r0
 80093c8:	4614      	mov	r4, r2
 80093ca:	460e      	mov	r6, r1
 80093cc:	b921      	cbnz	r1, 80093d8 <_realloc_r+0x14>
 80093ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093d2:	4611      	mov	r1, r2
 80093d4:	f7ff bf9c 	b.w	8009310 <_malloc_r>
 80093d8:	b922      	cbnz	r2, 80093e4 <_realloc_r+0x20>
 80093da:	f7ff ff4d 	bl	8009278 <_free_r>
 80093de:	4625      	mov	r5, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e4:	f000 f826 	bl	8009434 <_malloc_usable_size_r>
 80093e8:	42a0      	cmp	r0, r4
 80093ea:	d20f      	bcs.n	800940c <_realloc_r+0x48>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4638      	mov	r0, r7
 80093f0:	f7ff ff8e 	bl	8009310 <_malloc_r>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0f2      	beq.n	80093e0 <_realloc_r+0x1c>
 80093fa:	4631      	mov	r1, r6
 80093fc:	4622      	mov	r2, r4
 80093fe:	f7ff fc05 	bl	8008c0c <memcpy>
 8009402:	4631      	mov	r1, r6
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff ff37 	bl	8009278 <_free_r>
 800940a:	e7e9      	b.n	80093e0 <_realloc_r+0x1c>
 800940c:	4635      	mov	r5, r6
 800940e:	e7e7      	b.n	80093e0 <_realloc_r+0x1c>

08009410 <_sbrk_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	2300      	movs	r3, #0
 8009414:	4c05      	ldr	r4, [pc, #20]	; (800942c <_sbrk_r+0x1c>)
 8009416:	4605      	mov	r5, r0
 8009418:	4608      	mov	r0, r1
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	f7fe ff6c 	bl	80082f8 <_sbrk>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_sbrk_r+0x1a>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	b103      	cbz	r3, 800942a <_sbrk_r+0x1a>
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000bdc 	.word	0x20000bdc

08009430 <__malloc_lock>:
 8009430:	4770      	bx	lr

08009432 <__malloc_unlock>:
 8009432:	4770      	bx	lr

08009434 <_malloc_usable_size_r>:
 8009434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009438:	1f18      	subs	r0, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfbc      	itt	lt
 800943e:	580b      	ldrlt	r3, [r1, r0]
 8009440:	18c0      	addlt	r0, r0, r3
 8009442:	4770      	bx	lr

08009444 <_init>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	bf00      	nop
 8009448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944a:	bc08      	pop	{r3}
 800944c:	469e      	mov	lr, r3
 800944e:	4770      	bx	lr

08009450 <_fini>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	bf00      	nop
 8009454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009456:	bc08      	pop	{r3}
 8009458:	469e      	mov	lr, r3
 800945a:	4770      	bx	lr
