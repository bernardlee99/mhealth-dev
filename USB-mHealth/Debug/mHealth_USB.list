
mHealth_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c8  080083c8  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  080083c8  080083c8  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083c8  080083c8  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083c8  080083c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080083d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  200001d0  080085a0  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  080085a0  00020bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157f6  00000000  00000000  000201f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003280  00000000  00000000  000359ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff8  00000000  00000000  00038c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00039c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001775d  00000000  00000000  0003aad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eba8  00000000  00000000  00052235  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072013  00000000  00000000  00060ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2df0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000436c  00000000  00000000  000d2e6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d0 	.word	0x200001d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d9c 	.word	0x08007d9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d4 	.word	0x200001d4
 8000148:	08007d9c 	.word	0x08007d9c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f945 	bl	80003fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f006 fc6e 	bl	8006a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f95d 	bl	8000466 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 f925 	bl	8000412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	200000e8 	.word	0x200000e8
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000300 	.word	0x20000300

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000300 	.word	0x20000300

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <HAL_Delay+0x40>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004

08000264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f003 0307 	and.w	r3, r3, #7
 8000272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027a:	68ba      	ldr	r2, [r7, #8]
 800027c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000280:	4013      	ands	r3, r2
 8000282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	60d3      	str	r3, [r2, #12]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <__NVIC_GetPriorityGrouping+0x18>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	f003 0307 	and.w	r3, r3, #7
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	db0b      	blt.n	80002f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	f003 021f 	and.w	r2, r3, #31
 80002e0:	4906      	ldr	r1, [pc, #24]	; (80002fc <__NVIC_EnableIRQ+0x34>)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	095b      	lsrs	r3, r3, #5
 80002e8:	2001      	movs	r0, #1
 80002ea:	fa00 f202 	lsl.w	r2, r0, r2
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	e000e100 	.word	0xe000e100

08000300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800030c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	db0a      	blt.n	800032a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	490c      	ldr	r1, [pc, #48]	; (800034c <__NVIC_SetPriority+0x4c>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000328:	e00a      	b.n	8000340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4908      	ldr	r1, [pc, #32]	; (8000350 <__NVIC_SetPriority+0x50>)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 030f 	and.w	r3, r3, #15
 8000336:	3b04      	subs	r3, #4
 8000338:	0112      	lsls	r2, r2, #4
 800033a:	b2d2      	uxtb	r2, r2
 800033c:	440b      	add	r3, r1
 800033e:	761a      	strb	r2, [r3, #24]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000354:	b480      	push	{r7}
 8000356:	b089      	sub	sp, #36	; 0x24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f003 0307 	and.w	r3, r3, #7
 8000366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000368:	69fb      	ldr	r3, [r7, #28]
 800036a:	f1c3 0307 	rsb	r3, r3, #7
 800036e:	2b04      	cmp	r3, #4
 8000370:	bf28      	it	cs
 8000372:	2304      	movcs	r3, #4
 8000374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3304      	adds	r3, #4
 800037a:	2b06      	cmp	r3, #6
 800037c:	d902      	bls.n	8000384 <NVIC_EncodePriority+0x30>
 800037e:	69fb      	ldr	r3, [r7, #28]
 8000380:	3b03      	subs	r3, #3
 8000382:	e000      	b.n	8000386 <NVIC_EncodePriority+0x32>
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	f04f 32ff 	mov.w	r2, #4294967295
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	fa02 f303 	lsl.w	r3, r2, r3
 8000392:	43da      	mvns	r2, r3
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	401a      	ands	r2, r3
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800039c:	f04f 31ff 	mov.w	r1, #4294967295
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43d9      	mvns	r1, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003ac:	4313      	orrs	r3, r2
         );
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3724      	adds	r7, #36	; 0x24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c8:	d301      	bcc.n	80003ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ca:	2301      	movs	r3, #1
 80003cc:	e00f      	b.n	80003ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <SysTick_Config+0x40>)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d6:	210f      	movs	r1, #15
 80003d8:	f04f 30ff 	mov.w	r0, #4294967295
 80003dc:	f7ff ff90 	bl	8000300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <SysTick_Config+0x40>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e6:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x40>)
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ec:	2300      	movs	r3, #0
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000404:	6878      	ldr	r0, [r7, #4]
 8000406:	f7ff ff2d 	bl	8000264 <__NVIC_SetPriorityGrouping>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	4603      	mov	r3, r0
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
 800041e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000424:	f7ff ff42 	bl	80002ac <__NVIC_GetPriorityGrouping>
 8000428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	6978      	ldr	r0, [r7, #20]
 8000430:	f7ff ff90 	bl	8000354 <NVIC_EncodePriority>
 8000434:	4602      	mov	r2, r0
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff5f 	bl	8000300 <__NVIC_SetPriority>
}
 8000442:	bf00      	nop
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b082      	sub	sp, #8
 800044e:	af00      	add	r7, sp, #0
 8000450:	4603      	mov	r3, r0
 8000452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff35 	bl	80002c8 <__NVIC_EnableIRQ>
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	b082      	sub	sp, #8
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ffa2 	bl	80003b8 <SysTick_Config>
 8000474:	4603      	mov	r3, r0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000480:	b480      	push	{r7}
 8000482:	b08b      	sub	sp, #44	; 0x2c
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800048a:	2300      	movs	r3, #0
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000492:	e127      	b.n	80006e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000494:	2201      	movs	r2, #1
 8000496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	69fa      	ldr	r2, [r7, #28]
 80004a4:	4013      	ands	r3, r2
 80004a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004a8:	69ba      	ldr	r2, [r7, #24]
 80004aa:	69fb      	ldr	r3, [r7, #28]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	f040 8116 	bne.w	80006de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	2b12      	cmp	r3, #18
 80004b8:	d034      	beq.n	8000524 <HAL_GPIO_Init+0xa4>
 80004ba:	2b12      	cmp	r3, #18
 80004bc:	d80d      	bhi.n	80004da <HAL_GPIO_Init+0x5a>
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d02b      	beq.n	800051a <HAL_GPIO_Init+0x9a>
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d804      	bhi.n	80004d0 <HAL_GPIO_Init+0x50>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d031      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d01c      	beq.n	8000508 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004ce:	e048      	b.n	8000562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d043      	beq.n	800055c <HAL_GPIO_Init+0xdc>
 80004d4:	2b11      	cmp	r3, #17
 80004d6:	d01b      	beq.n	8000510 <HAL_GPIO_Init+0x90>
          break;
 80004d8:	e043      	b.n	8000562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004da:	4a89      	ldr	r2, [pc, #548]	; (8000700 <HAL_GPIO_Init+0x280>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d026      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004e0:	4a87      	ldr	r2, [pc, #540]	; (8000700 <HAL_GPIO_Init+0x280>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d806      	bhi.n	80004f4 <HAL_GPIO_Init+0x74>
 80004e6:	4a87      	ldr	r2, [pc, #540]	; (8000704 <HAL_GPIO_Init+0x284>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d020      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004ec:	4a86      	ldr	r2, [pc, #536]	; (8000708 <HAL_GPIO_Init+0x288>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d01d      	beq.n	800052e <HAL_GPIO_Init+0xae>
          break;
 80004f2:	e036      	b.n	8000562 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004f4:	4a85      	ldr	r2, [pc, #532]	; (800070c <HAL_GPIO_Init+0x28c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d019      	beq.n	800052e <HAL_GPIO_Init+0xae>
 80004fa:	4a85      	ldr	r2, [pc, #532]	; (8000710 <HAL_GPIO_Init+0x290>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d016      	beq.n	800052e <HAL_GPIO_Init+0xae>
 8000500:	4a84      	ldr	r2, [pc, #528]	; (8000714 <HAL_GPIO_Init+0x294>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d013      	beq.n	800052e <HAL_GPIO_Init+0xae>
          break;
 8000506:	e02c      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	623b      	str	r3, [r7, #32]
          break;
 800050e:	e028      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	3304      	adds	r3, #4
 8000516:	623b      	str	r3, [r7, #32]
          break;
 8000518:	e023      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	3308      	adds	r3, #8
 8000520:	623b      	str	r3, [r7, #32]
          break;
 8000522:	e01e      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	330c      	adds	r3, #12
 800052a:	623b      	str	r3, [r7, #32]
          break;
 800052c:	e019      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000536:	2304      	movs	r3, #4
 8000538:	623b      	str	r3, [r7, #32]
          break;
 800053a:	e012      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d105      	bne.n	8000550 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000544:	2308      	movs	r3, #8
 8000546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	611a      	str	r2, [r3, #16]
          break;
 800054e:	e008      	b.n	8000562 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000550:	2308      	movs	r3, #8
 8000552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	69fa      	ldr	r2, [r7, #28]
 8000558:	615a      	str	r2, [r3, #20]
          break;
 800055a:	e002      	b.n	8000562 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
          break;
 8000560:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000562:	69bb      	ldr	r3, [r7, #24]
 8000564:	2bff      	cmp	r3, #255	; 0xff
 8000566:	d801      	bhi.n	800056c <HAL_GPIO_Init+0xec>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	e001      	b.n	8000570 <HAL_GPIO_Init+0xf0>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3304      	adds	r3, #4
 8000570:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000572:	69bb      	ldr	r3, [r7, #24]
 8000574:	2bff      	cmp	r3, #255	; 0xff
 8000576:	d802      	bhi.n	800057e <HAL_GPIO_Init+0xfe>
 8000578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	e002      	b.n	8000584 <HAL_GPIO_Init+0x104>
 800057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000580:	3b08      	subs	r3, #8
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	210f      	movs	r1, #15
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	fa01 f303 	lsl.w	r3, r1, r3
 8000592:	43db      	mvns	r3, r3
 8000594:	401a      	ands	r2, r3
 8000596:	6a39      	ldr	r1, [r7, #32]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	fa01 f303 	lsl.w	r3, r1, r3
 800059e:	431a      	orrs	r2, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 8096 	beq.w	80006de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b59      	ldr	r3, [pc, #356]	; (8000718 <HAL_GPIO_Init+0x298>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a58      	ldr	r2, [pc, #352]	; (8000718 <HAL_GPIO_Init+0x298>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b56      	ldr	r3, [pc, #344]	; (8000718 <HAL_GPIO_Init+0x298>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005ca:	4a54      	ldr	r2, [pc, #336]	; (800071c <HAL_GPIO_Init+0x29c>)
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	089b      	lsrs	r3, r3, #2
 80005d0:	3302      	adds	r3, #2
 80005d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005da:	f003 0303 	and.w	r3, r3, #3
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	220f      	movs	r2, #15
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	4013      	ands	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a4b      	ldr	r2, [pc, #300]	; (8000720 <HAL_GPIO_Init+0x2a0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d013      	beq.n	800061e <HAL_GPIO_Init+0x19e>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a4a      	ldr	r2, [pc, #296]	; (8000724 <HAL_GPIO_Init+0x2a4>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d00d      	beq.n	800061a <HAL_GPIO_Init+0x19a>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a49      	ldr	r2, [pc, #292]	; (8000728 <HAL_GPIO_Init+0x2a8>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d007      	beq.n	8000616 <HAL_GPIO_Init+0x196>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a48      	ldr	r2, [pc, #288]	; (800072c <HAL_GPIO_Init+0x2ac>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d101      	bne.n	8000612 <HAL_GPIO_Init+0x192>
 800060e:	2303      	movs	r3, #3
 8000610:	e006      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 8000612:	2304      	movs	r3, #4
 8000614:	e004      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 8000616:	2302      	movs	r3, #2
 8000618:	e002      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 800061a:	2301      	movs	r3, #1
 800061c:	e000      	b.n	8000620 <HAL_GPIO_Init+0x1a0>
 800061e:	2300      	movs	r3, #0
 8000620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000622:	f002 0203 	and.w	r2, r2, #3
 8000626:	0092      	lsls	r2, r2, #2
 8000628:	4093      	lsls	r3, r2
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4313      	orrs	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000630:	493a      	ldr	r1, [pc, #232]	; (800071c <HAL_GPIO_Init+0x29c>)
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800064a:	4b39      	ldr	r3, [pc, #228]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4938      	ldr	r1, [pc, #224]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	4313      	orrs	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
 8000656:	e006      	b.n	8000666 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	43db      	mvns	r3, r3
 8000660:	4933      	ldr	r1, [pc, #204]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000674:	685a      	ldr	r2, [r3, #4]
 8000676:	492e      	ldr	r1, [pc, #184]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	4313      	orrs	r3, r2
 800067c:	604b      	str	r3, [r1, #4]
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	43db      	mvns	r3, r3
 8000688:	4929      	ldr	r1, [pc, #164]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800068a:	4013      	ands	r3, r2
 800068c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000696:	2b00      	cmp	r3, #0
 8000698:	d006      	beq.n	80006a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	4924      	ldr	r1, [pc, #144]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	608b      	str	r3, [r1, #8]
 80006a6:	e006      	b.n	80006b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	43db      	mvns	r3, r3
 80006b0:	491f      	ldr	r1, [pc, #124]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006c4:	68da      	ldr	r2, [r3, #12]
 80006c6:	491a      	ldr	r1, [pc, #104]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
 80006ce:	e006      	b.n	80006de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	43db      	mvns	r3, r3
 80006d8:	4915      	ldr	r1, [pc, #84]	; (8000730 <HAL_GPIO_Init+0x2b0>)
 80006da:	4013      	ands	r3, r2
 80006dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	3301      	adds	r3, #1
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	fa22 f303 	lsr.w	r3, r2, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	f47f aed0 	bne.w	8000494 <HAL_GPIO_Init+0x14>
  }
}
 80006f4:	bf00      	nop
 80006f6:	372c      	adds	r7, #44	; 0x2c
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	10210000 	.word	0x10210000
 8000704:	10110000 	.word	0x10110000
 8000708:	10120000 	.word	0x10120000
 800070c:	10310000 	.word	0x10310000
 8000710:	10320000 	.word	0x10320000
 8000714:	10220000 	.word	0x10220000
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000
 8000720:	40010800 	.word	0x40010800
 8000724:	40010c00 	.word	0x40010c00
 8000728:	40011000 	.word	0x40011000
 800072c:	40011400 	.word	0x40011400
 8000730:	40010400 	.word	0x40010400

08000734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
 8000740:	4613      	mov	r3, r2
 8000742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000744:	787b      	ldrb	r3, [r7, #1]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800074a:	887a      	ldrh	r2, [r7, #2]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000750:	e003      	b.n	800075a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	041a      	lsls	r2, r3, #16
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	611a      	str	r2, [r3, #16]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000766:	b08b      	sub	sp, #44	; 0x2c
 8000768:	af06      	add	r7, sp, #24
 800076a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e0d3      	b.n	800091e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d106      	bne.n	8000790 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f006 faf0 	bl	8006d70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2203      	movs	r2, #3
 8000794:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f002 facc 	bl	8002d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	687e      	ldr	r6, [r7, #4]
 80007aa:	466d      	mov	r5, sp
 80007ac:	f106 0410 	add.w	r4, r6, #16
 80007b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	602b      	str	r3, [r5, #0]
 80007b8:	1d33      	adds	r3, r6, #4
 80007ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007bc:	6838      	ldr	r0, [r7, #0]
 80007be:	f002 fa95 	bl	8002cec <USB_CoreInit>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d005      	beq.n	80007d4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2202      	movs	r2, #2
 80007cc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	e0a4      	b.n	800091e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fac9 	bl	8002d72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e035      	b.n	8000852 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	015b      	lsls	r3, r3, #5
 80007ec:	4413      	add	r3, r2
 80007ee:	3329      	adds	r3, #41	; 0x29
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	015b      	lsls	r3, r3, #5
 80007fa:	4413      	add	r3, r2
 80007fc:	3328      	adds	r3, #40	; 0x28
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	b291      	uxth	r1, r2
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	015b      	lsls	r3, r3, #5
 800080c:	4413      	add	r3, r2
 800080e:	3336      	adds	r3, #54	; 0x36
 8000810:	460a      	mov	r2, r1
 8000812:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	015b      	lsls	r3, r3, #5
 800081a:	4413      	add	r3, r2
 800081c:	332b      	adds	r3, #43	; 0x2b
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	4413      	add	r3, r2
 800082a:	3338      	adds	r3, #56	; 0x38
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	015b      	lsls	r3, r3, #5
 8000836:	4413      	add	r3, r2
 8000838:	333c      	adds	r3, #60	; 0x3c
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	3302      	adds	r3, #2
 8000844:	015b      	lsls	r3, r3, #5
 8000846:	4413      	add	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	3301      	adds	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	7bfa      	ldrb	r2, [r7, #15]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	429a      	cmp	r2, r3
 800085a:	d3c4      	bcc.n	80007e6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e031      	b.n	80008c6 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	015b      	lsls	r3, r3, #5
 8000868:	4413      	add	r3, r2
 800086a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	4413      	add	r3, r2
 800087a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	015b      	lsls	r3, r3, #5
 8000888:	4413      	add	r3, r2
 800088a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	015b      	lsls	r3, r3, #5
 8000898:	4413      	add	r3, r2
 800089a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	015b      	lsls	r3, r3, #5
 80008a8:	4413      	add	r3, r2
 80008aa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	330a      	adds	r3, #10
 80008b8:	015b      	lsls	r3, r3, #5
 80008ba:	4413      	add	r3, r2
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	3301      	adds	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	7bfa      	ldrb	r2, [r7, #15]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3c8      	bcc.n	8000862 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	687e      	ldr	r6, [r7, #4]
 80008d8:	466d      	mov	r5, sp
 80008da:	f106 0410 	add.w	r4, r6, #16
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	602b      	str	r3, [r5, #0]
 80008e6:	1d33      	adds	r3, r6, #4
 80008e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008ea:	6838      	ldr	r0, [r7, #0]
 80008ec:	f002 fa4d 	bl	8002d8a <USB_DevInit>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2202      	movs	r2, #2
 80008fa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00d      	b.n	800091e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fa8b 	bl	8003e32 <USB_DevDisconnect>

  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000926 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000934:	2b01      	cmp	r3, #1
 8000936:	d101      	bne.n	800093c <HAL_PCD_Start+0x16>
 8000938:	2302      	movs	r3, #2
 800093a:	e016      	b.n	800096a <HAL_PCD_Start+0x44>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000944:	2101      	movs	r1, #1
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f006 fc5b 	bl	8007202 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fa64 	bl	8003e1e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f002 f9d6 	bl	8002d0c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f003 fa61 	bl	8003e46 <USB_ReadInterrupts>
 8000984:	4603      	mov	r3, r0
 8000986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800098a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800098e:	d102      	bne.n	8000996 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fadf 	bl	8000f54 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fa53 	bl	8003e46 <USB_ReadInterrupts>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009aa:	d112      	bne.n	80009d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009be:	b292      	uxth	r2, r2
 80009c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f006 fa48 	bl	8006e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80009ca:	2100      	movs	r1, #0
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f8de 	bl	8000b8e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fa35 	bl	8003e46 <USB_ReadInterrupts>
 80009dc:	4603      	mov	r3, r0
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009e6:	d10b      	bne.n	8000a00 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009fa:	b292      	uxth	r2, r2
 80009fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fa1e 	bl	8003e46 <USB_ReadInterrupts>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a14:	d10b      	bne.n	8000a2e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fa07 	bl	8003e46 <USB_ReadInterrupts>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a42:	d126      	bne.n	8000a92 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 0204 	bic.w	r2, r2, #4
 8000a56:	b292      	uxth	r2, r2
 8000a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f022 0208 	bic.w	r2, r2, #8
 8000a6e:	b292      	uxth	r2, r2
 8000a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f006 fa29 	bl	8006ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a8c:	b292      	uxth	r2, r2
 8000a8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f003 f9d5 	bl	8003e46 <USB_ReadInterrupts>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000aa6:	d13d      	bne.n	8000b24 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0208 	orr.w	r2, r2, #8
 8000aba:	b292      	uxth	r2, r2
 8000abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ad2:	b292      	uxth	r2, r2
 8000ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0204 	orr.w	r2, r2, #4
 8000aea:	b292      	uxth	r2, r2
 8000aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 f9a6 	bl	8003e46 <USB_ReadInterrupts>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b04:	d10b      	bne.n	8000b1e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b18:	b292      	uxth	r2, r2
 8000b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f006 f9ba 	bl	8006e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f98c 	bl	8003e46 <USB_ReadInterrupts>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b38:	d10e      	bne.n	8000b58 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f006 f973 	bl	8006e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 f972 	bl	8003e46 <USB_ReadInterrupts>
 8000b62:	4603      	mov	r3, r0
 8000b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b6c:	d10b      	bne.n	8000b86 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b80:	b292      	uxth	r2, r2
 8000b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_PCD_SetAddress+0x1a>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e013      	b.n	8000bd0 <HAL_PCD_SetAddress+0x42>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	78fa      	ldrb	r2, [r7, #3]
 8000bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	78fa      	ldrb	r2, [r7, #3]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 f919 	bl	8003df8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	4608      	mov	r0, r1
 8000be2:	4611      	mov	r1, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4603      	mov	r3, r0
 8000be8:	70fb      	strb	r3, [r7, #3]
 8000bea:	460b      	mov	r3, r1
 8000bec:	803b      	strh	r3, [r7, #0]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da0b      	bge.n	8000c16 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	015b      	lsls	r3, r3, #5
 8000c06:	3328      	adds	r3, #40	; 0x28
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2201      	movs	r2, #1
 8000c12:	705a      	strb	r2, [r3, #1]
 8000c14:	e00b      	b.n	8000c2e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	015b      	lsls	r3, r3, #5
 8000c1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000c3a:	883a      	ldrh	r2, [r7, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	78ba      	ldrb	r2, [r7, #2]
 8000c44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000c58:	78bb      	ldrb	r3, [r7, #2]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d102      	bne.n	8000c64 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d101      	bne.n	8000c72 <HAL_PCD_EP_Open+0x9a>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e00e      	b.n	8000c90 <HAL_PCD_EP_Open+0xb8>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68f9      	ldr	r1, [r7, #12]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f8a7 	bl	8002dd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da0b      	bge.n	8000cc4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	3328      	adds	r3, #40	; 0x28
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	705a      	strb	r2, [r3, #1]
 8000cc2:	e00b      	b.n	8000cdc <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	015b      	lsls	r3, r3, #5
 8000ccc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d101      	bne.n	8000cf6 <HAL_PCD_EP_Close+0x5e>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e00e      	b.n	8000d14 <HAL_PCD_EP_Close+0x7c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68f9      	ldr	r1, [r7, #12]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fb53 	bl	80033b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	015b      	lsls	r3, r3, #5
 8000d34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	2200      	movs	r2, #0
 8000d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000d56:	7afb      	ldrb	r3, [r7, #11]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000d62:	7afb      	ldrb	r3, [r7, #11]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d106      	bne.n	8000d7a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6979      	ldr	r1, [r7, #20]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 fcb2 	bl	80036dc <USB_EPStartXfer>
 8000d78:	e005      	b.n	8000d86 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6979      	ldr	r1, [r7, #20]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fcab 	bl	80036dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	015b      	lsls	r3, r3, #5
 8000da8:	3328      	adds	r3, #40	; 0x28
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000dd4:	7afb      	ldrb	r3, [r7, #11]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d106      	bne.n	8000dec <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6979      	ldr	r1, [r7, #20]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f002 fc79 	bl	80036dc <USB_EPStartXfer>
 8000dea:	e005      	b.n	8000df8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6979      	ldr	r1, [r7, #20]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f002 fc72 	bl	80036dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	f003 0207 	and.w	r2, r3, #7
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d901      	bls.n	8000e20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e046      	b.n	8000eae <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da0b      	bge.n	8000e40 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	3328      	adds	r3, #40	; 0x28
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	705a      	strb	r2, [r3, #1]
 8000e3e:	e009      	b.n	8000e54 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e40:	78fb      	ldrb	r3, [r7, #3]
 8000e42:	015b      	lsls	r3, r3, #5
 8000e44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2200      	movs	r2, #0
 8000e52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2201      	movs	r2, #1
 8000e58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000e5a:	78fb      	ldrb	r3, [r7, #3]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <HAL_PCD_EP_SetStall+0x72>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e01c      	b.n	8000eae <HAL_PCD_EP_SetStall+0xac>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fee2 	bl	8003c4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d108      	bne.n	8000ea4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	f002 ffe0 	bl	8003e64 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b084      	sub	sp, #16
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	f003 020f 	and.w	r2, r3, #15
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d901      	bls.n	8000ed4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e03a      	b.n	8000f4a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da0b      	bge.n	8000ef4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	015b      	lsls	r3, r3, #5
 8000ee4:	3328      	adds	r3, #40	; 0x28
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	705a      	strb	r2, [r3, #1]
 8000ef2:	e00b      	b.n	8000f0c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ef4:	78fb      	ldrb	r3, [r7, #3]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	015b      	lsls	r3, r3, #5
 8000efc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_PCD_EP_ClrStall+0x76>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e00e      	b.n	8000f4a <HAL_PCD_EP_ClrStall+0x94>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68f9      	ldr	r1, [r7, #12]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fec8 	bl	8003cd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000f5c:	e282      	b.n	8001464 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f66:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000f68:	8afb      	ldrh	r3, [r7, #22]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 030f 	and.w	r3, r3, #15
 8000f70:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000f72:	7d7b      	ldrb	r3, [r7, #21]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f040 8142 	bne.w	80011fe <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000f7a:	8afb      	ldrh	r3, [r7, #22]
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d151      	bne.n	8001028 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f94:	b29c      	uxth	r4, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3328      	adds	r3, #40	; 0x28
 8000faa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	441a      	add	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f005 ff11 	bl	8006e10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8234 	beq.w	8001464 <PCD_EP_ISR_Handler+0x510>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 822f 	bne.w	8001464 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001012:	b2da      	uxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b292      	uxth	r2, r2
 800101a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001026:	e21d      	b.n	8001464 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800102e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001038:	8a7b      	ldrh	r3, [r7, #18]
 800103a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800103e:	2b00      	cmp	r3, #0
 8001040:	d033      	beq.n	80010aa <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	3306      	adds	r3, #6
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	4413      	add	r3, r2
 8001060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001080:	b29b      	uxth	r3, r3
 8001082:	f002 ff3e 	bl	8003f02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	b29a      	uxth	r2, r3
 800108e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001092:	4013      	ands	r3, r2
 8001094:	b29c      	uxth	r4, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800109e:	b292      	uxth	r2, r2
 80010a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f005 fe8a 	bl	8006dbc <HAL_PCD_SetupStageCallback>
 80010a8:	e1dc      	b.n	8001464 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80010aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f280 81d8 	bge.w	8001464 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80010c0:	4013      	ands	r3, r2
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80010cc:	b292      	uxth	r2, r2
 80010ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d8:	b29b      	uxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4413      	add	r3, r2
 80010e4:	3306      	adds	r3, #6
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d019      	beq.n	8001138 <PCD_EP_ISR_Handler+0x1e4>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d015      	beq.n	8001138 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6959      	ldr	r1, [r3, #20]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800111c:	b29b      	uxth	r3, r3
 800111e:	f002 fef0 	bl	8003f02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	441a      	add	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f005 fe54 	bl	8006de0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	461c      	mov	r4, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001146:	b29b      	uxth	r3, r3
 8001148:	441c      	add	r4, r3
 800114a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800114e:	461c      	mov	r4, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10e      	bne.n	8001176 <PCD_EP_ISR_Handler+0x222>
 8001158:	8823      	ldrh	r3, [r4, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001160:	b29b      	uxth	r3, r3
 8001162:	8023      	strh	r3, [r4, #0]
 8001164:	8823      	ldrh	r3, [r4, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800116c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001170:	b29b      	uxth	r3, r3
 8001172:	8023      	strh	r3, [r4, #0]
 8001174:	e02d      	b.n	80011d2 <PCD_EP_ISR_Handler+0x27e>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	2b3e      	cmp	r3, #62	; 0x3e
 800117c:	d812      	bhi.n	80011a4 <PCD_EP_ISR_Handler+0x250>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <PCD_EP_ISR_Handler+0x244>
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	3301      	adds	r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	b29b      	uxth	r3, r3
 800119c:	029b      	lsls	r3, r3, #10
 800119e:	b29b      	uxth	r3, r3
 80011a0:	8023      	strh	r3, [r4, #0]
 80011a2:	e016      	b.n	80011d2 <PCD_EP_ISR_Handler+0x27e>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	095b      	lsrs	r3, r3, #5
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <PCD_EP_ISR_Handler+0x26a>
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	029b      	lsls	r3, r3, #10
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80011ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011e2:	b29c      	uxth	r4, r3
 80011e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80011e8:	b29c      	uxth	r4, r3
 80011ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80011ee:	b29c      	uxth	r4, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4ba2      	ldr	r3, [pc, #648]	; (8001480 <PCD_EP_ISR_Handler+0x52c>)
 80011f6:	4323      	orrs	r3, r4
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	8013      	strh	r3, [r2, #0]
 80011fc:	e132      	b.n	8001464 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	7d7b      	ldrb	r3, [r7, #21]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800120e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f280 80d1 	bge.w	80013ba <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	7d7b      	ldrb	r3, [r7, #21]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29a      	uxth	r2, r3
 8001228:	f640 738f 	movw	r3, #3983	; 0xf8f
 800122c:	4013      	ands	r3, r2
 800122e:	b29c      	uxth	r4, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	7d7b      	ldrb	r3, [r7, #21]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001240:	b292      	uxth	r2, r2
 8001242:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001244:	7d7b      	ldrb	r3, [r7, #21]
 8001246:	015b      	lsls	r3, r3, #5
 8001248:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d121      	bne.n	800129e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	3306      	adds	r3, #6
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001282:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001284:	8bfb      	ldrh	r3, [r7, #30]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d072      	beq.n	8001370 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6959      	ldr	r1, [r3, #20]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	88da      	ldrh	r2, [r3, #6]
 8001296:	8bfb      	ldrh	r3, [r7, #30]
 8001298:	f002 fe33 	bl	8003f02 <USB_ReadPMA>
 800129c:	e068      	b.n	8001370 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d021      	beq.n	80012fc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	3302      	adds	r3, #2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012e0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80012e2:	8bfb      	ldrh	r3, [r7, #30]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02a      	beq.n	800133e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6959      	ldr	r1, [r3, #20]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	891a      	ldrh	r2, [r3, #8]
 80012f4:	8bfb      	ldrh	r3, [r7, #30]
 80012f6:	f002 fe04 	bl	8003f02 <USB_ReadPMA>
 80012fa:	e020      	b.n	800133e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001304:	b29b      	uxth	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	4413      	add	r3, r2
 8001310:	3306      	adds	r3, #6
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	4413      	add	r3, r2
 800131a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001324:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001326:	8bfb      	ldrh	r3, [r7, #30]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d008      	beq.n	800133e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6959      	ldr	r1, [r3, #20]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	895a      	ldrh	r2, [r3, #10]
 8001338:	8bfb      	ldrh	r3, [r7, #30]
 800133a:	f002 fde2 	bl	8003f02 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001358:	b29c      	uxth	r4, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	441a      	add	r2, r3
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <PCD_EP_ISR_Handler+0x530>)
 800136a:	4323      	orrs	r3, r4
 800136c:	b29b      	uxth	r3, r3
 800136e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	69da      	ldr	r2, [r3, #28]
 8001374:	8bfb      	ldrh	r3, [r7, #30]
 8001376:	441a      	add	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	8bfb      	ldrh	r3, [r7, #30]
 8001382:	441a      	add	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <PCD_EP_ISR_Handler+0x446>
 8001390:	8bfa      	ldrh	r2, [r7, #30]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	429a      	cmp	r2, r3
 8001398:	d206      	bcs.n	80013a8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f005 fd1d 	bl	8006de0 <HAL_PCD_DataOutStageCallback>
 80013a6:	e008      	b.n	80013ba <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	7819      	ldrb	r1, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fcb1 	bl	8000d1c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80013ba:	8a7b      	ldrh	r3, [r7, #18]
 80013bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d04f      	beq.n	8001464 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80013c4:	7d7b      	ldrb	r3, [r7, #21]
 80013c6:	015b      	lsls	r3, r3, #5
 80013c8:	3328      	adds	r3, #40	; 0x28
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	7d7b      	ldrb	r3, [r7, #21]
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013e8:	b29c      	uxth	r4, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	7d7b      	ldrb	r3, [r7, #21]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	441a      	add	r2, r3
 80013f6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80013fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013fe:	b29b      	uxth	r3, r3
 8001400:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	3302      	adds	r3, #2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	441a      	add	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f005 fce0 	bl	8006e10 <HAL_PCD_DataInStageCallback>
 8001450:	e008      	b.n	8001464 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	7819      	ldrb	r1, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fc96 	bl	8000d90 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21b      	sxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	f6ff ad74 	blt.w	8000f5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3724      	adds	r7, #36	; 0x24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	ffff8080 	.word	0xffff8080
 8001484:	ffff80c0 	.word	0xffff80c0

08001488 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	817b      	strh	r3, [r7, #10]
 8001496:	4613      	mov	r3, r2
 8001498:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800149a:	897b      	ldrh	r3, [r7, #10]
 800149c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014a6:	897b      	ldrh	r3, [r7, #10]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	015b      	lsls	r3, r3, #5
 80014ae:	3328      	adds	r3, #40	; 0x28
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e006      	b.n	80014c6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014b8:	897b      	ldrh	r3, [r7, #10]
 80014ba:	015b      	lsls	r3, r3, #5
 80014bc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80014c6:	893b      	ldrh	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2200      	movs	r2, #0
 80014d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	80da      	strh	r2, [r3, #6]
 80014da:	e00b      	b.n	80014f4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2201      	movs	r2, #1
 80014e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	0c1b      	lsrs	r3, r3, #16
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e26c      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8087 	beq.w	800162e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b04      	cmp	r3, #4
 800152a:	d00c      	beq.n	8001546 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800152c:	4b8f      	ldr	r3, [pc, #572]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d112      	bne.n	800155e <HAL_RCC_OscConfig+0x5e>
 8001538:	4b8c      	ldr	r3, [pc, #560]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d10b      	bne.n	800155e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001546:	4b89      	ldr	r3, [pc, #548]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d06c      	beq.n	800162c <HAL_RCC_OscConfig+0x12c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d168      	bne.n	800162c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e246      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x76>
 8001568:	4b80      	ldr	r3, [pc, #512]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a7f      	ldr	r2, [pc, #508]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e02e      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b7b      	ldr	r3, [pc, #492]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7a      	ldr	r2, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b78      	ldr	r3, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a77      	ldr	r2, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0xbc>
 80015a2:	4b72      	ldr	r3, [pc, #456]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a71      	ldr	r2, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6e      	ldr	r2, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 80015bc:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b68      	ldr	r3, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a67      	ldr	r2, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7fe fe16 	bl	800020c <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7fe fe12 	bl	800020c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1fa      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xe4>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7fe fe02 	bl	800020c <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7fe fdfe 	bl	800020c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1e6      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x10c>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163a:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d11c      	bne.n	800168c <HAL_RCC_OscConfig+0x18c>
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d116      	bne.n	800168c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x176>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1ba      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4939      	ldr	r1, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	e03a      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x270>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7fe fdb7 	bl	800020c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7fe fdb3 	bl	800020c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e19b      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x270>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7fe fd96 	bl	800020c <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7fe fd92 	bl	800020c <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e17a      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03a      	beq.n	8001784 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7fe fd76 	bl	800020c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7fe fd72 	bl	800020c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e15a      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 fada 	bl	8001cfc <RCC_Delay>
 8001748:	e01c      	b.n	8001784 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7fe fd5c 	bl	800020c <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001756:	e00f      	b.n	8001778 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7fe fd58 	bl	800020c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d908      	bls.n	8001778 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e140      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	42420000 	.word	0x42420000
 8001774:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b9e      	ldr	r3, [pc, #632]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e9      	bne.n	8001758 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a6 	beq.w	80018de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b97      	ldr	r3, [pc, #604]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10d      	bne.n	80017be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a93      	ldr	r2, [pc, #588]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b8e      	ldr	r3, [pc, #568]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a8a      	ldr	r2, [pc, #552]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d6:	f7fe fd19 	bl	800020c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7fe fd15 	bl	800020c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0fd      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x312>
 8001804:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a7a      	ldr	r2, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e02d      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x334>
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a75      	ldr	r2, [pc, #468]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a72      	ldr	r2, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	e01c      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d10c      	bne.n	8001856 <HAL_RCC_OscConfig+0x356>
 800183c:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a6c      	ldr	r2, [pc, #432]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a69      	ldr	r2, [pc, #420]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001856:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a66      	ldr	r2, [pc, #408]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a63      	ldr	r2, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d015      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7fe fcc9 	bl	800020c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7fe fcc5 	bl	800020c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0ab      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ee      	beq.n	800187e <HAL_RCC_OscConfig+0x37e>
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7fe fcb3 	bl	800020c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7fe fcaf 	bl	800020c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e095      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d105      	bne.n	80018de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d2:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8081 	beq.w	80019ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d061      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d146      	bne.n	800198a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x4fc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7fe fc83 	bl	800020c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7fe fc7f 	bl	800020c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e067      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d108      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	492d      	ldr	r1, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a19      	ldr	r1, [r3, #32]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	430b      	orrs	r3, r1
 8001956:	4927      	ldr	r1, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x4fc>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7fe fc53 	bl	800020c <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7fe fc4f 	bl	800020c <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e037      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x46a>
 8001988:	e02f      	b.n	80019ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_RCC_OscConfig+0x4fc>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7fe fc3c 	bl	800020c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7fe fc38 	bl	800020c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e020      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x498>
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e013      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42420060 	.word	0x42420060

08001a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4965      	ldr	r1, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e073      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06b      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af0:	f7fe fb8c 	bl	800020c <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7fe fb88 	bl	800020c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e053      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d210      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4601      	mov	r1, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1cc>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe faea 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	0800837c 	.word	0x0800837c
 8001bcc:	200000e8 	.word	0x200000e8
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b490      	push	{r4, r7}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bdc:	1d3c      	adds	r4, r7, #4
 8001bde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001be0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x46>
 8001c12:	e02d      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c16:	623b      	str	r3, [r7, #32]
      break;
 8001c18:	e02d      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c26:	4413      	add	r3, r2
 8001c28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	0c5b      	lsrs	r3, r3, #17
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c46:	4413      	add	r3, r2
 8001c48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c52:	fb02 f203 	mul.w	r2, r2, r3
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	e004      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	623b      	str	r3, [r7, #32]
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c72:	623b      	str	r3, [r7, #32]
      break;
 8001c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c76:	6a3b      	ldr	r3, [r7, #32]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc90      	pop	{r4, r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	08007db4 	.word	0x08007db4
 8001c88:	08007dc4 	.word	0x08007dc4
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	007a1200 	.word	0x007a1200
 8001c94:	003d0900 	.word	0x003d0900

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	200000e8 	.word	0x200000e8

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff2 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4a03      	ldr	r2, [pc, #12]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	0800838c 	.word	0x0800838c

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5cd3      	ldrb	r3, [r2, r3]
 8001cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	0800838c 	.word	0x0800838c

08001cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <RCC_Delay+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <RCC_Delay+0x38>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d18:	bf00      	nop
  }
  while (Delay --);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <RCC_Delay+0x1c>
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200000e8 	.word	0x200000e8
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07d      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10d      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	61d3      	str	r3, [r2, #28]
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d118      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8c:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a42      	ldr	r2, [pc, #264]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d98:	f7fe fa38 	bl	800020c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	e008      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7fe fa34 	bl	800020c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	; 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e06d      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dbe:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02e      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d027      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001df2:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe fa03 	bl	800020c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe f9ff 	bl	800020c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e036      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ee      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4917      	ldr	r1, [pc, #92]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	490b      	ldr	r1, [pc, #44]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4904      	ldr	r1, [pc, #16]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420440 	.word	0x42420440

08001ea4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e053      	b.n	8001f5e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f004 fdf3 	bl	8006abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	ea42 0103 	orr.w	r1, r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	0c1a      	lsrs	r2, r3, #16
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f002 0204 	and.w	r2, r2, #4
 8001f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b088      	sub	sp, #32
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_SPI_Transmit+0x22>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e11e      	b.n	80021c6 <HAL_SPI_Transmit+0x260>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f90:	f7fe f93c 	bl	800020c <HAL_GetTick>
 8001f94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d002      	beq.n	8001fac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001faa:	e103      	b.n	80021b4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_SPI_Transmit+0x52>
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fbc:	e0fa      	b.n	80021b4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002004:	d107      	bne.n	8002016 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002014:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d007      	beq.n	8002034 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800203c:	d14b      	bne.n	80020d6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_SPI_Transmit+0xe6>
 8002046:	8afb      	ldrh	r3, [r7, #22]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d13e      	bne.n	80020ca <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	881a      	ldrh	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	1c9a      	adds	r2, r3, #2
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002070:	e02b      	b.n	80020ca <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b02      	cmp	r3, #2
 800207e:	d112      	bne.n	80020a6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	1c9a      	adds	r2, r3, #2
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80020a4:	e011      	b.n	80020ca <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020a6:	f7fe f8b1 	bl	800020c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d803      	bhi.n	80020be <HAL_SPI_Transmit+0x158>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d102      	bne.n	80020c4 <HAL_SPI_Transmit+0x15e>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020c8:	e074      	b.n	80021b4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ce      	bne.n	8002072 <HAL_SPI_Transmit+0x10c>
 80020d4:	e04c      	b.n	8002170 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_SPI_Transmit+0x17e>
 80020de:	8afb      	ldrh	r3, [r7, #22]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d140      	bne.n	8002166 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800210a:	e02c      	b.n	8002166 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d113      	bne.n	8002142 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002140:	e011      	b.n	8002166 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002142:	f7fe f863 	bl	800020c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d803      	bhi.n	800215a <HAL_SPI_Transmit+0x1f4>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d102      	bne.n	8002160 <HAL_SPI_Transmit+0x1fa>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002164:	e026      	b.n	80021b4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1cd      	bne.n	800210c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fb91 	bl	800289c <SPI_EndRxTxTransaction>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	77fb      	strb	r3, [r7, #31]
 80021b0:	e000      	b.n	80021b4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80021b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af02      	add	r7, sp, #8
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ea:	d112      	bne.n	8002212 <HAL_SPI_Receive+0x44>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10e      	bne.n	8002212 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2204      	movs	r2, #4
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4613      	mov	r3, r2
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f8e9 	bl	80023e0 <HAL_SPI_TransmitReceive>
 800220e:	4603      	mov	r3, r0
 8002210:	e0e2      	b.n	80023d8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_SPI_Receive+0x52>
 800221c:	2302      	movs	r3, #2
 800221e:	e0db      	b.n	80023d8 <HAL_SPI_Receive+0x20a>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002228:	f7fd fff0 	bl	800020c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800223a:	2302      	movs	r3, #2
 800223c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800223e:	e0c2      	b.n	80023c6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_SPI_Receive+0x7e>
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002250:	e0b9      	b.n	80023c6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2204      	movs	r2, #4
 8002256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	88fa      	ldrh	r2, [r7, #6]
 800226a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002298:	d107      	bne.n	80022aa <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d007      	beq.n	80022c8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d162      	bne.n	8002396 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022d0:	e02e      	b.n	8002330 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d115      	bne.n	800230c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f103 020c 	add.w	r2, r3, #12
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	87da      	strh	r2, [r3, #62]	; 0x3e
 800230a:	e011      	b.n	8002330 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800230c:	f7fd ff7e 	bl	800020c <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d803      	bhi.n	8002324 <HAL_SPI_Receive+0x156>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d102      	bne.n	800232a <HAL_SPI_Receive+0x15c>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800232e:	e04a      	b.n	80023c6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1cb      	bne.n	80022d2 <HAL_SPI_Receive+0x104>
 800233a:	e031      	b.n	80023a0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d113      	bne.n	8002372 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	b292      	uxth	r2, r2
 8002356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	1c9a      	adds	r2, r3, #2
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002370:	e011      	b.n	8002396 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002372:	f7fd ff4b 	bl	800020c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d803      	bhi.n	800238a <HAL_SPI_Receive+0x1bc>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d102      	bne.n	8002390 <HAL_SPI_Receive+0x1c2>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002394:	e017      	b.n	80023c6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800239a:	b29b      	uxth	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1cd      	bne.n	800233c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa27 	bl	80027f8 <SPI_EndRxTransaction>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
 80023c2:	e000      	b.n	80023c6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80023c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ee:	2301      	movs	r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_SPI_TransmitReceive+0x26>
 8002402:	2302      	movs	r3, #2
 8002404:	e18a      	b.n	800271c <HAL_SPI_TransmitReceive+0x33c>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800240e:	f7fd fefd 	bl	800020c <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800241a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800242c:	2b01      	cmp	r3, #1
 800242e:	d00f      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x70>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002436:	d107      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d103      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x68>
 8002440:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002444:	2b04      	cmp	r3, #4
 8002446:	d003      	beq.n	8002450 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002448:	2302      	movs	r3, #2
 800244a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800244e:	e15b      	b.n	8002708 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_SPI_TransmitReceive+0x82>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_SPI_TransmitReceive+0x82>
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002468:	e14e      	b.n	8002708 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b04      	cmp	r3, #4
 8002474:	d003      	beq.n	800247e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2205      	movs	r2, #5
 800247a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	887a      	ldrh	r2, [r7, #2]
 800248e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b40      	cmp	r3, #64	; 0x40
 80024c0:	d007      	beq.n	80024d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024da:	d178      	bne.n	80025ce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x10a>
 80024e4:	8b7b      	ldrh	r3, [r7, #26]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d166      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	1c9a      	adds	r2, r3, #2
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800250e:	e053      	b.n	80025b8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d11b      	bne.n	8002556 <HAL_SPI_TransmitReceive+0x176>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_SPI_TransmitReceive+0x176>
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	2b01      	cmp	r3, #1
 800252c:	d113      	bne.n	8002556 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	1c9a      	adds	r2, r3, #2
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d119      	bne.n	8002598 <HAL_SPI_TransmitReceive+0x1b8>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d014      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	b292      	uxth	r2, r2
 800257a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	1c9a      	adds	r2, r3, #2
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002594:	2301      	movs	r3, #1
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002598:	f7fd fe38 	bl	800020c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d807      	bhi.n	80025b8 <HAL_SPI_TransmitReceive+0x1d8>
 80025a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ae:	d003      	beq.n	80025b8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025b6:	e0a7      	b.n	8002708 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1a6      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x130>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1a1      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x130>
 80025cc:	e07c      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x1fc>
 80025d6:	8b7b      	ldrh	r3, [r7, #26]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d16b      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002602:	e057      	b.n	80026b4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d11c      	bne.n	800264c <HAL_SPI_TransmitReceive+0x26c>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <HAL_SPI_TransmitReceive+0x26c>
 800261c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d114      	bne.n	800264c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d119      	bne.n	800268e <HAL_SPI_TransmitReceive+0x2ae>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d014      	beq.n	800268e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800268a:	2301      	movs	r3, #1
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800268e:	f7fd fdbd 	bl	800020c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800269a:	429a      	cmp	r2, r3
 800269c:	d803      	bhi.n	80026a6 <HAL_SPI_TransmitReceive+0x2c6>
 800269e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d102      	bne.n	80026ac <HAL_SPI_TransmitReceive+0x2cc>
 80026a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026b2:	e029      	b.n	8002708 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1a2      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x224>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d19d      	bne.n	8002604 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f8e5 	bl	800289c <SPI_EndRxTxTransaction>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026e4:	e010      	b.n	8002708 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10b      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	e000      	b.n	8002708 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002706:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800271c:	4618      	mov	r0, r3
 800271e:	3730      	adds	r7, #48	; 0x30
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002734:	e04c      	b.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d048      	beq.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800273e:	f7fd fd65 	bl	800020c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d902      	bls.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x30>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d13d      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002762:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800276c:	d111      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002776:	d004      	beq.n	8002782 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002780:	d107      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002790:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	d10f      	bne.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e00f      	b.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	429a      	cmp	r2, r3
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d1a3      	bne.n	8002736 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800280c:	d111      	bne.n	8002832 <SPI_EndRxTransaction+0x3a>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002816:	d004      	beq.n	8002822 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	d107      	bne.n	8002832 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002830:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283a:	d117      	bne.n	800286c <SPI_EndRxTransaction+0x74>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002844:	d112      	bne.n	800286c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	2101      	movs	r1, #1
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff67 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01a      	beq.n	8002892 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e013      	b.n	8002894 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff ff54 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e000      	b.n	8002894 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2200      	movs	r2, #0
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff ff36 	bl	8002724 <SPI_WaitFlagStateUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e000      	b.n	80028d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03f      	b.n	800296a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f004 f926 	bl	8006b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f90b 	bl	8002b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b088      	sub	sp, #32
 8002976:	af02      	add	r7, sp, #8
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	f040 8083 	bne.w	8002a9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Transmit+0x2e>
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e07b      	b.n	8002a9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Transmit+0x40>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e074      	b.n	8002a9c <HAL_UART_Transmit+0x12a>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2221      	movs	r2, #33	; 0x21
 80029c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80029c8:	f7fd fc20 	bl	800020c <HAL_GetTick>
 80029cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029da:	e042      	b.n	8002a62 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f2:	d122      	bne.n	8002a3a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2200      	movs	r2, #0
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f850 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e046      	b.n	8002a9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	e017      	b.n	8002a62 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3301      	adds	r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	e013      	b.n	8002a62 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f82d 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e023      	b.n	8002a9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	60ba      	str	r2, [r7, #8]
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1b7      	bne.n	80029dc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2140      	movs	r1, #64	; 0x40
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f814 	bl	8002aa4 <UART_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e00a      	b.n	8002a9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab4:	e02c      	b.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d028      	beq.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ac4:	f7fd fba2 	bl	800020c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d21d      	bcs.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ae2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e00f      	b.n	8002b30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d0c3      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b72:	f023 030c 	bic.w	r3, r3, #12
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a52      	ldr	r2, [pc, #328]	; (8002ce4 <UART_SetConfig+0x1ac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d14e      	bne.n	8002c3e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff f898 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8002ba4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	0119      	lsls	r1, r3, #4
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	009a      	lsls	r2, r3, #2
 8002bd0:	441a      	add	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002bde:	fba3 0302 	umull	r0, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2064      	movs	r0, #100	; 0x64
 8002be6:	fb00 f303 	mul.w	r3, r0, r3
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	4a3d      	ldr	r2, [pc, #244]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfc:	4419      	add	r1, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c14:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002c16:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2064      	movs	r0, #100	; 0x64
 8002c1e:	fb00 f303 	mul.w	r3, r0, r3
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	3332      	adds	r3, #50	; 0x32
 8002c28:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	440a      	add	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002c3c:	e04d      	b.n	8002cda <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c3e:	f7ff f835 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002c42:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009a      	lsls	r2, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	4a23      	ldr	r2, [pc, #140]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	095b      	lsrs	r3, r3, #5
 8002c62:	0119      	lsls	r1, r3, #4
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009a      	lsls	r2, r3, #2
 8002c6e:	441a      	add	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002c7c:	fba3 0302 	umull	r0, r3, r3, r2
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	2064      	movs	r0, #100	; 0x64
 8002c84:	fb00 f303 	mul.w	r3, r0, r3
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	3332      	adds	r3, #50	; 0x32
 8002c8e:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9a:	4419      	add	r1, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009a      	lsls	r2, r3, #2
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002cb4:	fba3 0302 	umull	r0, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	fb00 f303 	mul.w	r3, r0, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	3332      	adds	r3, #50	; 0x32
 8002cc6:	4a08      	ldr	r2, [pc, #32]	; (8002ce8 <UART_SetConfig+0x1b0>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 020f 	and.w	r2, r3, #15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	440a      	add	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40013800 	.word	0x40013800
 8002ce8:	51eb851f 	.word	0x51eb851f

08002cec <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002cec:	b084      	sub	sp, #16
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	f107 0014 	add.w	r0, r7, #20
 8002cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	b004      	add	sp, #16
 8002d0a:	4770      	bx	lr

08002d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d14:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d18:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002d42:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002d46:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b21b      	sxth	r3, r3
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	f107 0014 	add.w	r0, r7, #20
 8002d98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffa5 	bl	8002d0c <USB_EnableGlobalInt>

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dce:	b004      	add	sp, #16
 8002dd0:	4770      	bx	lr
	...

08002dd4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002dd4:	b490      	push	{r4, r7}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	78db      	ldrb	r3, [r3, #3]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d819      	bhi.n	8002e36 <USB_ActivateEndpoint+0x62>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <USB_ActivateEndpoint+0x34>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e2d 	.word	0x08002e2d
 8002e10:	08002e3d 	.word	0x08002e3d
 8002e14:	08002e23 	.word	0x08002e23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002e18:	89bb      	ldrh	r3, [r7, #12]
 8002e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1e:	81bb      	strh	r3, [r7, #12]
      break;
 8002e20:	e00d      	b.n	8002e3e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002e22:	89bb      	ldrh	r3, [r7, #12]
 8002e24:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002e28:	81bb      	strh	r3, [r7, #12]
      break;
 8002e2a:	e008      	b.n	8002e3e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002e2c:	89bb      	ldrh	r3, [r7, #12]
 8002e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e32:	81bb      	strh	r3, [r7, #12]
      break;
 8002e34:	e003      	b.n	8002e3e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3a:	e000      	b.n	8002e3e <USB_ActivateEndpoint+0x6a>
      break;
 8002e3c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	89bb      	ldrh	r3, [r7, #12]
 8002e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b29c      	uxth	r4, r3
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	4b8a      	ldr	r3, [pc, #552]	; (80030b4 <USB_ActivateEndpoint+0x2e0>)
 8002e8c:	4323      	orrs	r3, r4
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	7b1b      	ldrb	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 8112 	bne.w	80030c0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d067      	beq.n	8002f74 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ea4:	687c      	ldr	r4, [r7, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	441c      	add	r4, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4423      	add	r3, r4
 8002eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	88db      	ldrh	r3, [r3, #6]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29c      	uxth	r4, r3
 8002eda:	4623      	mov	r3, r4
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d014      	beq.n	8002f0e <USB_ActivateEndpoint+0x13a>
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	b29c      	uxth	r4, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	4b6c      	ldr	r3, [pc, #432]	; (80030b8 <USB_ActivateEndpoint+0x2e4>)
 8002f08:	4323      	orrs	r3, r4
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	78db      	ldrb	r3, [r3, #3]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d018      	beq.n	8002f48 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2c:	b29c      	uxth	r4, r3
 8002f2e:	f084 0320 	eor.w	r3, r4, #32
 8002f32:	b29c      	uxth	r4, r3
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	441a      	add	r2, r3
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <USB_ActivateEndpoint+0x2e0>)
 8002f40:	4323      	orrs	r3, r4
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	8013      	strh	r3, [r2, #0]
 8002f46:	e22b      	b.n	80033a0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <USB_ActivateEndpoint+0x2e0>)
 8002f6c:	4323      	orrs	r3, r4
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]
 8002f72:	e215      	b.n	80033a0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f74:	687c      	ldr	r4, [r7, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	441c      	add	r4, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	4423      	add	r3, r4
 8002f88:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f8c:	461c      	mov	r4, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	88db      	ldrh	r3, [r3, #6]
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f9c:	687c      	ldr	r4, [r7, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	441c      	add	r4, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	4423      	add	r3, r4
 8002fb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fb4:	461c      	mov	r4, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10e      	bne.n	8002fdc <USB_ActivateEndpoint+0x208>
 8002fbe:	8823      	ldrh	r3, [r4, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8023      	strh	r3, [r4, #0]
 8002fca:	8823      	ldrh	r3, [r4, #0]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	8023      	strh	r3, [r4, #0]
 8002fda:	e02d      	b.n	8003038 <USB_ActivateEndpoint+0x264>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fe2:	d812      	bhi.n	800300a <USB_ActivateEndpoint+0x236>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <USB_ActivateEndpoint+0x22a>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	b29b      	uxth	r3, r3
 8003002:	029b      	lsls	r3, r3, #10
 8003004:	b29b      	uxth	r3, r3
 8003006:	8023      	strh	r3, [r4, #0]
 8003008:	e016      	b.n	8003038 <USB_ActivateEndpoint+0x264>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <USB_ActivateEndpoint+0x250>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	3b01      	subs	r3, #1
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	b29b      	uxth	r3, r3
 8003028:	029b      	lsls	r3, r3, #10
 800302a:	b29b      	uxth	r3, r3
 800302c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003034:	b29b      	uxth	r3, r3
 8003036:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	b29c      	uxth	r4, r3
 8003046:	4623      	mov	r3, r4
 8003048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d014      	beq.n	800307a <USB_ActivateEndpoint+0x2a6>
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	b29c      	uxth	r4, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <USB_ActivateEndpoint+0x2e8>)
 8003074:	4323      	orrs	r3, r4
 8003076:	b29b      	uxth	r3, r3
 8003078:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800308c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003090:	b29c      	uxth	r4, r3
 8003092:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003096:	b29c      	uxth	r4, r3
 8003098:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800309c:	b29c      	uxth	r4, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	441a      	add	r2, r3
 80030a8:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <USB_ActivateEndpoint+0x2e0>)
 80030aa:	4323      	orrs	r3, r4
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8013      	strh	r3, [r2, #0]
 80030b0:	e176      	b.n	80033a0 <USB_ActivateEndpoint+0x5cc>
 80030b2:	bf00      	nop
 80030b4:	ffff8080 	.word	0xffff8080
 80030b8:	ffff80c0 	.word	0xffff80c0
 80030bc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	b29c      	uxth	r4, r3
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	4b96      	ldr	r3, [pc, #600]	; (800333c <USB_ActivateEndpoint+0x568>)
 80030e4:	4323      	orrs	r3, r4
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80030ea:	687c      	ldr	r4, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	441c      	add	r4, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	4423      	add	r3, r4
 80030fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003102:	461c      	mov	r4, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	891b      	ldrh	r3, [r3, #8]
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	b29b      	uxth	r3, r3
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	8023      	strh	r3, [r4, #0]
 8003112:	687c      	ldr	r4, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	441c      	add	r4, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	4423      	add	r3, r4
 8003126:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800312a:	461c      	mov	r4, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	895b      	ldrh	r3, [r3, #10]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	b29b      	uxth	r3, r3
 8003138:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 8088 	bne.w	8003254 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29c      	uxth	r4, r3
 8003152:	4623      	mov	r3, r4
 8003154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d014      	beq.n	8003186 <USB_ActivateEndpoint+0x3b2>
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	b29c      	uxth	r4, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	4b70      	ldr	r3, [pc, #448]	; (8003340 <USB_ActivateEndpoint+0x56c>)
 8003180:	4323      	orrs	r3, r4
 8003182:	b29b      	uxth	r3, r3
 8003184:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	b29c      	uxth	r4, r3
 8003194:	4623      	mov	r3, r4
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <USB_ActivateEndpoint+0x3f4>
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	b29c      	uxth	r4, r3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	441a      	add	r2, r3
 80031c0:	4b60      	ldr	r3, [pc, #384]	; (8003344 <USB_ActivateEndpoint+0x570>)
 80031c2:	4323      	orrs	r3, r4
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	b29c      	uxth	r4, r3
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	4b56      	ldr	r3, [pc, #344]	; (8003344 <USB_ActivateEndpoint+0x570>)
 80031ec:	4323      	orrs	r3, r4
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003208:	b29c      	uxth	r4, r3
 800320a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800320e:	b29c      	uxth	r4, r3
 8003210:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003214:	b29c      	uxth	r4, r3
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <USB_ActivateEndpoint+0x574>)
 8003222:	4323      	orrs	r3, r4
 8003224:	b29b      	uxth	r3, r3
 8003226:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800323e:	b29c      	uxth	r4, r3
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <USB_ActivateEndpoint+0x574>)
 800324c:	4323      	orrs	r3, r4
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]
 8003252:	e0a5      	b.n	80033a0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29c      	uxth	r4, r3
 8003262:	4623      	mov	r3, r4
 8003264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d014      	beq.n	8003296 <USB_ActivateEndpoint+0x4c2>
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	b29c      	uxth	r4, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <USB_ActivateEndpoint+0x56c>)
 8003290:	4323      	orrs	r3, r4
 8003292:	b29b      	uxth	r3, r3
 8003294:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29c      	uxth	r4, r3
 80032a4:	4623      	mov	r3, r4
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d014      	beq.n	80032d8 <USB_ActivateEndpoint+0x504>
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c4:	b29c      	uxth	r4, r3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	441a      	add	r2, r3
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <USB_ActivateEndpoint+0x570>)
 80032d2:	4323      	orrs	r3, r4
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	b29c      	uxth	r4, r3
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <USB_ActivateEndpoint+0x56c>)
 80032fc:	4323      	orrs	r3, r4
 80032fe:	b29b      	uxth	r3, r3
 8003300:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d020      	beq.n	800334c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003320:	b29c      	uxth	r4, r3
 8003322:	f084 0320 	eor.w	r3, r4, #32
 8003326:	b29c      	uxth	r4, r3
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <USB_ActivateEndpoint+0x574>)
 8003334:	4323      	orrs	r3, r4
 8003336:	b29b      	uxth	r3, r3
 8003338:	8013      	strh	r3, [r2, #0]
 800333a:	e01c      	b.n	8003376 <USB_ActivateEndpoint+0x5a2>
 800333c:	ffff8180 	.word	0xffff8180
 8003340:	ffffc080 	.word	0xffffc080
 8003344:	ffff80c0 	.word	0xffff80c0
 8003348:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003362:	b29c      	uxth	r4, r3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <USB_ActivateEndpoint+0x5d8>)
 8003370:	4323      	orrs	r3, r4
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338c:	b29c      	uxth	r4, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <USB_ActivateEndpoint+0x5d8>)
 800339a:	4323      	orrs	r3, r4
 800339c:	b29b      	uxth	r3, r3
 800339e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc90      	pop	{r4, r7}
 80033aa:	4770      	bx	lr
 80033ac:	ffff8080 	.word	0xffff8080

080033b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033b0:	b490      	push	{r4, r7}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	7b1b      	ldrb	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d171      	bne.n	80034a6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	785b      	ldrb	r3, [r3, #1]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29c      	uxth	r4, r3
 80033d8:	4623      	mov	r3, r4
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <USB_DeactivateEndpoint+0x5c>
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	b29c      	uxth	r4, r3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	4b6b      	ldr	r3, [pc, #428]	; (80035b4 <USB_DeactivateEndpoint+0x204>)
 8003406:	4323      	orrs	r3, r4
 8003408:	b29b      	uxth	r3, r3
 800340a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003422:	b29c      	uxth	r4, r3
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <USB_DeactivateEndpoint+0x208>)
 8003430:	4323      	orrs	r3, r4
 8003432:	b29b      	uxth	r3, r3
 8003434:	8013      	strh	r3, [r2, #0]
 8003436:	e144      	b.n	80036c2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29c      	uxth	r4, r3
 8003446:	4623      	mov	r3, r4
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <USB_DeactivateEndpoint+0xca>
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	b29b      	uxth	r3, r3
 800345e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	b29c      	uxth	r4, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	441a      	add	r2, r3
 8003472:	4b52      	ldr	r3, [pc, #328]	; (80035bc <USB_DeactivateEndpoint+0x20c>)
 8003474:	4323      	orrs	r3, r4
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	b29c      	uxth	r4, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <USB_DeactivateEndpoint+0x208>)
 800349e:	4323      	orrs	r3, r4
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8013      	strh	r3, [r2, #0]
 80034a4:	e10d      	b.n	80036c2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	785b      	ldrb	r3, [r3, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 8088 	bne.w	80035c0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	b29c      	uxth	r4, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d014      	beq.n	80034f2 <USB_DeactivateEndpoint+0x142>
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	b29c      	uxth	r4, r3
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <USB_DeactivateEndpoint+0x20c>)
 80034ec:	4323      	orrs	r3, r4
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29c      	uxth	r4, r3
 8003500:	4623      	mov	r3, r4
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d014      	beq.n	8003534 <USB_DeactivateEndpoint+0x184>
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	b29c      	uxth	r4, r3
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <USB_DeactivateEndpoint+0x204>)
 800352e:	4323      	orrs	r3, r4
 8003530:	b29b      	uxth	r3, r3
 8003532:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354a:	b29c      	uxth	r4, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	441a      	add	r2, r3
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <USB_DeactivateEndpoint+0x204>)
 8003558:	4323      	orrs	r3, r4
 800355a:	b29b      	uxth	r3, r3
 800355c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003574:	b29c      	uxth	r4, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	441a      	add	r2, r3
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <USB_DeactivateEndpoint+0x208>)
 8003582:	4323      	orrs	r3, r4
 8003584:	b29b      	uxth	r3, r3
 8003586:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800359a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359e:	b29c      	uxth	r4, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <USB_DeactivateEndpoint+0x208>)
 80035ac:	4323      	orrs	r3, r4
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8013      	strh	r3, [r2, #0]
 80035b2:	e086      	b.n	80036c2 <USB_DeactivateEndpoint+0x312>
 80035b4:	ffff80c0 	.word	0xffff80c0
 80035b8:	ffff8080 	.word	0xffff8080
 80035bc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29c      	uxth	r4, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d014      	beq.n	8003602 <USB_DeactivateEndpoint+0x252>
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	b29c      	uxth	r4, r3
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <USB_DeactivateEndpoint+0x320>)
 80035fc:	4323      	orrs	r3, r4
 80035fe:	b29b      	uxth	r3, r3
 8003600:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29c      	uxth	r4, r3
 8003610:	4623      	mov	r3, r4
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b00      	cmp	r3, #0
 8003618:	d014      	beq.n	8003644 <USB_DeactivateEndpoint+0x294>
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	b29c      	uxth	r4, r3
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	441a      	add	r2, r3
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <USB_DeactivateEndpoint+0x324>)
 800363e:	4323      	orrs	r3, r4
 8003640:	b29b      	uxth	r3, r3
 8003642:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	b29c      	uxth	r4, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <USB_DeactivateEndpoint+0x320>)
 8003668:	4323      	orrs	r3, r4
 800366a:	b29b      	uxth	r3, r3
 800366c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003684:	b29c      	uxth	r4, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	441a      	add	r2, r3
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <USB_DeactivateEndpoint+0x328>)
 8003692:	4323      	orrs	r3, r4
 8003694:	b29b      	uxth	r3, r3
 8003696:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	b29c      	uxth	r4, r3
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <USB_DeactivateEndpoint+0x328>)
 80036bc:	4323      	orrs	r3, r4
 80036be:	b29b      	uxth	r3, r3
 80036c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc90      	pop	{r4, r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	ffffc080 	.word	0xffffc080
 80036d4:	ffff80c0 	.word	0xffff80c0
 80036d8:	ffff8080 	.word	0xffff8080

080036dc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b08d      	sub	sp, #52	; 0x34
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f040 8160 	bne.w	80039b0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d909      	bls.n	8003710 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	699a      	ldr	r2, [r3, #24]
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003708:	1ad2      	subs	r2, r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	619a      	str	r2, [r3, #24]
 800370e:	e005      	b.n	800371c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	7b1b      	ldrb	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d119      	bne.n	8003758 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	6959      	ldr	r1, [r3, #20]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	88da      	ldrh	r2, [r3, #6]
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	b29b      	uxth	r3, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fba2 	bl	8003e7a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003736:	687c      	ldr	r4, [r7, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373e:	b29b      	uxth	r3, r3
 8003740:	441c      	add	r4, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4423      	add	r3, r4
 800374a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800374e:	461c      	mov	r4, r3
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	b29b      	uxth	r3, r3
 8003754:	8023      	strh	r3, [r4, #0]
 8003756:	e10f      	b.n	8003978 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d065      	beq.n	800383a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800376e:	687c      	ldr	r4, [r7, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	785b      	ldrb	r3, [r3, #1]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d148      	bne.n	800380a <USB_EPStartXfer+0x12e>
 8003778:	687c      	ldr	r4, [r7, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	441c      	add	r4, r3
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4423      	add	r3, r4
 800378c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003790:	461c      	mov	r4, r3
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10e      	bne.n	80037b6 <USB_EPStartXfer+0xda>
 8003798:	8823      	ldrh	r3, [r4, #0]
 800379a:	b29b      	uxth	r3, r3
 800379c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	8023      	strh	r3, [r4, #0]
 80037a4:	8823      	ldrh	r3, [r4, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8023      	strh	r3, [r4, #0]
 80037b4:	e03d      	b.n	8003832 <USB_EPStartXfer+0x156>
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	2b3e      	cmp	r3, #62	; 0x3e
 80037ba:	d810      	bhi.n	80037de <USB_EPStartXfer+0x102>
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <USB_EPStartXfer+0xf6>
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	3301      	adds	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	b29b      	uxth	r3, r3
 80037da:	8023      	strh	r3, [r4, #0]
 80037dc:	e029      	b.n	8003832 <USB_EPStartXfer+0x156>
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <USB_EPStartXfer+0x118>
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	3b01      	subs	r3, #1
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	029b      	lsls	r3, r3, #10
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003804:	b29b      	uxth	r3, r3
 8003806:	8023      	strh	r3, [r4, #0]
 8003808:	e013      	b.n	8003832 <USB_EPStartXfer+0x156>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d10f      	bne.n	8003832 <USB_EPStartXfer+0x156>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003818:	b29b      	uxth	r3, r3
 800381a:	441c      	add	r4, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	4423      	add	r3, r4
 8003824:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	895b      	ldrh	r3, [r3, #10]
 8003836:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003838:	e063      	b.n	8003902 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	785b      	ldrb	r3, [r3, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d148      	bne.n	80038d4 <USB_EPStartXfer+0x1f8>
 8003842:	687c      	ldr	r4, [r7, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	441c      	add	r4, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	4423      	add	r3, r4
 8003856:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800385a:	461c      	mov	r4, r3
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10e      	bne.n	8003880 <USB_EPStartXfer+0x1a4>
 8003862:	8823      	ldrh	r3, [r4, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800386a:	b29b      	uxth	r3, r3
 800386c:	8023      	strh	r3, [r4, #0]
 800386e:	8823      	ldrh	r3, [r4, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29b      	uxth	r3, r3
 800387c:	8023      	strh	r3, [r4, #0]
 800387e:	e03d      	b.n	80038fc <USB_EPStartXfer+0x220>
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	2b3e      	cmp	r3, #62	; 0x3e
 8003884:	d810      	bhi.n	80038a8 <USB_EPStartXfer+0x1cc>
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <USB_EPStartXfer+0x1c0>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	3301      	adds	r3, #1
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	029b      	lsls	r3, r3, #10
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8023      	strh	r3, [r4, #0]
 80038a6:	e029      	b.n	80038fc <USB_EPStartXfer+0x220>
 80038a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	623b      	str	r3, [r7, #32]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <USB_EPStartXfer+0x1e2>
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	623b      	str	r3, [r7, #32]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	029b      	lsls	r3, r3, #10
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8023      	strh	r3, [r4, #0]
 80038d2:	e013      	b.n	80038fc <USB_EPStartXfer+0x220>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d10f      	bne.n	80038fc <USB_EPStartXfer+0x220>
 80038dc:	687c      	ldr	r4, [r7, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	441c      	add	r4, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	4423      	add	r3, r4
 80038f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038f4:	461c      	mov	r4, r3
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	891b      	ldrh	r3, [r3, #8]
 8003900:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6959      	ldr	r1, [r3, #20]
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	b29b      	uxth	r3, r3
 800390a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fab4 	bl	8003e7a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <USB_EPStartXfer+0x26a>
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003930:	b29c      	uxth	r4, r3
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	4b9a      	ldr	r3, [pc, #616]	; (8003ba8 <USB_EPStartXfer+0x4cc>)
 800393e:	4323      	orrs	r3, r4
 8003940:	b29b      	uxth	r3, r3
 8003942:	8013      	strh	r3, [r2, #0]
 8003944:	e018      	b.n	8003978 <USB_EPStartXfer+0x29c>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	785b      	ldrb	r3, [r3, #1]
 800394a:	2b01      	cmp	r3, #1
 800394c:	d114      	bne.n	8003978 <USB_EPStartXfer+0x29c>
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	b29b      	uxth	r3, r3
 800395c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003964:	b29c      	uxth	r4, r3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	441a      	add	r2, r3
 8003970:	4b8e      	ldr	r3, [pc, #568]	; (8003bac <USB_EPStartXfer+0x4d0>)
 8003972:	4323      	orrs	r3, r4
 8003974:	b29b      	uxth	r3, r3
 8003976:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398e:	b29c      	uxth	r4, r3
 8003990:	f084 0310 	eor.w	r3, r4, #16
 8003994:	b29c      	uxth	r4, r3
 8003996:	f084 0320 	eor.w	r3, r4, #32
 800399a:	b29c      	uxth	r4, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	4b82      	ldr	r3, [pc, #520]	; (8003bb0 <USB_EPStartXfer+0x4d4>)
 80039a8:	4323      	orrs	r3, r4
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8013      	strh	r3, [r2, #0]
 80039ae:	e146      	b.n	8003c3e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d909      	bls.n	80039d0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	1ad2      	subs	r2, r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	619a      	str	r2, [r3, #24]
 80039ce:	e005      	b.n	80039dc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	7b1b      	ldrb	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d148      	bne.n	8003a76 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80039e4:	687c      	ldr	r4, [r7, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	441c      	add	r4, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4423      	add	r3, r4
 80039f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039fc:	461c      	mov	r4, r3
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10e      	bne.n	8003a22 <USB_EPStartXfer+0x346>
 8003a04:	8823      	ldrh	r3, [r4, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8023      	strh	r3, [r4, #0]
 8003a10:	8823      	ldrh	r3, [r4, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	8023      	strh	r3, [r4, #0]
 8003a20:	e0f2      	b.n	8003c08 <USB_EPStartXfer+0x52c>
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	2b3e      	cmp	r3, #62	; 0x3e
 8003a26:	d810      	bhi.n	8003a4a <USB_EPStartXfer+0x36e>
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <USB_EPStartXfer+0x362>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	029b      	lsls	r3, r3, #10
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8023      	strh	r3, [r4, #0]
 8003a48:	e0de      	b.n	8003c08 <USB_EPStartXfer+0x52c>
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d102      	bne.n	8003a60 <USB_EPStartXfer+0x384>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	029b      	lsls	r3, r3, #10
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8023      	strh	r3, [r4, #0]
 8003a74:	e0c8      	b.n	8003c08 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	785b      	ldrb	r3, [r3, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d148      	bne.n	8003b10 <USB_EPStartXfer+0x434>
 8003a7e:	687c      	ldr	r4, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	441c      	add	r4, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4423      	add	r3, r4
 8003a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a96:	461c      	mov	r4, r3
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <USB_EPStartXfer+0x3e0>
 8003a9e:	8823      	ldrh	r3, [r4, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8023      	strh	r3, [r4, #0]
 8003aaa:	8823      	ldrh	r3, [r4, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	8023      	strh	r3, [r4, #0]
 8003aba:	e03d      	b.n	8003b38 <USB_EPStartXfer+0x45c>
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	2b3e      	cmp	r3, #62	; 0x3e
 8003ac0:	d810      	bhi.n	8003ae4 <USB_EPStartXfer+0x408>
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <USB_EPStartXfer+0x3fc>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8023      	strh	r3, [r4, #0]
 8003ae2:	e029      	b.n	8003b38 <USB_EPStartXfer+0x45c>
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <USB_EPStartXfer+0x41e>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	029b      	lsls	r3, r3, #10
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8023      	strh	r3, [r4, #0]
 8003b0e:	e013      	b.n	8003b38 <USB_EPStartXfer+0x45c>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	785b      	ldrb	r3, [r3, #1]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d10f      	bne.n	8003b38 <USB_EPStartXfer+0x45c>
 8003b18:	687c      	ldr	r4, [r7, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	441c      	add	r4, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	4423      	add	r3, r4
 8003b2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b30:	461c      	mov	r4, r3
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8023      	strh	r3, [r4, #0]
 8003b38:	687c      	ldr	r4, [r7, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d14e      	bne.n	8003be0 <USB_EPStartXfer+0x504>
 8003b42:	687c      	ldr	r4, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	441c      	add	r4, r3
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	4423      	add	r3, r4
 8003b56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10e      	bne.n	8003b80 <USB_EPStartXfer+0x4a4>
 8003b62:	8823      	ldrh	r3, [r4, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	8023      	strh	r3, [r4, #0]
 8003b6e:	8823      	ldrh	r3, [r4, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	8023      	strh	r3, [r4, #0]
 8003b7e:	e043      	b.n	8003c08 <USB_EPStartXfer+0x52c>
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	2b3e      	cmp	r3, #62	; 0x3e
 8003b84:	d816      	bhi.n	8003bb4 <USB_EPStartXfer+0x4d8>
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <USB_EPStartXfer+0x4c0>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	8023      	strh	r3, [r4, #0]
 8003ba6:	e02f      	b.n	8003c08 <USB_EPStartXfer+0x52c>
 8003ba8:	ffff80c0 	.word	0xffff80c0
 8003bac:	ffffc080 	.word	0xffffc080
 8003bb0:	ffff8080 	.word	0xffff8080
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <USB_EPStartXfer+0x4ee>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	029b      	lsls	r3, r3, #10
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8023      	strh	r3, [r4, #0]
 8003bde:	e013      	b.n	8003c08 <USB_EPStartXfer+0x52c>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10f      	bne.n	8003c08 <USB_EPStartXfer+0x52c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	441c      	add	r4, r3
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4423      	add	r3, r4
 8003bfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	b29c      	uxth	r4, r3
 8003c20:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c24:	b29c      	uxth	r4, r3
 8003c26:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c2a:	b29c      	uxth	r4, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <USB_EPStartXfer+0x56c>)
 8003c38:	4323      	orrs	r3, r4
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3734      	adds	r7, #52	; 0x34
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	ffff8080 	.word	0xffff8080

08003c4c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c4c:	b490      	push	{r4, r7}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c74:	b29c      	uxth	r4, r3
 8003c76:	f084 0310 	eor.w	r3, r4, #16
 8003c7a:	b29c      	uxth	r4, r3
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	441a      	add	r2, r3
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <USB_EPSetStall+0x80>)
 8003c88:	4323      	orrs	r3, r4
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8013      	strh	r3, [r2, #0]
 8003c8e:	e017      	b.n	8003cc0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	b29c      	uxth	r4, r3
 8003ca8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003cac:	b29c      	uxth	r4, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	441a      	add	r2, r3
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <USB_EPSetStall+0x80>)
 8003cba:	4323      	orrs	r3, r4
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc90      	pop	{r4, r7}
 8003cca:	4770      	bx	lr
 8003ccc:	ffff8080 	.word	0xffff8080

08003cd0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003cd0:	b490      	push	{r4, r7}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	7b1b      	ldrb	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d17d      	bne.n	8003dde <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d03d      	beq.n	8003d66 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29c      	uxth	r4, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d014      	beq.n	8003d2c <USB_EPClearStall+0x5c>
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d18:	b29c      	uxth	r4, r3
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	441a      	add	r2, r3
 8003d24:	4b31      	ldr	r3, [pc, #196]	; (8003dec <USB_EPClearStall+0x11c>)
 8003d26:	4323      	orrs	r3, r4
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	78db      	ldrb	r3, [r3, #3]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d054      	beq.n	8003dde <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4a:	b29c      	uxth	r4, r3
 8003d4c:	f084 0320 	eor.w	r3, r4, #32
 8003d50:	b29c      	uxth	r4, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	441a      	add	r2, r3
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <USB_EPClearStall+0x120>)
 8003d5e:	4323      	orrs	r3, r4
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	8013      	strh	r3, [r2, #0]
 8003d64:	e03b      	b.n	8003dde <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29c      	uxth	r4, r3
 8003d74:	4623      	mov	r3, r4
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d014      	beq.n	8003da8 <USB_EPClearStall+0xd8>
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	b29c      	uxth	r4, r3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	441a      	add	r2, r3
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <USB_EPClearStall+0x124>)
 8003da2:	4323      	orrs	r3, r4
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	b29c      	uxth	r4, r3
 8003dc0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003dc4:	b29c      	uxth	r4, r3
 8003dc6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003dca:	b29c      	uxth	r4, r3
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <USB_EPClearStall+0x120>)
 8003dd8:	4323      	orrs	r3, r4
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc90      	pop	{r4, r7}
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	ffff80c0 	.word	0xffff80c0
 8003df0:	ffff8080 	.word	0xffff8080
 8003df4:	ffffc080 	.word	0xffffc080

08003df8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b08d      	sub	sp, #52	; 0x34
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	4611      	mov	r1, r2
 8003e86:	461a      	mov	r2, r3
 8003e88:	460b      	mov	r3, r1
 8003e8a:	80fb      	strh	r3, [r7, #6]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003e90:	88bb      	ldrh	r3, [r7, #4]
 8003e92:	3301      	adds	r3, #1
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	005a      	lsls	r2, r3, #1
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb2:	e01e      	b.n	8003ef2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	3302      	adds	r3, #2
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1dd      	bne.n	8003eb4 <USB_WritePMA+0x3a>
  }
}
 8003ef8:	bf00      	nop
 8003efa:	3734      	adds	r7, #52	; 0x34
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b08b      	sub	sp, #44	; 0x2c
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	461a      	mov	r2, r3
 8003f10:	460b      	mov	r3, r1
 8003f12:	80fb      	strh	r3, [r7, #6]
 8003f14:	4613      	mov	r3, r2
 8003f16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003f18:	88bb      	ldrh	r3, [r7, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	005a      	lsls	r2, r3, #1
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e01b      	b.n	8003f74 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	3302      	adds	r3, #2
 8003f48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	0a1b      	lsrs	r3, r3, #8
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	3b01      	subs	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e0      	bne.n	8003f3c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003f7a:	88bb      	ldrh	r3, [r7, #4]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	701a      	strb	r2, [r3, #0]
  }
}
 8003f96:	bf00      	nop
 8003f98:	372c      	adds	r7, #44	; 0x2c
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8003fb0:	2340      	movs	r3, #64	; 0x40
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	2181      	movs	r1, #129	; 0x81
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f003 f801 	bl	8006fbe <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f002 fff8 	bl	8006fbe <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8003fd6:	2054      	movs	r0, #84	; 0x54
 8003fd8:	f003 f8fe 	bl	80071d8 <USBD_static_malloc>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d102      	bne.n	8003ff4 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
 8003ff2:	e012      	b.n	800401a <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ffa:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	2340      	movs	r3, #64	; 0x40
 8004012:	2101      	movs	r1, #1
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f003 f8bc 	bl	8007192 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004030:	2181      	movs	r1, #129	; 0x81
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f002 ffe9 	bl	800700a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800403e:	2101      	movs	r1, #1
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f002 ffe2 	bl	800700a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00e      	beq.n	8004076 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004068:	4618      	mov	r0, r3
 800406a:	f003 f8c1 	bl	80071f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004090:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d051      	beq.n	8004152 <USBD_CUSTOM_HID_Setup+0xd2>
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	f040 80d8 	bne.w	8004264 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	3b02      	subs	r3, #2
 80040ba:	2b09      	cmp	r3, #9
 80040bc:	d841      	bhi.n	8004142 <USBD_CUSTOM_HID_Setup+0xc2>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <USBD_CUSTOM_HID_Setup+0x44>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	080040fb 	.word	0x080040fb
 80040cc:	08004143 	.word	0x08004143
 80040d0:	08004143 	.word	0x08004143
 80040d4:	08004143 	.word	0x08004143
 80040d8:	08004143 	.word	0x08004143
 80040dc:	08004143 	.word	0x08004143
 80040e0:	0800412d 	.word	0x0800412d
 80040e4:	0800410b 	.word	0x0800410b
 80040e8:	080040ed 	.word	0x080040ed
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	885b      	ldrh	r3, [r3, #2]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 80040f8:	e02a      	b.n	8004150 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3340      	adds	r3, #64	; 0x40
 80040fe:	2201      	movs	r2, #1
 8004100:	4619      	mov	r1, r3
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f001 f96a 	bl	80053dc <USBD_CtlSendData>
          break;
 8004108:	e022      	b.n	8004150 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	885b      	ldrh	r3, [r3, #2]
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b29b      	uxth	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800411a:	e019      	b.n	8004150 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	3344      	adds	r3, #68	; 0x44
 8004120:	2201      	movs	r2, #1
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f001 f959 	bl	80053dc <USBD_CtlSendData>
          break;
 800412a:	e011      	b.n	8004150 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2201      	movs	r2, #1
 8004130:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004132:	6939      	ldr	r1, [r7, #16]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	88db      	ldrh	r3, [r3, #6]
 8004138:	461a      	mov	r2, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f001 f97c 	bl	8005438 <USBD_CtlPrepareRx>
          break;
 8004140:	e006      	b.n	8004150 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f001 f8df 	bl	8005308 <USBD_CtlError>
          ret = USBD_FAIL;
 800414a:	2302      	movs	r3, #2
 800414c:	75fb      	strb	r3, [r7, #23]
          break;
 800414e:	bf00      	nop
      }
      break;
 8004150:	e08f      	b.n	8004272 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b0b      	cmp	r3, #11
 8004158:	d87c      	bhi.n	8004254 <USBD_CUSTOM_HID_Setup+0x1d4>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <USBD_CUSTOM_HID_Setup+0xe0>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004191 	.word	0x08004191
 8004164:	08004255 	.word	0x08004255
 8004168:	08004255 	.word	0x08004255
 800416c:	08004255 	.word	0x08004255
 8004170:	08004255 	.word	0x08004255
 8004174:	08004255 	.word	0x08004255
 8004178:	080041b9 	.word	0x080041b9
 800417c:	08004255 	.word	0x08004255
 8004180:	08004255 	.word	0x08004255
 8004184:	08004255 	.word	0x08004255
 8004188:	08004207 	.word	0x08004207
 800418c:	0800422f 	.word	0x0800422f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004196:	2b03      	cmp	r3, #3
 8004198:	d107      	bne.n	80041aa <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800419a:	f107 030e 	add.w	r3, r7, #14
 800419e:	2202      	movs	r2, #2
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f001 f91a 	bl	80053dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041a8:	e05b      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f001 f8ab 	bl	8005308 <USBD_CtlError>
            ret = USBD_FAIL;
 80041b2:	2302      	movs	r3, #2
 80041b4:	75fb      	strb	r3, [r7, #23]
          break;
 80041b6:	e054      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	885b      	ldrh	r3, [r3, #2]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b22      	cmp	r3, #34	; 0x22
 80041c2:	d10b      	bne.n	80041dc <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	88db      	ldrh	r3, [r3, #6]
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	bf28      	it	cs
 80041cc:	2320      	movcs	r3, #32
 80041ce:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	e00d      	b.n	80041f8 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	885b      	ldrh	r3, [r3, #2]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b21      	cmp	r3, #33	; 0x21
 80041e6:	d107      	bne.n	80041f8 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80041e8:	4b24      	ldr	r3, [pc, #144]	; (800427c <USBD_CUSTOM_HID_Setup+0x1fc>)
 80041ea:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	88db      	ldrh	r3, [r3, #6]
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	bf28      	it	cs
 80041f4:	2309      	movcs	r3, #9
 80041f6:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80041f8:	8bfb      	ldrh	r3, [r7, #30]
 80041fa:	461a      	mov	r2, r3
 80041fc:	69b9      	ldr	r1, [r7, #24]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f001 f8ec 	bl	80053dc <USBD_CtlSendData>
          break;
 8004204:	e02d      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800420c:	2b03      	cmp	r3, #3
 800420e:	d107      	bne.n	8004220 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3348      	adds	r3, #72	; 0x48
 8004214:	2201      	movs	r2, #1
 8004216:	4619      	mov	r1, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 f8df 	bl	80053dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800421e:	e020      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8004220:	6839      	ldr	r1, [r7, #0]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f001 f870 	bl	8005308 <USBD_CtlError>
            ret = USBD_FAIL;
 8004228:	2302      	movs	r3, #2
 800422a:	75fb      	strb	r3, [r7, #23]
          break;
 800422c:	e019      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004234:	2b03      	cmp	r3, #3
 8004236:	d106      	bne.n	8004246 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	885b      	ldrh	r3, [r3, #2]
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004244:	e00d      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8004246:	6839      	ldr	r1, [r7, #0]
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 f85d 	bl	8005308 <USBD_CtlError>
            ret = USBD_FAIL;
 800424e:	2302      	movs	r3, #2
 8004250:	75fb      	strb	r3, [r7, #23]
          break;
 8004252:	e006      	b.n	8004262 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8004254:	6839      	ldr	r1, [r7, #0]
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 f856 	bl	8005308 <USBD_CtlError>
          ret = USBD_FAIL;
 800425c:	2302      	movs	r3, #2
 800425e:	75fb      	strb	r3, [r7, #23]
          break;
 8004260:	bf00      	nop
      }
      break;
 8004262:	e006      	b.n	8004272 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 f84e 	bl	8005308 <USBD_CtlError>
      ret = USBD_FAIL;
 800426c:	2302      	movs	r3, #2
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	bf00      	nop
  }
  return ret;
 8004272:	7dfb      	ldrb	r3, [r7, #23]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	200000c4 	.word	0x200000c4

08004280 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2229      	movs	r2, #41	; 0x29
 800428c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800428e:	4b03      	ldr	r3, [pc, #12]	; (800429c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000040 	.word	0x20000040

080042a0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2229      	movs	r2, #41	; 0x29
 80042ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80042ae:	4b03      	ldr	r3, [pc, #12]	; (80042bc <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	2000006c 	.word	0x2000006c

080042c0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2229      	movs	r2, #41	; 0x29
 80042cc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80042ce:	4b03      	ldr	r3, [pc, #12]	; (80042dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000098 	.word	0x20000098

080042e0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004316:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	7810      	ldrb	r0, [r2, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	7852      	ldrb	r2, [r2, #1]
 8004328:	4611      	mov	r1, r2
 800432a:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	2101      	movs	r1, #1
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f002 ff2d 	bl	8007192 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004350:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d10c      	bne.n	8004374 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	7810      	ldrb	r0, [r2, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	7852      	ldrb	r2, [r2, #1]
 800436a:	4611      	mov	r1, r2
 800436c:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	220a      	movs	r2, #10
 800438c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	200000d0 	.word	0x200000d0

080043a0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80043aa:	2302      	movs	r3, #2
 80043ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80043e0:	2302      	movs	r3, #2
 80043e2:	e01a      	b.n	800441a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	79fa      	ldrb	r2, [r7, #7]
 8004410:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f002 fd68 	bl	8006ee8 <USBD_LL_Init>

  return USBD_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d006      	beq.n	8004444 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	e001      	b.n	8004448 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004444:	2302      	movs	r3, #2
 8004446:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f002 fd93 	bl	8006f88 <USBD_LL_Start>

  return USBD_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800448c:	2302      	movs	r3, #2
 800448e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	4611      	mov	r1, r2
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	4611      	mov	r1, r2
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	4798      	blx	r3

  return USBD_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 feca 	bl	8005290 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800450a:	461a      	mov	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	2b01      	cmp	r3, #1
 800451e:	d00c      	beq.n	800453a <USBD_LL_SetupStage+0x56>
 8004520:	2b01      	cmp	r3, #1
 8004522:	d302      	bcc.n	800452a <USBD_LL_SetupStage+0x46>
 8004524:	2b02      	cmp	r3, #2
 8004526:	d010      	beq.n	800454a <USBD_LL_SetupStage+0x66>
 8004528:	e017      	b.n	800455a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9ca 	bl	80048cc <USBD_StdDevReq>
      break;
 8004538:	e01a      	b.n	8004570 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa2c 	bl	80049a0 <USBD_StdItfReq>
      break;
 8004548:	e012      	b.n	8004570 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa6a 	bl	8004a2c <USBD_StdEPReq>
      break;
 8004558:	e00a      	b.n	8004570 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004564:	b2db      	uxtb	r3, r3
 8004566:	4619      	mov	r1, r3
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f002 fd6d 	bl	8007048 <USBD_LL_StallEP>
      break;
 800456e:	bf00      	nop
  }

  return USBD_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	460b      	mov	r3, r1
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004588:	7afb      	ldrb	r3, [r7, #11]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d14b      	bne.n	8004626 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004594:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800459c:	2b03      	cmp	r3, #3
 800459e:	d134      	bne.n	800460a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d919      	bls.n	80045e0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	1ad2      	subs	r2, r2, r3
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d203      	bcs.n	80045ce <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	e002      	b.n	80045d4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 ff4b 	bl	8005474 <USBD_CtlContinueRx>
 80045de:	e038      	b.n	8004652 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d105      	bne.n	8004602 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 ff48 	bl	8005498 <USBD_CtlSendStatus>
 8004608:	e023      	b.n	8004652 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004610:	2b05      	cmp	r3, #5
 8004612:	d11e      	bne.n	8004652 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800461c:	2100      	movs	r1, #0
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f002 fd12 	bl	8007048 <USBD_LL_StallEP>
 8004624:	e015      	b.n	8004652 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004638:	2b03      	cmp	r3, #3
 800463a:	d108      	bne.n	800464e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	7afa      	ldrb	r2, [r7, #11]
 8004646:	4611      	mov	r1, r2
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	4798      	blx	r3
 800464c:	e001      	b.n	8004652 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800464e:	2302      	movs	r3, #2
 8004650:	e000      	b.n	8004654 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	460b      	mov	r3, r1
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800466a:	7afb      	ldrb	r3, [r7, #11]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d17f      	bne.n	8004770 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3314      	adds	r3, #20
 8004674:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800467c:	2b02      	cmp	r3, #2
 800467e:	d15c      	bne.n	800473a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d915      	bls.n	80046b8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	1ad2      	subs	r2, r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 feb5 	bl	8005414 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80046aa:	2300      	movs	r3, #0
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f002 fd6e 	bl	8007192 <USBD_LL_PrepareReceive>
 80046b6:	e04e      	b.n	8004756 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	6912      	ldr	r2, [r2, #16]
 80046c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80046c4:	fb02 f201 	mul.w	r2, r2, r1
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d11c      	bne.n	8004708 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d316      	bcc.n	8004708 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d20f      	bcs.n	8004708 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80046e8:	2200      	movs	r2, #0
 80046ea:	2100      	movs	r1, #0
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fe91 	bl	8005414 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80046fa:	2300      	movs	r3, #0
 80046fc:	2200      	movs	r2, #0
 80046fe:	2100      	movs	r1, #0
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f002 fd46 	bl	8007192 <USBD_LL_PrepareReceive>
 8004706:	e026      	b.n	8004756 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800471a:	2b03      	cmp	r3, #3
 800471c:	d105      	bne.n	800472a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f002 fc8b 	bl	8007048 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fec3 	bl	80054be <USBD_CtlReceiveStatus>
 8004738:	e00d      	b.n	8004756 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004740:	2b04      	cmp	r3, #4
 8004742:	d004      	beq.n	800474e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f002 fc79 	bl	8007048 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800475c:	2b01      	cmp	r3, #1
 800475e:	d11d      	bne.n	800479c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7ff fe83 	bl	800446c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800476e:	e015      	b.n	800479c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00d      	beq.n	8004798 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004782:	2b03      	cmp	r3, #3
 8004784:	d108      	bne.n	8004798 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	7afa      	ldrb	r2, [r7, #11]
 8004790:	4611      	mov	r1, r2
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	4798      	blx	r3
 8004796:	e001      	b.n	800479c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004798:	2302      	movs	r3, #2
 800479a:	e000      	b.n	800479e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ae:	2340      	movs	r3, #64	; 0x40
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f002 fc02 	bl	8006fbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2240      	movs	r2, #64	; 0x40
 80047c6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80047ca:	2340      	movs	r3, #64	; 0x40
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f002 fbf4 	bl	8006fbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6852      	ldr	r2, [r2, #4]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	4611      	mov	r1, r2
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
  }

  return USBD_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2204      	movs	r2, #4
 800485e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800487c:	2b04      	cmp	r3, #4
 800487e:	d105      	bne.n	800488c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d10b      	bne.n	80048c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d004      	beq.n	80048f0 <USBD_StdDevReq+0x24>
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d002      	beq.n	80048f0 <USBD_StdDevReq+0x24>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <USBD_StdDevReq+0x34>
 80048ee:	e04c      	b.n	800498a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
      break;
 80048fe:	e049      	b.n	8004994 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	2b09      	cmp	r3, #9
 8004906:	d83a      	bhi.n	800497e <USBD_StdDevReq+0xb2>
 8004908:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <USBD_StdDevReq+0x44>)
 800490a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490e:	bf00      	nop
 8004910:	08004961 	.word	0x08004961
 8004914:	08004975 	.word	0x08004975
 8004918:	0800497f 	.word	0x0800497f
 800491c:	0800496b 	.word	0x0800496b
 8004920:	0800497f 	.word	0x0800497f
 8004924:	08004943 	.word	0x08004943
 8004928:	08004939 	.word	0x08004939
 800492c:	0800497f 	.word	0x0800497f
 8004930:	08004957 	.word	0x08004957
 8004934:	0800494d 	.word	0x0800494d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004938:	6839      	ldr	r1, [r7, #0]
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9d4 	bl	8004ce8 <USBD_GetDescriptor>
          break;
 8004940:	e022      	b.n	8004988 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fb37 	bl	8004fb8 <USBD_SetAddress>
          break;
 800494a:	e01d      	b.n	8004988 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fb74 	bl	800503c <USBD_SetConfig>
          break;
 8004954:	e018      	b.n	8004988 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004956:	6839      	ldr	r1, [r7, #0]
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fbfd 	bl	8005158 <USBD_GetConfig>
          break;
 800495e:	e013      	b.n	8004988 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fc2c 	bl	80051c0 <USBD_GetStatus>
          break;
 8004968:	e00e      	b.n	8004988 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fc5a 	bl	8005226 <USBD_SetFeature>
          break;
 8004972:	e009      	b.n	8004988 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fc69 	bl	800524e <USBD_ClrFeature>
          break;
 800497c:	e004      	b.n	8004988 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800497e:	6839      	ldr	r1, [r7, #0]
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fcc1 	bl	8005308 <USBD_CtlError>
          break;
 8004986:	bf00      	nop
      }
      break;
 8004988:	e004      	b.n	8004994 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fcbb 	bl	8005308 <USBD_CtlError>
      break;
 8004992:	bf00      	nop
  }

  return ret;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop

080049a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d003      	beq.n	80049c2 <USBD_StdItfReq+0x22>
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d001      	beq.n	80049c2 <USBD_StdItfReq+0x22>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d12a      	bne.n	8004a18 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c8:	3b01      	subs	r3, #1
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d81d      	bhi.n	8004a0a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	889b      	ldrh	r3, [r3, #4]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d813      	bhi.n	8004a00 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	88db      	ldrh	r3, [r3, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d110      	bne.n	8004a14 <USBD_StdItfReq+0x74>
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10d      	bne.n	8004a14 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fd4d 	bl	8005498 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80049fe:	e009      	b.n	8004a14 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fc80 	bl	8005308 <USBD_CtlError>
          break;
 8004a08:	e004      	b.n	8004a14 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004a0a:	6839      	ldr	r1, [r7, #0]
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fc7b 	bl	8005308 <USBD_CtlError>
          break;
 8004a12:	e000      	b.n	8004a16 <USBD_StdItfReq+0x76>
          break;
 8004a14:	bf00      	nop
      }
      break;
 8004a16:	e004      	b.n	8004a22 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004a18:	6839      	ldr	r1, [r7, #0]
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fc74 	bl	8005308 <USBD_CtlError>
      break;
 8004a20:	bf00      	nop
  }

  return USBD_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	889b      	ldrh	r3, [r3, #4]
 8004a3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d004      	beq.n	8004a56 <USBD_StdEPReq+0x2a>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d002      	beq.n	8004a56 <USBD_StdEPReq+0x2a>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <USBD_StdEPReq+0x3a>
 8004a54:	e13d      	b.n	8004cd2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
      break;
 8004a64:	e13a      	b.n	8004cdc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d10a      	bne.n	8004a88 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	6839      	ldr	r1, [r7, #0]
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
 8004a80:	4603      	mov	r3, r0
 8004a82:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	e12a      	b.n	8004cde <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d03e      	beq.n	8004b0e <USBD_StdEPReq+0xe2>
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d002      	beq.n	8004a9a <USBD_StdEPReq+0x6e>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d070      	beq.n	8004b7a <USBD_StdEPReq+0x14e>
 8004a98:	e115      	b.n	8004cc6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d002      	beq.n	8004aaa <USBD_StdEPReq+0x7e>
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d015      	beq.n	8004ad4 <USBD_StdEPReq+0xa8>
 8004aa8:	e02b      	b.n	8004b02 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004aaa:	7bbb      	ldrb	r3, [r7, #14]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00c      	beq.n	8004aca <USBD_StdEPReq+0x9e>
 8004ab0:	7bbb      	ldrb	r3, [r7, #14]
 8004ab2:	2b80      	cmp	r3, #128	; 0x80
 8004ab4:	d009      	beq.n	8004aca <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004ab6:	7bbb      	ldrb	r3, [r7, #14]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f002 fac4 	bl	8007048 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f002 fac0 	bl	8007048 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ac8:	e020      	b.n	8004b0c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fc1b 	bl	8005308 <USBD_CtlError>
              break;
 8004ad2:	e01b      	b.n	8004b0c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	885b      	ldrh	r3, [r3, #2]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10e      	bne.n	8004afa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <USBD_StdEPReq+0xce>
 8004ae2:	7bbb      	ldrb	r3, [r7, #14]
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d008      	beq.n	8004afa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	88db      	ldrh	r3, [r3, #6]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004af0:	7bbb      	ldrb	r3, [r7, #14]
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f002 faa7 	bl	8007048 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fccc 	bl	8005498 <USBD_CtlSendStatus>

              break;
 8004b00:	e004      	b.n	8004b0c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004b02:	6839      	ldr	r1, [r7, #0]
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fbff 	bl	8005308 <USBD_CtlError>
              break;
 8004b0a:	bf00      	nop
          }
          break;
 8004b0c:	e0e0      	b.n	8004cd0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d002      	beq.n	8004b1e <USBD_StdEPReq+0xf2>
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d015      	beq.n	8004b48 <USBD_StdEPReq+0x11c>
 8004b1c:	e026      	b.n	8004b6c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b1e:	7bbb      	ldrb	r3, [r7, #14]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <USBD_StdEPReq+0x112>
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d009      	beq.n	8004b3e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004b2a:	7bbb      	ldrb	r3, [r7, #14]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f002 fa8a 	bl	8007048 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004b34:	2180      	movs	r1, #128	; 0x80
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f002 fa86 	bl	8007048 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004b3c:	e01c      	b.n	8004b78 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004b3e:	6839      	ldr	r1, [r7, #0]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fbe1 	bl	8005308 <USBD_CtlError>
              break;
 8004b46:	e017      	b.n	8004b78 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	885b      	ldrh	r3, [r3, #2]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d112      	bne.n	8004b76 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004b50:	7bbb      	ldrb	r3, [r7, #14]
 8004b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b5a:	7bbb      	ldrb	r3, [r7, #14]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f002 fa91 	bl	8007086 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fc97 	bl	8005498 <USBD_CtlSendStatus>
              }
              break;
 8004b6a:	e004      	b.n	8004b76 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fbca 	bl	8005308 <USBD_CtlError>
              break;
 8004b74:	e000      	b.n	8004b78 <USBD_StdEPReq+0x14c>
              break;
 8004b76:	bf00      	nop
          }
          break;
 8004b78:	e0aa      	b.n	8004cd0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d002      	beq.n	8004b8a <USBD_StdEPReq+0x15e>
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d032      	beq.n	8004bee <USBD_StdEPReq+0x1c2>
 8004b88:	e097      	b.n	8004cba <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b8a:	7bbb      	ldrb	r3, [r7, #14]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <USBD_StdEPReq+0x174>
 8004b90:	7bbb      	ldrb	r3, [r7, #14]
 8004b92:	2b80      	cmp	r3, #128	; 0x80
 8004b94:	d004      	beq.n	8004ba0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fbb5 	bl	8005308 <USBD_CtlError>
                break;
 8004b9e:	e091      	b.n	8004cc4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	da0b      	bge.n	8004bc0 <USBD_StdEPReq+0x194>
 8004ba8:	7bbb      	ldrb	r3, [r7, #14]
 8004baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	3310      	adds	r3, #16
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4413      	add	r3, r2
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	e00b      	b.n	8004bd8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2202      	movs	r2, #2
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fbf8 	bl	80053dc <USBD_CtlSendData>
              break;
 8004bec:	e06a      	b.n	8004cc4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	da11      	bge.n	8004c1a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bf6:	7bbb      	ldrb	r3, [r7, #14]
 8004bf8:	f003 020f 	and.w	r2, r3, #15
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	3318      	adds	r3, #24
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d117      	bne.n	8004c40 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fb78 	bl	8005308 <USBD_CtlError>
                  break;
 8004c18:	e054      	b.n	8004cc4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	f003 020f 	and.w	r2, r3, #15
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fb65 	bl	8005308 <USBD_CtlError>
                  break;
 8004c3e:	e041      	b.n	8004cc4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da0b      	bge.n	8004c60 <USBD_StdEPReq+0x234>
 8004c48:	7bbb      	ldrb	r3, [r7, #14]
 8004c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	3310      	adds	r3, #16
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	e00b      	b.n	8004c78 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004c60:	7bbb      	ldrb	r3, [r7, #14]
 8004c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4413      	add	r3, r2
 8004c76:	3304      	adds	r3, #4
 8004c78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c7a:	7bbb      	ldrb	r3, [r7, #14]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <USBD_StdEPReq+0x25a>
 8004c80:	7bbb      	ldrb	r3, [r7, #14]
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d103      	bne.n	8004c8e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e00e      	b.n	8004cac <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	4619      	mov	r1, r3
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f002 fa16 	bl	80070c4 <USBD_LL_IsStallEP>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e002      	b.n	8004cac <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fb92 	bl	80053dc <USBD_CtlSendData>
              break;
 8004cb8:	e004      	b.n	8004cc4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fb23 	bl	8005308 <USBD_CtlError>
              break;
 8004cc2:	bf00      	nop
          }
          break;
 8004cc4:	e004      	b.n	8004cd0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fb1d 	bl	8005308 <USBD_CtlError>
          break;
 8004cce:	bf00      	nop
      }
      break;
 8004cd0:	e004      	b.n	8004cdc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fb17 	bl	8005308 <USBD_CtlError>
      break;
 8004cda:	bf00      	nop
  }

  return ret;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	885b      	ldrh	r3, [r3, #2]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	2b06      	cmp	r3, #6
 8004d0a:	f200 8128 	bhi.w	8004f5e <USBD_GetDescriptor+0x276>
 8004d0e:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <USBD_GetDescriptor+0x2c>)
 8004d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d14:	08004d31 	.word	0x08004d31
 8004d18:	08004d49 	.word	0x08004d49
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004f5f 	.word	0x08004f5f
 8004d24:	08004f5f 	.word	0x08004f5f
 8004d28:	08004eff 	.word	0x08004eff
 8004d2c:	08004f2b 	.word	0x08004f2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	7c12      	ldrb	r2, [r2, #16]
 8004d3c:	f107 0108 	add.w	r1, r7, #8
 8004d40:	4610      	mov	r0, r2
 8004d42:	4798      	blx	r3
 8004d44:	60f8      	str	r0, [r7, #12]
      break;
 8004d46:	e112      	b.n	8004f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	7c1b      	ldrb	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d58:	f107 0208 	add.w	r2, r7, #8
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
 8004d60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3301      	adds	r3, #1
 8004d66:	2202      	movs	r2, #2
 8004d68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004d6a:	e100      	b.n	8004f6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f107 0208 	add.w	r2, r7, #8
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
 8004d7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3301      	adds	r3, #1
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]
      break;
 8004d86:	e0f2      	b.n	8004f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	885b      	ldrh	r3, [r3, #2]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	f200 80ac 	bhi.w	8004eec <USBD_GetDescriptor+0x204>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <USBD_GetDescriptor+0xb4>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004db5 	.word	0x08004db5
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e51 	.word	0x08004e51
 8004dac:	08004e85 	.word	0x08004e85
 8004db0:	08004eb9 	.word	0x08004eb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00b      	beq.n	8004dd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	7c12      	ldrb	r2, [r2, #16]
 8004dcc:	f107 0108 	add.w	r1, r7, #8
 8004dd0:	4610      	mov	r0, r2
 8004dd2:	4798      	blx	r3
 8004dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004dd6:	e091      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa94 	bl	8005308 <USBD_CtlError>
            err++;
 8004de0:	7afb      	ldrb	r3, [r7, #11]
 8004de2:	3301      	adds	r3, #1
 8004de4:	72fb      	strb	r3, [r7, #11]
          break;
 8004de6:	e089      	b.n	8004efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	7c12      	ldrb	r2, [r2, #16]
 8004e00:	f107 0108 	add.w	r1, r7, #8
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
 8004e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e0a:	e077      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa7a 	bl	8005308 <USBD_CtlError>
            err++;
 8004e14:	7afb      	ldrb	r3, [r7, #11]
 8004e16:	3301      	adds	r3, #1
 8004e18:	72fb      	strb	r3, [r7, #11]
          break;
 8004e1a:	e06f      	b.n	8004efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	7c12      	ldrb	r2, [r2, #16]
 8004e34:	f107 0108 	add.w	r1, r7, #8
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4798      	blx	r3
 8004e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e3e:	e05d      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa60 	bl	8005308 <USBD_CtlError>
            err++;
 8004e48:	7afb      	ldrb	r3, [r7, #11]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8004e4e:	e055      	b.n	8004efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	7c12      	ldrb	r2, [r2, #16]
 8004e68:	f107 0108 	add.w	r1, r7, #8
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
 8004e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e72:	e043      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa46 	bl	8005308 <USBD_CtlError>
            err++;
 8004e7c:	7afb      	ldrb	r3, [r7, #11]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	72fb      	strb	r3, [r7, #11]
          break;
 8004e82:	e03b      	b.n	8004efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	7c12      	ldrb	r2, [r2, #16]
 8004e9c:	f107 0108 	add.w	r1, r7, #8
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4798      	blx	r3
 8004ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ea6:	e029      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa2c 	bl	8005308 <USBD_CtlError>
            err++;
 8004eb0:	7afb      	ldrb	r3, [r7, #11]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8004eb6:	e021      	b.n	8004efc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	7c12      	ldrb	r2, [r2, #16]
 8004ed0:	f107 0108 	add.w	r1, r7, #8
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
 8004ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004eda:	e00f      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004edc:	6839      	ldr	r1, [r7, #0]
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fa12 	bl	8005308 <USBD_CtlError>
            err++;
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8004eea:	e007      	b.n	8004efc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa0a 	bl	8005308 <USBD_CtlError>
          err++;
 8004ef4:	7afb      	ldrb	r3, [r7, #11]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004efa:	e038      	b.n	8004f6e <USBD_GetDescriptor+0x286>
 8004efc:	e037      	b.n	8004f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	7c1b      	ldrb	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	f107 0208 	add.w	r2, r7, #8
 8004f12:	4610      	mov	r0, r2
 8004f14:	4798      	blx	r3
 8004f16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004f18:	e029      	b.n	8004f6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f9f3 	bl	8005308 <USBD_CtlError>
        err++;
 8004f22:	7afb      	ldrb	r3, [r7, #11]
 8004f24:	3301      	adds	r3, #1
 8004f26:	72fb      	strb	r3, [r7, #11]
      break;
 8004f28:	e021      	b.n	8004f6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	7c1b      	ldrb	r3, [r3, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10d      	bne.n	8004f4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	f107 0208 	add.w	r2, r7, #8
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4798      	blx	r3
 8004f42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	2207      	movs	r2, #7
 8004f4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004f4c:	e00f      	b.n	8004f6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f9d9 	bl	8005308 <USBD_CtlError>
        err++;
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	72fb      	strb	r3, [r7, #11]
      break;
 8004f5c:	e007      	b.n	8004f6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f9d1 	bl	8005308 <USBD_CtlError>
      err++;
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	72fb      	strb	r3, [r7, #11]
      break;
 8004f6c:	bf00      	nop
  }

  if (err != 0U)
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11c      	bne.n	8004fae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004f74:	893b      	ldrh	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <USBD_GetDescriptor+0x2b6>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	88db      	ldrh	r3, [r3, #6]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	88da      	ldrh	r2, [r3, #6]
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	bf28      	it	cs
 8004f8c:	4613      	movcs	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f92:	893b      	ldrh	r3, [r7, #8]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fa1f 	bl	80053dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	88db      	ldrh	r3, [r3, #6]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa76 	bl	8005498 <USBD_CtlSendStatus>
 8004fac:	e000      	b.n	8004fb0 <USBD_GetDescriptor+0x2c8>
    return;
 8004fae:	bf00      	nop
    }
  }
}
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop

08004fb8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	889b      	ldrh	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d130      	bne.n	800502c <USBD_SetAddress+0x74>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d12c      	bne.n	800502c <USBD_SetAddress+0x74>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	885b      	ldrh	r3, [r3, #2]
 8004fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd8:	d828      	bhi.n	800502c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	885b      	ldrh	r3, [r3, #2]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d104      	bne.n	8004ffa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f988 	bl	8005308 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff8:	e01c      	b.n	8005034 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7bfa      	ldrb	r2, [r7, #15]
 8004ffe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 f881 	bl	800710e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa43 	bl	8005498 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005020:	e008      	b.n	8005034 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800502a:	e003      	b.n	8005034 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f96a 	bl	8005308 <USBD_CtlError>
  }
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	885b      	ldrh	r3, [r3, #2]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	4b41      	ldr	r3, [pc, #260]	; (8005154 <USBD_SetConfig+0x118>)
 800504e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005050:	4b40      	ldr	r3, [pc, #256]	; (8005154 <USBD_SetConfig+0x118>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d904      	bls.n	8005062 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f954 	bl	8005308 <USBD_CtlError>
 8005060:	e075      	b.n	800514e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005068:	2b02      	cmp	r3, #2
 800506a:	d002      	beq.n	8005072 <USBD_SetConfig+0x36>
 800506c:	2b03      	cmp	r3, #3
 800506e:	d023      	beq.n	80050b8 <USBD_SetConfig+0x7c>
 8005070:	e062      	b.n	8005138 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005072:	4b38      	ldr	r3, [pc, #224]	; (8005154 <USBD_SetConfig+0x118>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01a      	beq.n	80050b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <USBD_SetConfig+0x118>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2203      	movs	r2, #3
 8005088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800508c:	4b31      	ldr	r3, [pc, #196]	; (8005154 <USBD_SetConfig+0x118>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff f9f4 	bl	8004480 <USBD_SetClassConfig>
 8005098:	4603      	mov	r3, r0
 800509a:	2b02      	cmp	r3, #2
 800509c:	d104      	bne.n	80050a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f931 	bl	8005308 <USBD_CtlError>
            return;
 80050a6:	e052      	b.n	800514e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f9f5 	bl	8005498 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80050ae:	e04e      	b.n	800514e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9f1 	bl	8005498 <USBD_CtlSendStatus>
        break;
 80050b6:	e04a      	b.n	800514e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80050b8:	4b26      	ldr	r3, [pc, #152]	; (8005154 <USBD_SetConfig+0x118>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d112      	bne.n	80050e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <USBD_SetConfig+0x118>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80050d2:	4b20      	ldr	r3, [pc, #128]	; (8005154 <USBD_SetConfig+0x118>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff f9f0 	bl	80044be <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9da 	bl	8005498 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80050e4:	e033      	b.n	800514e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <USBD_SetConfig+0x118>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d01d      	beq.n	8005130 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7ff f9de 	bl	80044be <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <USBD_SetConfig+0x118>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <USBD_SetConfig+0x118>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff f9b4 	bl	8004480 <USBD_SetClassConfig>
 8005118:	4603      	mov	r3, r0
 800511a:	2b02      	cmp	r3, #2
 800511c:	d104      	bne.n	8005128 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8f1 	bl	8005308 <USBD_CtlError>
            return;
 8005126:	e012      	b.n	800514e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f9b5 	bl	8005498 <USBD_CtlSendStatus>
        break;
 800512e:	e00e      	b.n	800514e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f9b1 	bl	8005498 <USBD_CtlSendStatus>
        break;
 8005136:	e00a      	b.n	800514e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8e4 	bl	8005308 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <USBD_SetConfig+0x118>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff f9b9 	bl	80044be <USBD_ClrClassConfig>
        break;
 800514c:	bf00      	nop
    }
  }
}
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200001ec 	.word	0x200001ec

08005158 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	88db      	ldrh	r3, [r3, #6]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d004      	beq.n	8005174 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800516a:	6839      	ldr	r1, [r7, #0]
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8cb 	bl	8005308 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005172:	e021      	b.n	80051b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517a:	2b01      	cmp	r3, #1
 800517c:	db17      	blt.n	80051ae <USBD_GetConfig+0x56>
 800517e:	2b02      	cmp	r3, #2
 8005180:	dd02      	ble.n	8005188 <USBD_GetConfig+0x30>
 8005182:	2b03      	cmp	r3, #3
 8005184:	d00b      	beq.n	800519e <USBD_GetConfig+0x46>
 8005186:	e012      	b.n	80051ae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3308      	adds	r3, #8
 8005192:	2201      	movs	r2, #1
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f920 	bl	80053dc <USBD_CtlSendData>
        break;
 800519c:	e00c      	b.n	80051b8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3304      	adds	r3, #4
 80051a2:	2201      	movs	r2, #1
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f918 	bl	80053dc <USBD_CtlSendData>
        break;
 80051ac:	e004      	b.n	80051b8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f8a9 	bl	8005308 <USBD_CtlError>
        break;
 80051b6:	bf00      	nop
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d0:	3b01      	subs	r3, #1
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d81e      	bhi.n	8005214 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	88db      	ldrh	r3, [r3, #6]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d004      	beq.n	80051e8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f891 	bl	8005308 <USBD_CtlError>
        break;
 80051e6:	e01a      	b.n	800521e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f043 0202 	orr.w	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	330c      	adds	r3, #12
 8005208:	2202      	movs	r2, #2
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8e5 	bl	80053dc <USBD_CtlSendData>
      break;
 8005212:	e004      	b.n	800521e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f876 	bl	8005308 <USBD_CtlError>
      break;
 800521c:	bf00      	nop
  }
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	885b      	ldrh	r3, [r3, #2]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d106      	bne.n	8005246 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f929 	bl	8005498 <USBD_CtlSendStatus>
  }
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525e:	3b01      	subs	r3, #1
 8005260:	2b02      	cmp	r3, #2
 8005262:	d80b      	bhi.n	800527c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	885b      	ldrh	r3, [r3, #2]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d10c      	bne.n	8005286 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f90f 	bl	8005498 <USBD_CtlSendStatus>
      }
      break;
 800527a:	e004      	b.n	8005286 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f842 	bl	8005308 <USBD_CtlError>
      break;
 8005284:	e000      	b.n	8005288 <USBD_ClrFeature+0x3a>
      break;
 8005286:	bf00      	nop
  }
}
 8005288:	bf00      	nop
 800528a:	3708      	adds	r7, #8
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781a      	ldrb	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	785a      	ldrb	r2, [r3, #1]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	3302      	adds	r3, #2
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3303      	adds	r3, #3
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	b29b      	uxth	r3, r3
 80052be:	4413      	add	r3, r2
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	3304      	adds	r3, #4
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	3305      	adds	r3, #5
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	b29b      	uxth	r3, r3
 80052da:	4413      	add	r3, r2
 80052dc:	b29a      	uxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	3306      	adds	r3, #6
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	3307      	adds	r3, #7
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	4413      	add	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	80da      	strh	r2, [r3, #6]

}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005312:	2180      	movs	r1, #128	; 0x80
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fe97 	bl	8007048 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800531a:	2100      	movs	r1, #0
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f001 fe93 	bl	8007048 <USBD_LL_StallEP>
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d032      	beq.n	80053a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f834 	bl	80053ae <USBD_GetLen>
 8005346:	4603      	mov	r3, r0
 8005348:	3301      	adds	r3, #1
 800534a:	b29b      	uxth	r3, r3
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	75fa      	strb	r2, [r7, #23]
 800535a:	461a      	mov	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4413      	add	r3, r2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	75fa      	strb	r2, [r7, #23]
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	2203      	movs	r2, #3
 8005374:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005376:	e012      	b.n	800539e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	60fa      	str	r2, [r7, #12]
 800537e:	7dfa      	ldrb	r2, [r7, #23]
 8005380:	1c51      	adds	r1, r2, #1
 8005382:	75f9      	strb	r1, [r7, #23]
 8005384:	4611      	mov	r1, r2
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	440a      	add	r2, r1
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	75fa      	strb	r2, [r7, #23]
 8005394:	461a      	mov	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	4413      	add	r3, r2
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e8      	bne.n	8005378 <USBD_GetString+0x4e>
    }
  }
}
 80053a6:	bf00      	nop
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80053ba:	e005      	b.n	80053c8 <USBD_GetLen+0x1a>
  {
    len++;
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	3301      	adds	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3301      	adds	r3, #1
 80053c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f5      	bne.n	80053bc <USBD_GetLen+0xe>
  }

  return len;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80053f8:	88fa      	ldrh	r2, [r7, #6]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80053fe:	88fb      	ldrh	r3, [r7, #6]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	2100      	movs	r1, #0
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f001 fea1 	bl	800714c <USBD_LL_Transmit>

  return USBD_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	2100      	movs	r1, #0
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f001 fe8f 	bl	800714c <USBD_LL_Transmit>

  return USBD_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2203      	movs	r2, #3
 800544a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	2100      	movs	r1, #0
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f001 fe94 	bl	8007192 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	2100      	movs	r1, #0
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f001 fe82 	bl	8007192 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2204      	movs	r2, #4
 80054a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80054a8:	2300      	movs	r3, #0
 80054aa:	2200      	movs	r2, #0
 80054ac:	2100      	movs	r1, #0
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 fe4c 	bl	800714c <USBD_LL_Transmit>

  return USBD_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2205      	movs	r2, #5
 80054ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054ce:	2300      	movs	r3, #0
 80054d0:	2200      	movs	r2, #0
 80054d2:	2100      	movs	r1, #0
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fe5c 	bl	8007192 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <NRF24_DelayMicroSeconds+0x38>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0a      	ldr	r2, [pc, #40]	; (8005520 <NRF24_DelayMicroSeconds+0x3c>)
 80054f6:	fba2 2303 	umull	r2, r3, r2, r3
 80054fa:	0c9a      	lsrs	r2, r3, #18
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8005504:	bf00      	nop
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1e5a      	subs	r2, r3, #1
 800550a:	60fa      	str	r2, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1fa      	bne.n	8005506 <NRF24_DelayMicroSeconds+0x22>
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	200000e8 	.word	0x200000e8
 8005520:	165e9f81 	.word	0x165e9f81

08005524 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d008      	beq.n	8005544 <NRF24_csn+0x20>
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <NRF24_csn+0x38>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <NRF24_csn+0x3c>)
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2201      	movs	r2, #1
 800553c:	4619      	mov	r1, r3
 800553e:	f7fb f8f9 	bl	8000734 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8005542:	e007      	b.n	8005554 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <NRF24_csn+0x38>)
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <NRF24_csn+0x3c>)
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	2200      	movs	r2, #0
 800554e:	4619      	mov	r1, r3
 8005550:	f7fb f8f0 	bl	8000734 <HAL_GPIO_WritePin>
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	200001fc 	.word	0x200001fc
 8005560:	20000200 	.word	0x20000200

08005564 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <NRF24_ce+0x20>
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <NRF24_ce+0x38>)
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <NRF24_ce+0x3c>)
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	4619      	mov	r1, r3
 800557e:	f7fb f8d9 	bl	8000734 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8005582:	e007      	b.n	8005594 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <NRF24_ce+0x38>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <NRF24_ce+0x3c>)
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	4619      	mov	r1, r3
 8005590:	f7fb f8d0 	bl	8000734 <HAL_GPIO_WritePin>
}
 8005594:	bf00      	nop
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	200001fc 	.word	0x200001fc
 80055a0:	20000202 	.word	0x20000202

080055a4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80055ae:	2000      	movs	r0, #0
 80055b0:	f7ff ffb8 	bl	8005524 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80055be:	f107 010c 	add.w	r1, r7, #12
 80055c2:	2364      	movs	r3, #100	; 0x64
 80055c4:	2201      	movs	r2, #1
 80055c6:	480a      	ldr	r0, [pc, #40]	; (80055f0 <NRF24_read_register+0x4c>)
 80055c8:	f7fc fccd 	bl	8001f66 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80055cc:	f107 030c 	add.w	r3, r7, #12
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	2364      	movs	r3, #100	; 0x64
 80055d4:	2201      	movs	r2, #1
 80055d6:	4806      	ldr	r0, [pc, #24]	; (80055f0 <NRF24_read_register+0x4c>)
 80055d8:	f7fc fdf9 	bl	80021ce <HAL_SPI_Receive>
	retData = spiBuf[1];
 80055dc:	7b7b      	ldrb	r3, [r7, #13]
 80055de:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80055e0:	2001      	movs	r0, #1
 80055e2:	f7ff ff9f 	bl	8005524 <NRF24_csn>
	return retData;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000204 	.word	0x20000204

080055f4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	6039      	str	r1, [r7, #0]
 80055fe:	71fb      	strb	r3, [r7, #7]
 8005600:	4613      	mov	r3, r2
 8005602:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005604:	2000      	movs	r0, #0
 8005606:	f7ff ff8d 	bl	8005524 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	b2db      	uxtb	r3, r3
 8005612:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8005614:	f107 010c 	add.w	r1, r7, #12
 8005618:	2364      	movs	r3, #100	; 0x64
 800561a:	2201      	movs	r2, #1
 800561c:	4808      	ldr	r0, [pc, #32]	; (8005640 <NRF24_read_registerN+0x4c>)
 800561e:	f7fc fca2 	bl	8001f66 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8005622:	79bb      	ldrb	r3, [r7, #6]
 8005624:	b29a      	uxth	r2, r3
 8005626:	2364      	movs	r3, #100	; 0x64
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	4805      	ldr	r0, [pc, #20]	; (8005640 <NRF24_read_registerN+0x4c>)
 800562c:	f7fc fdcf 	bl	80021ce <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8005630:	2001      	movs	r0, #1
 8005632:	f7ff ff77 	bl	8005524 <NRF24_csn>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000204 	.word	0x20000204

08005644 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	460a      	mov	r2, r1
 800564e:	71fb      	strb	r3, [r7, #7]
 8005650:	4613      	mov	r3, r2
 8005652:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005654:	2000      	movs	r0, #0
 8005656:	f7ff ff65 	bl	8005524 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	f043 0320 	orr.w	r3, r3, #32
 8005660:	b2db      	uxtb	r3, r3
 8005662:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8005664:	79bb      	ldrb	r3, [r7, #6]
 8005666:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8005668:	f107 010c 	add.w	r1, r7, #12
 800566c:	2364      	movs	r3, #100	; 0x64
 800566e:	2202      	movs	r2, #2
 8005670:	4804      	ldr	r0, [pc, #16]	; (8005684 <NRF24_write_register+0x40>)
 8005672:	f7fc fc78 	bl	8001f66 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8005676:	2001      	movs	r0, #1
 8005678:	f7ff ff54 	bl	8005524 <NRF24_csn>
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000204 	.word	0x20000204

08005688 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
 8005694:	4613      	mov	r3, r2
 8005696:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8005698:	2000      	movs	r0, #0
 800569a:	f7ff ff43 	bl	8005524 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	f043 0320 	orr.w	r3, r3, #32
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80056a8:	f107 010c 	add.w	r1, r7, #12
 80056ac:	2364      	movs	r3, #100	; 0x64
 80056ae:	2201      	movs	r2, #1
 80056b0:	4808      	ldr	r0, [pc, #32]	; (80056d4 <NRF24_write_registerN+0x4c>)
 80056b2:	f7fc fc58 	bl	8001f66 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80056b6:	79bb      	ldrb	r3, [r7, #6]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	2364      	movs	r3, #100	; 0x64
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	4805      	ldr	r0, [pc, #20]	; (80056d4 <NRF24_write_registerN+0x4c>)
 80056c0:	f7fc fc51 	bl	8001f66 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80056c4:	2001      	movs	r0, #1
 80056c6:	f7ff ff2d 	bl	8005524 <NRF24_csn>
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000204 	.word	0x20000204

080056d8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80056e4:	f000 fa06 	bl	8005af4 <NRF24_getPayloadSize>
 80056e8:	4603      	mov	r3, r0
 80056ea:	461a      	mov	r2, r3
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d303      	bcc.n	80056fa <NRF24_read_payload+0x22>
 80056f2:	f000 f9ff 	bl	8005af4 <NRF24_getPayloadSize>
 80056f6:	4603      	mov	r3, r0
 80056f8:	e000      	b.n	80056fc <NRF24_read_payload+0x24>
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80056fe:	2000      	movs	r0, #0
 8005700:	f7ff ff10 	bl	8005524 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8005704:	2361      	movs	r3, #97	; 0x61
 8005706:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8005708:	f107 010e 	add.w	r1, r7, #14
 800570c:	2364      	movs	r3, #100	; 0x64
 800570e:	2201      	movs	r2, #1
 8005710:	4808      	ldr	r0, [pc, #32]	; (8005734 <NRF24_read_payload+0x5c>)
 8005712:	f7fc fc28 	bl	8001f66 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	b29a      	uxth	r2, r3
 800571a:	2364      	movs	r3, #100	; 0x64
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4805      	ldr	r0, [pc, #20]	; (8005734 <NRF24_read_payload+0x5c>)
 8005720:	f7fc fd55 	bl	80021ce <HAL_SPI_Receive>
	NRF24_csn(1);
 8005724:	2001      	movs	r0, #1
 8005726:	f7ff fefd 	bl	8005524 <NRF24_csn>
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000204 	.word	0x20000204

08005738 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800573c:	21ff      	movs	r1, #255	; 0xff
 800573e:	20e1      	movs	r0, #225	; 0xe1
 8005740:	f7ff ff80 	bl	8005644 <NRF24_write_register>
}
 8005744:	bf00      	nop
 8005746:	bd80      	pop	{r7, pc}

08005748 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800574c:	21ff      	movs	r1, #255	; 0xff
 800574e:	20e2      	movs	r0, #226	; 0xe2
 8005750:	f7ff ff78 	bl	8005644 <NRF24_write_register>
}
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}

08005758 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800575e:	2007      	movs	r0, #7
 8005760:	f7ff ff20 	bl	80055a4 <NRF24_read_register>
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8005768:	79fb      	ldrb	r3, [r7, #7]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8005774:	b082      	sub	sp, #8
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	61fb      	str	r3, [r7, #28]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8005788:	4b66      	ldr	r3, [pc, #408]	; (8005924 <NRF24_begin+0x1b0>)
 800578a:	4618      	mov	r0, r3
 800578c:	f107 031c 	add.w	r3, r7, #28
 8005790:	2258      	movs	r2, #88	; 0x58
 8005792:	4619      	mov	r1, r3
 8005794:	f001 fee6 	bl	8007564 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8005798:	4a63      	ldr	r2, [pc, #396]	; (8005928 <NRF24_begin+0x1b4>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800579e:	4a63      	ldr	r2, [pc, #396]	; (800592c <NRF24_begin+0x1b8>)
 80057a0:	887b      	ldrh	r3, [r7, #2]
 80057a2:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80057a4:	4a62      	ldr	r2, [pc, #392]	; (8005930 <NRF24_begin+0x1bc>)
 80057a6:	883b      	ldrh	r3, [r7, #0]
 80057a8:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80057aa:	2001      	movs	r0, #1
 80057ac:	f7ff feba 	bl	8005524 <NRF24_csn>
	NRF24_ce(0);
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7ff fed7 	bl	8005564 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80057b6:	2005      	movs	r0, #5
 80057b8:	f7fa fd32 	bl	8000220 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80057bc:	2108      	movs	r1, #8
 80057be:	2000      	movs	r0, #0
 80057c0:	f7ff ff40 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80057c4:	213f      	movs	r1, #63	; 0x3f
 80057c6:	2001      	movs	r0, #1
 80057c8:	f7ff ff3c 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80057cc:	2103      	movs	r1, #3
 80057ce:	2002      	movs	r0, #2
 80057d0:	f7ff ff38 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80057d4:	2103      	movs	r1, #3
 80057d6:	2003      	movs	r0, #3
 80057d8:	f7ff ff34 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80057dc:	2103      	movs	r1, #3
 80057de:	2004      	movs	r0, #4
 80057e0:	f7ff ff30 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80057e4:	2102      	movs	r1, #2
 80057e6:	2005      	movs	r0, #5
 80057e8:	f7ff ff2c 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80057ec:	210f      	movs	r1, #15
 80057ee:	2006      	movs	r0, #6
 80057f0:	f7ff ff28 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80057f4:	210e      	movs	r1, #14
 80057f6:	2007      	movs	r0, #7
 80057f8:	f7ff ff24 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80057fc:	2100      	movs	r1, #0
 80057fe:	2008      	movs	r0, #8
 8005800:	f7ff ff20 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8005804:	2100      	movs	r1, #0
 8005806:	2009      	movs	r0, #9
 8005808:	f7ff ff1c 	bl	8005644 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800580c:	23e7      	movs	r3, #231	; 0xe7
 800580e:	733b      	strb	r3, [r7, #12]
 8005810:	23e7      	movs	r3, #231	; 0xe7
 8005812:	72fb      	strb	r3, [r7, #11]
 8005814:	23e7      	movs	r3, #231	; 0xe7
 8005816:	72bb      	strb	r3, [r7, #10]
 8005818:	23e7      	movs	r3, #231	; 0xe7
 800581a:	727b      	strb	r3, [r7, #9]
 800581c:	23e7      	movs	r3, #231	; 0xe7
 800581e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8005820:	f107 0308 	add.w	r3, r7, #8
 8005824:	2205      	movs	r2, #5
 8005826:	4619      	mov	r1, r3
 8005828:	200a      	movs	r0, #10
 800582a:	f7ff ff2d 	bl	8005688 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800582e:	23c2      	movs	r3, #194	; 0xc2
 8005830:	733b      	strb	r3, [r7, #12]
 8005832:	23c2      	movs	r3, #194	; 0xc2
 8005834:	72fb      	strb	r3, [r7, #11]
 8005836:	23c2      	movs	r3, #194	; 0xc2
 8005838:	72bb      	strb	r3, [r7, #10]
 800583a:	23c2      	movs	r3, #194	; 0xc2
 800583c:	727b      	strb	r3, [r7, #9]
 800583e:	23c2      	movs	r3, #194	; 0xc2
 8005840:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	2205      	movs	r2, #5
 8005848:	4619      	mov	r1, r3
 800584a:	200b      	movs	r0, #11
 800584c:	f7ff ff1c 	bl	8005688 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8005850:	21c3      	movs	r1, #195	; 0xc3
 8005852:	200c      	movs	r0, #12
 8005854:	f7ff fef6 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8005858:	21c4      	movs	r1, #196	; 0xc4
 800585a:	200d      	movs	r0, #13
 800585c:	f7ff fef2 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8005860:	21c5      	movs	r1, #197	; 0xc5
 8005862:	200e      	movs	r0, #14
 8005864:	f7ff feee 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8005868:	21c6      	movs	r1, #198	; 0xc6
 800586a:	200f      	movs	r0, #15
 800586c:	f7ff feea 	bl	8005644 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8005870:	23e7      	movs	r3, #231	; 0xe7
 8005872:	733b      	strb	r3, [r7, #12]
 8005874:	23e7      	movs	r3, #231	; 0xe7
 8005876:	72fb      	strb	r3, [r7, #11]
 8005878:	23e7      	movs	r3, #231	; 0xe7
 800587a:	72bb      	strb	r3, [r7, #10]
 800587c:	23e7      	movs	r3, #231	; 0xe7
 800587e:	727b      	strb	r3, [r7, #9]
 8005880:	23e7      	movs	r3, #231	; 0xe7
 8005882:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8005884:	f107 0308 	add.w	r3, r7, #8
 8005888:	2205      	movs	r2, #5
 800588a:	4619      	mov	r1, r3
 800588c:	2010      	movs	r0, #16
 800588e:	f7ff fefb 	bl	8005688 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8005892:	2100      	movs	r1, #0
 8005894:	2011      	movs	r0, #17
 8005896:	f7ff fed5 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800589a:	2100      	movs	r1, #0
 800589c:	2012      	movs	r0, #18
 800589e:	f7ff fed1 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80058a2:	2100      	movs	r1, #0
 80058a4:	2013      	movs	r0, #19
 80058a6:	f7ff fecd 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80058aa:	2100      	movs	r1, #0
 80058ac:	2014      	movs	r0, #20
 80058ae:	f7ff fec9 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80058b2:	2100      	movs	r1, #0
 80058b4:	2015      	movs	r0, #21
 80058b6:	f7ff fec5 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80058ba:	2100      	movs	r1, #0
 80058bc:	2016      	movs	r0, #22
 80058be:	f7ff fec1 	bl	8005644 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 80058c2:	f000 faa5 	bl	8005e10 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80058c6:	2100      	movs	r1, #0
 80058c8:	201c      	movs	r0, #28
 80058ca:	f7ff febb 	bl	8005644 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80058ce:	2100      	movs	r1, #0
 80058d0:	201d      	movs	r0, #29
 80058d2:	f7ff feb7 	bl	8005644 <NRF24_write_register>
	printRadioSettings();
 80058d6:	f000 fab5 	bl	8005e44 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80058da:	210f      	movs	r1, #15
 80058dc:	200f      	movs	r0, #15
 80058de:	f000 f8c3 	bl	8005a68 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80058e2:	2003      	movs	r0, #3
 80058e4:	f000 f9a5 	bl	8005c32 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80058e8:	2001      	movs	r0, #1
 80058ea:	f000 f9db 	bl	8005ca4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80058ee:	2002      	movs	r0, #2
 80058f0:	f000 fa1e 	bl	8005d30 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80058f4:	f000 f970 	bl	8005bd8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80058f8:	2020      	movs	r0, #32
 80058fa:	f000 f8e5 	bl	8005ac8 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 80058fe:	f000 fa7e 	bl	8005dfe <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8005902:	204c      	movs	r0, #76	; 0x4c
 8005904:	f000 f8cb 	bl	8005a9e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8005908:	f7ff ff16 	bl	8005738 <NRF24_flush_tx>
	NRF24_flush_rx();
 800590c:	f7ff ff1c 	bl	8005748 <NRF24_flush_rx>

	NRF24_powerDown();
 8005910:	f000 fa36 	bl	8005d80 <NRF24_powerDown>

}
 8005914:	bf00      	nop
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800591e:	b002      	add	sp, #8
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000204 	.word	0x20000204
 8005928:	200001fc 	.word	0x200001fc
 800592c:	20000200 	.word	0x20000200
 8005930:	20000202 	.word	0x20000202

08005934 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8005934:	b598      	push	{r3, r4, r7, lr}
 8005936:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8005938:	2000      	movs	r0, #0
 800593a:	f7ff fe33 	bl	80055a4 <NRF24_read_register>
 800593e:	4603      	mov	r3, r0
 8005940:	f043 0303 	orr.w	r3, r3, #3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4619      	mov	r1, r3
 8005948:	2000      	movs	r0, #0
 800594a:	f7ff fe7b 	bl	8005644 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <NRF24_startListening+0x44>)
 8005950:	cb18      	ldmia	r3, {r3, r4}
 8005952:	4323      	orrs	r3, r4
 8005954:	d004      	beq.n	8005960 <NRF24_startListening+0x2c>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8005956:	2205      	movs	r2, #5
 8005958:	4907      	ldr	r1, [pc, #28]	; (8005978 <NRF24_startListening+0x44>)
 800595a:	200a      	movs	r0, #10
 800595c:	f7ff fe94 	bl	8005688 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8005960:	f7ff feea 	bl	8005738 <NRF24_flush_tx>
	NRF24_flush_rx();
 8005964:	f7ff fef0 	bl	8005748 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8005968:	2001      	movs	r0, #1
 800596a:	f7ff fdfb 	bl	8005564 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 800596e:	2096      	movs	r0, #150	; 0x96
 8005970:	f7ff fdb8 	bl	80054e4 <NRF24_DelayMicroSeconds>
}
 8005974:	bf00      	nop
 8005976:	bd98      	pop	{r3, r4, r7, pc}
 8005978:	200001f0 	.word	0x200001f0

0800597c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8005980:	2000      	movs	r0, #0
 8005982:	f000 fa0c 	bl	8005d9e <NRF24_availablePipe>
 8005986:	4603      	mov	r3, r0
}
 8005988:	4618      	mov	r0, r3
 800598a:	bd80      	pop	{r7, pc}

0800598c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff fe9b 	bl	80056d8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80059a2:	2017      	movs	r0, #23
 80059a4:	f7ff fdfe 	bl	80055a4 <NRF24_read_register>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80059b0:	f7ff feca 	bl	8005748 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80059b4:	f000 f8a8 	bl	8005b08 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4601      	mov	r1, r0
 80059d4:	e9c7 2300 	strd	r2, r3, [r7]
 80059d8:	460b      	mov	r3, r1
 80059da:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80059e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80059e6:	4a1c      	ldr	r2, [pc, #112]	; (8005a58 <NRF24_openReadingPipe+0x8c>)
 80059e8:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d82d      	bhi.n	8005a4e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d808      	bhi.n	8005a0a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <NRF24_openReadingPipe+0x90>)
 80059fc:	5cd3      	ldrb	r3, [r2, r3]
 80059fe:	4639      	mov	r1, r7
 8005a00:	2205      	movs	r2, #5
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fe40 	bl	8005688 <NRF24_write_registerN>
 8005a08:	e007      	b.n	8005a1a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <NRF24_openReadingPipe+0x90>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	4639      	mov	r1, r7
 8005a12:	2201      	movs	r2, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fe37 	bl	8005688 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	4a10      	ldr	r2, [pc, #64]	; (8005a60 <NRF24_openReadingPipe+0x94>)
 8005a1e:	5cd2      	ldrb	r2, [r2, r3]
 8005a20:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <NRF24_openReadingPipe+0x98>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7ff fe0c 	bl	8005644 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8005a2c:	2002      	movs	r0, #2
 8005a2e:	f7ff fdb9 	bl	80055a4 <NRF24_read_register>
 8005a32:	4603      	mov	r3, r0
 8005a34:	b25a      	sxtb	r2, r3
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	2101      	movs	r1, #1
 8005a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	4313      	orrs	r3, r2
 8005a42:	b25b      	sxtb	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	4619      	mov	r1, r3
 8005a48:	2002      	movs	r0, #2
 8005a4a:	f7ff fdfb 	bl	8005644 <NRF24_write_register>
	}

}
 8005a4e:	bf00      	nop
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200001f0 	.word	0x200001f0
 8005a5c:	0800836c 	.word	0x0800836c
 8005a60:	08008374 	.word	0x08008374
 8005a64:	200001f8 	.word	0x200001f8

08005a68 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	460a      	mov	r2, r1
 8005a72:	71fb      	strb	r3, [r7, #7]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	b25a      	sxtb	r2, r3
 8005a7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	b25b      	sxtb	r3, r3
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	2004      	movs	r0, #4
 8005a92:	f7ff fdd7 	bl	8005644 <NRF24_write_register>
}
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8005aa8:	237f      	movs	r3, #127	; 0x7f
 8005aaa:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	bf28      	it	cs
 8005ab4:	4613      	movcs	r3, r2
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	4619      	mov	r1, r3
 8005aba:	2005      	movs	r0, #5
 8005abc:	f7ff fdc2 	bl	8005644 <NRF24_write_register>
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8005ad6:	7bfa      	ldrb	r2, [r7, #15]
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	4293      	cmp	r3, r2
 8005adc:	bf28      	it	cs
 8005ade:	4613      	movcs	r3, r2
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <NRF24_setPayloadSize+0x28>)
 8005ae4:	701a      	strb	r2, [r3, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	200001f8 	.word	0x200001f8

08005af4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
	return payload_size;
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <NRF24_getPayloadSize+0x10>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr
 8005b04:	200001f8 	.word	0x200001f8

08005b08 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8005b0c:	2060      	movs	r0, #96	; 0x60
 8005b0e:	f7ff fd49 	bl	80055a4 <NRF24_read_register>
 8005b12:	4603      	mov	r3, r0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005b1c:	201d      	movs	r0, #29
 8005b1e:	f7ff fd41 	bl	80055a4 <NRF24_read_register>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f043 0306 	orr.w	r3, r3, #6
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	201d      	movs	r0, #29
 8005b2e:	f7ff fd89 	bl	8005644 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8005b32:	201d      	movs	r0, #29
 8005b34:	f7ff fd36 	bl	80055a4 <NRF24_read_register>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10c      	bne.n	8005b58 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005b3e:	f000 f967 	bl	8005e10 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8005b42:	201d      	movs	r0, #29
 8005b44:	f7ff fd2e 	bl	80055a4 <NRF24_read_register>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f043 0306 	orr.w	r3, r3, #6
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	4619      	mov	r1, r3
 8005b52:	201d      	movs	r0, #29
 8005b54:	f7ff fd76 	bl	8005644 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005b58:	201c      	movs	r0, #28
 8005b5a:	f7ff fd23 	bl	80055a4 <NRF24_read_register>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f043 0303 	orr.w	r3, r3, #3
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	4619      	mov	r1, r3
 8005b68:	201c      	movs	r0, #28
 8005b6a:	f7ff fd6b 	bl	8005644 <NRF24_write_register>
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005b78:	201d      	movs	r0, #29
 8005b7a:	f7ff fd13 	bl	80055a4 <NRF24_read_register>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f043 0304 	orr.w	r3, r3, #4
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4619      	mov	r1, r3
 8005b88:	201d      	movs	r0, #29
 8005b8a:	f7ff fd5b 	bl	8005644 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8005b8e:	201d      	movs	r0, #29
 8005b90:	f7ff fd08 	bl	80055a4 <NRF24_read_register>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8005b9a:	f000 f939 	bl	8005e10 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8005b9e:	201d      	movs	r0, #29
 8005ba0:	f7ff fd00 	bl	80055a4 <NRF24_read_register>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	201d      	movs	r0, #29
 8005bb0:	f7ff fd48 	bl	8005644 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8005bb4:	201c      	movs	r0, #28
 8005bb6:	f7ff fcf5 	bl	80055a4 <NRF24_read_register>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	201c      	movs	r0, #28
 8005bc6:	f7ff fd3d 	bl	8005644 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8005bca:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <NRF24_enableDynamicPayloads+0x60>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	701a      	strb	r2, [r3, #0]

}
 8005bd0:	bf00      	nop
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	200001f9 	.word	0x200001f9

08005bd8 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8005bdc:	201d      	movs	r0, #29
 8005bde:	f7ff fce1 	bl	80055a4 <NRF24_read_register>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	4619      	mov	r1, r3
 8005bec:	201d      	movs	r0, #29
 8005bee:	f7ff fd29 	bl	8005644 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	201c      	movs	r0, #28
 8005bf6:	f7ff fd25 	bl	8005644 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8005bfa:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <NRF24_disableDynamicPayloads+0x2c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
}
 8005c00:	bf00      	nop
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200001f9 	.word	0x200001f9

08005c08 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8005c18:	213f      	movs	r1, #63	; 0x3f
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f7ff fd12 	bl	8005644 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8005c20:	e003      	b.n	8005c2a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8005c22:	2100      	movs	r1, #0
 8005c24:	2001      	movs	r0, #1
 8005c26:	f7ff fd0d 	bl	8005644 <NRF24_write_register>
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	4603      	mov	r3, r0
 8005c3a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005c3c:	2006      	movs	r0, #6
 8005c3e:	f7ff fcb1 	bl	80055a4 <NRF24_read_register>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
 8005c48:	f023 0306 	bic.w	r3, r3, #6
 8005c4c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d104      	bne.n	8005c5e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	f043 0306 	orr.w	r3, r3, #6
 8005c5a:	73fb      	strb	r3, [r7, #15]
 8005c5c:	e019      	b.n	8005c92 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d104      	bne.n	8005c6e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	f043 0304 	orr.w	r3, r3, #4
 8005c6a:	73fb      	strb	r3, [r7, #15]
 8005c6c:	e011      	b.n	8005c92 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d104      	bne.n	8005c7e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	e009      	b.n	8005c92 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d006      	beq.n	8005c92 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8005c84:	79fb      	ldrb	r3, [r7, #7]
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d103      	bne.n	8005c92 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	f043 0306 	orr.w	r3, r3, #6
 8005c90:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	4619      	mov	r1, r3
 8005c96:	2006      	movs	r0, #6
 8005c98:	f7ff fcd4 	bl	8005644 <NRF24_write_register>
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8005cb2:	2006      	movs	r0, #6
 8005cb4:	f7ff fc76 	bl	80055a4 <NRF24_read_register>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8005cbc:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <NRF24_setDataRate+0x88>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8005cc2:	7bbb      	ldrb	r3, [r7, #14]
 8005cc4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005cc8:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d107      	bne.n	8005ce0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8005cd0:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <NRF24_setDataRate+0x88>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8005cd6:	7bbb      	ldrb	r3, [r7, #14]
 8005cd8:	f043 0320 	orr.w	r3, r3, #32
 8005cdc:	73bb      	strb	r3, [r7, #14]
 8005cde:	e00d      	b.n	8005cfc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <NRF24_setDataRate+0x88>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8005cec:	7bbb      	ldrb	r3, [r7, #14]
 8005cee:	f043 0308 	orr.w	r3, r3, #8
 8005cf2:	73bb      	strb	r3, [r7, #14]
 8005cf4:	e002      	b.n	8005cfc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <NRF24_setDataRate+0x88>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	2006      	movs	r0, #6
 8005d02:	f7ff fc9f 	bl	8005644 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8005d06:	2006      	movs	r0, #6
 8005d08:	f7ff fc4c 	bl	80055a4 <NRF24_read_register>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	461a      	mov	r2, r3
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d102      	bne.n	8005d1c <NRF24_setDataRate+0x78>
  {
    result = true;
 8005d16:	2301      	movs	r3, #1
 8005d18:	73fb      	strb	r3, [r7, #15]
 8005d1a:	e002      	b.n	8005d22 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8005d1c:	4b03      	ldr	r3, [pc, #12]	; (8005d2c <NRF24_setDataRate+0x88>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	200001fa 	.word	0x200001fa

08005d30 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f7ff fc32 	bl	80055a4 <NRF24_read_register>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f023 030c 	bic.w	r3, r3, #12
 8005d46:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d104      	bne.n	8005d5e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	f043 0308 	orr.w	r3, r3, #8
 8005d5a:	73fb      	strb	r3, [r7, #15]
 8005d5c:	e007      	b.n	8005d6e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	f043 0308 	orr.w	r3, r3, #8
 8005d64:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	f043 0304 	orr.w	r3, r3, #4
 8005d6c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	4619      	mov	r1, r3
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7ff fc66 	bl	8005644 <NRF24_write_register>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8005d84:	2000      	movs	r0, #0
 8005d86:	f7ff fc0d 	bl	80055a4 <NRF24_read_register>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f023 0302 	bic.w	r3, r3, #2
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	4619      	mov	r1, r3
 8005d94:	2000      	movs	r0, #0
 8005d96:	f7ff fc55 	bl	8005644 <NRF24_write_register>
}
 8005d9a:	bf00      	nop
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b084      	sub	sp, #16
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8005da6:	f7ff fcd7 	bl	8005758 <NRF24_get_status>
 8005daa:	4603      	mov	r3, r0
 8005dac:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	bf14      	ite	ne
 8005db8:	2301      	movne	r3, #1
 8005dba:	2300      	moveq	r3, #0
 8005dbc:	73bb      	strb	r3, [r7, #14]

  if (result)
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8005dda:	2140      	movs	r1, #64	; 0x40
 8005ddc:	2007      	movs	r0, #7
 8005dde:	f7ff fc31 	bl	8005644 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8005dec:	2120      	movs	r1, #32
 8005dee:	2007      	movs	r0, #7
 8005df0:	f7ff fc28 	bl	8005644 <NRF24_write_register>
    }
  }
  return result;
 8005df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8005e02:	2170      	movs	r1, #112	; 0x70
 8005e04:	2007      	movs	r0, #7
 8005e06:	f7ff fc1d 	bl	8005644 <NRF24_write_register>
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8005e16:	2000      	movs	r0, #0
 8005e18:	f7ff fb84 	bl	8005524 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8005e1c:	2350      	movs	r3, #80	; 0x50
 8005e1e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8005e20:	2373      	movs	r3, #115	; 0x73
 8005e22:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8005e24:	1d39      	adds	r1, r7, #4
 8005e26:	2364      	movs	r3, #100	; 0x64
 8005e28:	2202      	movs	r2, #2
 8005e2a:	4805      	ldr	r0, [pc, #20]	; (8005e40 <NRF24_ACTIVATE_cmd+0x30>)
 8005e2c:	f7fc f89b 	bl	8001f66 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8005e30:	2001      	movs	r0, #1
 8005e32:	f7ff fb77 	bl	8005524 <NRF24_csn>
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000204 	.word	0x20000204

08005e44 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8005e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e46:	b0a1      	sub	sp, #132	; 0x84
 8005e48:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	4ab6      	ldr	r2, [pc, #728]	; (8006128 <printRadioSettings+0x2e4>)
 8005e50:	461c      	mov	r4, r3
 8005e52:	4615      	mov	r5, r2
 8005e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	8022      	strh	r2, [r4, #0]
 8005e66:	3402      	adds	r4, #2
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005e6c:	f107 0308 	add.w	r3, r7, #8
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fa f96b 	bl	800014c <strlen>
 8005e76:	4603      	mov	r3, r0
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	f107 0108 	add.w	r1, r7, #8
 8005e7e:	230a      	movs	r3, #10
 8005e80:	48aa      	ldr	r0, [pc, #680]	; (800612c <printRadioSettings+0x2e8>)
 8005e82:	f7fc fd76 	bl	8002972 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8005e86:	2000      	movs	r0, #0
 8005e88:	f7ff fb8c 	bl	80055a4 <NRF24_read_register>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8005e92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d020      	beq.n	8005ee0 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8005e9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <printRadioSettings+0x7e>
 8005eaa:	f107 0308 	add.w	r3, r7, #8
 8005eae:	4aa0      	ldr	r2, [pc, #640]	; (8006130 <printRadioSettings+0x2ec>)
 8005eb0:	461c      	mov	r4, r3
 8005eb2:	4615      	mov	r5, r2
 8005eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ebc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ec0:	e017      	b.n	8005ef2 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	4a9b      	ldr	r2, [pc, #620]	; (8006134 <printRadioSettings+0x2f0>)
 8005ec8:	461c      	mov	r4, r3
 8005eca:	4615      	mov	r5, r2
 8005ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ed0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ed4:	c403      	stmia	r4!, {r0, r1}
 8005ed6:	8022      	strh	r2, [r4, #0]
 8005ed8:	3402      	adds	r4, #2
 8005eda:	0c13      	lsrs	r3, r2, #16
 8005edc:	7023      	strb	r3, [r4, #0]
 8005ede:	e008      	b.n	8005ef2 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8005ee0:	f107 0308 	add.w	r3, r7, #8
 8005ee4:	4a94      	ldr	r2, [pc, #592]	; (8006138 <printRadioSettings+0x2f4>)
 8005ee6:	461c      	mov	r4, r3
 8005ee8:	4615      	mov	r5, r2
 8005eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005ef2:	f107 0308 	add.w	r3, r7, #8
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fa f928 	bl	800014c <strlen>
 8005efc:	4603      	mov	r3, r0
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	f107 0108 	add.w	r1, r7, #8
 8005f04:	230a      	movs	r3, #10
 8005f06:	4889      	ldr	r0, [pc, #548]	; (800612c <printRadioSettings+0x2e8>)
 8005f08:	f7fc fd33 	bl	8002972 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	f7ff fb49 	bl	80055a4 <NRF24_read_register>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f1c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfcc      	ite	gt
 8005f24:	2301      	movgt	r3, #1
 8005f26:	2300      	movle	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f30:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfcc      	ite	gt
 8005f38:	2301      	movgt	r3, #1
 8005f3a:	2300      	movle	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f44:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfcc      	ite	gt
 8005f4c:	2301      	movgt	r3, #1
 8005f4e:	2300      	movle	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f58:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bfcc      	ite	gt
 8005f60:	2301      	movgt	r3, #1
 8005f62:	2300      	movle	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f6c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bfcc      	ite	gt
 8005f74:	2301      	movgt	r3, #1
 8005f76:	2300      	movle	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005f7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005f80:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bfcc      	ite	gt
 8005f88:	2301      	movgt	r3, #1
 8005f8a:	2300      	movle	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f107 0008 	add.w	r0, r7, #8
 8005f92:	9303      	str	r3, [sp, #12]
 8005f94:	9402      	str	r4, [sp, #8]
 8005f96:	9101      	str	r1, [sp, #4]
 8005f98:	9200      	str	r2, [sp, #0]
 8005f9a:	4633      	mov	r3, r6
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4967      	ldr	r1, [pc, #412]	; (800613c <printRadioSettings+0x2f8>)
 8005fa0:	f001 faf4 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fa f8cf 	bl	800014c <strlen>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f107 0108 	add.w	r1, r7, #8
 8005fb6:	230a      	movs	r3, #10
 8005fb8:	485c      	ldr	r0, [pc, #368]	; (800612c <printRadioSettings+0x2e8>)
 8005fba:	f7fc fcda 	bl	8002972 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8005fbe:	2002      	movs	r0, #2
 8005fc0:	f7ff faf0 	bl	80055a4 <NRF24_read_register>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005fca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005fce:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	bfcc      	ite	gt
 8005fd6:	2301      	movgt	r3, #1
 8005fd8:	2300      	movle	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005fde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005fe2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfcc      	ite	gt
 8005fea:	2301      	movgt	r3, #1
 8005fec:	2300      	movle	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8005ff2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ff6:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	bfcc      	ite	gt
 8005ffe:	2301      	movgt	r3, #1
 8006000:	2300      	movle	r3, #0
 8006002:	b2db      	uxtb	r3, r3
 8006004:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006006:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800600a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfcc      	ite	gt
 8006012:	2301      	movgt	r3, #1
 8006014:	2300      	movle	r3, #0
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800601a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800601e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006022:	2b00      	cmp	r3, #0
 8006024:	bfcc      	ite	gt
 8006026:	2301      	movgt	r3, #1
 8006028:	2300      	movle	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800602e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006032:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfcc      	ite	gt
 800603a:	2301      	movgt	r3, #1
 800603c:	2300      	movle	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f107 0008 	add.w	r0, r7, #8
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	9402      	str	r4, [sp, #8]
 8006048:	9101      	str	r1, [sp, #4]
 800604a:	9200      	str	r2, [sp, #0]
 800604c:	4633      	mov	r3, r6
 800604e:	462a      	mov	r2, r5
 8006050:	493b      	ldr	r1, [pc, #236]	; (8006140 <printRadioSettings+0x2fc>)
 8006052:	f001 fa9b 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006056:	f107 0308 	add.w	r3, r7, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f7fa f876 	bl	800014c <strlen>
 8006060:	4603      	mov	r3, r0
 8006062:	b29a      	uxth	r2, r3
 8006064:	f107 0108 	add.w	r1, r7, #8
 8006068:	230a      	movs	r3, #10
 800606a:	4830      	ldr	r0, [pc, #192]	; (800612c <printRadioSettings+0x2e8>)
 800606c:	f7fc fc81 	bl	8002972 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8006070:	2003      	movs	r0, #3
 8006072:	f7ff fa97 	bl	80055a4 <NRF24_read_register>
 8006076:	4603      	mov	r3, r0
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8006080:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006084:	3302      	adds	r3, #2
 8006086:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800608a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800608e:	f107 0308 	add.w	r3, r7, #8
 8006092:	492c      	ldr	r1, [pc, #176]	; (8006144 <printRadioSettings+0x300>)
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fa79 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fa f854 	bl	800014c <strlen>
 80060a4:	4603      	mov	r3, r0
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f107 0108 	add.w	r1, r7, #8
 80060ac:	230a      	movs	r3, #10
 80060ae:	481f      	ldr	r0, [pc, #124]	; (800612c <printRadioSettings+0x2e8>)
 80060b0:	f7fc fc5f 	bl	8002972 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80060b4:	2005      	movs	r0, #5
 80060b6:	f7ff fa75 	bl	80055a4 <NRF24_read_register>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80060c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060c8:	f107 0308 	add.w	r3, r7, #8
 80060cc:	491e      	ldr	r1, [pc, #120]	; (8006148 <printRadioSettings+0x304>)
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa5c 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80060d4:	f107 0308 	add.w	r3, r7, #8
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fa f837 	bl	800014c <strlen>
 80060de:	4603      	mov	r3, r0
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	f107 0108 	add.w	r1, r7, #8
 80060e6:	230a      	movs	r3, #10
 80060e8:	4810      	ldr	r0, [pc, #64]	; (800612c <printRadioSettings+0x2e8>)
 80060ea:	f7fc fc42 	bl	8002972 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80060ee:	2006      	movs	r0, #6
 80060f0:	f7ff fa58 	bl	80055a4 <NRF24_read_register>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80060fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d024      	beq.n	8006150 <printRadioSettings+0x30c>
 8006106:	f107 0308 	add.w	r3, r7, #8
 800610a:	4a10      	ldr	r2, [pc, #64]	; (800614c <printRadioSettings+0x308>)
 800610c:	461c      	mov	r4, r3
 800610e:	4615      	mov	r5, r2
 8006110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006118:	6020      	str	r0, [r4, #0]
 800611a:	3404      	adds	r4, #4
 800611c:	8021      	strh	r1, [r4, #0]
 800611e:	3402      	adds	r4, #2
 8006120:	0c0b      	lsrs	r3, r1, #16
 8006122:	7023      	strb	r3, [r4, #0]
 8006124:	e023      	b.n	800616e <printRadioSettings+0x32a>
 8006126:	bf00      	nop
 8006128:	08007dc8 	.word	0x08007dc8
 800612c:	2000025c 	.word	0x2000025c
 8006130:	08007dfc 	.word	0x08007dfc
 8006134:	08007e18 	.word	0x08007e18
 8006138:	08007e34 	.word	0x08007e34
 800613c:	08007e48 	.word	0x08007e48
 8006140:	08007e8c 	.word	0x08007e8c
 8006144:	08007ed8 	.word	0x08007ed8
 8006148:	08007ef4 	.word	0x08007ef4
 800614c:	08007f08 	.word	0x08007f08
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8006150:	f107 0308 	add.w	r3, r7, #8
 8006154:	4a29      	ldr	r2, [pc, #164]	; (80061fc <printRadioSettings+0x3b8>)
 8006156:	461c      	mov	r4, r3
 8006158:	4615      	mov	r5, r2
 800615a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800615c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800615e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006162:	6020      	str	r0, [r4, #0]
 8006164:	3404      	adds	r4, #4
 8006166:	8021      	strh	r1, [r4, #0]
 8006168:	3402      	adds	r4, #2
 800616a:	0c0b      	lsrs	r3, r1, #16
 800616c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800616e:	f107 0308 	add.w	r3, r7, #8
 8006172:	4618      	mov	r0, r3
 8006174:	f7f9 ffea 	bl	800014c <strlen>
 8006178:	4603      	mov	r3, r0
 800617a:	b29a      	uxth	r2, r3
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	230a      	movs	r3, #10
 8006182:	481f      	ldr	r0, [pc, #124]	; (8006200 <printRadioSettings+0x3bc>)
 8006184:	f7fc fbf5 	bl	8002972 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8006188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800618c:	f003 0306 	and.w	r3, r3, #6
 8006190:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8006194:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800619e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <printRadioSettings+0x376>
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	4a16      	ldr	r2, [pc, #88]	; (8006204 <printRadioSettings+0x3c0>)
 80061ac:	461c      	mov	r4, r3
 80061ae:	4615      	mov	r5, r2
 80061b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	e037      	b.n	800622a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80061ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d109      	bne.n	80061d6 <printRadioSettings+0x392>
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	4a10      	ldr	r2, [pc, #64]	; (8006208 <printRadioSettings+0x3c4>)
 80061c8:	461c      	mov	r4, r3
 80061ca:	4615      	mov	r5, r2
 80061cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	e029      	b.n	800622a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80061d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d118      	bne.n	8006210 <printRadioSettings+0x3cc>
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <printRadioSettings+0x3c8>)
 80061e4:	461c      	mov	r4, r3
 80061e6:	4615      	mov	r5, r2
 80061e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	8022      	strh	r2, [r4, #0]
 80061f2:	3402      	adds	r4, #2
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	7023      	strb	r3, [r4, #0]
 80061f8:	e017      	b.n	800622a <printRadioSettings+0x3e6>
 80061fa:	bf00      	nop
 80061fc:	08007f20 	.word	0x08007f20
 8006200:	2000025c 	.word	0x2000025c
 8006204:	08007f38 	.word	0x08007f38
 8006208:	08007f4c 	.word	0x08007f4c
 800620c:	08007f60 	.word	0x08007f60
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8006210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006214:	2b03      	cmp	r3, #3
 8006216:	d108      	bne.n	800622a <printRadioSettings+0x3e6>
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	4ad7      	ldr	r2, [pc, #860]	; (800657c <printRadioSettings+0x738>)
 800621e:	461c      	mov	r4, r3
 8006220:	4615      	mov	r5, r2
 8006222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006226:	682b      	ldr	r3, [r5, #0]
 8006228:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800622a:	f107 0308 	add.w	r3, r7, #8
 800622e:	4618      	mov	r0, r3
 8006230:	f7f9 ff8c 	bl	800014c <strlen>
 8006234:	4603      	mov	r3, r0
 8006236:	b29a      	uxth	r2, r3
 8006238:	f107 0108 	add.w	r1, r7, #8
 800623c:	230a      	movs	r3, #10
 800623e:	48d0      	ldr	r0, [pc, #832]	; (8006580 <printRadioSettings+0x73c>)
 8006240:	f7fc fb97 	bl	8002972 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8006244:	463b      	mov	r3, r7
 8006246:	2205      	movs	r2, #5
 8006248:	4619      	mov	r1, r3
 800624a:	200a      	movs	r0, #10
 800624c:	f7ff f9d2 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8006250:	793b      	ldrb	r3, [r7, #4]
 8006252:	461c      	mov	r4, r3
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	461d      	mov	r5, r3
 8006258:	78bb      	ldrb	r3, [r7, #2]
 800625a:	787a      	ldrb	r2, [r7, #1]
 800625c:	7839      	ldrb	r1, [r7, #0]
 800625e:	f107 0008 	add.w	r0, r7, #8
 8006262:	9102      	str	r1, [sp, #8]
 8006264:	9201      	str	r2, [sp, #4]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	462b      	mov	r3, r5
 800626a:	4622      	mov	r2, r4
 800626c:	49c5      	ldr	r1, [pc, #788]	; (8006584 <printRadioSettings+0x740>)
 800626e:	f001 f98d 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006272:	f107 0308 	add.w	r3, r7, #8
 8006276:	4618      	mov	r0, r3
 8006278:	f7f9 ff68 	bl	800014c <strlen>
 800627c:	4603      	mov	r3, r0
 800627e:	b29a      	uxth	r2, r3
 8006280:	f107 0108 	add.w	r1, r7, #8
 8006284:	230a      	movs	r3, #10
 8006286:	48be      	ldr	r0, [pc, #760]	; (8006580 <printRadioSettings+0x73c>)
 8006288:	f7fc fb73 	bl	8002972 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800628c:	463b      	mov	r3, r7
 800628e:	2205      	movs	r2, #5
 8006290:	4619      	mov	r1, r3
 8006292:	200b      	movs	r0, #11
 8006294:	f7ff f9ae 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8006298:	793b      	ldrb	r3, [r7, #4]
 800629a:	461c      	mov	r4, r3
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	461d      	mov	r5, r3
 80062a0:	78bb      	ldrb	r3, [r7, #2]
 80062a2:	787a      	ldrb	r2, [r7, #1]
 80062a4:	7839      	ldrb	r1, [r7, #0]
 80062a6:	f107 0008 	add.w	r0, r7, #8
 80062aa:	9102      	str	r1, [sp, #8]
 80062ac:	9201      	str	r2, [sp, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	462b      	mov	r3, r5
 80062b2:	4622      	mov	r2, r4
 80062b4:	49b4      	ldr	r1, [pc, #720]	; (8006588 <printRadioSettings+0x744>)
 80062b6:	f001 f969 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f7f9 ff44 	bl	800014c <strlen>
 80062c4:	4603      	mov	r3, r0
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f107 0108 	add.w	r1, r7, #8
 80062cc:	230a      	movs	r3, #10
 80062ce:	48ac      	ldr	r0, [pc, #688]	; (8006580 <printRadioSettings+0x73c>)
 80062d0:	f7fc fb4f 	bl	8002972 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80062d4:	463b      	mov	r3, r7
 80062d6:	2201      	movs	r2, #1
 80062d8:	4619      	mov	r1, r3
 80062da:	200c      	movs	r0, #12
 80062dc:	f7ff f98a 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80062e0:	783b      	ldrb	r3, [r7, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f107 0308 	add.w	r3, r7, #8
 80062e8:	49a8      	ldr	r1, [pc, #672]	; (800658c <printRadioSettings+0x748>)
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 f94e 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80062f0:	f107 0308 	add.w	r3, r7, #8
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7f9 ff29 	bl	800014c <strlen>
 80062fa:	4603      	mov	r3, r0
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f107 0108 	add.w	r1, r7, #8
 8006302:	230a      	movs	r3, #10
 8006304:	489e      	ldr	r0, [pc, #632]	; (8006580 <printRadioSettings+0x73c>)
 8006306:	f7fc fb34 	bl	8002972 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800630a:	463b      	mov	r3, r7
 800630c:	2201      	movs	r2, #1
 800630e:	4619      	mov	r1, r3
 8006310:	200d      	movs	r0, #13
 8006312:	f7ff f96f 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8006316:	783b      	ldrb	r3, [r7, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	f107 0308 	add.w	r3, r7, #8
 800631e:	499c      	ldr	r1, [pc, #624]	; (8006590 <printRadioSettings+0x74c>)
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f933 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006326:	f107 0308 	add.w	r3, r7, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f7f9 ff0e 	bl	800014c <strlen>
 8006330:	4603      	mov	r3, r0
 8006332:	b29a      	uxth	r2, r3
 8006334:	f107 0108 	add.w	r1, r7, #8
 8006338:	230a      	movs	r3, #10
 800633a:	4891      	ldr	r0, [pc, #580]	; (8006580 <printRadioSettings+0x73c>)
 800633c:	f7fc fb19 	bl	8002972 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8006340:	463b      	mov	r3, r7
 8006342:	2201      	movs	r2, #1
 8006344:	4619      	mov	r1, r3
 8006346:	200e      	movs	r0, #14
 8006348:	f7ff f954 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800634c:	783b      	ldrb	r3, [r7, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	498f      	ldr	r1, [pc, #572]	; (8006594 <printRadioSettings+0x750>)
 8006356:	4618      	mov	r0, r3
 8006358:	f001 f918 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800635c:	f107 0308 	add.w	r3, r7, #8
 8006360:	4618      	mov	r0, r3
 8006362:	f7f9 fef3 	bl	800014c <strlen>
 8006366:	4603      	mov	r3, r0
 8006368:	b29a      	uxth	r2, r3
 800636a:	f107 0108 	add.w	r1, r7, #8
 800636e:	230a      	movs	r3, #10
 8006370:	4883      	ldr	r0, [pc, #524]	; (8006580 <printRadioSettings+0x73c>)
 8006372:	f7fc fafe 	bl	8002972 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8006376:	463b      	mov	r3, r7
 8006378:	2201      	movs	r2, #1
 800637a:	4619      	mov	r1, r3
 800637c:	200f      	movs	r0, #15
 800637e:	f7ff f939 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8006382:	783b      	ldrb	r3, [r7, #0]
 8006384:	461a      	mov	r2, r3
 8006386:	f107 0308 	add.w	r3, r7, #8
 800638a:	4983      	ldr	r1, [pc, #524]	; (8006598 <printRadioSettings+0x754>)
 800638c:	4618      	mov	r0, r3
 800638e:	f001 f8fd 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006392:	f107 0308 	add.w	r3, r7, #8
 8006396:	4618      	mov	r0, r3
 8006398:	f7f9 fed8 	bl	800014c <strlen>
 800639c:	4603      	mov	r3, r0
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f107 0108 	add.w	r1, r7, #8
 80063a4:	230a      	movs	r3, #10
 80063a6:	4876      	ldr	r0, [pc, #472]	; (8006580 <printRadioSettings+0x73c>)
 80063a8:	f7fc fae3 	bl	8002972 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80063ac:	463b      	mov	r3, r7
 80063ae:	2205      	movs	r2, #5
 80063b0:	4619      	mov	r1, r3
 80063b2:	2010      	movs	r0, #16
 80063b4:	f7ff f91e 	bl	80055f4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80063b8:	793b      	ldrb	r3, [r7, #4]
 80063ba:	461c      	mov	r4, r3
 80063bc:	78fb      	ldrb	r3, [r7, #3]
 80063be:	461d      	mov	r5, r3
 80063c0:	78bb      	ldrb	r3, [r7, #2]
 80063c2:	787a      	ldrb	r2, [r7, #1]
 80063c4:	7839      	ldrb	r1, [r7, #0]
 80063c6:	f107 0008 	add.w	r0, r7, #8
 80063ca:	9102      	str	r1, [sp, #8]
 80063cc:	9201      	str	r2, [sp, #4]
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	462b      	mov	r3, r5
 80063d2:	4622      	mov	r2, r4
 80063d4:	4971      	ldr	r1, [pc, #452]	; (800659c <printRadioSettings+0x758>)
 80063d6:	f001 f8d9 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	4618      	mov	r0, r3
 80063e0:	f7f9 feb4 	bl	800014c <strlen>
 80063e4:	4603      	mov	r3, r0
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	f107 0108 	add.w	r1, r7, #8
 80063ec:	230a      	movs	r3, #10
 80063ee:	4864      	ldr	r0, [pc, #400]	; (8006580 <printRadioSettings+0x73c>)
 80063f0:	f7fc fabf 	bl	8002972 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80063f4:	2011      	movs	r0, #17
 80063f6:	f7ff f8d5 	bl	80055a4 <NRF24_read_register>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006400:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006404:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006408:	f107 0308 	add.w	r3, r7, #8
 800640c:	4964      	ldr	r1, [pc, #400]	; (80065a0 <printRadioSettings+0x75c>)
 800640e:	4618      	mov	r0, r3
 8006410:	f001 f8bc 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f7f9 fe97 	bl	800014c <strlen>
 800641e:	4603      	mov	r3, r0
 8006420:	b29a      	uxth	r2, r3
 8006422:	f107 0108 	add.w	r1, r7, #8
 8006426:	230a      	movs	r3, #10
 8006428:	4855      	ldr	r0, [pc, #340]	; (8006580 <printRadioSettings+0x73c>)
 800642a:	f7fc faa2 	bl	8002972 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 800642e:	2012      	movs	r0, #18
 8006430:	f7ff f8b8 	bl	80055a4 <NRF24_read_register>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800643a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800643e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	4957      	ldr	r1, [pc, #348]	; (80065a4 <printRadioSettings+0x760>)
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f89f 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	4618      	mov	r0, r3
 8006454:	f7f9 fe7a 	bl	800014c <strlen>
 8006458:	4603      	mov	r3, r0
 800645a:	b29a      	uxth	r2, r3
 800645c:	f107 0108 	add.w	r1, r7, #8
 8006460:	230a      	movs	r3, #10
 8006462:	4847      	ldr	r0, [pc, #284]	; (8006580 <printRadioSettings+0x73c>)
 8006464:	f7fc fa85 	bl	8002972 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8006468:	2013      	movs	r0, #19
 800646a:	f7ff f89b 	bl	80055a4 <NRF24_read_register>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006474:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800647c:	f107 0308 	add.w	r3, r7, #8
 8006480:	4949      	ldr	r1, [pc, #292]	; (80065a8 <printRadioSettings+0x764>)
 8006482:	4618      	mov	r0, r3
 8006484:	f001 f882 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006488:	f107 0308 	add.w	r3, r7, #8
 800648c:	4618      	mov	r0, r3
 800648e:	f7f9 fe5d 	bl	800014c <strlen>
 8006492:	4603      	mov	r3, r0
 8006494:	b29a      	uxth	r2, r3
 8006496:	f107 0108 	add.w	r1, r7, #8
 800649a:	230a      	movs	r3, #10
 800649c:	4838      	ldr	r0, [pc, #224]	; (8006580 <printRadioSettings+0x73c>)
 800649e:	f7fc fa68 	bl	8002972 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80064a2:	2014      	movs	r0, #20
 80064a4:	f7ff f87e 	bl	80055a4 <NRF24_read_register>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80064ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064b6:	f107 0308 	add.w	r3, r7, #8
 80064ba:	493c      	ldr	r1, [pc, #240]	; (80065ac <printRadioSettings+0x768>)
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 f865 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7f9 fe40 	bl	800014c <strlen>
 80064cc:	4603      	mov	r3, r0
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f107 0108 	add.w	r1, r7, #8
 80064d4:	230a      	movs	r3, #10
 80064d6:	482a      	ldr	r0, [pc, #168]	; (8006580 <printRadioSettings+0x73c>)
 80064d8:	f7fc fa4b 	bl	8002972 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80064dc:	2015      	movs	r0, #21
 80064de:	f7ff f861 	bl	80055a4 <NRF24_read_register>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80064e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80064ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064f0:	f107 0308 	add.w	r3, r7, #8
 80064f4:	492e      	ldr	r1, [pc, #184]	; (80065b0 <printRadioSettings+0x76c>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 f848 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80064fc:	f107 0308 	add.w	r3, r7, #8
 8006500:	4618      	mov	r0, r3
 8006502:	f7f9 fe23 	bl	800014c <strlen>
 8006506:	4603      	mov	r3, r0
 8006508:	b29a      	uxth	r2, r3
 800650a:	f107 0108 	add.w	r1, r7, #8
 800650e:	230a      	movs	r3, #10
 8006510:	481b      	ldr	r0, [pc, #108]	; (8006580 <printRadioSettings+0x73c>)
 8006512:	f7fc fa2e 	bl	8002972 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8006516:	2016      	movs	r0, #22
 8006518:	f7ff f844 	bl	80055a4 <NRF24_read_register>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8006522:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	4921      	ldr	r1, [pc, #132]	; (80065b4 <printRadioSettings+0x770>)
 8006530:	4618      	mov	r0, r3
 8006532:	f001 f82b 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f7f9 fe06 	bl	800014c <strlen>
 8006540:	4603      	mov	r3, r0
 8006542:	b29a      	uxth	r2, r3
 8006544:	f107 0108 	add.w	r1, r7, #8
 8006548:	230a      	movs	r3, #10
 800654a:	480d      	ldr	r0, [pc, #52]	; (8006580 <printRadioSettings+0x73c>)
 800654c:	f7fc fa11 	bl	8002972 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8006550:	201c      	movs	r0, #28
 8006552:	f7ff f827 	bl	80055a4 <NRF24_read_register>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800655c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006560:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfcc      	ite	gt
 8006568:	2301      	movgt	r3, #1
 800656a:	2300      	movle	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006570:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	e01e      	b.n	80065b8 <printRadioSettings+0x774>
 800657a:	bf00      	nop
 800657c:	08007f74 	.word	0x08007f74
 8006580:	2000025c 	.word	0x2000025c
 8006584:	08007f88 	.word	0x08007f88
 8006588:	08007fb8 	.word	0x08007fb8
 800658c:	08007fe8 	.word	0x08007fe8
 8006590:	08008010 	.word	0x08008010
 8006594:	08008038 	.word	0x08008038
 8006598:	08008060 	.word	0x08008060
 800659c:	08008088 	.word	0x08008088
 80065a0:	080080b4 	.word	0x080080b4
 80065a4:	080080d0 	.word	0x080080d0
 80065a8:	080080ec 	.word	0x080080ec
 80065ac:	08008108 	.word	0x08008108
 80065b0:	08008124 	.word	0x08008124
 80065b4:	08008140 	.word	0x08008140
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bfcc      	ite	gt
 80065bc:	2301      	movgt	r3, #1
 80065be:	2300      	movle	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80065c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065c8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfcc      	ite	gt
 80065d0:	2301      	movgt	r3, #1
 80065d2:	2300      	movle	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80065d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065dc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfcc      	ite	gt
 80065e4:	2301      	movgt	r3, #1
 80065e6:	2300      	movle	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80065ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80065f0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bfcc      	ite	gt
 80065f8:	2301      	movgt	r3, #1
 80065fa:	2300      	movle	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8006600:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006604:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8006608:	2b00      	cmp	r3, #0
 800660a:	bfcc      	ite	gt
 800660c:	2301      	movgt	r3, #1
 800660e:	2300      	movle	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f107 0008 	add.w	r0, r7, #8
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	9402      	str	r4, [sp, #8]
 800661a:	9101      	str	r1, [sp, #4]
 800661c:	9200      	str	r2, [sp, #0]
 800661e:	4633      	mov	r3, r6
 8006620:	462a      	mov	r2, r5
 8006622:	494a      	ldr	r1, [pc, #296]	; (800674c <printRadioSettings+0x908>)
 8006624:	f000 ffb2 	bl	800758c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4618      	mov	r0, r3
 800662e:	f7f9 fd8d 	bl	800014c <strlen>
 8006632:	4603      	mov	r3, r0
 8006634:	b29a      	uxth	r2, r3
 8006636:	f107 0108 	add.w	r1, r7, #8
 800663a:	230a      	movs	r3, #10
 800663c:	4844      	ldr	r0, [pc, #272]	; (8006750 <printRadioSettings+0x90c>)
 800663e:	f7fc f998 	bl	8002972 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8006642:	201d      	movs	r0, #29
 8006644:	f7fe ffae 	bl	80055a4 <NRF24_read_register>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800664e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <printRadioSettings+0x830>
 800665a:	f107 0308 	add.w	r3, r7, #8
 800665e:	4a3d      	ldr	r2, [pc, #244]	; (8006754 <printRadioSettings+0x910>)
 8006660:	461c      	mov	r4, r3
 8006662:	4615      	mov	r5, r2
 8006664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006668:	e895 0003 	ldmia.w	r5, {r0, r1}
 800666c:	6020      	str	r0, [r4, #0]
 800666e:	3404      	adds	r4, #4
 8006670:	8021      	strh	r1, [r4, #0]
 8006672:	e00e      	b.n	8006692 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	4a37      	ldr	r2, [pc, #220]	; (8006758 <printRadioSettings+0x914>)
 800667a:	461c      	mov	r4, r3
 800667c:	4615      	mov	r5, r2
 800667e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006682:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006686:	6020      	str	r0, [r4, #0]
 8006688:	3404      	adds	r4, #4
 800668a:	8021      	strh	r1, [r4, #0]
 800668c:	3402      	adds	r4, #2
 800668e:	0c0b      	lsrs	r3, r1, #16
 8006690:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	4618      	mov	r0, r3
 8006698:	f7f9 fd58 	bl	800014c <strlen>
 800669c:	4603      	mov	r3, r0
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f107 0108 	add.w	r1, r7, #8
 80066a4:	230a      	movs	r3, #10
 80066a6:	482a      	ldr	r0, [pc, #168]	; (8006750 <printRadioSettings+0x90c>)
 80066a8:	f7fc f963 	bl	8002972 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80066ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <printRadioSettings+0x88c>
 80066b8:	f107 0308 	add.w	r3, r7, #8
 80066bc:	4a27      	ldr	r2, [pc, #156]	; (800675c <printRadioSettings+0x918>)
 80066be:	461c      	mov	r4, r3
 80066c0:	4615      	mov	r5, r2
 80066c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066ca:	c403      	stmia	r4!, {r0, r1}
 80066cc:	8022      	strh	r2, [r4, #0]
 80066ce:	e00d      	b.n	80066ec <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80066d0:	f107 0308 	add.w	r3, r7, #8
 80066d4:	4a22      	ldr	r2, [pc, #136]	; (8006760 <printRadioSettings+0x91c>)
 80066d6:	461c      	mov	r4, r3
 80066d8:	4615      	mov	r5, r2
 80066da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066e2:	c403      	stmia	r4!, {r0, r1}
 80066e4:	8022      	strh	r2, [r4, #0]
 80066e6:	3402      	adds	r4, #2
 80066e8:	0c13      	lsrs	r3, r2, #16
 80066ea:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80066ec:	f107 0308 	add.w	r3, r7, #8
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7f9 fd2b 	bl	800014c <strlen>
 80066f6:	4603      	mov	r3, r0
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f107 0108 	add.w	r1, r7, #8
 80066fe:	230a      	movs	r3, #10
 8006700:	4813      	ldr	r0, [pc, #76]	; (8006750 <printRadioSettings+0x90c>)
 8006702:	f7fc f936 	bl	8002972 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8006706:	f107 0308 	add.w	r3, r7, #8
 800670a:	4a16      	ldr	r2, [pc, #88]	; (8006764 <printRadioSettings+0x920>)
 800670c:	461c      	mov	r4, r3
 800670e:	4615      	mov	r5, r2
 8006710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800671a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	8022      	strh	r2, [r4, #0]
 8006722:	3402      	adds	r4, #2
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8006728:	f107 0308 	add.w	r3, r7, #8
 800672c:	4618      	mov	r0, r3
 800672e:	f7f9 fd0d 	bl	800014c <strlen>
 8006732:	4603      	mov	r3, r0
 8006734:	b29a      	uxth	r2, r3
 8006736:	f107 0108 	add.w	r1, r7, #8
 800673a:	230a      	movs	r3, #10
 800673c:	4804      	ldr	r0, [pc, #16]	; (8006750 <printRadioSettings+0x90c>)
 800673e:	f7fc f918 	bl	8002972 <HAL_UART_Transmit>
}
 8006742:	bf00      	nop
 8006744:	3774      	adds	r7, #116	; 0x74
 8006746:	46bd      	mov	sp, r7
 8006748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674a:	bf00      	nop
 800674c:	0800815c 	.word	0x0800815c
 8006750:	2000025c 	.word	0x2000025c
 8006754:	080081a8 	.word	0x080081a8
 8006758:	080081c0 	.word	0x080081c0
 800675c:	080081d8 	.word	0x080081d8
 8006760:	080081f4 	.word	0x080081f4
 8006764:	08007dc8 	.word	0x08007dc8

08006768 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8006768:	b084      	sub	sp, #16
 800676a:	b4b0      	push	{r4, r5, r7}
 800676c:	af00      	add	r7, sp, #0
 800676e:	f107 040c 	add.w	r4, r7, #12
 8006772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8006776:	4b09      	ldr	r3, [pc, #36]	; (800679c <nrf24_DebugUART_Init+0x34>)
 8006778:	461c      	mov	r4, r3
 800677a:	f107 050c 	add.w	r5, r7, #12
 800677e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800678e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8006792:	bf00      	nop
 8006794:	46bd      	mov	sp, r7
 8006796:	bcb0      	pop	{r4, r5, r7}
 8006798:	b004      	add	sp, #16
 800679a:	4770      	bx	lr
 800679c:	2000025c 	.word	0x2000025c

080067a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80067a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067a2:	b097      	sub	sp, #92	; 0x5c
 80067a4:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80067a6:	f7f9 fcd9 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80067aa:	f000 f857 	bl	800685c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80067ae:	f000 f90f 	bl	80069d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80067b2:	f000 f8ad 	bl	8006910 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80067b6:	f000 f8e1 	bl	800697c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80067ba:	f000 faa9 	bl	8006d10 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CSN_Pin_GPIO_Port, CSN_Pin_Pin, CE_Pin_Pin, hspi1);
 80067be:	4c22      	ldr	r4, [pc, #136]	; (8006848 <main+0xa8>)
 80067c0:	4668      	mov	r0, sp
 80067c2:	1d23      	adds	r3, r4, #4
 80067c4:	2254      	movs	r2, #84	; 0x54
 80067c6:	4619      	mov	r1, r3
 80067c8:	f000 fecc 	bl	8007564 <memcpy>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	2208      	movs	r2, #8
 80067d0:	2110      	movs	r1, #16
 80067d2:	481e      	ldr	r0, [pc, #120]	; (800684c <main+0xac>)
 80067d4:	f7fe ffce 	bl	8005774 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 80067d8:	4e1d      	ldr	r6, [pc, #116]	; (8006850 <main+0xb0>)
 80067da:	466d      	mov	r5, sp
 80067dc:	f106 0410 	add.w	r4, r6, #16
 80067e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80067ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80067f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80067f4:	f7ff ffb8 	bl	8006768 <nrf24_DebugUART_Init>

  //**** TRANSMIT - ACK ****//
  NRF24_setAutoAck(true);
 80067f8:	2001      	movs	r0, #1
 80067fa:	f7ff fa05 	bl	8005c08 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 80067fe:	2034      	movs	r0, #52	; 0x34
 8006800:	f7ff f94d 	bl	8005a9e <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8006804:	2020      	movs	r0, #32
 8006806:	f7ff f95f 	bl	8005ac8 <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 800680a:	4b12      	ldr	r3, [pc, #72]	; (8006854 <main+0xb4>)
 800680c:	cb18      	ldmia	r3, {r3, r4}
 800680e:	461a      	mov	r2, r3
 8006810:	4623      	mov	r3, r4
 8006812:	2001      	movs	r0, #1
 8006814:	f7ff f8da 	bl	80059cc <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 8006818:	f7ff f9ac 	bl	8005b74 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 800681c:	f7ff f97c 	bl	8005b18 <NRF24_enableAckPayload>

	NRF24_startListening();
 8006820:	f7ff f888 	bl	8005934 <NRF24_startListening>
  printRadioSettings();
 8006824:	f7ff fb0e 	bl	8005e44 <printRadioSettings>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(NRF24_available())
 8006828:	f7ff f8a8 	bl	800597c <NRF24_available>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0fa      	beq.n	8006828 <main+0x88>
	{
		NRF24_read(rx_buffer, sizeof(rx_buffer));
 8006832:	2114      	movs	r1, #20
 8006834:	4808      	ldr	r0, [pc, #32]	; (8006858 <main+0xb8>)
 8006836:	f7ff f8a9 	bl	800598c <NRF24_read>
		HAL_UART_Transmit(&huart1, rx_buffer, sizeof(rx_buffer), 10);
 800683a:	230a      	movs	r3, #10
 800683c:	2214      	movs	r2, #20
 800683e:	4906      	ldr	r1, [pc, #24]	; (8006858 <main+0xb8>)
 8006840:	4803      	ldr	r0, [pc, #12]	; (8006850 <main+0xb0>)
 8006842:	f7fc f896 	bl	8002972 <HAL_UART_Transmit>
	if(NRF24_available())
 8006846:	e7ef      	b.n	8006828 <main+0x88>
 8006848:	200003d0 	.word	0x200003d0
 800684c:	40010800 	.word	0x40010800
 8006850:	20000390 	.word	0x20000390
 8006854:	200000e0 	.word	0x200000e0
 8006858:	20000310 	.word	0x20000310

0800685c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b094      	sub	sp, #80	; 0x50
 8006860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006866:	2228      	movs	r2, #40	; 0x28
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fe85 	bl	800757a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006870:	f107 0314 	add.w	r3, r7, #20
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	60da      	str	r2, [r3, #12]
 800687e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006880:	1d3b      	adds	r3, r7, #4
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	605a      	str	r2, [r3, #4]
 8006888:	609a      	str	r2, [r3, #8]
 800688a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800688c:	2301      	movs	r3, #1
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006896:	2300      	movs	r3, #0
 8006898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800689a:	2301      	movs	r3, #1
 800689c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800689e:	2302      	movs	r3, #2
 80068a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80068a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80068a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80068ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80068ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fa fe24 	bl	8001500 <HAL_RCC_OscConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80068be:	f000 f8c5 	bl	8006a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80068c2:	230f      	movs	r3, #15
 80068c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80068c6:	2302      	movs	r3, #2
 80068c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80068ca:	2300      	movs	r3, #0
 80068cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80068ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	2102      	movs	r1, #2
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fb f88e 	bl	8001a00 <HAL_RCC_ClockConfig>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80068ea:	f000 f8af 	bl	8006a4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80068ee:	2310      	movs	r3, #16
 80068f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068f6:	1d3b      	adds	r3, r7, #4
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fb fa1d 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8006904:	f000 f8a2 	bl	8006a4c <Error_Handler>
  }
}
 8006908:	bf00      	nop
 800690a:	3750      	adds	r7, #80	; 0x50
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006914:	4b17      	ldr	r3, [pc, #92]	; (8006974 <MX_SPI1_Init+0x64>)
 8006916:	4a18      	ldr	r2, [pc, #96]	; (8006978 <MX_SPI1_Init+0x68>)
 8006918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800691a:	4b16      	ldr	r3, [pc, #88]	; (8006974 <MX_SPI1_Init+0x64>)
 800691c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006922:	4b14      	ldr	r3, [pc, #80]	; (8006974 <MX_SPI1_Init+0x64>)
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006928:	4b12      	ldr	r3, [pc, #72]	; (8006974 <MX_SPI1_Init+0x64>)
 800692a:	2200      	movs	r2, #0
 800692c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <MX_SPI1_Init+0x64>)
 8006930:	2200      	movs	r2, #0
 8006932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <MX_SPI1_Init+0x64>)
 8006936:	2200      	movs	r2, #0
 8006938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800693a:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <MX_SPI1_Init+0x64>)
 800693c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <MX_SPI1_Init+0x64>)
 8006944:	2210      	movs	r2, #16
 8006946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <MX_SPI1_Init+0x64>)
 800694a:	2200      	movs	r2, #0
 800694c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <MX_SPI1_Init+0x64>)
 8006950:	2200      	movs	r2, #0
 8006952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <MX_SPI1_Init+0x64>)
 8006956:	2200      	movs	r2, #0
 8006958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <MX_SPI1_Init+0x64>)
 800695c:	220a      	movs	r2, #10
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006960:	4804      	ldr	r0, [pc, #16]	; (8006974 <MX_SPI1_Init+0x64>)
 8006962:	f7fb fa9f 	bl	8001ea4 <HAL_SPI_Init>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800696c:	f000 f86e 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006970:	bf00      	nop
 8006972:	bd80      	pop	{r7, pc}
 8006974:	200003d0 	.word	0x200003d0
 8006978:	40013000 	.word	0x40013000

0800697c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006980:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 8006982:	4a12      	ldr	r2, [pc, #72]	; (80069cc <MX_USART1_UART_Init+0x50>)
 8006984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006986:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 8006988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800698c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800698e:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 8006990:	2200      	movs	r2, #0
 8006992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 8006996:	2200      	movs	r2, #0
 8006998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 800699c:	2200      	movs	r2, #0
 800699e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80069a0:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 80069a2:	220c      	movs	r2, #12
 80069a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80069b2:	4805      	ldr	r0, [pc, #20]	; (80069c8 <MX_USART1_UART_Init+0x4c>)
 80069b4:	f7fb ff90 	bl	80028d8 <HAL_UART_Init>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80069be:	f000 f845 	bl	8006a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80069c2:	bf00      	nop
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000390 	.word	0x20000390
 80069cc:	40013800 	.word	0x40013800

080069d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d6:	f107 0308 	add.w	r3, r7, #8
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	605a      	str	r2, [r3, #4]
 80069e0:	609a      	str	r2, [r3, #8]
 80069e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <MX_GPIO_Init+0x74>)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <MX_GPIO_Init+0x74>)
 80069ea:	f043 0320 	orr.w	r3, r3, #32
 80069ee:	6193      	str	r3, [r2, #24]
 80069f0:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <MX_GPIO_Init+0x74>)
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80069fc:	4b11      	ldr	r3, [pc, #68]	; (8006a44 <MX_GPIO_Init+0x74>)
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	4a10      	ldr	r2, [pc, #64]	; (8006a44 <MX_GPIO_Init+0x74>)
 8006a02:	f043 0304 	orr.w	r3, r3, #4
 8006a06:	6193      	str	r3, [r2, #24]
 8006a08:	4b0e      	ldr	r3, [pc, #56]	; (8006a44 <MX_GPIO_Init+0x74>)
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	603b      	str	r3, [r7, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin_Pin|CSN_Pin_Pin, GPIO_PIN_RESET);
 8006a14:	2200      	movs	r2, #0
 8006a16:	2118      	movs	r1, #24
 8006a18:	480b      	ldr	r0, [pc, #44]	; (8006a48 <MX_GPIO_Init+0x78>)
 8006a1a:	f7f9 fe8b 	bl	8000734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_Pin_Pin CSN_Pin_Pin */
  GPIO_InitStruct.Pin = CE_Pin_Pin|CSN_Pin_Pin;
 8006a1e:	2318      	movs	r3, #24
 8006a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a22:	2301      	movs	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	4619      	mov	r1, r3
 8006a34:	4804      	ldr	r0, [pc, #16]	; (8006a48 <MX_GPIO_Init+0x78>)
 8006a36:	f7f9 fd23 	bl	8000480 <HAL_GPIO_Init>

}
 8006a3a:	bf00      	nop
 8006a3c:	3718      	adds	r7, #24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40021000 	.word	0x40021000
 8006a48:	40010800 	.word	0x40010800

08006a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006a5e:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <HAL_MspInit+0x5c>)
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_MspInit+0x5c>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6193      	str	r3, [r2, #24]
 8006a6a:	4b12      	ldr	r3, [pc, #72]	; (8006ab4 <HAL_MspInit+0x5c>)
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	60bb      	str	r3, [r7, #8]
 8006a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <HAL_MspInit+0x5c>)
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <HAL_MspInit+0x5c>)
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a80:	61d3      	str	r3, [r2, #28]
 8006a82:	4b0c      	ldr	r3, [pc, #48]	; (8006ab4 <HAL_MspInit+0x5c>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <HAL_MspInit+0x60>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	4a04      	ldr	r2, [pc, #16]	; (8006ab8 <HAL_MspInit+0x60>)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006aaa:	bf00      	nop
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	40010000 	.word	0x40010000

08006abc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ac4:	f107 0310 	add.w	r3, r7, #16
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	605a      	str	r2, [r3, #4]
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1b      	ldr	r2, [pc, #108]	; (8006b44 <HAL_SPI_MspInit+0x88>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d12f      	bne.n	8006b3c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	4a19      	ldr	r2, [pc, #100]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006ae2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ae6:	6193      	str	r3, [r2, #24]
 8006ae8:	4b17      	ldr	r3, [pc, #92]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006af0:	60fb      	str	r3, [r7, #12]
 8006af2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af4:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006afa:	f043 0304 	orr.w	r3, r3, #4
 8006afe:	6193      	str	r3, [r2, #24]
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <HAL_SPI_MspInit+0x8c>)
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006b0c:	23a0      	movs	r3, #160	; 0xa0
 8006b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b10:	2302      	movs	r3, #2
 8006b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b14:	2303      	movs	r3, #3
 8006b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b18:	f107 0310 	add.w	r3, r7, #16
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	480b      	ldr	r0, [pc, #44]	; (8006b4c <HAL_SPI_MspInit+0x90>)
 8006b20:	f7f9 fcae 	bl	8000480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b30:	f107 0310 	add.w	r3, r7, #16
 8006b34:	4619      	mov	r1, r3
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <HAL_SPI_MspInit+0x90>)
 8006b38:	f7f9 fca2 	bl	8000480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006b3c:	bf00      	nop
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40013000 	.word	0x40013000
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	40010800 	.word	0x40010800

08006b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b088      	sub	sp, #32
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b58:	f107 0310 	add.w	r3, r7, #16
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_UART_MspInit+0x8c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d131      	bne.n	8006bd4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b70:	4b1b      	ldr	r3, [pc, #108]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7a:	6193      	str	r3, [r2, #24]
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	4a14      	ldr	r2, [pc, #80]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6193      	str	r3, [r2, #24]
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_UART_MspInit+0x90>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006baa:	2303      	movs	r3, #3
 8006bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	480b      	ldr	r0, [pc, #44]	; (8006be4 <HAL_UART_MspInit+0x94>)
 8006bb6:	f7f9 fc63 	bl	8000480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4805      	ldr	r0, [pc, #20]	; (8006be4 <HAL_UART_MspInit+0x94>)
 8006bd0:	f7f9 fc56 	bl	8000480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006bd4:	bf00      	nop
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40013800 	.word	0x40013800
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40010800 	.word	0x40010800

08006be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006bec:	bf00      	nop
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bf8:	e7fe      	b.n	8006bf8 <HardFault_Handler+0x4>

08006bfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bfe:	e7fe      	b.n	8006bfe <MemManage_Handler+0x4>

08006c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c04:	e7fe      	b.n	8006c04 <BusFault_Handler+0x4>

08006c06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c06:	b480      	push	{r7}
 8006c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c0a:	e7fe      	b.n	8006c0a <UsageFault_Handler+0x4>

08006c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c1c:	bf00      	nop
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr

08006c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c28:	bf00      	nop
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c34:	f7f9 fad8 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c38:	bf00      	nop
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8006c40:	4802      	ldr	r0, [pc, #8]	; (8006c4c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006c42:	f7f9 fe96 	bl	8000972 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000758 	.word	0x20000758

08006c50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <_sbrk+0x50>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <_sbrk+0x16>
		heap_end = &end;
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <_sbrk+0x50>)
 8006c62:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <_sbrk+0x54>)
 8006c64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <_sbrk+0x50>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <_sbrk+0x50>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4413      	add	r3, r2
 8006c74:	466a      	mov	r2, sp
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d907      	bls.n	8006c8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006c7a:	f000 fc49 	bl	8007510 <__errno>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	230c      	movs	r3, #12
 8006c82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006c84:	f04f 33ff 	mov.w	r3, #4294967295
 8006c88:	e006      	b.n	8006c98 <_sbrk+0x48>
	}

	heap_end += incr;
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <_sbrk+0x50>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	4a03      	ldr	r2, [pc, #12]	; (8006ca0 <_sbrk+0x50>)
 8006c94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	2000029c 	.word	0x2000029c
 8006ca4:	20000bc8 	.word	0x20000bc8

08006ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006cac:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <SystemInit+0x5c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <SystemInit+0x5c>)
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006cb8:	4b12      	ldr	r3, [pc, #72]	; (8006d04 <SystemInit+0x5c>)
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	4911      	ldr	r1, [pc, #68]	; (8006d04 <SystemInit+0x5c>)
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <SystemInit+0x60>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <SystemInit+0x5c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a0e      	ldr	r2, [pc, #56]	; (8006d04 <SystemInit+0x5c>)
 8006cca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <SystemInit+0x5c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <SystemInit+0x5c>)
 8006cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cde:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <SystemInit+0x5c>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4a07      	ldr	r2, [pc, #28]	; (8006d04 <SystemInit+0x5c>)
 8006ce6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006cea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <SystemInit+0x5c>)
 8006cee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006cf2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <SystemInit+0x64>)
 8006cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006cfa:	609a      	str	r2, [r3, #8]
#endif 
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr
 8006d04:	40021000 	.word	0x40021000
 8006d08:	f8ff0000 	.word	0xf8ff0000
 8006d0c:	e000ed00 	.word	0xe000ed00

08006d10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d14:	2200      	movs	r2, #0
 8006d16:	4912      	ldr	r1, [pc, #72]	; (8006d60 <MX_USB_DEVICE_Init+0x50>)
 8006d18:	4812      	ldr	r0, [pc, #72]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d1a:	f7fd fb57 	bl	80043cc <USBD_Init>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d001      	beq.n	8006d28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d24:	f7ff fe92 	bl	8006a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006d28:	490f      	ldr	r1, [pc, #60]	; (8006d68 <MX_USB_DEVICE_Init+0x58>)
 8006d2a:	480e      	ldr	r0, [pc, #56]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d2c:	f7fd fb79 	bl	8004422 <USBD_RegisterClass>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d36:	f7ff fe89 	bl	8006a4c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006d3a:	490c      	ldr	r1, [pc, #48]	; (8006d6c <MX_USB_DEVICE_Init+0x5c>)
 8006d3c:	4809      	ldr	r0, [pc, #36]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d3e:	f7fd fb2f 	bl	80043a0 <USBD_CUSTOM_HID_RegisterInterface>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d48:	f7ff fe80 	bl	8006a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d4c:	4805      	ldr	r0, [pc, #20]	; (8006d64 <MX_USB_DEVICE_Init+0x54>)
 8006d4e:	f7fd fb81 	bl	8004454 <USBD_Start>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d58:	f7ff fe78 	bl	8006a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d5c:	bf00      	nop
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	2000011c 	.word	0x2000011c
 8006d64:	20000494 	.word	0x20000494
 8006d68:	20000008 	.word	0x20000008
 8006d6c:	2000010c 	.word	0x2000010c

08006d70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <HAL_PCD_MspInit+0x44>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d113      	bne.n	8006daa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d82:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <HAL_PCD_MspInit+0x48>)
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	4a0c      	ldr	r2, [pc, #48]	; (8006db8 <HAL_PCD_MspInit+0x48>)
 8006d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d8c:	61d3      	str	r3, [r2, #28]
 8006d8e:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <HAL_PCD_MspInit+0x48>)
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	2014      	movs	r0, #20
 8006da0:	f7f9 fb37 	bl	8000412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006da4:	2014      	movs	r0, #20
 8006da6:	f7f9 fb50 	bl	800044a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40005c00 	.word	0x40005c00
 8006db8:	40021000 	.word	0x40021000

08006dbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f7fd fb86 	bl	80044e4 <USBD_LL_SetupStage>
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	015b      	lsls	r3, r3, #5
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	4619      	mov	r1, r3
 8006e04:	f7fd fbb9 	bl	800457a <USBD_LL_DataOutStage>
}
 8006e08:	bf00      	nop
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	015b      	lsls	r3, r3, #5
 8006e28:	4413      	add	r3, r2
 8006e2a:	333c      	adds	r3, #60	; 0x3c
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	4619      	mov	r1, r3
 8006e32:	f7fd fc13 	bl	800465c <USBD_LL_DataInStage>
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fd fd23 	bl	8004898 <USBD_LL_SOF>
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d001      	beq.n	8006e72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e6e:	f7ff fded 	bl	8006a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e78:	7bfa      	ldrb	r2, [r7, #15]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fd fcd3 	bl	8004828 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fc8c 	bl	80047a6 <USBD_LL_Reset>
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fd fccd 	bl	8004846 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <HAL_PCD_SuspendCallback+0x30>)
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	4a03      	ldr	r2, [pc, #12]	; (8006ec8 <HAL_PCD_SuspendCallback+0x30>)
 8006eba:	f043 0306 	orr.w	r3, r3, #6
 8006ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed00 	.word	0xe000ed00

08006ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fd fcc7 	bl	800486e <USBD_LL_Resume>
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006ef0:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <USBD_LL_Init+0x98>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a21      	ldr	r2, [pc, #132]	; (8006f80 <USBD_LL_Init+0x98>)
 8006efc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006f00:	4b1f      	ldr	r3, [pc, #124]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f02:	4a20      	ldr	r2, [pc, #128]	; (8006f84 <USBD_LL_Init+0x9c>)
 8006f04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006f06:	4b1e      	ldr	r3, [pc, #120]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f08:	2208      	movs	r2, #8
 8006f0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f0e:	2202      	movs	r2, #2
 8006f10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006f12:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006f18:	4b19      	ldr	r3, [pc, #100]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006f1e:	4b18      	ldr	r3, [pc, #96]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006f24:	4816      	ldr	r0, [pc, #88]	; (8006f80 <USBD_LL_Init+0x98>)
 8006f26:	f7f9 fc1d 	bl	8000764 <HAL_PCD_Init>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006f30:	f7ff fd8c 	bl	8006a4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f3a:	2318      	movs	r3, #24
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	f7fa faa2 	bl	8001488 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f4a:	2358      	movs	r3, #88	; 0x58
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	f7fa fa9a 	bl	8001488 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f5a:	2398      	movs	r3, #152	; 0x98
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2181      	movs	r1, #129	; 0x81
 8006f60:	f7fa fa92 	bl	8001488 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f6a:	23d8      	movs	r3, #216	; 0xd8
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2101      	movs	r1, #1
 8006f70:	f7fa fa8a 	bl	8001488 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000758 	.word	0x20000758
 8006f84:	40005c00 	.word	0x40005c00

08006f88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7f9 fcc1 	bl	8000926 <HAL_PCD_Start>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f934 	bl	8007218 <USBD_Get_USB_Status>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	4608      	mov	r0, r1
 8006fc8:	4611      	mov	r1, r2
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4603      	mov	r3, r0
 8006fce:	70fb      	strb	r3, [r7, #3]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70bb      	strb	r3, [r7, #2]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006fe6:	78bb      	ldrb	r3, [r7, #2]
 8006fe8:	883a      	ldrh	r2, [r7, #0]
 8006fea:	78f9      	ldrb	r1, [r7, #3]
 8006fec:	f7f9 fdf4 	bl	8000bd8 <HAL_PCD_EP_Open>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 f90e 	bl	8007218 <USBD_Get_USB_Status>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007000:	7bbb      	ldrb	r3, [r7, #14]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7f9 fe35 	bl	8000c98 <HAL_PCD_EP_Close>
 800702e:	4603      	mov	r3, r0
 8007030:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 f8ef 	bl	8007218 <USBD_Get_USB_Status>
 800703a:	4603      	mov	r3, r0
 800703c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800703e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007062:	78fa      	ldrb	r2, [r7, #3]
 8007064:	4611      	mov	r1, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7f9 fecb 	bl	8000e02 <HAL_PCD_EP_SetStall>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f8d0 	bl	8007218 <USBD_Get_USB_Status>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800707c:	7bbb      	ldrb	r3, [r7, #14]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070a0:	78fa      	ldrb	r2, [r7, #3]
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7f9 ff06 	bl	8000eb6 <HAL_PCD_EP_ClrStall>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f8b1 	bl	8007218 <USBD_Get_USB_Status>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80070d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da08      	bge.n	80070f2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	015b      	lsls	r3, r3, #5
 80070ea:	4413      	add	r3, r2
 80070ec:	332a      	adds	r3, #42	; 0x2a
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	e008      	b.n	8007104 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80070f2:	78fb      	ldrb	r3, [r7, #3]
 80070f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007102:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007128:	78fa      	ldrb	r2, [r7, #3]
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f7f9 fd2e 	bl	8000b8e <HAL_PCD_SetAddress>
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f86d 	bl	8007218 <USBD_Get_USB_Status>
 800713e:	4603      	mov	r3, r0
 8007140:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007142:	7bbb      	ldrb	r3, [r7, #14]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	607a      	str	r2, [r7, #4]
 8007156:	461a      	mov	r2, r3
 8007158:	460b      	mov	r3, r1
 800715a:	72fb      	strb	r3, [r7, #11]
 800715c:	4613      	mov	r3, r2
 800715e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800716e:	893b      	ldrh	r3, [r7, #8]
 8007170:	7af9      	ldrb	r1, [r7, #11]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	f7f9 fe0c 	bl	8000d90 <HAL_PCD_EP_Transmit>
 8007178:	4603      	mov	r3, r0
 800717a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 f84a 	bl	8007218 <USBD_Get_USB_Status>
 8007184:	4603      	mov	r3, r0
 8007186:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007188:	7dbb      	ldrb	r3, [r7, #22]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	461a      	mov	r2, r3
 800719e:	460b      	mov	r3, r1
 80071a0:	72fb      	strb	r3, [r7, #11]
 80071a2:	4613      	mov	r3, r2
 80071a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	7af9      	ldrb	r1, [r7, #11]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	f7f9 fdaf 	bl	8000d1c <HAL_PCD_EP_Receive>
 80071be:	4603      	mov	r3, r0
 80071c0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 f827 	bl	8007218 <USBD_Get_USB_Status>
 80071ca:	4603      	mov	r3, r0
 80071cc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80071ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80071e0:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_static_malloc+0x14>)
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	200002a0 	.word	0x200002a0

080071f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]

}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b03      	cmp	r3, #3
 800722a:	d817      	bhi.n	800725c <USBD_Get_USB_Status+0x44>
 800722c:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <USBD_Get_USB_Status+0x1c>)
 800722e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007232:	bf00      	nop
 8007234:	08007245 	.word	0x08007245
 8007238:	0800724b 	.word	0x0800724b
 800723c:	08007251 	.word	0x08007251
 8007240:	08007257 	.word	0x08007257
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
    break;
 8007248:	e00b      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800724a:	2302      	movs	r3, #2
 800724c:	73fb      	strb	r3, [r7, #15]
    break;
 800724e:	e008      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007250:	2301      	movs	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
    break;
 8007254:	e005      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007256:	2302      	movs	r3, #2
 8007258:	73fb      	strb	r3, [r7, #15]
    break;
 800725a:	e002      	b.n	8007262 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800725c:	2302      	movs	r3, #2
 800725e:	73fb      	strb	r3, [r7, #15]
    break;
 8007260:	bf00      	nop
  }
  return usb_status;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop

08007270 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007274:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007276:	4618      	mov	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800727e:	b480      	push	{r7}
 8007280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007284:	4618      	mov	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	bc80      	pop	{r7}
 800728a:	4770      	bx	lr

0800728c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	460a      	mov	r2, r1
 8007296:	71fb      	strb	r3, [r7, #7]
 8007298:	4613      	mov	r3, r2
 800729a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800729c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2212      	movs	r2, #18
 80072b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072ba:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000138 	.word	0x20000138

080072cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2204      	movs	r2, #4
 80072dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	2000014c 	.word	0x2000014c

080072f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	6039      	str	r1, [r7, #0]
 80072fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d105      	bne.n	800730e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	4907      	ldr	r1, [pc, #28]	; (8007324 <USBD_FS_ProductStrDescriptor+0x34>)
 8007306:	4808      	ldr	r0, [pc, #32]	; (8007328 <USBD_FS_ProductStrDescriptor+0x38>)
 8007308:	f7fe f80f 	bl	800532a <USBD_GetString>
 800730c:	e004      	b.n	8007318 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4904      	ldr	r1, [pc, #16]	; (8007324 <USBD_FS_ProductStrDescriptor+0x34>)
 8007312:	4805      	ldr	r0, [pc, #20]	; (8007328 <USBD_FS_ProductStrDescriptor+0x38>)
 8007314:	f7fe f809 	bl	800532a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007318:	4b02      	ldr	r3, [pc, #8]	; (8007324 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200009c4 	.word	0x200009c4
 8007328:	0800830c 	.word	0x0800830c

0800732c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	4603      	mov	r3, r0
 8007334:	6039      	str	r1, [r7, #0]
 8007336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	4904      	ldr	r1, [pc, #16]	; (800734c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800733c:	4804      	ldr	r0, [pc, #16]	; (8007350 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800733e:	f7fd fff4 	bl	800532a <USBD_GetString>
  return USBD_StrDesc;
 8007342:	4b02      	ldr	r3, [pc, #8]	; (800734c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007344:	4618      	mov	r0, r3
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	200009c4 	.word	0x200009c4
 8007350:	0800832c 	.word	0x0800832c

08007354 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	6039      	str	r1, [r7, #0]
 800735e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	221a      	movs	r2, #26
 8007364:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007366:	f000 f843 	bl	80073f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800736a:	4b02      	ldr	r3, [pc, #8]	; (8007374 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000150 	.word	0x20000150

08007378 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007384:	79fb      	ldrb	r3, [r7, #7]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d105      	bne.n	8007396 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4907      	ldr	r1, [pc, #28]	; (80073ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800738e:	4808      	ldr	r0, [pc, #32]	; (80073b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007390:	f7fd ffcb 	bl	800532a <USBD_GetString>
 8007394:	e004      	b.n	80073a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	4904      	ldr	r1, [pc, #16]	; (80073ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800739a:	4805      	ldr	r0, [pc, #20]	; (80073b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800739c:	f7fd ffc5 	bl	800532a <USBD_GetString>
  }
  return USBD_StrDesc;
 80073a0:	4b02      	ldr	r3, [pc, #8]	; (80073ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	200009c4 	.word	0x200009c4
 80073b0:	08008340 	.word	0x08008340

080073b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	6039      	str	r1, [r7, #0]
 80073be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d105      	bne.n	80073d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	4907      	ldr	r1, [pc, #28]	; (80073e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ca:	4808      	ldr	r0, [pc, #32]	; (80073ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073cc:	f7fd ffad 	bl	800532a <USBD_GetString>
 80073d0:	e004      	b.n	80073dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	4904      	ldr	r1, [pc, #16]	; (80073e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073d6:	4805      	ldr	r0, [pc, #20]	; (80073ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073d8:	f7fd ffa7 	bl	800532a <USBD_GetString>
  }
  return USBD_StrDesc;
 80073dc:	4b02      	ldr	r3, [pc, #8]	; (80073e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	200009c4 	.word	0x200009c4
 80073ec:	08008354 	.word	0x08008354

080073f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80073f6:	4b0f      	ldr	r3, [pc, #60]	; (8007434 <Get_SerialNum+0x44>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <Get_SerialNum+0x48>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007402:	4b0e      	ldr	r3, [pc, #56]	; (800743c <Get_SerialNum+0x4c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d009      	beq.n	800742a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007416:	2208      	movs	r2, #8
 8007418:	4909      	ldr	r1, [pc, #36]	; (8007440 <Get_SerialNum+0x50>)
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f814 	bl	8007448 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007420:	2204      	movs	r2, #4
 8007422:	4908      	ldr	r1, [pc, #32]	; (8007444 <Get_SerialNum+0x54>)
 8007424:	68b8      	ldr	r0, [r7, #8]
 8007426:	f000 f80f 	bl	8007448 <IntToUnicode>
  }
}
 800742a:	bf00      	nop
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	1ffff7e8 	.word	0x1ffff7e8
 8007438:	1ffff7ec 	.word	0x1ffff7ec
 800743c:	1ffff7f0 	.word	0x1ffff7f0
 8007440:	20000152 	.word	0x20000152
 8007444:	20000162 	.word	0x20000162

08007448 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]
 800745e:	e027      	b.n	80074b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	0f1b      	lsrs	r3, r3, #28
 8007464:	2b09      	cmp	r3, #9
 8007466:	d80b      	bhi.n	8007480 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	0f1b      	lsrs	r3, r3, #28
 800746c:	b2da      	uxtb	r2, r3
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4619      	mov	r1, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	440b      	add	r3, r1
 8007478:	3230      	adds	r2, #48	; 0x30
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e00a      	b.n	8007496 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	0f1b      	lsrs	r3, r3, #28
 8007484:	b2da      	uxtb	r2, r3
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	4619      	mov	r1, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	440b      	add	r3, r1
 8007490:	3237      	adds	r2, #55	; 0x37
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800749c:	7dfb      	ldrb	r3, [r7, #23]
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	3301      	adds	r3, #1
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	4413      	add	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	3301      	adds	r3, #1
 80074ae:	75fb      	strb	r3, [r7, #23]
 80074b0:	7dfa      	ldrb	r2, [r7, #23]
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d3d3      	bcc.n	8007460 <IntToUnicode+0x18>
  }
}
 80074b8:	bf00      	nop
 80074ba:	371c      	adds	r7, #28
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
	...

080074c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80074c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80074c6:	e003      	b.n	80074d0 <LoopCopyDataInit>

080074c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80074ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80074cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80074ce:	3104      	adds	r1, #4

080074d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80074d0:	480a      	ldr	r0, [pc, #40]	; (80074fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80074d2:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80074d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80074d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80074d8:	d3f6      	bcc.n	80074c8 <CopyDataInit>
  ldr r2, =_sbss
 80074da:	4a0a      	ldr	r2, [pc, #40]	; (8007504 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80074dc:	e002      	b.n	80074e4 <LoopFillZerobss>

080074de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80074de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80074e0:	f842 3b04 	str.w	r3, [r2], #4

080074e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80074e4:	4b08      	ldr	r3, [pc, #32]	; (8007508 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80074e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80074e8:	d3f9      	bcc.n	80074de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80074ea:	f7ff fbdd 	bl	8006ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074ee:	f000 f815 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074f2:	f7ff f955 	bl	80067a0 <main>
  bx lr
 80074f6:	4770      	bx	lr
  ldr r3, =_sidata
 80074f8:	080083d0 	.word	0x080083d0
  ldr r0, =_sdata
 80074fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007500:	200001d0 	.word	0x200001d0
  ldr r2, =_sbss
 8007504:	200001d0 	.word	0x200001d0
  ldr r3, = _ebss
 8007508:	20000bc8 	.word	0x20000bc8

0800750c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800750c:	e7fe      	b.n	800750c <ADC1_2_IRQHandler>
	...

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	; (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	2000016c 	.word	0x2000016c

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	2500      	movs	r5, #0
 8007520:	4e0c      	ldr	r6, [pc, #48]	; (8007554 <__libc_init_array+0x38>)
 8007522:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007524:	1ba4      	subs	r4, r4, r6
 8007526:	10a4      	asrs	r4, r4, #2
 8007528:	42a5      	cmp	r5, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	f000 fc36 	bl	8007d9c <_init>
 8007530:	2500      	movs	r5, #0
 8007532:	4e0a      	ldr	r6, [pc, #40]	; (800755c <__libc_init_array+0x40>)
 8007534:	4c0a      	ldr	r4, [pc, #40]	; (8007560 <__libc_init_array+0x44>)
 8007536:	1ba4      	subs	r4, r4, r6
 8007538:	10a4      	asrs	r4, r4, #2
 800753a:	42a5      	cmp	r5, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007544:	4798      	blx	r3
 8007546:	3501      	adds	r5, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800754e:	4798      	blx	r3
 8007550:	3501      	adds	r5, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	080083c8 	.word	0x080083c8
 8007558:	080083c8 	.word	0x080083c8
 800755c:	080083c8 	.word	0x080083c8
 8007560:	080083cc 	.word	0x080083cc

08007564 <memcpy>:
 8007564:	b510      	push	{r4, lr}
 8007566:	1e43      	subs	r3, r0, #1
 8007568:	440a      	add	r2, r1
 800756a:	4291      	cmp	r1, r2
 800756c:	d100      	bne.n	8007570 <memcpy+0xc>
 800756e:	bd10      	pop	{r4, pc}
 8007570:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007578:	e7f7      	b.n	800756a <memcpy+0x6>

0800757a <memset>:
 800757a:	4603      	mov	r3, r0
 800757c:	4402      	add	r2, r0
 800757e:	4293      	cmp	r3, r2
 8007580:	d100      	bne.n	8007584 <memset+0xa>
 8007582:	4770      	bx	lr
 8007584:	f803 1b01 	strb.w	r1, [r3], #1
 8007588:	e7f9      	b.n	800757e <memset+0x4>
	...

0800758c <siprintf>:
 800758c:	b40e      	push	{r1, r2, r3}
 800758e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007592:	b500      	push	{lr}
 8007594:	b09c      	sub	sp, #112	; 0x70
 8007596:	ab1d      	add	r3, sp, #116	; 0x74
 8007598:	9002      	str	r0, [sp, #8]
 800759a:	9006      	str	r0, [sp, #24]
 800759c:	9107      	str	r1, [sp, #28]
 800759e:	9104      	str	r1, [sp, #16]
 80075a0:	4808      	ldr	r0, [pc, #32]	; (80075c4 <siprintf+0x38>)
 80075a2:	4909      	ldr	r1, [pc, #36]	; (80075c8 <siprintf+0x3c>)
 80075a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a8:	9105      	str	r1, [sp, #20]
 80075aa:	6800      	ldr	r0, [r0, #0]
 80075ac:	a902      	add	r1, sp, #8
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f000 f866 	bl	8007680 <_svfiprintf_r>
 80075b4:	2200      	movs	r2, #0
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	b01c      	add	sp, #112	; 0x70
 80075bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075c0:	b003      	add	sp, #12
 80075c2:	4770      	bx	lr
 80075c4:	2000016c 	.word	0x2000016c
 80075c8:	ffff0208 	.word	0xffff0208

080075cc <__ssputs_r>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	688e      	ldr	r6, [r1, #8]
 80075d2:	4682      	mov	sl, r0
 80075d4:	429e      	cmp	r6, r3
 80075d6:	460c      	mov	r4, r1
 80075d8:	4690      	mov	r8, r2
 80075da:	4699      	mov	r9, r3
 80075dc:	d837      	bhi.n	800764e <__ssputs_r+0x82>
 80075de:	898a      	ldrh	r2, [r1, #12]
 80075e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075e4:	d031      	beq.n	800764a <__ssputs_r+0x7e>
 80075e6:	2302      	movs	r3, #2
 80075e8:	6825      	ldr	r5, [r4, #0]
 80075ea:	6909      	ldr	r1, [r1, #16]
 80075ec:	1a6f      	subs	r7, r5, r1
 80075ee:	6965      	ldr	r5, [r4, #20]
 80075f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80075f8:	f109 0301 	add.w	r3, r9, #1
 80075fc:	443b      	add	r3, r7
 80075fe:	429d      	cmp	r5, r3
 8007600:	bf38      	it	cc
 8007602:	461d      	movcc	r5, r3
 8007604:	0553      	lsls	r3, r2, #21
 8007606:	d530      	bpl.n	800766a <__ssputs_r+0x9e>
 8007608:	4629      	mov	r1, r5
 800760a:	f000 fb2d 	bl	8007c68 <_malloc_r>
 800760e:	4606      	mov	r6, r0
 8007610:	b950      	cbnz	r0, 8007628 <__ssputs_r+0x5c>
 8007612:	230c      	movs	r3, #12
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	f8ca 3000 	str.w	r3, [sl]
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007628:	463a      	mov	r2, r7
 800762a:	6921      	ldr	r1, [r4, #16]
 800762c:	f7ff ff9a 	bl	8007564 <memcpy>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	6126      	str	r6, [r4, #16]
 800763e:	443e      	add	r6, r7
 8007640:	6026      	str	r6, [r4, #0]
 8007642:	464e      	mov	r6, r9
 8007644:	6165      	str	r5, [r4, #20]
 8007646:	1bed      	subs	r5, r5, r7
 8007648:	60a5      	str	r5, [r4, #8]
 800764a:	454e      	cmp	r6, r9
 800764c:	d900      	bls.n	8007650 <__ssputs_r+0x84>
 800764e:	464e      	mov	r6, r9
 8007650:	4632      	mov	r2, r6
 8007652:	4641      	mov	r1, r8
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	f000 faa1 	bl	8007b9c <memmove>
 800765a:	68a3      	ldr	r3, [r4, #8]
 800765c:	2000      	movs	r0, #0
 800765e:	1b9b      	subs	r3, r3, r6
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	441e      	add	r6, r3
 8007666:	6026      	str	r6, [r4, #0]
 8007668:	e7dc      	b.n	8007624 <__ssputs_r+0x58>
 800766a:	462a      	mov	r2, r5
 800766c:	f000 fb56 	bl	8007d1c <_realloc_r>
 8007670:	4606      	mov	r6, r0
 8007672:	2800      	cmp	r0, #0
 8007674:	d1e2      	bne.n	800763c <__ssputs_r+0x70>
 8007676:	6921      	ldr	r1, [r4, #16]
 8007678:	4650      	mov	r0, sl
 800767a:	f000 faa9 	bl	8007bd0 <_free_r>
 800767e:	e7c8      	b.n	8007612 <__ssputs_r+0x46>

08007680 <_svfiprintf_r>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	461d      	mov	r5, r3
 8007686:	898b      	ldrh	r3, [r1, #12]
 8007688:	b09d      	sub	sp, #116	; 0x74
 800768a:	061f      	lsls	r7, r3, #24
 800768c:	4680      	mov	r8, r0
 800768e:	460c      	mov	r4, r1
 8007690:	4616      	mov	r6, r2
 8007692:	d50f      	bpl.n	80076b4 <_svfiprintf_r+0x34>
 8007694:	690b      	ldr	r3, [r1, #16]
 8007696:	b96b      	cbnz	r3, 80076b4 <_svfiprintf_r+0x34>
 8007698:	2140      	movs	r1, #64	; 0x40
 800769a:	f000 fae5 	bl	8007c68 <_malloc_r>
 800769e:	6020      	str	r0, [r4, #0]
 80076a0:	6120      	str	r0, [r4, #16]
 80076a2:	b928      	cbnz	r0, 80076b0 <_svfiprintf_r+0x30>
 80076a4:	230c      	movs	r3, #12
 80076a6:	f8c8 3000 	str.w	r3, [r8]
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	e0c8      	b.n	8007842 <_svfiprintf_r+0x1c2>
 80076b0:	2340      	movs	r3, #64	; 0x40
 80076b2:	6163      	str	r3, [r4, #20]
 80076b4:	2300      	movs	r3, #0
 80076b6:	9309      	str	r3, [sp, #36]	; 0x24
 80076b8:	2320      	movs	r3, #32
 80076ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076be:	2330      	movs	r3, #48	; 0x30
 80076c0:	f04f 0b01 	mov.w	fp, #1
 80076c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076c8:	9503      	str	r5, [sp, #12]
 80076ca:	4637      	mov	r7, r6
 80076cc:	463d      	mov	r5, r7
 80076ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076d2:	b10b      	cbz	r3, 80076d8 <_svfiprintf_r+0x58>
 80076d4:	2b25      	cmp	r3, #37	; 0x25
 80076d6:	d13e      	bne.n	8007756 <_svfiprintf_r+0xd6>
 80076d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80076dc:	d00b      	beq.n	80076f6 <_svfiprintf_r+0x76>
 80076de:	4653      	mov	r3, sl
 80076e0:	4632      	mov	r2, r6
 80076e2:	4621      	mov	r1, r4
 80076e4:	4640      	mov	r0, r8
 80076e6:	f7ff ff71 	bl	80075cc <__ssputs_r>
 80076ea:	3001      	adds	r0, #1
 80076ec:	f000 80a4 	beq.w	8007838 <_svfiprintf_r+0x1b8>
 80076f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f2:	4453      	add	r3, sl
 80076f4:	9309      	str	r3, [sp, #36]	; 0x24
 80076f6:	783b      	ldrb	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 809d 	beq.w	8007838 <_svfiprintf_r+0x1b8>
 80076fe:	2300      	movs	r3, #0
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	9307      	str	r3, [sp, #28]
 800770c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007710:	931a      	str	r3, [sp, #104]	; 0x68
 8007712:	462f      	mov	r7, r5
 8007714:	2205      	movs	r2, #5
 8007716:	f817 1b01 	ldrb.w	r1, [r7], #1
 800771a:	4850      	ldr	r0, [pc, #320]	; (800785c <_svfiprintf_r+0x1dc>)
 800771c:	f000 fa30 	bl	8007b80 <memchr>
 8007720:	9b04      	ldr	r3, [sp, #16]
 8007722:	b9d0      	cbnz	r0, 800775a <_svfiprintf_r+0xda>
 8007724:	06d9      	lsls	r1, r3, #27
 8007726:	bf44      	itt	mi
 8007728:	2220      	movmi	r2, #32
 800772a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800772e:	071a      	lsls	r2, r3, #28
 8007730:	bf44      	itt	mi
 8007732:	222b      	movmi	r2, #43	; 0x2b
 8007734:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007738:	782a      	ldrb	r2, [r5, #0]
 800773a:	2a2a      	cmp	r2, #42	; 0x2a
 800773c:	d015      	beq.n	800776a <_svfiprintf_r+0xea>
 800773e:	462f      	mov	r7, r5
 8007740:	2000      	movs	r0, #0
 8007742:	250a      	movs	r5, #10
 8007744:	9a07      	ldr	r2, [sp, #28]
 8007746:	4639      	mov	r1, r7
 8007748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800774c:	3b30      	subs	r3, #48	; 0x30
 800774e:	2b09      	cmp	r3, #9
 8007750:	d94d      	bls.n	80077ee <_svfiprintf_r+0x16e>
 8007752:	b1b8      	cbz	r0, 8007784 <_svfiprintf_r+0x104>
 8007754:	e00f      	b.n	8007776 <_svfiprintf_r+0xf6>
 8007756:	462f      	mov	r7, r5
 8007758:	e7b8      	b.n	80076cc <_svfiprintf_r+0x4c>
 800775a:	4a40      	ldr	r2, [pc, #256]	; (800785c <_svfiprintf_r+0x1dc>)
 800775c:	463d      	mov	r5, r7
 800775e:	1a80      	subs	r0, r0, r2
 8007760:	fa0b f000 	lsl.w	r0, fp, r0
 8007764:	4318      	orrs	r0, r3
 8007766:	9004      	str	r0, [sp, #16]
 8007768:	e7d3      	b.n	8007712 <_svfiprintf_r+0x92>
 800776a:	9a03      	ldr	r2, [sp, #12]
 800776c:	1d11      	adds	r1, r2, #4
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	9103      	str	r1, [sp, #12]
 8007772:	2a00      	cmp	r2, #0
 8007774:	db01      	blt.n	800777a <_svfiprintf_r+0xfa>
 8007776:	9207      	str	r2, [sp, #28]
 8007778:	e004      	b.n	8007784 <_svfiprintf_r+0x104>
 800777a:	4252      	negs	r2, r2
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	9207      	str	r2, [sp, #28]
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	783b      	ldrb	r3, [r7, #0]
 8007786:	2b2e      	cmp	r3, #46	; 0x2e
 8007788:	d10c      	bne.n	80077a4 <_svfiprintf_r+0x124>
 800778a:	787b      	ldrb	r3, [r7, #1]
 800778c:	2b2a      	cmp	r3, #42	; 0x2a
 800778e:	d133      	bne.n	80077f8 <_svfiprintf_r+0x178>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	3702      	adds	r7, #2
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	9203      	str	r2, [sp, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfb8      	it	lt
 800779e:	f04f 33ff 	movlt.w	r3, #4294967295
 80077a2:	9305      	str	r3, [sp, #20]
 80077a4:	4d2e      	ldr	r5, [pc, #184]	; (8007860 <_svfiprintf_r+0x1e0>)
 80077a6:	2203      	movs	r2, #3
 80077a8:	7839      	ldrb	r1, [r7, #0]
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f9e8 	bl	8007b80 <memchr>
 80077b0:	b138      	cbz	r0, 80077c2 <_svfiprintf_r+0x142>
 80077b2:	2340      	movs	r3, #64	; 0x40
 80077b4:	1b40      	subs	r0, r0, r5
 80077b6:	fa03 f000 	lsl.w	r0, r3, r0
 80077ba:	9b04      	ldr	r3, [sp, #16]
 80077bc:	3701      	adds	r7, #1
 80077be:	4303      	orrs	r3, r0
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	7839      	ldrb	r1, [r7, #0]
 80077c4:	2206      	movs	r2, #6
 80077c6:	4827      	ldr	r0, [pc, #156]	; (8007864 <_svfiprintf_r+0x1e4>)
 80077c8:	1c7e      	adds	r6, r7, #1
 80077ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077ce:	f000 f9d7 	bl	8007b80 <memchr>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d038      	beq.n	8007848 <_svfiprintf_r+0x1c8>
 80077d6:	4b24      	ldr	r3, [pc, #144]	; (8007868 <_svfiprintf_r+0x1e8>)
 80077d8:	bb13      	cbnz	r3, 8007820 <_svfiprintf_r+0x1a0>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	3307      	adds	r3, #7
 80077de:	f023 0307 	bic.w	r3, r3, #7
 80077e2:	3308      	adds	r3, #8
 80077e4:	9303      	str	r3, [sp, #12]
 80077e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e8:	444b      	add	r3, r9
 80077ea:	9309      	str	r3, [sp, #36]	; 0x24
 80077ec:	e76d      	b.n	80076ca <_svfiprintf_r+0x4a>
 80077ee:	fb05 3202 	mla	r2, r5, r2, r3
 80077f2:	2001      	movs	r0, #1
 80077f4:	460f      	mov	r7, r1
 80077f6:	e7a6      	b.n	8007746 <_svfiprintf_r+0xc6>
 80077f8:	2300      	movs	r3, #0
 80077fa:	250a      	movs	r5, #10
 80077fc:	4619      	mov	r1, r3
 80077fe:	3701      	adds	r7, #1
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	4638      	mov	r0, r7
 8007804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007808:	3a30      	subs	r2, #48	; 0x30
 800780a:	2a09      	cmp	r2, #9
 800780c:	d903      	bls.n	8007816 <_svfiprintf_r+0x196>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0c8      	beq.n	80077a4 <_svfiprintf_r+0x124>
 8007812:	9105      	str	r1, [sp, #20]
 8007814:	e7c6      	b.n	80077a4 <_svfiprintf_r+0x124>
 8007816:	fb05 2101 	mla	r1, r5, r1, r2
 800781a:	2301      	movs	r3, #1
 800781c:	4607      	mov	r7, r0
 800781e:	e7f0      	b.n	8007802 <_svfiprintf_r+0x182>
 8007820:	ab03      	add	r3, sp, #12
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	4622      	mov	r2, r4
 8007826:	4b11      	ldr	r3, [pc, #68]	; (800786c <_svfiprintf_r+0x1ec>)
 8007828:	a904      	add	r1, sp, #16
 800782a:	4640      	mov	r0, r8
 800782c:	f3af 8000 	nop.w
 8007830:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007834:	4681      	mov	r9, r0
 8007836:	d1d6      	bne.n	80077e6 <_svfiprintf_r+0x166>
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	065b      	lsls	r3, r3, #25
 800783c:	f53f af35 	bmi.w	80076aa <_svfiprintf_r+0x2a>
 8007840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007842:	b01d      	add	sp, #116	; 0x74
 8007844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007848:	ab03      	add	r3, sp, #12
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	4622      	mov	r2, r4
 800784e:	4b07      	ldr	r3, [pc, #28]	; (800786c <_svfiprintf_r+0x1ec>)
 8007850:	a904      	add	r1, sp, #16
 8007852:	4640      	mov	r0, r8
 8007854:	f000 f882 	bl	800795c <_printf_i>
 8007858:	e7ea      	b.n	8007830 <_svfiprintf_r+0x1b0>
 800785a:	bf00      	nop
 800785c:	08008394 	.word	0x08008394
 8007860:	0800839a 	.word	0x0800839a
 8007864:	0800839e 	.word	0x0800839e
 8007868:	00000000 	.word	0x00000000
 800786c:	080075cd 	.word	0x080075cd

08007870 <_printf_common>:
 8007870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007874:	4691      	mov	r9, r2
 8007876:	461f      	mov	r7, r3
 8007878:	688a      	ldr	r2, [r1, #8]
 800787a:	690b      	ldr	r3, [r1, #16]
 800787c:	4606      	mov	r6, r0
 800787e:	4293      	cmp	r3, r2
 8007880:	bfb8      	it	lt
 8007882:	4613      	movlt	r3, r2
 8007884:	f8c9 3000 	str.w	r3, [r9]
 8007888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800788c:	460c      	mov	r4, r1
 800788e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007892:	b112      	cbz	r2, 800789a <_printf_common+0x2a>
 8007894:	3301      	adds	r3, #1
 8007896:	f8c9 3000 	str.w	r3, [r9]
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	0699      	lsls	r1, r3, #26
 800789e:	bf42      	ittt	mi
 80078a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078a4:	3302      	addmi	r3, #2
 80078a6:	f8c9 3000 	strmi.w	r3, [r9]
 80078aa:	6825      	ldr	r5, [r4, #0]
 80078ac:	f015 0506 	ands.w	r5, r5, #6
 80078b0:	d107      	bne.n	80078c2 <_printf_common+0x52>
 80078b2:	f104 0a19 	add.w	sl, r4, #25
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	f8d9 2000 	ldr.w	r2, [r9]
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	42ab      	cmp	r3, r5
 80078c0:	dc29      	bgt.n	8007916 <_printf_common+0xa6>
 80078c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	3300      	adds	r3, #0
 80078ca:	bf18      	it	ne
 80078cc:	2301      	movne	r3, #1
 80078ce:	0692      	lsls	r2, r2, #26
 80078d0:	d42e      	bmi.n	8007930 <_printf_common+0xc0>
 80078d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d6:	4639      	mov	r1, r7
 80078d8:	4630      	mov	r0, r6
 80078da:	47c0      	blx	r8
 80078dc:	3001      	adds	r0, #1
 80078de:	d021      	beq.n	8007924 <_printf_common+0xb4>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	68e5      	ldr	r5, [r4, #12]
 80078e4:	f003 0306 	and.w	r3, r3, #6
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	bf18      	it	ne
 80078ec:	2500      	movne	r5, #0
 80078ee:	f8d9 2000 	ldr.w	r2, [r9]
 80078f2:	f04f 0900 	mov.w	r9, #0
 80078f6:	bf08      	it	eq
 80078f8:	1aad      	subeq	r5, r5, r2
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	bf08      	it	eq
 8007900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007904:	4293      	cmp	r3, r2
 8007906:	bfc4      	itt	gt
 8007908:	1a9b      	subgt	r3, r3, r2
 800790a:	18ed      	addgt	r5, r5, r3
 800790c:	341a      	adds	r4, #26
 800790e:	454d      	cmp	r5, r9
 8007910:	d11a      	bne.n	8007948 <_printf_common+0xd8>
 8007912:	2000      	movs	r0, #0
 8007914:	e008      	b.n	8007928 <_printf_common+0xb8>
 8007916:	2301      	movs	r3, #1
 8007918:	4652      	mov	r2, sl
 800791a:	4639      	mov	r1, r7
 800791c:	4630      	mov	r0, r6
 800791e:	47c0      	blx	r8
 8007920:	3001      	adds	r0, #1
 8007922:	d103      	bne.n	800792c <_printf_common+0xbc>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	3501      	adds	r5, #1
 800792e:	e7c2      	b.n	80078b6 <_printf_common+0x46>
 8007930:	2030      	movs	r0, #48	; 0x30
 8007932:	18e1      	adds	r1, r4, r3
 8007934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800793e:	4422      	add	r2, r4
 8007940:	3302      	adds	r3, #2
 8007942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007946:	e7c4      	b.n	80078d2 <_printf_common+0x62>
 8007948:	2301      	movs	r3, #1
 800794a:	4622      	mov	r2, r4
 800794c:	4639      	mov	r1, r7
 800794e:	4630      	mov	r0, r6
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d0e6      	beq.n	8007924 <_printf_common+0xb4>
 8007956:	f109 0901 	add.w	r9, r9, #1
 800795a:	e7d8      	b.n	800790e <_printf_common+0x9e>

0800795c <_printf_i>:
 800795c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007960:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007964:	460c      	mov	r4, r1
 8007966:	7e09      	ldrb	r1, [r1, #24]
 8007968:	b085      	sub	sp, #20
 800796a:	296e      	cmp	r1, #110	; 0x6e
 800796c:	4617      	mov	r7, r2
 800796e:	4606      	mov	r6, r0
 8007970:	4698      	mov	r8, r3
 8007972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007974:	f000 80b3 	beq.w	8007ade <_printf_i+0x182>
 8007978:	d822      	bhi.n	80079c0 <_printf_i+0x64>
 800797a:	2963      	cmp	r1, #99	; 0x63
 800797c:	d036      	beq.n	80079ec <_printf_i+0x90>
 800797e:	d80a      	bhi.n	8007996 <_printf_i+0x3a>
 8007980:	2900      	cmp	r1, #0
 8007982:	f000 80b9 	beq.w	8007af8 <_printf_i+0x19c>
 8007986:	2958      	cmp	r1, #88	; 0x58
 8007988:	f000 8083 	beq.w	8007a92 <_printf_i+0x136>
 800798c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007990:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007994:	e032      	b.n	80079fc <_printf_i+0xa0>
 8007996:	2964      	cmp	r1, #100	; 0x64
 8007998:	d001      	beq.n	800799e <_printf_i+0x42>
 800799a:	2969      	cmp	r1, #105	; 0x69
 800799c:	d1f6      	bne.n	800798c <_printf_i+0x30>
 800799e:	6820      	ldr	r0, [r4, #0]
 80079a0:	6813      	ldr	r3, [r2, #0]
 80079a2:	0605      	lsls	r5, r0, #24
 80079a4:	f103 0104 	add.w	r1, r3, #4
 80079a8:	d52a      	bpl.n	8007a00 <_printf_i+0xa4>
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6011      	str	r1, [r2, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da03      	bge.n	80079ba <_printf_i+0x5e>
 80079b2:	222d      	movs	r2, #45	; 0x2d
 80079b4:	425b      	negs	r3, r3
 80079b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079ba:	486f      	ldr	r0, [pc, #444]	; (8007b78 <_printf_i+0x21c>)
 80079bc:	220a      	movs	r2, #10
 80079be:	e039      	b.n	8007a34 <_printf_i+0xd8>
 80079c0:	2973      	cmp	r1, #115	; 0x73
 80079c2:	f000 809d 	beq.w	8007b00 <_printf_i+0x1a4>
 80079c6:	d808      	bhi.n	80079da <_printf_i+0x7e>
 80079c8:	296f      	cmp	r1, #111	; 0x6f
 80079ca:	d020      	beq.n	8007a0e <_printf_i+0xb2>
 80079cc:	2970      	cmp	r1, #112	; 0x70
 80079ce:	d1dd      	bne.n	800798c <_printf_i+0x30>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	f043 0320 	orr.w	r3, r3, #32
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	e003      	b.n	80079e2 <_printf_i+0x86>
 80079da:	2975      	cmp	r1, #117	; 0x75
 80079dc:	d017      	beq.n	8007a0e <_printf_i+0xb2>
 80079de:	2978      	cmp	r1, #120	; 0x78
 80079e0:	d1d4      	bne.n	800798c <_printf_i+0x30>
 80079e2:	2378      	movs	r3, #120	; 0x78
 80079e4:	4865      	ldr	r0, [pc, #404]	; (8007b7c <_printf_i+0x220>)
 80079e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079ea:	e055      	b.n	8007a98 <_printf_i+0x13c>
 80079ec:	6813      	ldr	r3, [r2, #0]
 80079ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f2:	1d19      	adds	r1, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6011      	str	r1, [r2, #0]
 80079f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079fc:	2301      	movs	r3, #1
 80079fe:	e08c      	b.n	8007b1a <_printf_i+0x1be>
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a06:	6011      	str	r1, [r2, #0]
 8007a08:	bf18      	it	ne
 8007a0a:	b21b      	sxthne	r3, r3
 8007a0c:	e7cf      	b.n	80079ae <_printf_i+0x52>
 8007a0e:	6813      	ldr	r3, [r2, #0]
 8007a10:	6825      	ldr	r5, [r4, #0]
 8007a12:	1d18      	adds	r0, r3, #4
 8007a14:	6010      	str	r0, [r2, #0]
 8007a16:	0628      	lsls	r0, r5, #24
 8007a18:	d501      	bpl.n	8007a1e <_printf_i+0xc2>
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	e002      	b.n	8007a24 <_printf_i+0xc8>
 8007a1e:	0668      	lsls	r0, r5, #25
 8007a20:	d5fb      	bpl.n	8007a1a <_printf_i+0xbe>
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	296f      	cmp	r1, #111	; 0x6f
 8007a26:	bf14      	ite	ne
 8007a28:	220a      	movne	r2, #10
 8007a2a:	2208      	moveq	r2, #8
 8007a2c:	4852      	ldr	r0, [pc, #328]	; (8007b78 <_printf_i+0x21c>)
 8007a2e:	2100      	movs	r1, #0
 8007a30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a34:	6865      	ldr	r5, [r4, #4]
 8007a36:	2d00      	cmp	r5, #0
 8007a38:	60a5      	str	r5, [r4, #8]
 8007a3a:	f2c0 8095 	blt.w	8007b68 <_printf_i+0x20c>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	f021 0104 	bic.w	r1, r1, #4
 8007a44:	6021      	str	r1, [r4, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d13d      	bne.n	8007ac6 <_printf_i+0x16a>
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	f040 808e 	bne.w	8007b6c <_printf_i+0x210>
 8007a50:	4665      	mov	r5, ip
 8007a52:	2a08      	cmp	r2, #8
 8007a54:	d10b      	bne.n	8007a6e <_printf_i+0x112>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	07db      	lsls	r3, r3, #31
 8007a5a:	d508      	bpl.n	8007a6e <_printf_i+0x112>
 8007a5c:	6923      	ldr	r3, [r4, #16]
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	bfde      	ittt	le
 8007a64:	2330      	movle	r3, #48	; 0x30
 8007a66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a6e:	ebac 0305 	sub.w	r3, ip, r5
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	f8cd 8000 	str.w	r8, [sp]
 8007a78:	463b      	mov	r3, r7
 8007a7a:	aa03      	add	r2, sp, #12
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f7ff fef6 	bl	8007870 <_printf_common>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d14d      	bne.n	8007b24 <_printf_i+0x1c8>
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295
 8007a8c:	b005      	add	sp, #20
 8007a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a92:	4839      	ldr	r0, [pc, #228]	; (8007b78 <_printf_i+0x21c>)
 8007a94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a98:	6813      	ldr	r3, [r2, #0]
 8007a9a:	6821      	ldr	r1, [r4, #0]
 8007a9c:	1d1d      	adds	r5, r3, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6015      	str	r5, [r2, #0]
 8007aa2:	060a      	lsls	r2, r1, #24
 8007aa4:	d50b      	bpl.n	8007abe <_printf_i+0x162>
 8007aa6:	07ca      	lsls	r2, r1, #31
 8007aa8:	bf44      	itt	mi
 8007aaa:	f041 0120 	orrmi.w	r1, r1, #32
 8007aae:	6021      	strmi	r1, [r4, #0]
 8007ab0:	b91b      	cbnz	r3, 8007aba <_printf_i+0x15e>
 8007ab2:	6822      	ldr	r2, [r4, #0]
 8007ab4:	f022 0220 	bic.w	r2, r2, #32
 8007ab8:	6022      	str	r2, [r4, #0]
 8007aba:	2210      	movs	r2, #16
 8007abc:	e7b7      	b.n	8007a2e <_printf_i+0xd2>
 8007abe:	064d      	lsls	r5, r1, #25
 8007ac0:	bf48      	it	mi
 8007ac2:	b29b      	uxthmi	r3, r3
 8007ac4:	e7ef      	b.n	8007aa6 <_printf_i+0x14a>
 8007ac6:	4665      	mov	r5, ip
 8007ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007acc:	fb02 3311 	mls	r3, r2, r1, r3
 8007ad0:	5cc3      	ldrb	r3, [r0, r3]
 8007ad2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d1f5      	bne.n	8007ac8 <_printf_i+0x16c>
 8007adc:	e7b9      	b.n	8007a52 <_printf_i+0xf6>
 8007ade:	6813      	ldr	r3, [r2, #0]
 8007ae0:	6825      	ldr	r5, [r4, #0]
 8007ae2:	1d18      	adds	r0, r3, #4
 8007ae4:	6961      	ldr	r1, [r4, #20]
 8007ae6:	6010      	str	r0, [r2, #0]
 8007ae8:	0628      	lsls	r0, r5, #24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	d501      	bpl.n	8007af2 <_printf_i+0x196>
 8007aee:	6019      	str	r1, [r3, #0]
 8007af0:	e002      	b.n	8007af8 <_printf_i+0x19c>
 8007af2:	066a      	lsls	r2, r5, #25
 8007af4:	d5fb      	bpl.n	8007aee <_printf_i+0x192>
 8007af6:	8019      	strh	r1, [r3, #0]
 8007af8:	2300      	movs	r3, #0
 8007afa:	4665      	mov	r5, ip
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	e7b9      	b.n	8007a74 <_printf_i+0x118>
 8007b00:	6813      	ldr	r3, [r2, #0]
 8007b02:	1d19      	adds	r1, r3, #4
 8007b04:	6011      	str	r1, [r2, #0]
 8007b06:	681d      	ldr	r5, [r3, #0]
 8007b08:	6862      	ldr	r2, [r4, #4]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f000 f837 	bl	8007b80 <memchr>
 8007b12:	b108      	cbz	r0, 8007b18 <_printf_i+0x1bc>
 8007b14:	1b40      	subs	r0, r0, r5
 8007b16:	6060      	str	r0, [r4, #4]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b22:	e7a7      	b.n	8007a74 <_printf_i+0x118>
 8007b24:	6923      	ldr	r3, [r4, #16]
 8007b26:	462a      	mov	r2, r5
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	47c0      	blx	r8
 8007b2e:	3001      	adds	r0, #1
 8007b30:	d0aa      	beq.n	8007a88 <_printf_i+0x12c>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	079b      	lsls	r3, r3, #30
 8007b36:	d413      	bmi.n	8007b60 <_printf_i+0x204>
 8007b38:	68e0      	ldr	r0, [r4, #12]
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	4298      	cmp	r0, r3
 8007b3e:	bfb8      	it	lt
 8007b40:	4618      	movlt	r0, r3
 8007b42:	e7a3      	b.n	8007a8c <_printf_i+0x130>
 8007b44:	2301      	movs	r3, #1
 8007b46:	464a      	mov	r2, r9
 8007b48:	4639      	mov	r1, r7
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	47c0      	blx	r8
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d09a      	beq.n	8007a88 <_printf_i+0x12c>
 8007b52:	3501      	adds	r5, #1
 8007b54:	68e3      	ldr	r3, [r4, #12]
 8007b56:	9a03      	ldr	r2, [sp, #12]
 8007b58:	1a9b      	subs	r3, r3, r2
 8007b5a:	42ab      	cmp	r3, r5
 8007b5c:	dcf2      	bgt.n	8007b44 <_printf_i+0x1e8>
 8007b5e:	e7eb      	b.n	8007b38 <_printf_i+0x1dc>
 8007b60:	2500      	movs	r5, #0
 8007b62:	f104 0919 	add.w	r9, r4, #25
 8007b66:	e7f5      	b.n	8007b54 <_printf_i+0x1f8>
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1ac      	bne.n	8007ac6 <_printf_i+0x16a>
 8007b6c:	7803      	ldrb	r3, [r0, #0]
 8007b6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b76:	e76c      	b.n	8007a52 <_printf_i+0xf6>
 8007b78:	080083a5 	.word	0x080083a5
 8007b7c:	080083b6 	.word	0x080083b6

08007b80 <memchr>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	b2c9      	uxtb	r1, r1
 8007b84:	4402      	add	r2, r0
 8007b86:	4290      	cmp	r0, r2
 8007b88:	4603      	mov	r3, r0
 8007b8a:	d101      	bne.n	8007b90 <memchr+0x10>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e003      	b.n	8007b98 <memchr+0x18>
 8007b90:	781c      	ldrb	r4, [r3, #0]
 8007b92:	3001      	adds	r0, #1
 8007b94:	428c      	cmp	r4, r1
 8007b96:	d1f6      	bne.n	8007b86 <memchr+0x6>
 8007b98:	4618      	mov	r0, r3
 8007b9a:	bd10      	pop	{r4, pc}

08007b9c <memmove>:
 8007b9c:	4288      	cmp	r0, r1
 8007b9e:	b510      	push	{r4, lr}
 8007ba0:	eb01 0302 	add.w	r3, r1, r2
 8007ba4:	d807      	bhi.n	8007bb6 <memmove+0x1a>
 8007ba6:	1e42      	subs	r2, r0, #1
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	d00a      	beq.n	8007bc2 <memmove+0x26>
 8007bac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007bb4:	e7f8      	b.n	8007ba8 <memmove+0xc>
 8007bb6:	4283      	cmp	r3, r0
 8007bb8:	d9f5      	bls.n	8007ba6 <memmove+0xa>
 8007bba:	1881      	adds	r1, r0, r2
 8007bbc:	1ad2      	subs	r2, r2, r3
 8007bbe:	42d3      	cmn	r3, r2
 8007bc0:	d100      	bne.n	8007bc4 <memmove+0x28>
 8007bc2:	bd10      	pop	{r4, pc}
 8007bc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bcc:	e7f7      	b.n	8007bbe <memmove+0x22>
	...

08007bd0 <_free_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d043      	beq.n	8007c60 <_free_r+0x90>
 8007bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bdc:	1f0c      	subs	r4, r1, #4
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	18e4      	addlt	r4, r4, r3
 8007be4:	f000 f8d0 	bl	8007d88 <__malloc_lock>
 8007be8:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <_free_r+0x94>)
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	4610      	mov	r0, r2
 8007bee:	b933      	cbnz	r3, 8007bfe <_free_r+0x2e>
 8007bf0:	6063      	str	r3, [r4, #4]
 8007bf2:	6014      	str	r4, [r2, #0]
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bfa:	f000 b8c6 	b.w	8007d8a <__malloc_unlock>
 8007bfe:	42a3      	cmp	r3, r4
 8007c00:	d90b      	bls.n	8007c1a <_free_r+0x4a>
 8007c02:	6821      	ldr	r1, [r4, #0]
 8007c04:	1862      	adds	r2, r4, r1
 8007c06:	4293      	cmp	r3, r2
 8007c08:	bf01      	itttt	eq
 8007c0a:	681a      	ldreq	r2, [r3, #0]
 8007c0c:	685b      	ldreq	r3, [r3, #4]
 8007c0e:	1852      	addeq	r2, r2, r1
 8007c10:	6022      	streq	r2, [r4, #0]
 8007c12:	6063      	str	r3, [r4, #4]
 8007c14:	6004      	str	r4, [r0, #0]
 8007c16:	e7ed      	b.n	8007bf4 <_free_r+0x24>
 8007c18:	4613      	mov	r3, r2
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	b10a      	cbz	r2, 8007c22 <_free_r+0x52>
 8007c1e:	42a2      	cmp	r2, r4
 8007c20:	d9fa      	bls.n	8007c18 <_free_r+0x48>
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	1858      	adds	r0, r3, r1
 8007c26:	42a0      	cmp	r0, r4
 8007c28:	d10b      	bne.n	8007c42 <_free_r+0x72>
 8007c2a:	6820      	ldr	r0, [r4, #0]
 8007c2c:	4401      	add	r1, r0
 8007c2e:	1858      	adds	r0, r3, r1
 8007c30:	4282      	cmp	r2, r0
 8007c32:	6019      	str	r1, [r3, #0]
 8007c34:	d1de      	bne.n	8007bf4 <_free_r+0x24>
 8007c36:	6810      	ldr	r0, [r2, #0]
 8007c38:	6852      	ldr	r2, [r2, #4]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
 8007c40:	e7d8      	b.n	8007bf4 <_free_r+0x24>
 8007c42:	d902      	bls.n	8007c4a <_free_r+0x7a>
 8007c44:	230c      	movs	r3, #12
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	e7d4      	b.n	8007bf4 <_free_r+0x24>
 8007c4a:	6820      	ldr	r0, [r4, #0]
 8007c4c:	1821      	adds	r1, r4, r0
 8007c4e:	428a      	cmp	r2, r1
 8007c50:	bf01      	itttt	eq
 8007c52:	6811      	ldreq	r1, [r2, #0]
 8007c54:	6852      	ldreq	r2, [r2, #4]
 8007c56:	1809      	addeq	r1, r1, r0
 8007c58:	6021      	streq	r1, [r4, #0]
 8007c5a:	6062      	str	r2, [r4, #4]
 8007c5c:	605c      	str	r4, [r3, #4]
 8007c5e:	e7c9      	b.n	8007bf4 <_free_r+0x24>
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	200002f8 	.word	0x200002f8

08007c68 <_malloc_r>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	1ccd      	adds	r5, r1, #3
 8007c6c:	f025 0503 	bic.w	r5, r5, #3
 8007c70:	3508      	adds	r5, #8
 8007c72:	2d0c      	cmp	r5, #12
 8007c74:	bf38      	it	cc
 8007c76:	250c      	movcc	r5, #12
 8007c78:	2d00      	cmp	r5, #0
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	db01      	blt.n	8007c82 <_malloc_r+0x1a>
 8007c7e:	42a9      	cmp	r1, r5
 8007c80:	d903      	bls.n	8007c8a <_malloc_r+0x22>
 8007c82:	230c      	movs	r3, #12
 8007c84:	6033      	str	r3, [r6, #0]
 8007c86:	2000      	movs	r0, #0
 8007c88:	bd70      	pop	{r4, r5, r6, pc}
 8007c8a:	f000 f87d 	bl	8007d88 <__malloc_lock>
 8007c8e:	4a21      	ldr	r2, [pc, #132]	; (8007d14 <_malloc_r+0xac>)
 8007c90:	6814      	ldr	r4, [r2, #0]
 8007c92:	4621      	mov	r1, r4
 8007c94:	b991      	cbnz	r1, 8007cbc <_malloc_r+0x54>
 8007c96:	4c20      	ldr	r4, [pc, #128]	; (8007d18 <_malloc_r+0xb0>)
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	b91b      	cbnz	r3, 8007ca4 <_malloc_r+0x3c>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 f863 	bl	8007d68 <_sbrk_r>
 8007ca2:	6020      	str	r0, [r4, #0]
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f85e 	bl	8007d68 <_sbrk_r>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d124      	bne.n	8007cfa <_malloc_r+0x92>
 8007cb0:	230c      	movs	r3, #12
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	6033      	str	r3, [r6, #0]
 8007cb6:	f000 f868 	bl	8007d8a <__malloc_unlock>
 8007cba:	e7e4      	b.n	8007c86 <_malloc_r+0x1e>
 8007cbc:	680b      	ldr	r3, [r1, #0]
 8007cbe:	1b5b      	subs	r3, r3, r5
 8007cc0:	d418      	bmi.n	8007cf4 <_malloc_r+0x8c>
 8007cc2:	2b0b      	cmp	r3, #11
 8007cc4:	d90f      	bls.n	8007ce6 <_malloc_r+0x7e>
 8007cc6:	600b      	str	r3, [r1, #0]
 8007cc8:	18cc      	adds	r4, r1, r3
 8007cca:	50cd      	str	r5, [r1, r3]
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f000 f85c 	bl	8007d8a <__malloc_unlock>
 8007cd2:	f104 000b 	add.w	r0, r4, #11
 8007cd6:	1d23      	adds	r3, r4, #4
 8007cd8:	f020 0007 	bic.w	r0, r0, #7
 8007cdc:	1ac3      	subs	r3, r0, r3
 8007cde:	d0d3      	beq.n	8007c88 <_malloc_r+0x20>
 8007ce0:	425a      	negs	r2, r3
 8007ce2:	50e2      	str	r2, [r4, r3]
 8007ce4:	e7d0      	b.n	8007c88 <_malloc_r+0x20>
 8007ce6:	684b      	ldr	r3, [r1, #4]
 8007ce8:	428c      	cmp	r4, r1
 8007cea:	bf16      	itet	ne
 8007cec:	6063      	strne	r3, [r4, #4]
 8007cee:	6013      	streq	r3, [r2, #0]
 8007cf0:	460c      	movne	r4, r1
 8007cf2:	e7eb      	b.n	8007ccc <_malloc_r+0x64>
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	6849      	ldr	r1, [r1, #4]
 8007cf8:	e7cc      	b.n	8007c94 <_malloc_r+0x2c>
 8007cfa:	1cc4      	adds	r4, r0, #3
 8007cfc:	f024 0403 	bic.w	r4, r4, #3
 8007d00:	42a0      	cmp	r0, r4
 8007d02:	d005      	beq.n	8007d10 <_malloc_r+0xa8>
 8007d04:	1a21      	subs	r1, r4, r0
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 f82e 	bl	8007d68 <_sbrk_r>
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d0cf      	beq.n	8007cb0 <_malloc_r+0x48>
 8007d10:	6025      	str	r5, [r4, #0]
 8007d12:	e7db      	b.n	8007ccc <_malloc_r+0x64>
 8007d14:	200002f8 	.word	0x200002f8
 8007d18:	200002fc 	.word	0x200002fc

08007d1c <_realloc_r>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	4607      	mov	r7, r0
 8007d20:	4614      	mov	r4, r2
 8007d22:	460e      	mov	r6, r1
 8007d24:	b921      	cbnz	r1, 8007d30 <_realloc_r+0x14>
 8007d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	f7ff bf9c 	b.w	8007c68 <_malloc_r>
 8007d30:	b922      	cbnz	r2, 8007d3c <_realloc_r+0x20>
 8007d32:	f7ff ff4d 	bl	8007bd0 <_free_r>
 8007d36:	4625      	mov	r5, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	f000 f826 	bl	8007d8c <_malloc_usable_size_r>
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d20f      	bcs.n	8007d64 <_realloc_r+0x48>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4638      	mov	r0, r7
 8007d48:	f7ff ff8e 	bl	8007c68 <_malloc_r>
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d0f2      	beq.n	8007d38 <_realloc_r+0x1c>
 8007d52:	4631      	mov	r1, r6
 8007d54:	4622      	mov	r2, r4
 8007d56:	f7ff fc05 	bl	8007564 <memcpy>
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	f7ff ff37 	bl	8007bd0 <_free_r>
 8007d62:	e7e9      	b.n	8007d38 <_realloc_r+0x1c>
 8007d64:	4635      	mov	r5, r6
 8007d66:	e7e7      	b.n	8007d38 <_realloc_r+0x1c>

08007d68 <_sbrk_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4c05      	ldr	r4, [pc, #20]	; (8007d84 <_sbrk_r+0x1c>)
 8007d6e:	4605      	mov	r5, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	f7fe ff6c 	bl	8006c50 <_sbrk>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_sbrk_r+0x1a>
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_sbrk_r+0x1a>
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	20000bc4 	.word	0x20000bc4

08007d88 <__malloc_lock>:
 8007d88:	4770      	bx	lr

08007d8a <__malloc_unlock>:
 8007d8a:	4770      	bx	lr

08007d8c <_malloc_usable_size_r>:
 8007d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d90:	1f18      	subs	r0, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfbc      	itt	lt
 8007d96:	580b      	ldrlt	r3, [r1, r0]
 8007d98:	18c0      	addlt	r0, r0, r3
 8007d9a:	4770      	bx	lr

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr
